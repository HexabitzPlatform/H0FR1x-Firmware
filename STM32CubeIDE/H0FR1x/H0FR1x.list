
H0FR1x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191f4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003578  080192b0  080192b0  000292b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c828  0801c828  00030a84  2**0
                  CONTENTS
  4 .ARM          00000008  0801c828  0801c828  0002c828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c830  0801c830  00030a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c830  0801c830  0002c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c838  0801c838  0002c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    00000008  20000000  0801c83c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a7c  20000008  0801c844  00030008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006358  20000a88  0801d2c0  00030a88  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006de0  0801d2c0  00036de0  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030a84  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038a03  00000000  00000000  00030aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008327  00000000  00000000  000694af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00021c55  00000000  00000000  000717d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a70  00000000  00000000  00093430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003920  00000000  00000000  00094ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a8f1  00000000  00000000  000987c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a44f  00000000  00000000  000c30b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cd500  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d3c  00000000  00000000  000cd550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  000d428c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  000d4358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a88 	.word	0x20000a88
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019298 	.word	0x08019298

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a8c 	.word	0x20000a8c
 8000100:	08019298 	.word	0x08019298

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fccf 	bl	8001df0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc1f 	bl	8001ca0 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fcc1 	bl	8001df0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcb7 	bl	8001df0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc47 	bl	8001d24 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc3d 	bl	8001d24 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fa41 	bl	8000948 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f9cd 	bl	8000870 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa33 	bl	8000948 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa29 	bl	8000948 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9d9 	bl	80008bc <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f9cf 	bl	80008bc <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8bc 	bl	80006d8 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	b580      	push	{r7, lr}
 8000574:	0007      	movs	r7, r0
 8000576:	4699      	mov	r9, r3
 8000578:	0c3b      	lsrs	r3, r7, #16
 800057a:	469c      	mov	ip, r3
 800057c:	0413      	lsls	r3, r2, #16
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0400      	lsls	r0, r0, #16
 8000588:	0c14      	lsrs	r4, r2, #16
 800058a:	0c00      	lsrs	r0, r0, #16
 800058c:	4345      	muls	r5, r0
 800058e:	434b      	muls	r3, r1
 8000590:	4360      	muls	r0, r4
 8000592:	4361      	muls	r1, r4
 8000594:	18c0      	adds	r0, r0, r3
 8000596:	0c2c      	lsrs	r4, r5, #16
 8000598:	1820      	adds	r0, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	4283      	cmp	r3, r0
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4372      	muls	r2, r6
 80005ae:	0c03      	lsrs	r3, r0, #16
 80005b0:	4463      	add	r3, ip
 80005b2:	042d      	lsls	r5, r5, #16
 80005b4:	0c2d      	lsrs	r5, r5, #16
 80005b6:	18c9      	adds	r1, r1, r3
 80005b8:	0400      	lsls	r0, r0, #16
 80005ba:	1940      	adds	r0, r0, r5
 80005bc:	1889      	adds	r1, r1, r2
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	; 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 fccd 	bl	8000f78 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fb19 	bl	8000c1c <__aeabi_fsub>
 80005ea:	f000 fcc5 	bl	8000f78 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fa6f 	bl	8002af0 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f001 feb8 	bl	8002390 <__aeabi_dsub>
 8000620:	f002 fa66 	bl	8002af0 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	0005      	movs	r5, r0
 8000638:	000c      	movs	r4, r1
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0028      	movs	r0, r5
 8000640:	0021      	movs	r1, r4
 8000642:	f7ff ff11 	bl	8000468 <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x28>
 800064a:	0028      	movs	r0, r5
 800064c:	0021      	movs	r1, r4
 800064e:	f000 f80f 	bl	8000670 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e1      	adds	r1, r4, r3
 8000662:	0028      	movs	r0, r5
 8000664:	f000 f804 	bl	8000670 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x22>

08000670 <__aeabi_d2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	2200      	movs	r2, #0
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <__aeabi_d2ulz+0x34>)
 8000676:	000d      	movs	r5, r1
 8000678:	0004      	movs	r4, r0
 800067a:	f001 fc1d 	bl	8001eb8 <__aeabi_dmul>
 800067e:	f7ff ffbb 	bl	80005f8 <__aeabi_d2uiz>
 8000682:	0006      	movs	r6, r0
 8000684:	f002 fa9a 	bl	8002bbc <__aeabi_ui2d>
 8000688:	2200      	movs	r2, #0
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <__aeabi_d2ulz+0x38>)
 800068c:	f001 fc14 	bl	8001eb8 <__aeabi_dmul>
 8000690:	0002      	movs	r2, r0
 8000692:	000b      	movs	r3, r1
 8000694:	0020      	movs	r0, r4
 8000696:	0029      	movs	r1, r5
 8000698:	f001 fe7a 	bl	8002390 <__aeabi_dsub>
 800069c:	f7ff ffac 	bl	80005f8 <__aeabi_d2uiz>
 80006a0:	0031      	movs	r1, r6
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	3df00000 	.word	0x3df00000
 80006a8:	41f00000 	.word	0x41f00000

080006ac <__aeabi_l2d>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	0006      	movs	r6, r0
 80006b0:	0008      	movs	r0, r1
 80006b2:	f002 fa53 	bl	8002b5c <__aeabi_i2d>
 80006b6:	2200      	movs	r2, #0
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <__aeabi_l2d+0x28>)
 80006ba:	f001 fbfd 	bl	8001eb8 <__aeabi_dmul>
 80006be:	000d      	movs	r5, r1
 80006c0:	0004      	movs	r4, r0
 80006c2:	0030      	movs	r0, r6
 80006c4:	f002 fa7a 	bl	8002bbc <__aeabi_ui2d>
 80006c8:	002b      	movs	r3, r5
 80006ca:	0022      	movs	r2, r4
 80006cc:	f000 fcb6 	bl	800103c <__aeabi_dadd>
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	41f00000 	.word	0x41f00000

080006d8 <__udivmoddi4>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	4657      	mov	r7, sl
 80006dc:	464e      	mov	r6, r9
 80006de:	4645      	mov	r5, r8
 80006e0:	46de      	mov	lr, fp
 80006e2:	b5e0      	push	{r5, r6, r7, lr}
 80006e4:	0004      	movs	r4, r0
 80006e6:	000d      	movs	r5, r1
 80006e8:	4692      	mov	sl, r2
 80006ea:	4699      	mov	r9, r3
 80006ec:	b083      	sub	sp, #12
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d830      	bhi.n	8000754 <__udivmoddi4+0x7c>
 80006f2:	d02d      	beq.n	8000750 <__udivmoddi4+0x78>
 80006f4:	4649      	mov	r1, r9
 80006f6:	4650      	mov	r0, sl
 80006f8:	f002 fb74 	bl	8002de4 <__clzdi2>
 80006fc:	0029      	movs	r1, r5
 80006fe:	0006      	movs	r6, r0
 8000700:	0020      	movs	r0, r4
 8000702:	f002 fb6f 	bl	8002de4 <__clzdi2>
 8000706:	1a33      	subs	r3, r6, r0
 8000708:	4698      	mov	r8, r3
 800070a:	3b20      	subs	r3, #32
 800070c:	469b      	mov	fp, r3
 800070e:	d433      	bmi.n	8000778 <__udivmoddi4+0xa0>
 8000710:	465a      	mov	r2, fp
 8000712:	4653      	mov	r3, sl
 8000714:	4093      	lsls	r3, r2
 8000716:	4642      	mov	r2, r8
 8000718:	001f      	movs	r7, r3
 800071a:	4653      	mov	r3, sl
 800071c:	4093      	lsls	r3, r2
 800071e:	001e      	movs	r6, r3
 8000720:	42af      	cmp	r7, r5
 8000722:	d83a      	bhi.n	800079a <__udivmoddi4+0xc2>
 8000724:	42af      	cmp	r7, r5
 8000726:	d100      	bne.n	800072a <__udivmoddi4+0x52>
 8000728:	e078      	b.n	800081c <__udivmoddi4+0x144>
 800072a:	465b      	mov	r3, fp
 800072c:	1ba4      	subs	r4, r4, r6
 800072e:	41bd      	sbcs	r5, r7
 8000730:	2b00      	cmp	r3, #0
 8000732:	da00      	bge.n	8000736 <__udivmoddi4+0x5e>
 8000734:	e075      	b.n	8000822 <__udivmoddi4+0x14a>
 8000736:	2200      	movs	r2, #0
 8000738:	2300      	movs	r3, #0
 800073a:	9200      	str	r2, [sp, #0]
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2301      	movs	r3, #1
 8000740:	465a      	mov	r2, fp
 8000742:	4093      	lsls	r3, r2
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2301      	movs	r3, #1
 8000748:	4642      	mov	r2, r8
 800074a:	4093      	lsls	r3, r2
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	e028      	b.n	80007a2 <__udivmoddi4+0xca>
 8000750:	4282      	cmp	r2, r0
 8000752:	d9cf      	bls.n	80006f4 <__udivmoddi4+0x1c>
 8000754:	2200      	movs	r2, #0
 8000756:	2300      	movs	r3, #0
 8000758:	9200      	str	r2, [sp, #0]
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <__udivmoddi4+0x8e>
 8000762:	601c      	str	r4, [r3, #0]
 8000764:	605d      	str	r5, [r3, #4]
 8000766:	9800      	ldr	r0, [sp, #0]
 8000768:	9901      	ldr	r1, [sp, #4]
 800076a:	b003      	add	sp, #12
 800076c:	bcf0      	pop	{r4, r5, r6, r7}
 800076e:	46bb      	mov	fp, r7
 8000770:	46b2      	mov	sl, r6
 8000772:	46a9      	mov	r9, r5
 8000774:	46a0      	mov	r8, r4
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000778:	4642      	mov	r2, r8
 800077a:	2320      	movs	r3, #32
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	4652      	mov	r2, sl
 8000780:	40da      	lsrs	r2, r3
 8000782:	4641      	mov	r1, r8
 8000784:	0013      	movs	r3, r2
 8000786:	464a      	mov	r2, r9
 8000788:	408a      	lsls	r2, r1
 800078a:	0017      	movs	r7, r2
 800078c:	4642      	mov	r2, r8
 800078e:	431f      	orrs	r7, r3
 8000790:	4653      	mov	r3, sl
 8000792:	4093      	lsls	r3, r2
 8000794:	001e      	movs	r6, r3
 8000796:	42af      	cmp	r7, r5
 8000798:	d9c4      	bls.n	8000724 <__udivmoddi4+0x4c>
 800079a:	2200      	movs	r2, #0
 800079c:	2300      	movs	r3, #0
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	4643      	mov	r3, r8
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0d9      	beq.n	800075c <__udivmoddi4+0x84>
 80007a8:	07fb      	lsls	r3, r7, #31
 80007aa:	0872      	lsrs	r2, r6, #1
 80007ac:	431a      	orrs	r2, r3
 80007ae:	4646      	mov	r6, r8
 80007b0:	087b      	lsrs	r3, r7, #1
 80007b2:	e00e      	b.n	80007d2 <__udivmoddi4+0xfa>
 80007b4:	42ab      	cmp	r3, r5
 80007b6:	d101      	bne.n	80007bc <__udivmoddi4+0xe4>
 80007b8:	42a2      	cmp	r2, r4
 80007ba:	d80c      	bhi.n	80007d6 <__udivmoddi4+0xfe>
 80007bc:	1aa4      	subs	r4, r4, r2
 80007be:	419d      	sbcs	r5, r3
 80007c0:	2001      	movs	r0, #1
 80007c2:	1924      	adds	r4, r4, r4
 80007c4:	416d      	adcs	r5, r5
 80007c6:	2100      	movs	r1, #0
 80007c8:	3e01      	subs	r6, #1
 80007ca:	1824      	adds	r4, r4, r0
 80007cc:	414d      	adcs	r5, r1
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d006      	beq.n	80007e0 <__udivmoddi4+0x108>
 80007d2:	42ab      	cmp	r3, r5
 80007d4:	d9ee      	bls.n	80007b4 <__udivmoddi4+0xdc>
 80007d6:	3e01      	subs	r6, #1
 80007d8:	1924      	adds	r4, r4, r4
 80007da:	416d      	adcs	r5, r5
 80007dc:	2e00      	cmp	r6, #0
 80007de:	d1f8      	bne.n	80007d2 <__udivmoddi4+0xfa>
 80007e0:	9800      	ldr	r0, [sp, #0]
 80007e2:	9901      	ldr	r1, [sp, #4]
 80007e4:	465b      	mov	r3, fp
 80007e6:	1900      	adds	r0, r0, r4
 80007e8:	4169      	adcs	r1, r5
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	db24      	blt.n	8000838 <__udivmoddi4+0x160>
 80007ee:	002b      	movs	r3, r5
 80007f0:	465a      	mov	r2, fp
 80007f2:	4644      	mov	r4, r8
 80007f4:	40d3      	lsrs	r3, r2
 80007f6:	002a      	movs	r2, r5
 80007f8:	40e2      	lsrs	r2, r4
 80007fa:	001c      	movs	r4, r3
 80007fc:	465b      	mov	r3, fp
 80007fe:	0015      	movs	r5, r2
 8000800:	2b00      	cmp	r3, #0
 8000802:	db2a      	blt.n	800085a <__udivmoddi4+0x182>
 8000804:	0026      	movs	r6, r4
 8000806:	409e      	lsls	r6, r3
 8000808:	0033      	movs	r3, r6
 800080a:	0026      	movs	r6, r4
 800080c:	4647      	mov	r7, r8
 800080e:	40be      	lsls	r6, r7
 8000810:	0032      	movs	r2, r6
 8000812:	1a80      	subs	r0, r0, r2
 8000814:	4199      	sbcs	r1, r3
 8000816:	9000      	str	r0, [sp, #0]
 8000818:	9101      	str	r1, [sp, #4]
 800081a:	e79f      	b.n	800075c <__udivmoddi4+0x84>
 800081c:	42a3      	cmp	r3, r4
 800081e:	d8bc      	bhi.n	800079a <__udivmoddi4+0xc2>
 8000820:	e783      	b.n	800072a <__udivmoddi4+0x52>
 8000822:	4642      	mov	r2, r8
 8000824:	2320      	movs	r3, #32
 8000826:	2100      	movs	r1, #0
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	2200      	movs	r2, #0
 800082c:	9100      	str	r1, [sp, #0]
 800082e:	9201      	str	r2, [sp, #4]
 8000830:	2201      	movs	r2, #1
 8000832:	40da      	lsrs	r2, r3
 8000834:	9201      	str	r2, [sp, #4]
 8000836:	e786      	b.n	8000746 <__udivmoddi4+0x6e>
 8000838:	4642      	mov	r2, r8
 800083a:	2320      	movs	r3, #32
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	002a      	movs	r2, r5
 8000840:	4646      	mov	r6, r8
 8000842:	409a      	lsls	r2, r3
 8000844:	0023      	movs	r3, r4
 8000846:	40f3      	lsrs	r3, r6
 8000848:	4644      	mov	r4, r8
 800084a:	4313      	orrs	r3, r2
 800084c:	002a      	movs	r2, r5
 800084e:	40e2      	lsrs	r2, r4
 8000850:	001c      	movs	r4, r3
 8000852:	465b      	mov	r3, fp
 8000854:	0015      	movs	r5, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	dad4      	bge.n	8000804 <__udivmoddi4+0x12c>
 800085a:	4642      	mov	r2, r8
 800085c:	002f      	movs	r7, r5
 800085e:	2320      	movs	r3, #32
 8000860:	0026      	movs	r6, r4
 8000862:	4097      	lsls	r7, r2
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	40de      	lsrs	r6, r3
 8000868:	003b      	movs	r3, r7
 800086a:	4333      	orrs	r3, r6
 800086c:	e7cd      	b.n	800080a <__udivmoddi4+0x132>
 800086e:	46c0      	nop			; (mov r8, r8)

08000870 <__eqsf2>:
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	0042      	lsls	r2, r0, #1
 8000874:	0245      	lsls	r5, r0, #9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	004c      	lsls	r4, r1, #1
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	2001      	movs	r0, #1
 8000880:	0e12      	lsrs	r2, r2, #24
 8000882:	0a76      	lsrs	r6, r6, #9
 8000884:	0e24      	lsrs	r4, r4, #24
 8000886:	0fc9      	lsrs	r1, r1, #31
 8000888:	2aff      	cmp	r2, #255	; 0xff
 800088a:	d006      	beq.n	800089a <__eqsf2+0x2a>
 800088c:	2cff      	cmp	r4, #255	; 0xff
 800088e:	d003      	beq.n	8000898 <__eqsf2+0x28>
 8000890:	42a2      	cmp	r2, r4
 8000892:	d101      	bne.n	8000898 <__eqsf2+0x28>
 8000894:	42b5      	cmp	r5, r6
 8000896:	d006      	beq.n	80008a6 <__eqsf2+0x36>
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	2d00      	cmp	r5, #0
 800089c:	d1fc      	bne.n	8000898 <__eqsf2+0x28>
 800089e:	2cff      	cmp	r4, #255	; 0xff
 80008a0:	d1fa      	bne.n	8000898 <__eqsf2+0x28>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d1f8      	bne.n	8000898 <__eqsf2+0x28>
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d006      	beq.n	80008b8 <__eqsf2+0x48>
 80008aa:	2001      	movs	r0, #1
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	d1f3      	bne.n	8000898 <__eqsf2+0x28>
 80008b0:	0028      	movs	r0, r5
 80008b2:	1e43      	subs	r3, r0, #1
 80008b4:	4198      	sbcs	r0, r3
 80008b6:	e7ef      	b.n	8000898 <__eqsf2+0x28>
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7ed      	b.n	8000898 <__eqsf2+0x28>

080008bc <__gesf2>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	0042      	lsls	r2, r0, #1
 80008c0:	0245      	lsls	r5, r0, #9
 80008c2:	024e      	lsls	r6, r1, #9
 80008c4:	004c      	lsls	r4, r1, #1
 80008c6:	0fc3      	lsrs	r3, r0, #31
 80008c8:	0a6d      	lsrs	r5, r5, #9
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	0a76      	lsrs	r6, r6, #9
 80008ce:	0e24      	lsrs	r4, r4, #24
 80008d0:	0fc8      	lsrs	r0, r1, #31
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d01b      	beq.n	800090e <__gesf2+0x52>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d00e      	beq.n	80008f8 <__gesf2+0x3c>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d11b      	bne.n	8000916 <__gesf2+0x5a>
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d101      	bne.n	80008e6 <__gesf2+0x2a>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d01c      	beq.n	8000920 <__gesf2+0x64>
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	d00c      	beq.n	8000904 <__gesf2+0x48>
 80008ea:	4283      	cmp	r3, r0
 80008ec:	d01c      	beq.n	8000928 <__gesf2+0x6c>
 80008ee:	2102      	movs	r1, #2
 80008f0:	1e58      	subs	r0, r3, #1
 80008f2:	4008      	ands	r0, r1
 80008f4:	3801      	subs	r0, #1
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d122      	bne.n	8000942 <__gesf2+0x86>
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	d1f4      	bne.n	80008ea <__gesf2+0x2e>
 8000900:	2d00      	cmp	r5, #0
 8000902:	d1f2      	bne.n	80008ea <__gesf2+0x2e>
 8000904:	2800      	cmp	r0, #0
 8000906:	d1f6      	bne.n	80008f6 <__gesf2+0x3a>
 8000908:	2001      	movs	r0, #1
 800090a:	4240      	negs	r0, r0
 800090c:	e7f3      	b.n	80008f6 <__gesf2+0x3a>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d117      	bne.n	8000942 <__gesf2+0x86>
 8000912:	2cff      	cmp	r4, #255	; 0xff
 8000914:	d0f0      	beq.n	80008f8 <__gesf2+0x3c>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d1e7      	bne.n	80008ea <__gesf2+0x2e>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d1e5      	bne.n	80008ea <__gesf2+0x2e>
 800091e:	e7e6      	b.n	80008ee <__gesf2+0x32>
 8000920:	2000      	movs	r0, #0
 8000922:	2d00      	cmp	r5, #0
 8000924:	d0e7      	beq.n	80008f6 <__gesf2+0x3a>
 8000926:	e7e2      	b.n	80008ee <__gesf2+0x32>
 8000928:	42a2      	cmp	r2, r4
 800092a:	dc05      	bgt.n	8000938 <__gesf2+0x7c>
 800092c:	dbea      	blt.n	8000904 <__gesf2+0x48>
 800092e:	42b5      	cmp	r5, r6
 8000930:	d802      	bhi.n	8000938 <__gesf2+0x7c>
 8000932:	d3e7      	bcc.n	8000904 <__gesf2+0x48>
 8000934:	2000      	movs	r0, #0
 8000936:	e7de      	b.n	80008f6 <__gesf2+0x3a>
 8000938:	4243      	negs	r3, r0
 800093a:	4158      	adcs	r0, r3
 800093c:	0040      	lsls	r0, r0, #1
 800093e:	3801      	subs	r0, #1
 8000940:	e7d9      	b.n	80008f6 <__gesf2+0x3a>
 8000942:	2002      	movs	r0, #2
 8000944:	4240      	negs	r0, r0
 8000946:	e7d6      	b.n	80008f6 <__gesf2+0x3a>

08000948 <__lesf2>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	0042      	lsls	r2, r0, #1
 800094c:	0245      	lsls	r5, r0, #9
 800094e:	024e      	lsls	r6, r1, #9
 8000950:	004c      	lsls	r4, r1, #1
 8000952:	0fc3      	lsrs	r3, r0, #31
 8000954:	0a6d      	lsrs	r5, r5, #9
 8000956:	0e12      	lsrs	r2, r2, #24
 8000958:	0a76      	lsrs	r6, r6, #9
 800095a:	0e24      	lsrs	r4, r4, #24
 800095c:	0fc8      	lsrs	r0, r1, #31
 800095e:	2aff      	cmp	r2, #255	; 0xff
 8000960:	d00b      	beq.n	800097a <__lesf2+0x32>
 8000962:	2cff      	cmp	r4, #255	; 0xff
 8000964:	d00d      	beq.n	8000982 <__lesf2+0x3a>
 8000966:	2a00      	cmp	r2, #0
 8000968:	d11f      	bne.n	80009aa <__lesf2+0x62>
 800096a:	2c00      	cmp	r4, #0
 800096c:	d116      	bne.n	800099c <__lesf2+0x54>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d114      	bne.n	800099c <__lesf2+0x54>
 8000972:	2000      	movs	r0, #0
 8000974:	2d00      	cmp	r5, #0
 8000976:	d010      	beq.n	800099a <__lesf2+0x52>
 8000978:	e009      	b.n	800098e <__lesf2+0x46>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d10c      	bne.n	8000998 <__lesf2+0x50>
 800097e:	2cff      	cmp	r4, #255	; 0xff
 8000980:	d113      	bne.n	80009aa <__lesf2+0x62>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d108      	bne.n	8000998 <__lesf2+0x50>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d008      	beq.n	800099c <__lesf2+0x54>
 800098a:	4283      	cmp	r3, r0
 800098c:	d012      	beq.n	80009b4 <__lesf2+0x6c>
 800098e:	2102      	movs	r1, #2
 8000990:	1e58      	subs	r0, r3, #1
 8000992:	4008      	ands	r0, r1
 8000994:	3801      	subs	r0, #1
 8000996:	e000      	b.n	800099a <__lesf2+0x52>
 8000998:	2002      	movs	r0, #2
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	2d00      	cmp	r5, #0
 800099e:	d1f4      	bne.n	800098a <__lesf2+0x42>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1fa      	bne.n	800099a <__lesf2+0x52>
 80009a4:	2001      	movs	r0, #1
 80009a6:	4240      	negs	r0, r0
 80009a8:	e7f7      	b.n	800099a <__lesf2+0x52>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	d1ed      	bne.n	800098a <__lesf2+0x42>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d1eb      	bne.n	800098a <__lesf2+0x42>
 80009b2:	e7ec      	b.n	800098e <__lesf2+0x46>
 80009b4:	42a2      	cmp	r2, r4
 80009b6:	dc05      	bgt.n	80009c4 <__lesf2+0x7c>
 80009b8:	dbf2      	blt.n	80009a0 <__lesf2+0x58>
 80009ba:	42b5      	cmp	r5, r6
 80009bc:	d802      	bhi.n	80009c4 <__lesf2+0x7c>
 80009be:	d3ef      	bcc.n	80009a0 <__lesf2+0x58>
 80009c0:	2000      	movs	r0, #0
 80009c2:	e7ea      	b.n	800099a <__lesf2+0x52>
 80009c4:	4243      	negs	r3, r0
 80009c6:	4158      	adcs	r0, r3
 80009c8:	0040      	lsls	r0, r0, #1
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7e5      	b.n	800099a <__lesf2+0x52>
 80009ce:	46c0      	nop			; (mov r8, r8)

080009d0 <__aeabi_fmul>:
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	464f      	mov	r7, r9
 80009d4:	4646      	mov	r6, r8
 80009d6:	46d6      	mov	lr, sl
 80009d8:	0244      	lsls	r4, r0, #9
 80009da:	0045      	lsls	r5, r0, #1
 80009dc:	b5c0      	push	{r6, r7, lr}
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	1c0f      	adds	r7, r1, #0
 80009e2:	0e2d      	lsrs	r5, r5, #24
 80009e4:	0fc6      	lsrs	r6, r0, #31
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fmul+0x1c>
 80009ea:	e08d      	b.n	8000b08 <__aeabi_fmul+0x138>
 80009ec:	2dff      	cmp	r5, #255	; 0xff
 80009ee:	d100      	bne.n	80009f2 <__aeabi_fmul+0x22>
 80009f0:	e092      	b.n	8000b18 <__aeabi_fmul+0x148>
 80009f2:	2300      	movs	r3, #0
 80009f4:	2080      	movs	r0, #128	; 0x80
 80009f6:	4699      	mov	r9, r3
 80009f8:	469a      	mov	sl, r3
 80009fa:	00e4      	lsls	r4, r4, #3
 80009fc:	04c0      	lsls	r0, r0, #19
 80009fe:	4304      	orrs	r4, r0
 8000a00:	3d7f      	subs	r5, #127	; 0x7f
 8000a02:	0278      	lsls	r0, r7, #9
 8000a04:	0a43      	lsrs	r3, r0, #9
 8000a06:	4698      	mov	r8, r3
 8000a08:	007b      	lsls	r3, r7, #1
 8000a0a:	0e1b      	lsrs	r3, r3, #24
 8000a0c:	0fff      	lsrs	r7, r7, #31
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d100      	bne.n	8000a14 <__aeabi_fmul+0x44>
 8000a12:	e070      	b.n	8000af6 <__aeabi_fmul+0x126>
 8000a14:	2bff      	cmp	r3, #255	; 0xff
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fmul+0x4a>
 8000a18:	e086      	b.n	8000b28 <__aeabi_fmul+0x158>
 8000a1a:	4642      	mov	r2, r8
 8000a1c:	00d0      	lsls	r0, r2, #3
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	3b7f      	subs	r3, #127	; 0x7f
 8000a22:	18ed      	adds	r5, r5, r3
 8000a24:	2300      	movs	r3, #0
 8000a26:	04d2      	lsls	r2, r2, #19
 8000a28:	4302      	orrs	r2, r0
 8000a2a:	4690      	mov	r8, r2
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	0031      	movs	r1, r6
 8000a30:	464b      	mov	r3, r9
 8000a32:	4079      	eors	r1, r7
 8000a34:	1c68      	adds	r0, r5, #1
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d81c      	bhi.n	8000a74 <__aeabi_fmul+0xa4>
 8000a3a:	4a76      	ldr	r2, [pc, #472]	; (8000c14 <__aeabi_fmul+0x244>)
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	58d3      	ldr	r3, [r2, r3]
 8000a40:	469f      	mov	pc, r3
 8000a42:	0039      	movs	r1, r7
 8000a44:	4644      	mov	r4, r8
 8000a46:	46e2      	mov	sl, ip
 8000a48:	4653      	mov	r3, sl
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d00f      	beq.n	8000a6e <__aeabi_fmul+0x9e>
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fmul+0x84>
 8000a52:	e0d7      	b.n	8000c04 <__aeabi_fmul+0x234>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d137      	bne.n	8000ac8 <__aeabi_fmul+0xf8>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	2400      	movs	r4, #0
 8000a5c:	05c0      	lsls	r0, r0, #23
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	07c9      	lsls	r1, r1, #31
 8000a62:	4308      	orrs	r0, r1
 8000a64:	bce0      	pop	{r5, r6, r7}
 8000a66:	46ba      	mov	sl, r7
 8000a68:	46b1      	mov	r9, r6
 8000a6a:	46a8      	mov	r8, r5
 8000a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6e:	20ff      	movs	r0, #255	; 0xff
 8000a70:	2400      	movs	r4, #0
 8000a72:	e7f3      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000a74:	0c26      	lsrs	r6, r4, #16
 8000a76:	0424      	lsls	r4, r4, #16
 8000a78:	0c22      	lsrs	r2, r4, #16
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	0424      	lsls	r4, r4, #16
 8000a7e:	0c24      	lsrs	r4, r4, #16
 8000a80:	4643      	mov	r3, r8
 8000a82:	0027      	movs	r7, r4
 8000a84:	0c1b      	lsrs	r3, r3, #16
 8000a86:	4357      	muls	r7, r2
 8000a88:	4374      	muls	r4, r6
 8000a8a:	435a      	muls	r2, r3
 8000a8c:	435e      	muls	r6, r3
 8000a8e:	1912      	adds	r2, r2, r4
 8000a90:	0c3b      	lsrs	r3, r7, #16
 8000a92:	189b      	adds	r3, r3, r2
 8000a94:	429c      	cmp	r4, r3
 8000a96:	d903      	bls.n	8000aa0 <__aeabi_fmul+0xd0>
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0252      	lsls	r2, r2, #9
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	4466      	add	r6, ip
 8000aa0:	043f      	lsls	r7, r7, #16
 8000aa2:	041a      	lsls	r2, r3, #16
 8000aa4:	0c3f      	lsrs	r7, r7, #16
 8000aa6:	19d2      	adds	r2, r2, r7
 8000aa8:	0194      	lsls	r4, r2, #6
 8000aaa:	1e67      	subs	r7, r4, #1
 8000aac:	41bc      	sbcs	r4, r7
 8000aae:	0c1b      	lsrs	r3, r3, #16
 8000ab0:	0e92      	lsrs	r2, r2, #26
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	4314      	orrs	r4, r2
 8000ab6:	019b      	lsls	r3, r3, #6
 8000ab8:	431c      	orrs	r4, r3
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	d400      	bmi.n	8000ac0 <__aeabi_fmul+0xf0>
 8000abe:	e09b      	b.n	8000bf8 <__aeabi_fmul+0x228>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	0862      	lsrs	r2, r4, #1
 8000ac4:	401c      	ands	r4, r3
 8000ac6:	4314      	orrs	r4, r2
 8000ac8:	0002      	movs	r2, r0
 8000aca:	327f      	adds	r2, #127	; 0x7f
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	dd64      	ble.n	8000b9a <__aeabi_fmul+0x1ca>
 8000ad0:	0763      	lsls	r3, r4, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fmul+0x10e>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4023      	ands	r3, r4
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fmul+0x10e>
 8000adc:	3404      	adds	r4, #4
 8000ade:	0123      	lsls	r3, r4, #4
 8000ae0:	d503      	bpl.n	8000aea <__aeabi_fmul+0x11a>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <__aeabi_fmul+0x248>)
 8000ae6:	3280      	adds	r2, #128	; 0x80
 8000ae8:	401c      	ands	r4, r3
 8000aea:	2afe      	cmp	r2, #254	; 0xfe
 8000aec:	dcbf      	bgt.n	8000a6e <__aeabi_fmul+0x9e>
 8000aee:	01a4      	lsls	r4, r4, #6
 8000af0:	0a64      	lsrs	r4, r4, #9
 8000af2:	b2d0      	uxtb	r0, r2
 8000af4:	e7b2      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000af6:	4643      	mov	r3, r8
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d13d      	bne.n	8000b78 <__aeabi_fmul+0x1a8>
 8000afc:	464a      	mov	r2, r9
 8000afe:	3301      	adds	r3, #1
 8000b00:	431a      	orrs	r2, r3
 8000b02:	4691      	mov	r9, r2
 8000b04:	469c      	mov	ip, r3
 8000b06:	e792      	b.n	8000a2e <__aeabi_fmul+0x5e>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d129      	bne.n	8000b60 <__aeabi_fmul+0x190>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b03      	subs	r3, #3
 8000b12:	2500      	movs	r5, #0
 8000b14:	469a      	mov	sl, r3
 8000b16:	e774      	b.n	8000a02 <__aeabi_fmul+0x32>
 8000b18:	2c00      	cmp	r4, #0
 8000b1a:	d11b      	bne.n	8000b54 <__aeabi_fmul+0x184>
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	4699      	mov	r9, r3
 8000b20:	3b06      	subs	r3, #6
 8000b22:	25ff      	movs	r5, #255	; 0xff
 8000b24:	469a      	mov	sl, r3
 8000b26:	e76c      	b.n	8000a02 <__aeabi_fmul+0x32>
 8000b28:	4643      	mov	r3, r8
 8000b2a:	35ff      	adds	r5, #255	; 0xff
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10b      	bne.n	8000b48 <__aeabi_fmul+0x178>
 8000b30:	2302      	movs	r3, #2
 8000b32:	464a      	mov	r2, r9
 8000b34:	431a      	orrs	r2, r3
 8000b36:	4691      	mov	r9, r2
 8000b38:	469c      	mov	ip, r3
 8000b3a:	e778      	b.n	8000a2e <__aeabi_fmul+0x5e>
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	0031      	movs	r1, r6
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fmul+0x176>
 8000b44:	e783      	b.n	8000a4e <__aeabi_fmul+0x7e>
 8000b46:	e792      	b.n	8000a6e <__aeabi_fmul+0x9e>
 8000b48:	2303      	movs	r3, #3
 8000b4a:	464a      	mov	r2, r9
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	4691      	mov	r9, r2
 8000b50:	469c      	mov	ip, r3
 8000b52:	e76c      	b.n	8000a2e <__aeabi_fmul+0x5e>
 8000b54:	230c      	movs	r3, #12
 8000b56:	4699      	mov	r9, r3
 8000b58:	3b09      	subs	r3, #9
 8000b5a:	25ff      	movs	r5, #255	; 0xff
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	e750      	b.n	8000a02 <__aeabi_fmul+0x32>
 8000b60:	0020      	movs	r0, r4
 8000b62:	f002 f921 	bl	8002da8 <__clzsi2>
 8000b66:	2576      	movs	r5, #118	; 0x76
 8000b68:	1f43      	subs	r3, r0, #5
 8000b6a:	409c      	lsls	r4, r3
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	426d      	negs	r5, r5
 8000b70:	4699      	mov	r9, r3
 8000b72:	469a      	mov	sl, r3
 8000b74:	1a2d      	subs	r5, r5, r0
 8000b76:	e744      	b.n	8000a02 <__aeabi_fmul+0x32>
 8000b78:	4640      	mov	r0, r8
 8000b7a:	f002 f915 	bl	8002da8 <__clzsi2>
 8000b7e:	4642      	mov	r2, r8
 8000b80:	1f43      	subs	r3, r0, #5
 8000b82:	409a      	lsls	r2, r3
 8000b84:	2300      	movs	r3, #0
 8000b86:	1a2d      	subs	r5, r5, r0
 8000b88:	4690      	mov	r8, r2
 8000b8a:	469c      	mov	ip, r3
 8000b8c:	3d76      	subs	r5, #118	; 0x76
 8000b8e:	e74e      	b.n	8000a2e <__aeabi_fmul+0x5e>
 8000b90:	2480      	movs	r4, #128	; 0x80
 8000b92:	2100      	movs	r1, #0
 8000b94:	20ff      	movs	r0, #255	; 0xff
 8000b96:	03e4      	lsls	r4, r4, #15
 8000b98:	e760      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	2b1b      	cmp	r3, #27
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_fmul+0x1d4>
 8000ba2:	e759      	b.n	8000a58 <__aeabi_fmul+0x88>
 8000ba4:	0022      	movs	r2, r4
 8000ba6:	309e      	adds	r0, #158	; 0x9e
 8000ba8:	40da      	lsrs	r2, r3
 8000baa:	4084      	lsls	r4, r0
 8000bac:	0013      	movs	r3, r2
 8000bae:	1e62      	subs	r2, r4, #1
 8000bb0:	4194      	sbcs	r4, r2
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	0763      	lsls	r3, r4, #29
 8000bb6:	d004      	beq.n	8000bc2 <__aeabi_fmul+0x1f2>
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4023      	ands	r3, r4
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fmul+0x1f2>
 8000bc0:	3404      	adds	r4, #4
 8000bc2:	0163      	lsls	r3, r4, #5
 8000bc4:	d51a      	bpl.n	8000bfc <__aeabi_fmul+0x22c>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e747      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000bcc:	2080      	movs	r0, #128	; 0x80
 8000bce:	03c0      	lsls	r0, r0, #15
 8000bd0:	4204      	tst	r4, r0
 8000bd2:	d009      	beq.n	8000be8 <__aeabi_fmul+0x218>
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	4203      	tst	r3, r0
 8000bd8:	d106      	bne.n	8000be8 <__aeabi_fmul+0x218>
 8000bda:	4644      	mov	r4, r8
 8000bdc:	4304      	orrs	r4, r0
 8000bde:	0264      	lsls	r4, r4, #9
 8000be0:	0039      	movs	r1, r7
 8000be2:	20ff      	movs	r0, #255	; 0xff
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	e739      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000be8:	2080      	movs	r0, #128	; 0x80
 8000bea:	03c0      	lsls	r0, r0, #15
 8000bec:	4304      	orrs	r4, r0
 8000bee:	0264      	lsls	r4, r4, #9
 8000bf0:	0031      	movs	r1, r6
 8000bf2:	20ff      	movs	r0, #255	; 0xff
 8000bf4:	0a64      	lsrs	r4, r4, #9
 8000bf6:	e731      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000bf8:	0028      	movs	r0, r5
 8000bfa:	e765      	b.n	8000ac8 <__aeabi_fmul+0xf8>
 8000bfc:	01a4      	lsls	r4, r4, #6
 8000bfe:	2000      	movs	r0, #0
 8000c00:	0a64      	lsrs	r4, r4, #9
 8000c02:	e72b      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	03c0      	lsls	r0, r0, #15
 8000c08:	4304      	orrs	r4, r0
 8000c0a:	0264      	lsls	r4, r4, #9
 8000c0c:	20ff      	movs	r0, #255	; 0xff
 8000c0e:	0a64      	lsrs	r4, r4, #9
 8000c10:	e724      	b.n	8000a5c <__aeabi_fmul+0x8c>
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	08019948 	.word	0x08019948
 8000c18:	f7ffffff 	.word	0xf7ffffff

08000c1c <__aeabi_fsub>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	46ce      	mov	lr, r9
 8000c20:	4647      	mov	r7, r8
 8000c22:	0243      	lsls	r3, r0, #9
 8000c24:	0a5b      	lsrs	r3, r3, #9
 8000c26:	024e      	lsls	r6, r1, #9
 8000c28:	00da      	lsls	r2, r3, #3
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	0a72      	lsrs	r2, r6, #9
 8000c2e:	4691      	mov	r9, r2
 8000c30:	0045      	lsls	r5, r0, #1
 8000c32:	004a      	lsls	r2, r1, #1
 8000c34:	b580      	push	{r7, lr}
 8000c36:	0e2d      	lsrs	r5, r5, #24
 8000c38:	001f      	movs	r7, r3
 8000c3a:	0fc4      	lsrs	r4, r0, #31
 8000c3c:	0e12      	lsrs	r2, r2, #24
 8000c3e:	0fc9      	lsrs	r1, r1, #31
 8000c40:	09b6      	lsrs	r6, r6, #6
 8000c42:	2aff      	cmp	r2, #255	; 0xff
 8000c44:	d05b      	beq.n	8000cfe <__aeabi_fsub+0xe2>
 8000c46:	2001      	movs	r0, #1
 8000c48:	4041      	eors	r1, r0
 8000c4a:	428c      	cmp	r4, r1
 8000c4c:	d039      	beq.n	8000cc2 <__aeabi_fsub+0xa6>
 8000c4e:	1aa8      	subs	r0, r5, r2
 8000c50:	2800      	cmp	r0, #0
 8000c52:	dd5a      	ble.n	8000d0a <__aeabi_fsub+0xee>
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d06a      	beq.n	8000d2e <__aeabi_fsub+0x112>
 8000c58:	2dff      	cmp	r5, #255	; 0xff
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_fsub+0x42>
 8000c5c:	e0d9      	b.n	8000e12 <__aeabi_fsub+0x1f6>
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	04d2      	lsls	r2, r2, #19
 8000c62:	4316      	orrs	r6, r2
 8000c64:	281b      	cmp	r0, #27
 8000c66:	dc00      	bgt.n	8000c6a <__aeabi_fsub+0x4e>
 8000c68:	e0e9      	b.n	8000e3e <__aeabi_fsub+0x222>
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	1a18      	subs	r0, r3, r0
 8000c70:	0143      	lsls	r3, r0, #5
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_fsub+0x5a>
 8000c74:	e0b4      	b.n	8000de0 <__aeabi_fsub+0x1c4>
 8000c76:	0180      	lsls	r0, r0, #6
 8000c78:	0987      	lsrs	r7, r0, #6
 8000c7a:	0038      	movs	r0, r7
 8000c7c:	f002 f894 	bl	8002da8 <__clzsi2>
 8000c80:	3805      	subs	r0, #5
 8000c82:	4087      	lsls	r7, r0
 8000c84:	4285      	cmp	r5, r0
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_fsub+0x6e>
 8000c88:	e0cc      	b.n	8000e24 <__aeabi_fsub+0x208>
 8000c8a:	1a2d      	subs	r5, r5, r0
 8000c8c:	48b5      	ldr	r0, [pc, #724]	; (8000f64 <__aeabi_fsub+0x348>)
 8000c8e:	4038      	ands	r0, r7
 8000c90:	0743      	lsls	r3, r0, #29
 8000c92:	d004      	beq.n	8000c9e <__aeabi_fsub+0x82>
 8000c94:	230f      	movs	r3, #15
 8000c96:	4003      	ands	r3, r0
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fsub+0x82>
 8000c9c:	3004      	adds	r0, #4
 8000c9e:	0143      	lsls	r3, r0, #5
 8000ca0:	d400      	bmi.n	8000ca4 <__aeabi_fsub+0x88>
 8000ca2:	e0a0      	b.n	8000de6 <__aeabi_fsub+0x1ca>
 8000ca4:	1c6a      	adds	r2, r5, #1
 8000ca6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x90>
 8000caa:	e08d      	b.n	8000dc8 <__aeabi_fsub+0x1ac>
 8000cac:	0180      	lsls	r0, r0, #6
 8000cae:	0a47      	lsrs	r7, r0, #9
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	05d0      	lsls	r0, r2, #23
 8000cb4:	4338      	orrs	r0, r7
 8000cb6:	07e4      	lsls	r4, r4, #31
 8000cb8:	4320      	orrs	r0, r4
 8000cba:	bcc0      	pop	{r6, r7}
 8000cbc:	46b9      	mov	r9, r7
 8000cbe:	46b0      	mov	r8, r6
 8000cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc2:	1aa8      	subs	r0, r5, r2
 8000cc4:	4680      	mov	r8, r0
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	dd45      	ble.n	8000d56 <__aeabi_fsub+0x13a>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d070      	beq.n	8000db0 <__aeabi_fsub+0x194>
 8000cce:	2dff      	cmp	r5, #255	; 0xff
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0xb8>
 8000cd2:	e09e      	b.n	8000e12 <__aeabi_fsub+0x1f6>
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	04db      	lsls	r3, r3, #19
 8000cd8:	431e      	orrs	r6, r3
 8000cda:	4643      	mov	r3, r8
 8000cdc:	2b1b      	cmp	r3, #27
 8000cde:	dc00      	bgt.n	8000ce2 <__aeabi_fsub+0xc6>
 8000ce0:	e0d2      	b.n	8000e88 <__aeabi_fsub+0x26c>
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4460      	add	r0, ip
 8000ce6:	0143      	lsls	r3, r0, #5
 8000ce8:	d57a      	bpl.n	8000de0 <__aeabi_fsub+0x1c4>
 8000cea:	3501      	adds	r5, #1
 8000cec:	2dff      	cmp	r5, #255	; 0xff
 8000cee:	d06b      	beq.n	8000dc8 <__aeabi_fsub+0x1ac>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	4a9d      	ldr	r2, [pc, #628]	; (8000f68 <__aeabi_fsub+0x34c>)
 8000cf4:	4003      	ands	r3, r0
 8000cf6:	0840      	lsrs	r0, r0, #1
 8000cf8:	4010      	ands	r0, r2
 8000cfa:	4318      	orrs	r0, r3
 8000cfc:	e7c8      	b.n	8000c90 <__aeabi_fsub+0x74>
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d020      	beq.n	8000d44 <__aeabi_fsub+0x128>
 8000d02:	428c      	cmp	r4, r1
 8000d04:	d023      	beq.n	8000d4e <__aeabi_fsub+0x132>
 8000d06:	0028      	movs	r0, r5
 8000d08:	38ff      	subs	r0, #255	; 0xff
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d039      	beq.n	8000d82 <__aeabi_fsub+0x166>
 8000d0e:	1b57      	subs	r7, r2, r5
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_fsub+0xfa>
 8000d14:	e09d      	b.n	8000e52 <__aeabi_fsub+0x236>
 8000d16:	4663      	mov	r3, ip
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_fsub+0x102>
 8000d1c:	e0db      	b.n	8000ed6 <__aeabi_fsub+0x2ba>
 8000d1e:	1e7b      	subs	r3, r7, #1
 8000d20:	2f01      	cmp	r7, #1
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x10a>
 8000d24:	e10d      	b.n	8000f42 <__aeabi_fsub+0x326>
 8000d26:	2fff      	cmp	r7, #255	; 0xff
 8000d28:	d071      	beq.n	8000e0e <__aeabi_fsub+0x1f2>
 8000d2a:	001f      	movs	r7, r3
 8000d2c:	e098      	b.n	8000e60 <__aeabi_fsub+0x244>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x118>
 8000d32:	e0a7      	b.n	8000e84 <__aeabi_fsub+0x268>
 8000d34:	1e42      	subs	r2, r0, #1
 8000d36:	2801      	cmp	r0, #1
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x120>
 8000d3a:	e0e6      	b.n	8000f0a <__aeabi_fsub+0x2ee>
 8000d3c:	28ff      	cmp	r0, #255	; 0xff
 8000d3e:	d068      	beq.n	8000e12 <__aeabi_fsub+0x1f6>
 8000d40:	0010      	movs	r0, r2
 8000d42:	e78f      	b.n	8000c64 <__aeabi_fsub+0x48>
 8000d44:	2001      	movs	r0, #1
 8000d46:	4041      	eors	r1, r0
 8000d48:	42a1      	cmp	r1, r4
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x132>
 8000d4c:	e77f      	b.n	8000c4e <__aeabi_fsub+0x32>
 8000d4e:	20ff      	movs	r0, #255	; 0xff
 8000d50:	4240      	negs	r0, r0
 8000d52:	4680      	mov	r8, r0
 8000d54:	44a8      	add	r8, r5
 8000d56:	4640      	mov	r0, r8
 8000d58:	2800      	cmp	r0, #0
 8000d5a:	d038      	beq.n	8000dce <__aeabi_fsub+0x1b2>
 8000d5c:	1b51      	subs	r1, r2, r5
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d100      	bne.n	8000d64 <__aeabi_fsub+0x148>
 8000d62:	e0ae      	b.n	8000ec2 <__aeabi_fsub+0x2a6>
 8000d64:	2aff      	cmp	r2, #255	; 0xff
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x14e>
 8000d68:	e0df      	b.n	8000f2a <__aeabi_fsub+0x30e>
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	4660      	mov	r0, ip
 8000d6e:	04db      	lsls	r3, r3, #19
 8000d70:	4318      	orrs	r0, r3
 8000d72:	4684      	mov	ip, r0
 8000d74:	291b      	cmp	r1, #27
 8000d76:	dc00      	bgt.n	8000d7a <__aeabi_fsub+0x15e>
 8000d78:	e0d9      	b.n	8000f2e <__aeabi_fsub+0x312>
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	0015      	movs	r5, r2
 8000d7e:	1980      	adds	r0, r0, r6
 8000d80:	e7b1      	b.n	8000ce6 <__aeabi_fsub+0xca>
 8000d82:	20fe      	movs	r0, #254	; 0xfe
 8000d84:	1c6a      	adds	r2, r5, #1
 8000d86:	4210      	tst	r0, r2
 8000d88:	d171      	bne.n	8000e6e <__aeabi_fsub+0x252>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_fsub+0x174>
 8000d8e:	e0a6      	b.n	8000ede <__aeabi_fsub+0x2c2>
 8000d90:	4663      	mov	r3, ip
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x17c>
 8000d96:	e0d9      	b.n	8000f4c <__aeabi_fsub+0x330>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x184>
 8000d9e:	e788      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000da0:	1b98      	subs	r0, r3, r6
 8000da2:	0143      	lsls	r3, r0, #5
 8000da4:	d400      	bmi.n	8000da8 <__aeabi_fsub+0x18c>
 8000da6:	e0e1      	b.n	8000f6c <__aeabi_fsub+0x350>
 8000da8:	4663      	mov	r3, ip
 8000daa:	000c      	movs	r4, r1
 8000dac:	1af0      	subs	r0, r6, r3
 8000dae:	e76f      	b.n	8000c90 <__aeabi_fsub+0x74>
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_fsub+0x19a>
 8000db4:	e0b7      	b.n	8000f26 <__aeabi_fsub+0x30a>
 8000db6:	0002      	movs	r2, r0
 8000db8:	3a01      	subs	r2, #1
 8000dba:	2801      	cmp	r0, #1
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x1a4>
 8000dbe:	e09c      	b.n	8000efa <__aeabi_fsub+0x2de>
 8000dc0:	28ff      	cmp	r0, #255	; 0xff
 8000dc2:	d026      	beq.n	8000e12 <__aeabi_fsub+0x1f6>
 8000dc4:	4690      	mov	r8, r2
 8000dc6:	e788      	b.n	8000cda <__aeabi_fsub+0xbe>
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	2700      	movs	r7, #0
 8000dcc:	e771      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000dce:	20fe      	movs	r0, #254	; 0xfe
 8000dd0:	1c6a      	adds	r2, r5, #1
 8000dd2:	4210      	tst	r0, r2
 8000dd4:	d064      	beq.n	8000ea0 <__aeabi_fsub+0x284>
 8000dd6:	2aff      	cmp	r2, #255	; 0xff
 8000dd8:	d0f6      	beq.n	8000dc8 <__aeabi_fsub+0x1ac>
 8000dda:	0015      	movs	r5, r2
 8000ddc:	4466      	add	r6, ip
 8000dde:	0870      	lsrs	r0, r6, #1
 8000de0:	0743      	lsls	r3, r0, #29
 8000de2:	d000      	beq.n	8000de6 <__aeabi_fsub+0x1ca>
 8000de4:	e756      	b.n	8000c94 <__aeabi_fsub+0x78>
 8000de6:	08c3      	lsrs	r3, r0, #3
 8000de8:	2dff      	cmp	r5, #255	; 0xff
 8000dea:	d012      	beq.n	8000e12 <__aeabi_fsub+0x1f6>
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5f      	lsrs	r7, r3, #9
 8000df0:	b2ea      	uxtb	r2, r5
 8000df2:	e75e      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000df4:	4662      	mov	r2, ip
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d100      	bne.n	8000dfc <__aeabi_fsub+0x1e0>
 8000dfa:	e096      	b.n	8000f2a <__aeabi_fsub+0x30e>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d008      	beq.n	8000e12 <__aeabi_fsub+0x1f6>
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	03d2      	lsls	r2, r2, #15
 8000e04:	4213      	tst	r3, r2
 8000e06:	d004      	beq.n	8000e12 <__aeabi_fsub+0x1f6>
 8000e08:	4648      	mov	r0, r9
 8000e0a:	4210      	tst	r0, r2
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fsub+0x1f6>
 8000e0e:	000c      	movs	r4, r1
 8000e10:	464b      	mov	r3, r9
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0d8      	beq.n	8000dc8 <__aeabi_fsub+0x1ac>
 8000e16:	2780      	movs	r7, #128	; 0x80
 8000e18:	03ff      	lsls	r7, r7, #15
 8000e1a:	431f      	orrs	r7, r3
 8000e1c:	027f      	lsls	r7, r7, #9
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	0a7f      	lsrs	r7, r7, #9
 8000e22:	e746      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000e24:	2320      	movs	r3, #32
 8000e26:	003a      	movs	r2, r7
 8000e28:	1b45      	subs	r5, r0, r5
 8000e2a:	0038      	movs	r0, r7
 8000e2c:	3501      	adds	r5, #1
 8000e2e:	40ea      	lsrs	r2, r5
 8000e30:	1b5d      	subs	r5, r3, r5
 8000e32:	40a8      	lsls	r0, r5
 8000e34:	1e43      	subs	r3, r0, #1
 8000e36:	4198      	sbcs	r0, r3
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4310      	orrs	r0, r2
 8000e3c:	e728      	b.n	8000c90 <__aeabi_fsub+0x74>
 8000e3e:	2320      	movs	r3, #32
 8000e40:	1a1b      	subs	r3, r3, r0
 8000e42:	0032      	movs	r2, r6
 8000e44:	409e      	lsls	r6, r3
 8000e46:	40c2      	lsrs	r2, r0
 8000e48:	0030      	movs	r0, r6
 8000e4a:	1e43      	subs	r3, r0, #1
 8000e4c:	4198      	sbcs	r0, r3
 8000e4e:	4310      	orrs	r0, r2
 8000e50:	e70c      	b.n	8000c6c <__aeabi_fsub+0x50>
 8000e52:	2aff      	cmp	r2, #255	; 0xff
 8000e54:	d0db      	beq.n	8000e0e <__aeabi_fsub+0x1f2>
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	4660      	mov	r0, ip
 8000e5a:	04db      	lsls	r3, r3, #19
 8000e5c:	4318      	orrs	r0, r3
 8000e5e:	4684      	mov	ip, r0
 8000e60:	2f1b      	cmp	r7, #27
 8000e62:	dd56      	ble.n	8000f12 <__aeabi_fsub+0x2f6>
 8000e64:	2001      	movs	r0, #1
 8000e66:	000c      	movs	r4, r1
 8000e68:	0015      	movs	r5, r2
 8000e6a:	1a30      	subs	r0, r6, r0
 8000e6c:	e700      	b.n	8000c70 <__aeabi_fsub+0x54>
 8000e6e:	4663      	mov	r3, ip
 8000e70:	1b9f      	subs	r7, r3, r6
 8000e72:	017b      	lsls	r3, r7, #5
 8000e74:	d43d      	bmi.n	8000ef2 <__aeabi_fsub+0x2d6>
 8000e76:	2f00      	cmp	r7, #0
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fsub+0x260>
 8000e7a:	e6fe      	b.n	8000c7a <__aeabi_fsub+0x5e>
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2700      	movs	r7, #0
 8000e82:	e716      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000e84:	0005      	movs	r5, r0
 8000e86:	e7af      	b.n	8000de8 <__aeabi_fsub+0x1cc>
 8000e88:	0032      	movs	r2, r6
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	40da      	lsrs	r2, r3
 8000e90:	2320      	movs	r3, #32
 8000e92:	1a5b      	subs	r3, r3, r1
 8000e94:	409e      	lsls	r6, r3
 8000e96:	0030      	movs	r0, r6
 8000e98:	1e43      	subs	r3, r0, #1
 8000e9a:	4198      	sbcs	r0, r3
 8000e9c:	4310      	orrs	r0, r2
 8000e9e:	e721      	b.n	8000ce4 <__aeabi_fsub+0xc8>
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	d1a7      	bne.n	8000df4 <__aeabi_fsub+0x1d8>
 8000ea4:	4663      	mov	r3, ip
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d059      	beq.n	8000f5e <__aeabi_fsub+0x342>
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_fsub+0x296>
 8000eb0:	e6ff      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000eb2:	0030      	movs	r0, r6
 8000eb4:	4460      	add	r0, ip
 8000eb6:	0143      	lsls	r3, r0, #5
 8000eb8:	d592      	bpl.n	8000de0 <__aeabi_fsub+0x1c4>
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <__aeabi_fsub+0x348>)
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	e78e      	b.n	8000de0 <__aeabi_fsub+0x1c4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d047      	beq.n	8000f58 <__aeabi_fsub+0x33c>
 8000ec8:	1e4b      	subs	r3, r1, #1
 8000eca:	2901      	cmp	r1, #1
 8000ecc:	d015      	beq.n	8000efa <__aeabi_fsub+0x2de>
 8000ece:	29ff      	cmp	r1, #255	; 0xff
 8000ed0:	d02b      	beq.n	8000f2a <__aeabi_fsub+0x30e>
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	e74e      	b.n	8000d74 <__aeabi_fsub+0x158>
 8000ed6:	000c      	movs	r4, r1
 8000ed8:	464b      	mov	r3, r9
 8000eda:	003d      	movs	r5, r7
 8000edc:	e784      	b.n	8000de8 <__aeabi_fsub+0x1cc>
 8000ede:	4662      	mov	r2, ip
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d18b      	bne.n	8000dfc <__aeabi_fsub+0x1e0>
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	d192      	bne.n	8000e0e <__aeabi_fsub+0x1f2>
 8000ee8:	2780      	movs	r7, #128	; 0x80
 8000eea:	2400      	movs	r4, #0
 8000eec:	22ff      	movs	r2, #255	; 0xff
 8000eee:	03ff      	lsls	r7, r7, #15
 8000ef0:	e6df      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	1af7      	subs	r7, r6, r3
 8000ef8:	e6bf      	b.n	8000c7a <__aeabi_fsub+0x5e>
 8000efa:	0030      	movs	r0, r6
 8000efc:	4460      	add	r0, ip
 8000efe:	2501      	movs	r5, #1
 8000f00:	0143      	lsls	r3, r0, #5
 8000f02:	d400      	bmi.n	8000f06 <__aeabi_fsub+0x2ea>
 8000f04:	e76c      	b.n	8000de0 <__aeabi_fsub+0x1c4>
 8000f06:	2502      	movs	r5, #2
 8000f08:	e6f2      	b.n	8000cf0 <__aeabi_fsub+0xd4>
 8000f0a:	4663      	mov	r3, ip
 8000f0c:	2501      	movs	r5, #1
 8000f0e:	1b98      	subs	r0, r3, r6
 8000f10:	e6ae      	b.n	8000c70 <__aeabi_fsub+0x54>
 8000f12:	2320      	movs	r3, #32
 8000f14:	4664      	mov	r4, ip
 8000f16:	4660      	mov	r0, ip
 8000f18:	40fc      	lsrs	r4, r7
 8000f1a:	1bdf      	subs	r7, r3, r7
 8000f1c:	40b8      	lsls	r0, r7
 8000f1e:	1e43      	subs	r3, r0, #1
 8000f20:	4198      	sbcs	r0, r3
 8000f22:	4320      	orrs	r0, r4
 8000f24:	e79f      	b.n	8000e66 <__aeabi_fsub+0x24a>
 8000f26:	0005      	movs	r5, r0
 8000f28:	e75e      	b.n	8000de8 <__aeabi_fsub+0x1cc>
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	e771      	b.n	8000e12 <__aeabi_fsub+0x1f6>
 8000f2e:	2320      	movs	r3, #32
 8000f30:	4665      	mov	r5, ip
 8000f32:	4660      	mov	r0, ip
 8000f34:	40cd      	lsrs	r5, r1
 8000f36:	1a59      	subs	r1, r3, r1
 8000f38:	4088      	lsls	r0, r1
 8000f3a:	1e43      	subs	r3, r0, #1
 8000f3c:	4198      	sbcs	r0, r3
 8000f3e:	4328      	orrs	r0, r5
 8000f40:	e71c      	b.n	8000d7c <__aeabi_fsub+0x160>
 8000f42:	4663      	mov	r3, ip
 8000f44:	000c      	movs	r4, r1
 8000f46:	2501      	movs	r5, #1
 8000f48:	1af0      	subs	r0, r6, r3
 8000f4a:	e691      	b.n	8000c70 <__aeabi_fsub+0x54>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d095      	beq.n	8000e7c <__aeabi_fsub+0x260>
 8000f50:	000c      	movs	r4, r1
 8000f52:	464f      	mov	r7, r9
 8000f54:	2200      	movs	r2, #0
 8000f56:	e6ac      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000f58:	464b      	mov	r3, r9
 8000f5a:	000d      	movs	r5, r1
 8000f5c:	e744      	b.n	8000de8 <__aeabi_fsub+0x1cc>
 8000f5e:	464f      	mov	r7, r9
 8000f60:	2200      	movs	r2, #0
 8000f62:	e6a6      	b.n	8000cb2 <__aeabi_fsub+0x96>
 8000f64:	fbffffff 	.word	0xfbffffff
 8000f68:	7dffffff 	.word	0x7dffffff
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_fsub+0x356>
 8000f70:	e736      	b.n	8000de0 <__aeabi_fsub+0x1c4>
 8000f72:	2400      	movs	r4, #0
 8000f74:	2700      	movs	r7, #0
 8000f76:	e69c      	b.n	8000cb2 <__aeabi_fsub+0x96>

08000f78 <__aeabi_f2iz>:
 8000f78:	0241      	lsls	r1, r0, #9
 8000f7a:	0042      	lsls	r2, r0, #1
 8000f7c:	0fc3      	lsrs	r3, r0, #31
 8000f7e:	0a49      	lsrs	r1, r1, #9
 8000f80:	2000      	movs	r0, #0
 8000f82:	0e12      	lsrs	r2, r2, #24
 8000f84:	2a7e      	cmp	r2, #126	; 0x7e
 8000f86:	dd03      	ble.n	8000f90 <__aeabi_f2iz+0x18>
 8000f88:	2a9d      	cmp	r2, #157	; 0x9d
 8000f8a:	dd02      	ble.n	8000f92 <__aeabi_f2iz+0x1a>
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <__aeabi_f2iz+0x3c>)
 8000f8e:	1898      	adds	r0, r3, r2
 8000f90:	4770      	bx	lr
 8000f92:	2080      	movs	r0, #128	; 0x80
 8000f94:	0400      	lsls	r0, r0, #16
 8000f96:	4301      	orrs	r1, r0
 8000f98:	2a95      	cmp	r2, #149	; 0x95
 8000f9a:	dc07      	bgt.n	8000fac <__aeabi_f2iz+0x34>
 8000f9c:	2096      	movs	r0, #150	; 0x96
 8000f9e:	1a82      	subs	r2, r0, r2
 8000fa0:	40d1      	lsrs	r1, r2
 8000fa2:	4248      	negs	r0, r1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f3      	bne.n	8000f90 <__aeabi_f2iz+0x18>
 8000fa8:	0008      	movs	r0, r1
 8000faa:	e7f1      	b.n	8000f90 <__aeabi_f2iz+0x18>
 8000fac:	3a96      	subs	r2, #150	; 0x96
 8000fae:	4091      	lsls	r1, r2
 8000fb0:	e7f7      	b.n	8000fa2 <__aeabi_f2iz+0x2a>
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	7fffffff 	.word	0x7fffffff

08000fb8 <__aeabi_ui2f>:
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	1e05      	subs	r5, r0, #0
 8000fbc:	d00e      	beq.n	8000fdc <__aeabi_ui2f+0x24>
 8000fbe:	f001 fef3 	bl	8002da8 <__clzsi2>
 8000fc2:	239e      	movs	r3, #158	; 0x9e
 8000fc4:	0004      	movs	r4, r0
 8000fc6:	1a1b      	subs	r3, r3, r0
 8000fc8:	2b96      	cmp	r3, #150	; 0x96
 8000fca:	dc0c      	bgt.n	8000fe6 <__aeabi_ui2f+0x2e>
 8000fcc:	2808      	cmp	r0, #8
 8000fce:	dd01      	ble.n	8000fd4 <__aeabi_ui2f+0x1c>
 8000fd0:	3c08      	subs	r4, #8
 8000fd2:	40a5      	lsls	r5, r4
 8000fd4:	026d      	lsls	r5, r5, #9
 8000fd6:	0a6d      	lsrs	r5, r5, #9
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	e001      	b.n	8000fe0 <__aeabi_ui2f+0x28>
 8000fdc:	2000      	movs	r0, #0
 8000fde:	2500      	movs	r5, #0
 8000fe0:	05c0      	lsls	r0, r0, #23
 8000fe2:	4328      	orrs	r0, r5
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
 8000fe6:	2b99      	cmp	r3, #153	; 0x99
 8000fe8:	dd09      	ble.n	8000ffe <__aeabi_ui2f+0x46>
 8000fea:	0002      	movs	r2, r0
 8000fec:	0029      	movs	r1, r5
 8000fee:	321b      	adds	r2, #27
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	1e4a      	subs	r2, r1, #1
 8000ff4:	4191      	sbcs	r1, r2
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	1a12      	subs	r2, r2, r0
 8000ffa:	40d5      	lsrs	r5, r2
 8000ffc:	430d      	orrs	r5, r1
 8000ffe:	2c05      	cmp	r4, #5
 8001000:	dc12      	bgt.n	8001028 <__aeabi_ui2f+0x70>
 8001002:	0029      	movs	r1, r5
 8001004:	4e0c      	ldr	r6, [pc, #48]	; (8001038 <__aeabi_ui2f+0x80>)
 8001006:	4031      	ands	r1, r6
 8001008:	076a      	lsls	r2, r5, #29
 800100a:	d009      	beq.n	8001020 <__aeabi_ui2f+0x68>
 800100c:	200f      	movs	r0, #15
 800100e:	4028      	ands	r0, r5
 8001010:	2804      	cmp	r0, #4
 8001012:	d005      	beq.n	8001020 <__aeabi_ui2f+0x68>
 8001014:	3104      	adds	r1, #4
 8001016:	014a      	lsls	r2, r1, #5
 8001018:	d502      	bpl.n	8001020 <__aeabi_ui2f+0x68>
 800101a:	239f      	movs	r3, #159	; 0x9f
 800101c:	4031      	ands	r1, r6
 800101e:	1b1b      	subs	r3, r3, r4
 8001020:	0189      	lsls	r1, r1, #6
 8001022:	0a4d      	lsrs	r5, r1, #9
 8001024:	b2d8      	uxtb	r0, r3
 8001026:	e7db      	b.n	8000fe0 <__aeabi_ui2f+0x28>
 8001028:	1f62      	subs	r2, r4, #5
 800102a:	4095      	lsls	r5, r2
 800102c:	0029      	movs	r1, r5
 800102e:	4e02      	ldr	r6, [pc, #8]	; (8001038 <__aeabi_ui2f+0x80>)
 8001030:	4031      	ands	r1, r6
 8001032:	076a      	lsls	r2, r5, #29
 8001034:	d0f4      	beq.n	8001020 <__aeabi_ui2f+0x68>
 8001036:	e7e9      	b.n	800100c <__aeabi_ui2f+0x54>
 8001038:	fbffffff 	.word	0xfbffffff

0800103c <__aeabi_dadd>:
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	464f      	mov	r7, r9
 8001040:	4646      	mov	r6, r8
 8001042:	46d6      	mov	lr, sl
 8001044:	000d      	movs	r5, r1
 8001046:	0004      	movs	r4, r0
 8001048:	b5c0      	push	{r6, r7, lr}
 800104a:	001f      	movs	r7, r3
 800104c:	0011      	movs	r1, r2
 800104e:	0328      	lsls	r0, r5, #12
 8001050:	0f62      	lsrs	r2, r4, #29
 8001052:	0a40      	lsrs	r0, r0, #9
 8001054:	4310      	orrs	r0, r2
 8001056:	007a      	lsls	r2, r7, #1
 8001058:	0d52      	lsrs	r2, r2, #21
 800105a:	00e3      	lsls	r3, r4, #3
 800105c:	033c      	lsls	r4, r7, #12
 800105e:	4691      	mov	r9, r2
 8001060:	0a64      	lsrs	r4, r4, #9
 8001062:	0ffa      	lsrs	r2, r7, #31
 8001064:	0f4f      	lsrs	r7, r1, #29
 8001066:	006e      	lsls	r6, r5, #1
 8001068:	4327      	orrs	r7, r4
 800106a:	4692      	mov	sl, r2
 800106c:	46b8      	mov	r8, r7
 800106e:	0d76      	lsrs	r6, r6, #21
 8001070:	0fed      	lsrs	r5, r5, #31
 8001072:	00c9      	lsls	r1, r1, #3
 8001074:	4295      	cmp	r5, r2
 8001076:	d100      	bne.n	800107a <__aeabi_dadd+0x3e>
 8001078:	e099      	b.n	80011ae <__aeabi_dadd+0x172>
 800107a:	464c      	mov	r4, r9
 800107c:	1b34      	subs	r4, r6, r4
 800107e:	46a4      	mov	ip, r4
 8001080:	2c00      	cmp	r4, #0
 8001082:	dc00      	bgt.n	8001086 <__aeabi_dadd+0x4a>
 8001084:	e07c      	b.n	8001180 <__aeabi_dadd+0x144>
 8001086:	464a      	mov	r2, r9
 8001088:	2a00      	cmp	r2, #0
 800108a:	d100      	bne.n	800108e <__aeabi_dadd+0x52>
 800108c:	e0b8      	b.n	8001200 <__aeabi_dadd+0x1c4>
 800108e:	4ac5      	ldr	r2, [pc, #788]	; (80013a4 <__aeabi_dadd+0x368>)
 8001090:	4296      	cmp	r6, r2
 8001092:	d100      	bne.n	8001096 <__aeabi_dadd+0x5a>
 8001094:	e11c      	b.n	80012d0 <__aeabi_dadd+0x294>
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	003c      	movs	r4, r7
 800109a:	0412      	lsls	r2, r2, #16
 800109c:	4314      	orrs	r4, r2
 800109e:	46a0      	mov	r8, r4
 80010a0:	4662      	mov	r2, ip
 80010a2:	2a38      	cmp	r2, #56	; 0x38
 80010a4:	dd00      	ble.n	80010a8 <__aeabi_dadd+0x6c>
 80010a6:	e161      	b.n	800136c <__aeabi_dadd+0x330>
 80010a8:	2a1f      	cmp	r2, #31
 80010aa:	dd00      	ble.n	80010ae <__aeabi_dadd+0x72>
 80010ac:	e1cc      	b.n	8001448 <__aeabi_dadd+0x40c>
 80010ae:	4664      	mov	r4, ip
 80010b0:	2220      	movs	r2, #32
 80010b2:	1b12      	subs	r2, r2, r4
 80010b4:	4644      	mov	r4, r8
 80010b6:	4094      	lsls	r4, r2
 80010b8:	000f      	movs	r7, r1
 80010ba:	46a1      	mov	r9, r4
 80010bc:	4664      	mov	r4, ip
 80010be:	4091      	lsls	r1, r2
 80010c0:	40e7      	lsrs	r7, r4
 80010c2:	464c      	mov	r4, r9
 80010c4:	1e4a      	subs	r2, r1, #1
 80010c6:	4191      	sbcs	r1, r2
 80010c8:	433c      	orrs	r4, r7
 80010ca:	4642      	mov	r2, r8
 80010cc:	4321      	orrs	r1, r4
 80010ce:	4664      	mov	r4, ip
 80010d0:	40e2      	lsrs	r2, r4
 80010d2:	1a80      	subs	r0, r0, r2
 80010d4:	1a5c      	subs	r4, r3, r1
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	419b      	sbcs	r3, r3
 80010da:	425f      	negs	r7, r3
 80010dc:	1bc7      	subs	r7, r0, r7
 80010de:	023b      	lsls	r3, r7, #8
 80010e0:	d400      	bmi.n	80010e4 <__aeabi_dadd+0xa8>
 80010e2:	e0d0      	b.n	8001286 <__aeabi_dadd+0x24a>
 80010e4:	027f      	lsls	r7, r7, #9
 80010e6:	0a7f      	lsrs	r7, r7, #9
 80010e8:	2f00      	cmp	r7, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_dadd+0xb2>
 80010ec:	e0ff      	b.n	80012ee <__aeabi_dadd+0x2b2>
 80010ee:	0038      	movs	r0, r7
 80010f0:	f001 fe5a 	bl	8002da8 <__clzsi2>
 80010f4:	0001      	movs	r1, r0
 80010f6:	3908      	subs	r1, #8
 80010f8:	2320      	movs	r3, #32
 80010fa:	0022      	movs	r2, r4
 80010fc:	1a5b      	subs	r3, r3, r1
 80010fe:	408f      	lsls	r7, r1
 8001100:	40da      	lsrs	r2, r3
 8001102:	408c      	lsls	r4, r1
 8001104:	4317      	orrs	r7, r2
 8001106:	42b1      	cmp	r1, r6
 8001108:	da00      	bge.n	800110c <__aeabi_dadd+0xd0>
 800110a:	e0ff      	b.n	800130c <__aeabi_dadd+0x2d0>
 800110c:	1b89      	subs	r1, r1, r6
 800110e:	1c4b      	adds	r3, r1, #1
 8001110:	2b1f      	cmp	r3, #31
 8001112:	dd00      	ble.n	8001116 <__aeabi_dadd+0xda>
 8001114:	e0a8      	b.n	8001268 <__aeabi_dadd+0x22c>
 8001116:	2220      	movs	r2, #32
 8001118:	0039      	movs	r1, r7
 800111a:	1ad2      	subs	r2, r2, r3
 800111c:	0020      	movs	r0, r4
 800111e:	4094      	lsls	r4, r2
 8001120:	4091      	lsls	r1, r2
 8001122:	40d8      	lsrs	r0, r3
 8001124:	1e62      	subs	r2, r4, #1
 8001126:	4194      	sbcs	r4, r2
 8001128:	40df      	lsrs	r7, r3
 800112a:	2600      	movs	r6, #0
 800112c:	4301      	orrs	r1, r0
 800112e:	430c      	orrs	r4, r1
 8001130:	0763      	lsls	r3, r4, #29
 8001132:	d009      	beq.n	8001148 <__aeabi_dadd+0x10c>
 8001134:	230f      	movs	r3, #15
 8001136:	4023      	ands	r3, r4
 8001138:	2b04      	cmp	r3, #4
 800113a:	d005      	beq.n	8001148 <__aeabi_dadd+0x10c>
 800113c:	1d23      	adds	r3, r4, #4
 800113e:	42a3      	cmp	r3, r4
 8001140:	41a4      	sbcs	r4, r4
 8001142:	4264      	negs	r4, r4
 8001144:	193f      	adds	r7, r7, r4
 8001146:	001c      	movs	r4, r3
 8001148:	023b      	lsls	r3, r7, #8
 800114a:	d400      	bmi.n	800114e <__aeabi_dadd+0x112>
 800114c:	e09e      	b.n	800128c <__aeabi_dadd+0x250>
 800114e:	4b95      	ldr	r3, [pc, #596]	; (80013a4 <__aeabi_dadd+0x368>)
 8001150:	3601      	adds	r6, #1
 8001152:	429e      	cmp	r6, r3
 8001154:	d100      	bne.n	8001158 <__aeabi_dadd+0x11c>
 8001156:	e0b7      	b.n	80012c8 <__aeabi_dadd+0x28c>
 8001158:	4a93      	ldr	r2, [pc, #588]	; (80013a8 <__aeabi_dadd+0x36c>)
 800115a:	08e4      	lsrs	r4, r4, #3
 800115c:	4017      	ands	r7, r2
 800115e:	077b      	lsls	r3, r7, #29
 8001160:	0571      	lsls	r1, r6, #21
 8001162:	027f      	lsls	r7, r7, #9
 8001164:	4323      	orrs	r3, r4
 8001166:	0b3f      	lsrs	r7, r7, #12
 8001168:	0d4a      	lsrs	r2, r1, #21
 800116a:	0512      	lsls	r2, r2, #20
 800116c:	433a      	orrs	r2, r7
 800116e:	07ed      	lsls	r5, r5, #31
 8001170:	432a      	orrs	r2, r5
 8001172:	0018      	movs	r0, r3
 8001174:	0011      	movs	r1, r2
 8001176:	bce0      	pop	{r5, r6, r7}
 8001178:	46ba      	mov	sl, r7
 800117a:	46b1      	mov	r9, r6
 800117c:	46a8      	mov	r8, r5
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001180:	2c00      	cmp	r4, #0
 8001182:	d04b      	beq.n	800121c <__aeabi_dadd+0x1e0>
 8001184:	464c      	mov	r4, r9
 8001186:	1ba4      	subs	r4, r4, r6
 8001188:	46a4      	mov	ip, r4
 800118a:	2e00      	cmp	r6, #0
 800118c:	d000      	beq.n	8001190 <__aeabi_dadd+0x154>
 800118e:	e123      	b.n	80013d8 <__aeabi_dadd+0x39c>
 8001190:	0004      	movs	r4, r0
 8001192:	431c      	orrs	r4, r3
 8001194:	d100      	bne.n	8001198 <__aeabi_dadd+0x15c>
 8001196:	e1af      	b.n	80014f8 <__aeabi_dadd+0x4bc>
 8001198:	4662      	mov	r2, ip
 800119a:	1e54      	subs	r4, r2, #1
 800119c:	2a01      	cmp	r2, #1
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x166>
 80011a0:	e215      	b.n	80015ce <__aeabi_dadd+0x592>
 80011a2:	4d80      	ldr	r5, [pc, #512]	; (80013a4 <__aeabi_dadd+0x368>)
 80011a4:	45ac      	cmp	ip, r5
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x16e>
 80011a8:	e1c8      	b.n	800153c <__aeabi_dadd+0x500>
 80011aa:	46a4      	mov	ip, r4
 80011ac:	e11b      	b.n	80013e6 <__aeabi_dadd+0x3aa>
 80011ae:	464a      	mov	r2, r9
 80011b0:	1ab2      	subs	r2, r6, r2
 80011b2:	4694      	mov	ip, r2
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_dadd+0x17e>
 80011b8:	e0ac      	b.n	8001314 <__aeabi_dadd+0x2d8>
 80011ba:	464a      	mov	r2, r9
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d043      	beq.n	8001248 <__aeabi_dadd+0x20c>
 80011c0:	4a78      	ldr	r2, [pc, #480]	; (80013a4 <__aeabi_dadd+0x368>)
 80011c2:	4296      	cmp	r6, r2
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dadd+0x18c>
 80011c6:	e1af      	b.n	8001528 <__aeabi_dadd+0x4ec>
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	003c      	movs	r4, r7
 80011cc:	0412      	lsls	r2, r2, #16
 80011ce:	4314      	orrs	r4, r2
 80011d0:	46a0      	mov	r8, r4
 80011d2:	4662      	mov	r2, ip
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dc67      	bgt.n	80012a8 <__aeabi_dadd+0x26c>
 80011d8:	2a1f      	cmp	r2, #31
 80011da:	dc00      	bgt.n	80011de <__aeabi_dadd+0x1a2>
 80011dc:	e15f      	b.n	800149e <__aeabi_dadd+0x462>
 80011de:	4647      	mov	r7, r8
 80011e0:	3a20      	subs	r2, #32
 80011e2:	40d7      	lsrs	r7, r2
 80011e4:	4662      	mov	r2, ip
 80011e6:	2a20      	cmp	r2, #32
 80011e8:	d005      	beq.n	80011f6 <__aeabi_dadd+0x1ba>
 80011ea:	4664      	mov	r4, ip
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	1b12      	subs	r2, r2, r4
 80011f0:	4644      	mov	r4, r8
 80011f2:	4094      	lsls	r4, r2
 80011f4:	4321      	orrs	r1, r4
 80011f6:	1e4a      	subs	r2, r1, #1
 80011f8:	4191      	sbcs	r1, r2
 80011fa:	000c      	movs	r4, r1
 80011fc:	433c      	orrs	r4, r7
 80011fe:	e057      	b.n	80012b0 <__aeabi_dadd+0x274>
 8001200:	003a      	movs	r2, r7
 8001202:	430a      	orrs	r2, r1
 8001204:	d100      	bne.n	8001208 <__aeabi_dadd+0x1cc>
 8001206:	e105      	b.n	8001414 <__aeabi_dadd+0x3d8>
 8001208:	0022      	movs	r2, r4
 800120a:	3a01      	subs	r2, #1
 800120c:	2c01      	cmp	r4, #1
 800120e:	d100      	bne.n	8001212 <__aeabi_dadd+0x1d6>
 8001210:	e182      	b.n	8001518 <__aeabi_dadd+0x4dc>
 8001212:	4c64      	ldr	r4, [pc, #400]	; (80013a4 <__aeabi_dadd+0x368>)
 8001214:	45a4      	cmp	ip, r4
 8001216:	d05b      	beq.n	80012d0 <__aeabi_dadd+0x294>
 8001218:	4694      	mov	ip, r2
 800121a:	e741      	b.n	80010a0 <__aeabi_dadd+0x64>
 800121c:	4c63      	ldr	r4, [pc, #396]	; (80013ac <__aeabi_dadd+0x370>)
 800121e:	1c77      	adds	r7, r6, #1
 8001220:	4227      	tst	r7, r4
 8001222:	d000      	beq.n	8001226 <__aeabi_dadd+0x1ea>
 8001224:	e0c4      	b.n	80013b0 <__aeabi_dadd+0x374>
 8001226:	0004      	movs	r4, r0
 8001228:	431c      	orrs	r4, r3
 800122a:	2e00      	cmp	r6, #0
 800122c:	d000      	beq.n	8001230 <__aeabi_dadd+0x1f4>
 800122e:	e169      	b.n	8001504 <__aeabi_dadd+0x4c8>
 8001230:	2c00      	cmp	r4, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dadd+0x1fa>
 8001234:	e1bf      	b.n	80015b6 <__aeabi_dadd+0x57a>
 8001236:	4644      	mov	r4, r8
 8001238:	430c      	orrs	r4, r1
 800123a:	d000      	beq.n	800123e <__aeabi_dadd+0x202>
 800123c:	e1d0      	b.n	80015e0 <__aeabi_dadd+0x5a4>
 800123e:	0742      	lsls	r2, r0, #29
 8001240:	08db      	lsrs	r3, r3, #3
 8001242:	4313      	orrs	r3, r2
 8001244:	08c0      	lsrs	r0, r0, #3
 8001246:	e029      	b.n	800129c <__aeabi_dadd+0x260>
 8001248:	003a      	movs	r2, r7
 800124a:	430a      	orrs	r2, r1
 800124c:	d100      	bne.n	8001250 <__aeabi_dadd+0x214>
 800124e:	e170      	b.n	8001532 <__aeabi_dadd+0x4f6>
 8001250:	4662      	mov	r2, ip
 8001252:	4664      	mov	r4, ip
 8001254:	3a01      	subs	r2, #1
 8001256:	2c01      	cmp	r4, #1
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x220>
 800125a:	e0e0      	b.n	800141e <__aeabi_dadd+0x3e2>
 800125c:	4c51      	ldr	r4, [pc, #324]	; (80013a4 <__aeabi_dadd+0x368>)
 800125e:	45a4      	cmp	ip, r4
 8001260:	d100      	bne.n	8001264 <__aeabi_dadd+0x228>
 8001262:	e161      	b.n	8001528 <__aeabi_dadd+0x4ec>
 8001264:	4694      	mov	ip, r2
 8001266:	e7b4      	b.n	80011d2 <__aeabi_dadd+0x196>
 8001268:	003a      	movs	r2, r7
 800126a:	391f      	subs	r1, #31
 800126c:	40ca      	lsrs	r2, r1
 800126e:	0011      	movs	r1, r2
 8001270:	2b20      	cmp	r3, #32
 8001272:	d003      	beq.n	800127c <__aeabi_dadd+0x240>
 8001274:	2240      	movs	r2, #64	; 0x40
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	409f      	lsls	r7, r3
 800127a:	433c      	orrs	r4, r7
 800127c:	1e63      	subs	r3, r4, #1
 800127e:	419c      	sbcs	r4, r3
 8001280:	2700      	movs	r7, #0
 8001282:	2600      	movs	r6, #0
 8001284:	430c      	orrs	r4, r1
 8001286:	0763      	lsls	r3, r4, #29
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x250>
 800128a:	e753      	b.n	8001134 <__aeabi_dadd+0xf8>
 800128c:	46b4      	mov	ip, r6
 800128e:	08e4      	lsrs	r4, r4, #3
 8001290:	077b      	lsls	r3, r7, #29
 8001292:	4323      	orrs	r3, r4
 8001294:	08f8      	lsrs	r0, r7, #3
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <__aeabi_dadd+0x368>)
 8001298:	4594      	cmp	ip, r2
 800129a:	d01d      	beq.n	80012d8 <__aeabi_dadd+0x29c>
 800129c:	4662      	mov	r2, ip
 800129e:	0307      	lsls	r7, r0, #12
 80012a0:	0552      	lsls	r2, r2, #21
 80012a2:	0b3f      	lsrs	r7, r7, #12
 80012a4:	0d52      	lsrs	r2, r2, #21
 80012a6:	e760      	b.n	800116a <__aeabi_dadd+0x12e>
 80012a8:	4644      	mov	r4, r8
 80012aa:	430c      	orrs	r4, r1
 80012ac:	1e62      	subs	r2, r4, #1
 80012ae:	4194      	sbcs	r4, r2
 80012b0:	18e4      	adds	r4, r4, r3
 80012b2:	429c      	cmp	r4, r3
 80012b4:	419b      	sbcs	r3, r3
 80012b6:	425f      	negs	r7, r3
 80012b8:	183f      	adds	r7, r7, r0
 80012ba:	023b      	lsls	r3, r7, #8
 80012bc:	d5e3      	bpl.n	8001286 <__aeabi_dadd+0x24a>
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <__aeabi_dadd+0x368>)
 80012c0:	3601      	adds	r6, #1
 80012c2:	429e      	cmp	r6, r3
 80012c4:	d000      	beq.n	80012c8 <__aeabi_dadd+0x28c>
 80012c6:	e0b5      	b.n	8001434 <__aeabi_dadd+0x3f8>
 80012c8:	0032      	movs	r2, r6
 80012ca:	2700      	movs	r7, #0
 80012cc:	2300      	movs	r3, #0
 80012ce:	e74c      	b.n	800116a <__aeabi_dadd+0x12e>
 80012d0:	0742      	lsls	r2, r0, #29
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	08c0      	lsrs	r0, r0, #3
 80012d8:	001a      	movs	r2, r3
 80012da:	4302      	orrs	r2, r0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x2a4>
 80012de:	e1e1      	b.n	80016a4 <__aeabi_dadd+0x668>
 80012e0:	2780      	movs	r7, #128	; 0x80
 80012e2:	033f      	lsls	r7, r7, #12
 80012e4:	4307      	orrs	r7, r0
 80012e6:	033f      	lsls	r7, r7, #12
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <__aeabi_dadd+0x368>)
 80012ea:	0b3f      	lsrs	r7, r7, #12
 80012ec:	e73d      	b.n	800116a <__aeabi_dadd+0x12e>
 80012ee:	0020      	movs	r0, r4
 80012f0:	f001 fd5a 	bl	8002da8 <__clzsi2>
 80012f4:	0001      	movs	r1, r0
 80012f6:	3118      	adds	r1, #24
 80012f8:	291f      	cmp	r1, #31
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_dadd+0x2c2>
 80012fc:	e6fc      	b.n	80010f8 <__aeabi_dadd+0xbc>
 80012fe:	3808      	subs	r0, #8
 8001300:	4084      	lsls	r4, r0
 8001302:	0027      	movs	r7, r4
 8001304:	2400      	movs	r4, #0
 8001306:	42b1      	cmp	r1, r6
 8001308:	db00      	blt.n	800130c <__aeabi_dadd+0x2d0>
 800130a:	e6ff      	b.n	800110c <__aeabi_dadd+0xd0>
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <__aeabi_dadd+0x36c>)
 800130e:	1a76      	subs	r6, r6, r1
 8001310:	4017      	ands	r7, r2
 8001312:	e70d      	b.n	8001130 <__aeabi_dadd+0xf4>
 8001314:	2a00      	cmp	r2, #0
 8001316:	d02f      	beq.n	8001378 <__aeabi_dadd+0x33c>
 8001318:	464a      	mov	r2, r9
 800131a:	1b92      	subs	r2, r2, r6
 800131c:	4694      	mov	ip, r2
 800131e:	2e00      	cmp	r6, #0
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x2e8>
 8001322:	e0ad      	b.n	8001480 <__aeabi_dadd+0x444>
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <__aeabi_dadd+0x368>)
 8001326:	4591      	cmp	r9, r2
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x2f0>
 800132a:	e10f      	b.n	800154c <__aeabi_dadd+0x510>
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	0412      	lsls	r2, r2, #16
 8001330:	4310      	orrs	r0, r2
 8001332:	4662      	mov	r2, ip
 8001334:	2a38      	cmp	r2, #56	; 0x38
 8001336:	dd00      	ble.n	800133a <__aeabi_dadd+0x2fe>
 8001338:	e10f      	b.n	800155a <__aeabi_dadd+0x51e>
 800133a:	2a1f      	cmp	r2, #31
 800133c:	dd00      	ble.n	8001340 <__aeabi_dadd+0x304>
 800133e:	e180      	b.n	8001642 <__aeabi_dadd+0x606>
 8001340:	4664      	mov	r4, ip
 8001342:	2220      	movs	r2, #32
 8001344:	001e      	movs	r6, r3
 8001346:	1b12      	subs	r2, r2, r4
 8001348:	4667      	mov	r7, ip
 800134a:	0004      	movs	r4, r0
 800134c:	4093      	lsls	r3, r2
 800134e:	4094      	lsls	r4, r2
 8001350:	40fe      	lsrs	r6, r7
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	4193      	sbcs	r3, r2
 8001356:	40f8      	lsrs	r0, r7
 8001358:	4334      	orrs	r4, r6
 800135a:	431c      	orrs	r4, r3
 800135c:	4480      	add	r8, r0
 800135e:	1864      	adds	r4, r4, r1
 8001360:	428c      	cmp	r4, r1
 8001362:	41bf      	sbcs	r7, r7
 8001364:	427f      	negs	r7, r7
 8001366:	464e      	mov	r6, r9
 8001368:	4447      	add	r7, r8
 800136a:	e7a6      	b.n	80012ba <__aeabi_dadd+0x27e>
 800136c:	4642      	mov	r2, r8
 800136e:	430a      	orrs	r2, r1
 8001370:	0011      	movs	r1, r2
 8001372:	1e4a      	subs	r2, r1, #1
 8001374:	4191      	sbcs	r1, r2
 8001376:	e6ad      	b.n	80010d4 <__aeabi_dadd+0x98>
 8001378:	4c0c      	ldr	r4, [pc, #48]	; (80013ac <__aeabi_dadd+0x370>)
 800137a:	1c72      	adds	r2, r6, #1
 800137c:	4222      	tst	r2, r4
 800137e:	d000      	beq.n	8001382 <__aeabi_dadd+0x346>
 8001380:	e0a1      	b.n	80014c6 <__aeabi_dadd+0x48a>
 8001382:	0002      	movs	r2, r0
 8001384:	431a      	orrs	r2, r3
 8001386:	2e00      	cmp	r6, #0
 8001388:	d000      	beq.n	800138c <__aeabi_dadd+0x350>
 800138a:	e0fa      	b.n	8001582 <__aeabi_dadd+0x546>
 800138c:	2a00      	cmp	r2, #0
 800138e:	d100      	bne.n	8001392 <__aeabi_dadd+0x356>
 8001390:	e145      	b.n	800161e <__aeabi_dadd+0x5e2>
 8001392:	003a      	movs	r2, r7
 8001394:	430a      	orrs	r2, r1
 8001396:	d000      	beq.n	800139a <__aeabi_dadd+0x35e>
 8001398:	e146      	b.n	8001628 <__aeabi_dadd+0x5ec>
 800139a:	0742      	lsls	r2, r0, #29
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	4313      	orrs	r3, r2
 80013a0:	08c0      	lsrs	r0, r0, #3
 80013a2:	e77b      	b.n	800129c <__aeabi_dadd+0x260>
 80013a4:	000007ff 	.word	0x000007ff
 80013a8:	ff7fffff 	.word	0xff7fffff
 80013ac:	000007fe 	.word	0x000007fe
 80013b0:	4647      	mov	r7, r8
 80013b2:	1a5c      	subs	r4, r3, r1
 80013b4:	1bc2      	subs	r2, r0, r7
 80013b6:	42a3      	cmp	r3, r4
 80013b8:	41bf      	sbcs	r7, r7
 80013ba:	427f      	negs	r7, r7
 80013bc:	46b9      	mov	r9, r7
 80013be:	0017      	movs	r7, r2
 80013c0:	464a      	mov	r2, r9
 80013c2:	1abf      	subs	r7, r7, r2
 80013c4:	023a      	lsls	r2, r7, #8
 80013c6:	d500      	bpl.n	80013ca <__aeabi_dadd+0x38e>
 80013c8:	e08d      	b.n	80014e6 <__aeabi_dadd+0x4aa>
 80013ca:	0023      	movs	r3, r4
 80013cc:	433b      	orrs	r3, r7
 80013ce:	d000      	beq.n	80013d2 <__aeabi_dadd+0x396>
 80013d0:	e68a      	b.n	80010e8 <__aeabi_dadd+0xac>
 80013d2:	2000      	movs	r0, #0
 80013d4:	2500      	movs	r5, #0
 80013d6:	e761      	b.n	800129c <__aeabi_dadd+0x260>
 80013d8:	4cb4      	ldr	r4, [pc, #720]	; (80016ac <__aeabi_dadd+0x670>)
 80013da:	45a1      	cmp	r9, r4
 80013dc:	d100      	bne.n	80013e0 <__aeabi_dadd+0x3a4>
 80013de:	e0ad      	b.n	800153c <__aeabi_dadd+0x500>
 80013e0:	2480      	movs	r4, #128	; 0x80
 80013e2:	0424      	lsls	r4, r4, #16
 80013e4:	4320      	orrs	r0, r4
 80013e6:	4664      	mov	r4, ip
 80013e8:	2c38      	cmp	r4, #56	; 0x38
 80013ea:	dc3d      	bgt.n	8001468 <__aeabi_dadd+0x42c>
 80013ec:	4662      	mov	r2, ip
 80013ee:	2c1f      	cmp	r4, #31
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x3b8>
 80013f2:	e0b7      	b.n	8001564 <__aeabi_dadd+0x528>
 80013f4:	2520      	movs	r5, #32
 80013f6:	001e      	movs	r6, r3
 80013f8:	1b2d      	subs	r5, r5, r4
 80013fa:	0004      	movs	r4, r0
 80013fc:	40ab      	lsls	r3, r5
 80013fe:	40ac      	lsls	r4, r5
 8001400:	40d6      	lsrs	r6, r2
 8001402:	40d0      	lsrs	r0, r2
 8001404:	4642      	mov	r2, r8
 8001406:	1e5d      	subs	r5, r3, #1
 8001408:	41ab      	sbcs	r3, r5
 800140a:	4334      	orrs	r4, r6
 800140c:	1a12      	subs	r2, r2, r0
 800140e:	4690      	mov	r8, r2
 8001410:	4323      	orrs	r3, r4
 8001412:	e02c      	b.n	800146e <__aeabi_dadd+0x432>
 8001414:	0742      	lsls	r2, r0, #29
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	4313      	orrs	r3, r2
 800141a:	08c0      	lsrs	r0, r0, #3
 800141c:	e73b      	b.n	8001296 <__aeabi_dadd+0x25a>
 800141e:	185c      	adds	r4, r3, r1
 8001420:	429c      	cmp	r4, r3
 8001422:	419b      	sbcs	r3, r3
 8001424:	4440      	add	r0, r8
 8001426:	425b      	negs	r3, r3
 8001428:	18c7      	adds	r7, r0, r3
 800142a:	2601      	movs	r6, #1
 800142c:	023b      	lsls	r3, r7, #8
 800142e:	d400      	bmi.n	8001432 <__aeabi_dadd+0x3f6>
 8001430:	e729      	b.n	8001286 <__aeabi_dadd+0x24a>
 8001432:	2602      	movs	r6, #2
 8001434:	4a9e      	ldr	r2, [pc, #632]	; (80016b0 <__aeabi_dadd+0x674>)
 8001436:	0863      	lsrs	r3, r4, #1
 8001438:	4017      	ands	r7, r2
 800143a:	2201      	movs	r2, #1
 800143c:	4014      	ands	r4, r2
 800143e:	431c      	orrs	r4, r3
 8001440:	07fb      	lsls	r3, r7, #31
 8001442:	431c      	orrs	r4, r3
 8001444:	087f      	lsrs	r7, r7, #1
 8001446:	e673      	b.n	8001130 <__aeabi_dadd+0xf4>
 8001448:	4644      	mov	r4, r8
 800144a:	3a20      	subs	r2, #32
 800144c:	40d4      	lsrs	r4, r2
 800144e:	4662      	mov	r2, ip
 8001450:	2a20      	cmp	r2, #32
 8001452:	d005      	beq.n	8001460 <__aeabi_dadd+0x424>
 8001454:	4667      	mov	r7, ip
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	1bd2      	subs	r2, r2, r7
 800145a:	4647      	mov	r7, r8
 800145c:	4097      	lsls	r7, r2
 800145e:	4339      	orrs	r1, r7
 8001460:	1e4a      	subs	r2, r1, #1
 8001462:	4191      	sbcs	r1, r2
 8001464:	4321      	orrs	r1, r4
 8001466:	e635      	b.n	80010d4 <__aeabi_dadd+0x98>
 8001468:	4303      	orrs	r3, r0
 800146a:	1e58      	subs	r0, r3, #1
 800146c:	4183      	sbcs	r3, r0
 800146e:	1acc      	subs	r4, r1, r3
 8001470:	42a1      	cmp	r1, r4
 8001472:	41bf      	sbcs	r7, r7
 8001474:	4643      	mov	r3, r8
 8001476:	427f      	negs	r7, r7
 8001478:	4655      	mov	r5, sl
 800147a:	464e      	mov	r6, r9
 800147c:	1bdf      	subs	r7, r3, r7
 800147e:	e62e      	b.n	80010de <__aeabi_dadd+0xa2>
 8001480:	0002      	movs	r2, r0
 8001482:	431a      	orrs	r2, r3
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x44c>
 8001486:	e0bd      	b.n	8001604 <__aeabi_dadd+0x5c8>
 8001488:	4662      	mov	r2, ip
 800148a:	4664      	mov	r4, ip
 800148c:	3a01      	subs	r2, #1
 800148e:	2c01      	cmp	r4, #1
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x458>
 8001492:	e0e5      	b.n	8001660 <__aeabi_dadd+0x624>
 8001494:	4c85      	ldr	r4, [pc, #532]	; (80016ac <__aeabi_dadd+0x670>)
 8001496:	45a4      	cmp	ip, r4
 8001498:	d058      	beq.n	800154c <__aeabi_dadd+0x510>
 800149a:	4694      	mov	ip, r2
 800149c:	e749      	b.n	8001332 <__aeabi_dadd+0x2f6>
 800149e:	4664      	mov	r4, ip
 80014a0:	2220      	movs	r2, #32
 80014a2:	1b12      	subs	r2, r2, r4
 80014a4:	4644      	mov	r4, r8
 80014a6:	4094      	lsls	r4, r2
 80014a8:	000f      	movs	r7, r1
 80014aa:	46a1      	mov	r9, r4
 80014ac:	4664      	mov	r4, ip
 80014ae:	4091      	lsls	r1, r2
 80014b0:	40e7      	lsrs	r7, r4
 80014b2:	464c      	mov	r4, r9
 80014b4:	1e4a      	subs	r2, r1, #1
 80014b6:	4191      	sbcs	r1, r2
 80014b8:	433c      	orrs	r4, r7
 80014ba:	4642      	mov	r2, r8
 80014bc:	430c      	orrs	r4, r1
 80014be:	4661      	mov	r1, ip
 80014c0:	40ca      	lsrs	r2, r1
 80014c2:	1880      	adds	r0, r0, r2
 80014c4:	e6f4      	b.n	80012b0 <__aeabi_dadd+0x274>
 80014c6:	4c79      	ldr	r4, [pc, #484]	; (80016ac <__aeabi_dadd+0x670>)
 80014c8:	42a2      	cmp	r2, r4
 80014ca:	d100      	bne.n	80014ce <__aeabi_dadd+0x492>
 80014cc:	e6fd      	b.n	80012ca <__aeabi_dadd+0x28e>
 80014ce:	1859      	adds	r1, r3, r1
 80014d0:	4299      	cmp	r1, r3
 80014d2:	419b      	sbcs	r3, r3
 80014d4:	4440      	add	r0, r8
 80014d6:	425f      	negs	r7, r3
 80014d8:	19c7      	adds	r7, r0, r7
 80014da:	07fc      	lsls	r4, r7, #31
 80014dc:	0849      	lsrs	r1, r1, #1
 80014de:	0016      	movs	r6, r2
 80014e0:	430c      	orrs	r4, r1
 80014e2:	087f      	lsrs	r7, r7, #1
 80014e4:	e6cf      	b.n	8001286 <__aeabi_dadd+0x24a>
 80014e6:	1acc      	subs	r4, r1, r3
 80014e8:	42a1      	cmp	r1, r4
 80014ea:	41bf      	sbcs	r7, r7
 80014ec:	4643      	mov	r3, r8
 80014ee:	427f      	negs	r7, r7
 80014f0:	1a18      	subs	r0, r3, r0
 80014f2:	4655      	mov	r5, sl
 80014f4:	1bc7      	subs	r7, r0, r7
 80014f6:	e5f7      	b.n	80010e8 <__aeabi_dadd+0xac>
 80014f8:	08c9      	lsrs	r1, r1, #3
 80014fa:	077b      	lsls	r3, r7, #29
 80014fc:	4655      	mov	r5, sl
 80014fe:	430b      	orrs	r3, r1
 8001500:	08f8      	lsrs	r0, r7, #3
 8001502:	e6c8      	b.n	8001296 <__aeabi_dadd+0x25a>
 8001504:	2c00      	cmp	r4, #0
 8001506:	d000      	beq.n	800150a <__aeabi_dadd+0x4ce>
 8001508:	e081      	b.n	800160e <__aeabi_dadd+0x5d2>
 800150a:	4643      	mov	r3, r8
 800150c:	430b      	orrs	r3, r1
 800150e:	d115      	bne.n	800153c <__aeabi_dadd+0x500>
 8001510:	2080      	movs	r0, #128	; 0x80
 8001512:	2500      	movs	r5, #0
 8001514:	0300      	lsls	r0, r0, #12
 8001516:	e6e3      	b.n	80012e0 <__aeabi_dadd+0x2a4>
 8001518:	1a5c      	subs	r4, r3, r1
 800151a:	42a3      	cmp	r3, r4
 800151c:	419b      	sbcs	r3, r3
 800151e:	1bc7      	subs	r7, r0, r7
 8001520:	425b      	negs	r3, r3
 8001522:	2601      	movs	r6, #1
 8001524:	1aff      	subs	r7, r7, r3
 8001526:	e5da      	b.n	80010de <__aeabi_dadd+0xa2>
 8001528:	0742      	lsls	r2, r0, #29
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	4313      	orrs	r3, r2
 800152e:	08c0      	lsrs	r0, r0, #3
 8001530:	e6d2      	b.n	80012d8 <__aeabi_dadd+0x29c>
 8001532:	0742      	lsls	r2, r0, #29
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	4313      	orrs	r3, r2
 8001538:	08c0      	lsrs	r0, r0, #3
 800153a:	e6ac      	b.n	8001296 <__aeabi_dadd+0x25a>
 800153c:	4643      	mov	r3, r8
 800153e:	4642      	mov	r2, r8
 8001540:	08c9      	lsrs	r1, r1, #3
 8001542:	075b      	lsls	r3, r3, #29
 8001544:	4655      	mov	r5, sl
 8001546:	430b      	orrs	r3, r1
 8001548:	08d0      	lsrs	r0, r2, #3
 800154a:	e6c5      	b.n	80012d8 <__aeabi_dadd+0x29c>
 800154c:	4643      	mov	r3, r8
 800154e:	4642      	mov	r2, r8
 8001550:	075b      	lsls	r3, r3, #29
 8001552:	08c9      	lsrs	r1, r1, #3
 8001554:	430b      	orrs	r3, r1
 8001556:	08d0      	lsrs	r0, r2, #3
 8001558:	e6be      	b.n	80012d8 <__aeabi_dadd+0x29c>
 800155a:	4303      	orrs	r3, r0
 800155c:	001c      	movs	r4, r3
 800155e:	1e63      	subs	r3, r4, #1
 8001560:	419c      	sbcs	r4, r3
 8001562:	e6fc      	b.n	800135e <__aeabi_dadd+0x322>
 8001564:	0002      	movs	r2, r0
 8001566:	3c20      	subs	r4, #32
 8001568:	40e2      	lsrs	r2, r4
 800156a:	0014      	movs	r4, r2
 800156c:	4662      	mov	r2, ip
 800156e:	2a20      	cmp	r2, #32
 8001570:	d003      	beq.n	800157a <__aeabi_dadd+0x53e>
 8001572:	2540      	movs	r5, #64	; 0x40
 8001574:	1aad      	subs	r5, r5, r2
 8001576:	40a8      	lsls	r0, r5
 8001578:	4303      	orrs	r3, r0
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	4183      	sbcs	r3, r0
 800157e:	4323      	orrs	r3, r4
 8001580:	e775      	b.n	800146e <__aeabi_dadd+0x432>
 8001582:	2a00      	cmp	r2, #0
 8001584:	d0e2      	beq.n	800154c <__aeabi_dadd+0x510>
 8001586:	003a      	movs	r2, r7
 8001588:	430a      	orrs	r2, r1
 800158a:	d0cd      	beq.n	8001528 <__aeabi_dadd+0x4ec>
 800158c:	0742      	lsls	r2, r0, #29
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	4313      	orrs	r3, r2
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	08c0      	lsrs	r0, r0, #3
 8001596:	0312      	lsls	r2, r2, #12
 8001598:	4210      	tst	r0, r2
 800159a:	d006      	beq.n	80015aa <__aeabi_dadd+0x56e>
 800159c:	08fc      	lsrs	r4, r7, #3
 800159e:	4214      	tst	r4, r2
 80015a0:	d103      	bne.n	80015aa <__aeabi_dadd+0x56e>
 80015a2:	0020      	movs	r0, r4
 80015a4:	08cb      	lsrs	r3, r1, #3
 80015a6:	077a      	lsls	r2, r7, #29
 80015a8:	4313      	orrs	r3, r2
 80015aa:	0f5a      	lsrs	r2, r3, #29
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	0752      	lsls	r2, r2, #29
 80015b0:	08db      	lsrs	r3, r3, #3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	e690      	b.n	80012d8 <__aeabi_dadd+0x29c>
 80015b6:	4643      	mov	r3, r8
 80015b8:	430b      	orrs	r3, r1
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x582>
 80015bc:	e709      	b.n	80013d2 <__aeabi_dadd+0x396>
 80015be:	4643      	mov	r3, r8
 80015c0:	4642      	mov	r2, r8
 80015c2:	08c9      	lsrs	r1, r1, #3
 80015c4:	075b      	lsls	r3, r3, #29
 80015c6:	4655      	mov	r5, sl
 80015c8:	430b      	orrs	r3, r1
 80015ca:	08d0      	lsrs	r0, r2, #3
 80015cc:	e666      	b.n	800129c <__aeabi_dadd+0x260>
 80015ce:	1acc      	subs	r4, r1, r3
 80015d0:	42a1      	cmp	r1, r4
 80015d2:	4189      	sbcs	r1, r1
 80015d4:	1a3f      	subs	r7, r7, r0
 80015d6:	4249      	negs	r1, r1
 80015d8:	4655      	mov	r5, sl
 80015da:	2601      	movs	r6, #1
 80015dc:	1a7f      	subs	r7, r7, r1
 80015de:	e57e      	b.n	80010de <__aeabi_dadd+0xa2>
 80015e0:	4642      	mov	r2, r8
 80015e2:	1a5c      	subs	r4, r3, r1
 80015e4:	1a87      	subs	r7, r0, r2
 80015e6:	42a3      	cmp	r3, r4
 80015e8:	4192      	sbcs	r2, r2
 80015ea:	4252      	negs	r2, r2
 80015ec:	1abf      	subs	r7, r7, r2
 80015ee:	023a      	lsls	r2, r7, #8
 80015f0:	d53d      	bpl.n	800166e <__aeabi_dadd+0x632>
 80015f2:	1acc      	subs	r4, r1, r3
 80015f4:	42a1      	cmp	r1, r4
 80015f6:	4189      	sbcs	r1, r1
 80015f8:	4643      	mov	r3, r8
 80015fa:	4249      	negs	r1, r1
 80015fc:	1a1f      	subs	r7, r3, r0
 80015fe:	4655      	mov	r5, sl
 8001600:	1a7f      	subs	r7, r7, r1
 8001602:	e595      	b.n	8001130 <__aeabi_dadd+0xf4>
 8001604:	077b      	lsls	r3, r7, #29
 8001606:	08c9      	lsrs	r1, r1, #3
 8001608:	430b      	orrs	r3, r1
 800160a:	08f8      	lsrs	r0, r7, #3
 800160c:	e643      	b.n	8001296 <__aeabi_dadd+0x25a>
 800160e:	4644      	mov	r4, r8
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	430c      	orrs	r4, r1
 8001614:	d130      	bne.n	8001678 <__aeabi_dadd+0x63c>
 8001616:	0742      	lsls	r2, r0, #29
 8001618:	4313      	orrs	r3, r2
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	e65c      	b.n	80012d8 <__aeabi_dadd+0x29c>
 800161e:	077b      	lsls	r3, r7, #29
 8001620:	08c9      	lsrs	r1, r1, #3
 8001622:	430b      	orrs	r3, r1
 8001624:	08f8      	lsrs	r0, r7, #3
 8001626:	e639      	b.n	800129c <__aeabi_dadd+0x260>
 8001628:	185c      	adds	r4, r3, r1
 800162a:	429c      	cmp	r4, r3
 800162c:	419b      	sbcs	r3, r3
 800162e:	4440      	add	r0, r8
 8001630:	425b      	negs	r3, r3
 8001632:	18c7      	adds	r7, r0, r3
 8001634:	023b      	lsls	r3, r7, #8
 8001636:	d400      	bmi.n	800163a <__aeabi_dadd+0x5fe>
 8001638:	e625      	b.n	8001286 <__aeabi_dadd+0x24a>
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <__aeabi_dadd+0x674>)
 800163c:	2601      	movs	r6, #1
 800163e:	401f      	ands	r7, r3
 8001640:	e621      	b.n	8001286 <__aeabi_dadd+0x24a>
 8001642:	0004      	movs	r4, r0
 8001644:	3a20      	subs	r2, #32
 8001646:	40d4      	lsrs	r4, r2
 8001648:	4662      	mov	r2, ip
 800164a:	2a20      	cmp	r2, #32
 800164c:	d004      	beq.n	8001658 <__aeabi_dadd+0x61c>
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	4666      	mov	r6, ip
 8001652:	1b92      	subs	r2, r2, r6
 8001654:	4090      	lsls	r0, r2
 8001656:	4303      	orrs	r3, r0
 8001658:	1e5a      	subs	r2, r3, #1
 800165a:	4193      	sbcs	r3, r2
 800165c:	431c      	orrs	r4, r3
 800165e:	e67e      	b.n	800135e <__aeabi_dadd+0x322>
 8001660:	185c      	adds	r4, r3, r1
 8001662:	428c      	cmp	r4, r1
 8001664:	4189      	sbcs	r1, r1
 8001666:	4440      	add	r0, r8
 8001668:	4249      	negs	r1, r1
 800166a:	1847      	adds	r7, r0, r1
 800166c:	e6dd      	b.n	800142a <__aeabi_dadd+0x3ee>
 800166e:	0023      	movs	r3, r4
 8001670:	433b      	orrs	r3, r7
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x63a>
 8001674:	e6ad      	b.n	80013d2 <__aeabi_dadd+0x396>
 8001676:	e606      	b.n	8001286 <__aeabi_dadd+0x24a>
 8001678:	0744      	lsls	r4, r0, #29
 800167a:	4323      	orrs	r3, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	08c0      	lsrs	r0, r0, #3
 8001680:	0324      	lsls	r4, r4, #12
 8001682:	4220      	tst	r0, r4
 8001684:	d008      	beq.n	8001698 <__aeabi_dadd+0x65c>
 8001686:	4642      	mov	r2, r8
 8001688:	08d6      	lsrs	r6, r2, #3
 800168a:	4226      	tst	r6, r4
 800168c:	d104      	bne.n	8001698 <__aeabi_dadd+0x65c>
 800168e:	4655      	mov	r5, sl
 8001690:	0030      	movs	r0, r6
 8001692:	08cb      	lsrs	r3, r1, #3
 8001694:	0751      	lsls	r1, r2, #29
 8001696:	430b      	orrs	r3, r1
 8001698:	0f5a      	lsrs	r2, r3, #29
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	0752      	lsls	r2, r2, #29
 80016a0:	4313      	orrs	r3, r2
 80016a2:	e619      	b.n	80012d8 <__aeabi_dadd+0x29c>
 80016a4:	2300      	movs	r3, #0
 80016a6:	4a01      	ldr	r2, [pc, #4]	; (80016ac <__aeabi_dadd+0x670>)
 80016a8:	001f      	movs	r7, r3
 80016aa:	e55e      	b.n	800116a <__aeabi_dadd+0x12e>
 80016ac:	000007ff 	.word	0x000007ff
 80016b0:	ff7fffff 	.word	0xff7fffff

080016b4 <__aeabi_ddiv>:
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	4657      	mov	r7, sl
 80016b8:	464e      	mov	r6, r9
 80016ba:	4645      	mov	r5, r8
 80016bc:	46de      	mov	lr, fp
 80016be:	b5e0      	push	{r5, r6, r7, lr}
 80016c0:	4681      	mov	r9, r0
 80016c2:	0005      	movs	r5, r0
 80016c4:	030c      	lsls	r4, r1, #12
 80016c6:	0048      	lsls	r0, r1, #1
 80016c8:	4692      	mov	sl, r2
 80016ca:	001f      	movs	r7, r3
 80016cc:	b085      	sub	sp, #20
 80016ce:	0b24      	lsrs	r4, r4, #12
 80016d0:	0d40      	lsrs	r0, r0, #21
 80016d2:	0fce      	lsrs	r6, r1, #31
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d100      	bne.n	80016da <__aeabi_ddiv+0x26>
 80016d8:	e156      	b.n	8001988 <__aeabi_ddiv+0x2d4>
 80016da:	4bd4      	ldr	r3, [pc, #848]	; (8001a2c <__aeabi_ddiv+0x378>)
 80016dc:	4298      	cmp	r0, r3
 80016de:	d100      	bne.n	80016e2 <__aeabi_ddiv+0x2e>
 80016e0:	e172      	b.n	80019c8 <__aeabi_ddiv+0x314>
 80016e2:	0f6b      	lsrs	r3, r5, #29
 80016e4:	00e4      	lsls	r4, r4, #3
 80016e6:	431c      	orrs	r4, r3
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	4323      	orrs	r3, r4
 80016ee:	4698      	mov	r8, r3
 80016f0:	4bcf      	ldr	r3, [pc, #828]	; (8001a30 <__aeabi_ddiv+0x37c>)
 80016f2:	00ed      	lsls	r5, r5, #3
 80016f4:	469b      	mov	fp, r3
 80016f6:	2300      	movs	r3, #0
 80016f8:	4699      	mov	r9, r3
 80016fa:	4483      	add	fp, r0
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	033c      	lsls	r4, r7, #12
 8001700:	007b      	lsls	r3, r7, #1
 8001702:	4650      	mov	r0, sl
 8001704:	0b24      	lsrs	r4, r4, #12
 8001706:	0d5b      	lsrs	r3, r3, #21
 8001708:	0fff      	lsrs	r7, r7, #31
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <__aeabi_ddiv+0x5c>
 800170e:	e11f      	b.n	8001950 <__aeabi_ddiv+0x29c>
 8001710:	4ac6      	ldr	r2, [pc, #792]	; (8001a2c <__aeabi_ddiv+0x378>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0x64>
 8001716:	e162      	b.n	80019de <__aeabi_ddiv+0x32a>
 8001718:	49c5      	ldr	r1, [pc, #788]	; (8001a30 <__aeabi_ddiv+0x37c>)
 800171a:	0f42      	lsrs	r2, r0, #29
 800171c:	468c      	mov	ip, r1
 800171e:	00e4      	lsls	r4, r4, #3
 8001720:	4659      	mov	r1, fp
 8001722:	4314      	orrs	r4, r2
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	4463      	add	r3, ip
 8001728:	0412      	lsls	r2, r2, #16
 800172a:	1acb      	subs	r3, r1, r3
 800172c:	4314      	orrs	r4, r2
 800172e:	469b      	mov	fp, r3
 8001730:	00c2      	lsls	r2, r0, #3
 8001732:	2000      	movs	r0, #0
 8001734:	0033      	movs	r3, r6
 8001736:	407b      	eors	r3, r7
 8001738:	469a      	mov	sl, r3
 800173a:	464b      	mov	r3, r9
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d827      	bhi.n	8001790 <__aeabi_ddiv+0xdc>
 8001740:	49bc      	ldr	r1, [pc, #752]	; (8001a34 <__aeabi_ddiv+0x380>)
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	58cb      	ldr	r3, [r1, r3]
 8001746:	469f      	mov	pc, r3
 8001748:	46b2      	mov	sl, r6
 800174a:	9b00      	ldr	r3, [sp, #0]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d016      	beq.n	800177e <__aeabi_ddiv+0xca>
 8001750:	2b03      	cmp	r3, #3
 8001752:	d100      	bne.n	8001756 <__aeabi_ddiv+0xa2>
 8001754:	e28e      	b.n	8001c74 <__aeabi_ddiv+0x5c0>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d000      	beq.n	800175c <__aeabi_ddiv+0xa8>
 800175a:	e0d9      	b.n	8001910 <__aeabi_ddiv+0x25c>
 800175c:	2300      	movs	r3, #0
 800175e:	2400      	movs	r4, #0
 8001760:	2500      	movs	r5, #0
 8001762:	4652      	mov	r2, sl
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	4323      	orrs	r3, r4
 8001768:	07d2      	lsls	r2, r2, #31
 800176a:	4313      	orrs	r3, r2
 800176c:	0028      	movs	r0, r5
 800176e:	0019      	movs	r1, r3
 8001770:	b005      	add	sp, #20
 8001772:	bcf0      	pop	{r4, r5, r6, r7}
 8001774:	46bb      	mov	fp, r7
 8001776:	46b2      	mov	sl, r6
 8001778:	46a9      	mov	r9, r5
 800177a:	46a0      	mov	r8, r4
 800177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177e:	2400      	movs	r4, #0
 8001780:	2500      	movs	r5, #0
 8001782:	4baa      	ldr	r3, [pc, #680]	; (8001a2c <__aeabi_ddiv+0x378>)
 8001784:	e7ed      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001786:	46ba      	mov	sl, r7
 8001788:	46a0      	mov	r8, r4
 800178a:	0015      	movs	r5, r2
 800178c:	9000      	str	r0, [sp, #0]
 800178e:	e7dc      	b.n	800174a <__aeabi_ddiv+0x96>
 8001790:	4544      	cmp	r4, r8
 8001792:	d200      	bcs.n	8001796 <__aeabi_ddiv+0xe2>
 8001794:	e1c7      	b.n	8001b26 <__aeabi_ddiv+0x472>
 8001796:	d100      	bne.n	800179a <__aeabi_ddiv+0xe6>
 8001798:	e1c2      	b.n	8001b20 <__aeabi_ddiv+0x46c>
 800179a:	2301      	movs	r3, #1
 800179c:	425b      	negs	r3, r3
 800179e:	469c      	mov	ip, r3
 80017a0:	002e      	movs	r6, r5
 80017a2:	4640      	mov	r0, r8
 80017a4:	2500      	movs	r5, #0
 80017a6:	44e3      	add	fp, ip
 80017a8:	0223      	lsls	r3, r4, #8
 80017aa:	0e14      	lsrs	r4, r2, #24
 80017ac:	431c      	orrs	r4, r3
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	4699      	mov	r9, r3
 80017b2:	0423      	lsls	r3, r4, #16
 80017b4:	0c1f      	lsrs	r7, r3, #16
 80017b6:	0212      	lsls	r2, r2, #8
 80017b8:	4649      	mov	r1, r9
 80017ba:	9200      	str	r2, [sp, #0]
 80017bc:	9701      	str	r7, [sp, #4]
 80017be:	f7fe fd4d 	bl	800025c <__aeabi_uidivmod>
 80017c2:	0002      	movs	r2, r0
 80017c4:	437a      	muls	r2, r7
 80017c6:	040b      	lsls	r3, r1, #16
 80017c8:	0c31      	lsrs	r1, r6, #16
 80017ca:	4680      	mov	r8, r0
 80017cc:	4319      	orrs	r1, r3
 80017ce:	428a      	cmp	r2, r1
 80017d0:	d907      	bls.n	80017e2 <__aeabi_ddiv+0x12e>
 80017d2:	2301      	movs	r3, #1
 80017d4:	425b      	negs	r3, r3
 80017d6:	469c      	mov	ip, r3
 80017d8:	1909      	adds	r1, r1, r4
 80017da:	44e0      	add	r8, ip
 80017dc:	428c      	cmp	r4, r1
 80017de:	d800      	bhi.n	80017e2 <__aeabi_ddiv+0x12e>
 80017e0:	e207      	b.n	8001bf2 <__aeabi_ddiv+0x53e>
 80017e2:	1a88      	subs	r0, r1, r2
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe fd39 	bl	800025c <__aeabi_uidivmod>
 80017ea:	0409      	lsls	r1, r1, #16
 80017ec:	468c      	mov	ip, r1
 80017ee:	0431      	lsls	r1, r6, #16
 80017f0:	4666      	mov	r6, ip
 80017f2:	9a01      	ldr	r2, [sp, #4]
 80017f4:	0c09      	lsrs	r1, r1, #16
 80017f6:	4342      	muls	r2, r0
 80017f8:	0003      	movs	r3, r0
 80017fa:	4331      	orrs	r1, r6
 80017fc:	428a      	cmp	r2, r1
 80017fe:	d904      	bls.n	800180a <__aeabi_ddiv+0x156>
 8001800:	1909      	adds	r1, r1, r4
 8001802:	3b01      	subs	r3, #1
 8001804:	428c      	cmp	r4, r1
 8001806:	d800      	bhi.n	800180a <__aeabi_ddiv+0x156>
 8001808:	e1ed      	b.n	8001be6 <__aeabi_ddiv+0x532>
 800180a:	1a88      	subs	r0, r1, r2
 800180c:	4642      	mov	r2, r8
 800180e:	0412      	lsls	r2, r2, #16
 8001810:	431a      	orrs	r2, r3
 8001812:	4690      	mov	r8, r2
 8001814:	4641      	mov	r1, r8
 8001816:	9b00      	ldr	r3, [sp, #0]
 8001818:	040e      	lsls	r6, r1, #16
 800181a:	0c1b      	lsrs	r3, r3, #16
 800181c:	001f      	movs	r7, r3
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	9b00      	ldr	r3, [sp, #0]
 8001822:	0c36      	lsrs	r6, r6, #16
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	0c19      	lsrs	r1, r3, #16
 8001828:	000b      	movs	r3, r1
 800182a:	4373      	muls	r3, r6
 800182c:	0c12      	lsrs	r2, r2, #16
 800182e:	437e      	muls	r6, r7
 8001830:	9103      	str	r1, [sp, #12]
 8001832:	4351      	muls	r1, r2
 8001834:	437a      	muls	r2, r7
 8001836:	0c1f      	lsrs	r7, r3, #16
 8001838:	46bc      	mov	ip, r7
 800183a:	1876      	adds	r6, r6, r1
 800183c:	4466      	add	r6, ip
 800183e:	42b1      	cmp	r1, r6
 8001840:	d903      	bls.n	800184a <__aeabi_ddiv+0x196>
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	468c      	mov	ip, r1
 8001848:	4462      	add	r2, ip
 800184a:	0c31      	lsrs	r1, r6, #16
 800184c:	188a      	adds	r2, r1, r2
 800184e:	0431      	lsls	r1, r6, #16
 8001850:	041e      	lsls	r6, r3, #16
 8001852:	0c36      	lsrs	r6, r6, #16
 8001854:	198e      	adds	r6, r1, r6
 8001856:	4290      	cmp	r0, r2
 8001858:	d302      	bcc.n	8001860 <__aeabi_ddiv+0x1ac>
 800185a:	d112      	bne.n	8001882 <__aeabi_ddiv+0x1ce>
 800185c:	42b5      	cmp	r5, r6
 800185e:	d210      	bcs.n	8001882 <__aeabi_ddiv+0x1ce>
 8001860:	4643      	mov	r3, r8
 8001862:	1e59      	subs	r1, r3, #1
 8001864:	9b00      	ldr	r3, [sp, #0]
 8001866:	469c      	mov	ip, r3
 8001868:	4465      	add	r5, ip
 800186a:	001f      	movs	r7, r3
 800186c:	429d      	cmp	r5, r3
 800186e:	419b      	sbcs	r3, r3
 8001870:	425b      	negs	r3, r3
 8001872:	191b      	adds	r3, r3, r4
 8001874:	18c0      	adds	r0, r0, r3
 8001876:	4284      	cmp	r4, r0
 8001878:	d200      	bcs.n	800187c <__aeabi_ddiv+0x1c8>
 800187a:	e1a0      	b.n	8001bbe <__aeabi_ddiv+0x50a>
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x1cc>
 800187e:	e19b      	b.n	8001bb8 <__aeabi_ddiv+0x504>
 8001880:	4688      	mov	r8, r1
 8001882:	1bae      	subs	r6, r5, r6
 8001884:	42b5      	cmp	r5, r6
 8001886:	41ad      	sbcs	r5, r5
 8001888:	1a80      	subs	r0, r0, r2
 800188a:	426d      	negs	r5, r5
 800188c:	1b40      	subs	r0, r0, r5
 800188e:	4284      	cmp	r4, r0
 8001890:	d100      	bne.n	8001894 <__aeabi_ddiv+0x1e0>
 8001892:	e1d5      	b.n	8001c40 <__aeabi_ddiv+0x58c>
 8001894:	4649      	mov	r1, r9
 8001896:	f7fe fce1 	bl	800025c <__aeabi_uidivmod>
 800189a:	9a01      	ldr	r2, [sp, #4]
 800189c:	040b      	lsls	r3, r1, #16
 800189e:	4342      	muls	r2, r0
 80018a0:	0c31      	lsrs	r1, r6, #16
 80018a2:	0005      	movs	r5, r0
 80018a4:	4319      	orrs	r1, r3
 80018a6:	428a      	cmp	r2, r1
 80018a8:	d900      	bls.n	80018ac <__aeabi_ddiv+0x1f8>
 80018aa:	e16c      	b.n	8001b86 <__aeabi_ddiv+0x4d2>
 80018ac:	1a88      	subs	r0, r1, r2
 80018ae:	4649      	mov	r1, r9
 80018b0:	f7fe fcd4 	bl	800025c <__aeabi_uidivmod>
 80018b4:	9a01      	ldr	r2, [sp, #4]
 80018b6:	0436      	lsls	r6, r6, #16
 80018b8:	4342      	muls	r2, r0
 80018ba:	0409      	lsls	r1, r1, #16
 80018bc:	0c36      	lsrs	r6, r6, #16
 80018be:	0003      	movs	r3, r0
 80018c0:	430e      	orrs	r6, r1
 80018c2:	42b2      	cmp	r2, r6
 80018c4:	d900      	bls.n	80018c8 <__aeabi_ddiv+0x214>
 80018c6:	e153      	b.n	8001b70 <__aeabi_ddiv+0x4bc>
 80018c8:	9803      	ldr	r0, [sp, #12]
 80018ca:	1ab6      	subs	r6, r6, r2
 80018cc:	0002      	movs	r2, r0
 80018ce:	042d      	lsls	r5, r5, #16
 80018d0:	431d      	orrs	r5, r3
 80018d2:	9f02      	ldr	r7, [sp, #8]
 80018d4:	042b      	lsls	r3, r5, #16
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	435a      	muls	r2, r3
 80018da:	437b      	muls	r3, r7
 80018dc:	469c      	mov	ip, r3
 80018de:	0c29      	lsrs	r1, r5, #16
 80018e0:	4348      	muls	r0, r1
 80018e2:	0c13      	lsrs	r3, r2, #16
 80018e4:	4484      	add	ip, r0
 80018e6:	4463      	add	r3, ip
 80018e8:	4379      	muls	r1, r7
 80018ea:	4298      	cmp	r0, r3
 80018ec:	d903      	bls.n	80018f6 <__aeabi_ddiv+0x242>
 80018ee:	2080      	movs	r0, #128	; 0x80
 80018f0:	0240      	lsls	r0, r0, #9
 80018f2:	4684      	mov	ip, r0
 80018f4:	4461      	add	r1, ip
 80018f6:	0c18      	lsrs	r0, r3, #16
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	041b      	lsls	r3, r3, #16
 80018fc:	0c12      	lsrs	r2, r2, #16
 80018fe:	1841      	adds	r1, r0, r1
 8001900:	189b      	adds	r3, r3, r2
 8001902:	428e      	cmp	r6, r1
 8001904:	d200      	bcs.n	8001908 <__aeabi_ddiv+0x254>
 8001906:	e0ff      	b.n	8001b08 <__aeabi_ddiv+0x454>
 8001908:	d100      	bne.n	800190c <__aeabi_ddiv+0x258>
 800190a:	e0fa      	b.n	8001b02 <__aeabi_ddiv+0x44e>
 800190c:	2301      	movs	r3, #1
 800190e:	431d      	orrs	r5, r3
 8001910:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <__aeabi_ddiv+0x384>)
 8001912:	445a      	add	r2, fp
 8001914:	2a00      	cmp	r2, #0
 8001916:	dc00      	bgt.n	800191a <__aeabi_ddiv+0x266>
 8001918:	e0aa      	b.n	8001a70 <__aeabi_ddiv+0x3bc>
 800191a:	076b      	lsls	r3, r5, #29
 800191c:	d000      	beq.n	8001920 <__aeabi_ddiv+0x26c>
 800191e:	e13d      	b.n	8001b9c <__aeabi_ddiv+0x4e8>
 8001920:	08ed      	lsrs	r5, r5, #3
 8001922:	4643      	mov	r3, r8
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	d506      	bpl.n	8001936 <__aeabi_ddiv+0x282>
 8001928:	4642      	mov	r2, r8
 800192a:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <__aeabi_ddiv+0x388>)
 800192c:	401a      	ands	r2, r3
 800192e:	4690      	mov	r8, r2
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	00d2      	lsls	r2, r2, #3
 8001934:	445a      	add	r2, fp
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <__aeabi_ddiv+0x38c>)
 8001938:	429a      	cmp	r2, r3
 800193a:	dd00      	ble.n	800193e <__aeabi_ddiv+0x28a>
 800193c:	e71f      	b.n	800177e <__aeabi_ddiv+0xca>
 800193e:	4643      	mov	r3, r8
 8001940:	075b      	lsls	r3, r3, #29
 8001942:	431d      	orrs	r5, r3
 8001944:	4643      	mov	r3, r8
 8001946:	0552      	lsls	r2, r2, #21
 8001948:	025c      	lsls	r4, r3, #9
 800194a:	0b24      	lsrs	r4, r4, #12
 800194c:	0d53      	lsrs	r3, r2, #21
 800194e:	e708      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001950:	4652      	mov	r2, sl
 8001952:	4322      	orrs	r2, r4
 8001954:	d100      	bne.n	8001958 <__aeabi_ddiv+0x2a4>
 8001956:	e07b      	b.n	8001a50 <__aeabi_ddiv+0x39c>
 8001958:	2c00      	cmp	r4, #0
 800195a:	d100      	bne.n	800195e <__aeabi_ddiv+0x2aa>
 800195c:	e0fa      	b.n	8001b54 <__aeabi_ddiv+0x4a0>
 800195e:	0020      	movs	r0, r4
 8001960:	f001 fa22 	bl	8002da8 <__clzsi2>
 8001964:	0002      	movs	r2, r0
 8001966:	3a0b      	subs	r2, #11
 8001968:	231d      	movs	r3, #29
 800196a:	0001      	movs	r1, r0
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	3908      	subs	r1, #8
 8001972:	40da      	lsrs	r2, r3
 8001974:	408c      	lsls	r4, r1
 8001976:	4314      	orrs	r4, r2
 8001978:	4652      	mov	r2, sl
 800197a:	408a      	lsls	r2, r1
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <__aeabi_ddiv+0x390>)
 800197e:	4458      	add	r0, fp
 8001980:	469b      	mov	fp, r3
 8001982:	4483      	add	fp, r0
 8001984:	2000      	movs	r0, #0
 8001986:	e6d5      	b.n	8001734 <__aeabi_ddiv+0x80>
 8001988:	464b      	mov	r3, r9
 800198a:	4323      	orrs	r3, r4
 800198c:	4698      	mov	r8, r3
 800198e:	d044      	beq.n	8001a1a <__aeabi_ddiv+0x366>
 8001990:	2c00      	cmp	r4, #0
 8001992:	d100      	bne.n	8001996 <__aeabi_ddiv+0x2e2>
 8001994:	e0ce      	b.n	8001b34 <__aeabi_ddiv+0x480>
 8001996:	0020      	movs	r0, r4
 8001998:	f001 fa06 	bl	8002da8 <__clzsi2>
 800199c:	0001      	movs	r1, r0
 800199e:	0002      	movs	r2, r0
 80019a0:	390b      	subs	r1, #11
 80019a2:	231d      	movs	r3, #29
 80019a4:	1a5b      	subs	r3, r3, r1
 80019a6:	4649      	mov	r1, r9
 80019a8:	0010      	movs	r0, r2
 80019aa:	40d9      	lsrs	r1, r3
 80019ac:	3808      	subs	r0, #8
 80019ae:	4084      	lsls	r4, r0
 80019b0:	000b      	movs	r3, r1
 80019b2:	464d      	mov	r5, r9
 80019b4:	4323      	orrs	r3, r4
 80019b6:	4698      	mov	r8, r3
 80019b8:	4085      	lsls	r5, r0
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <__aeabi_ddiv+0x394>)
 80019bc:	1a83      	subs	r3, r0, r2
 80019be:	469b      	mov	fp, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	4699      	mov	r9, r3
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	e69a      	b.n	80016fe <__aeabi_ddiv+0x4a>
 80019c8:	464b      	mov	r3, r9
 80019ca:	4323      	orrs	r3, r4
 80019cc:	4698      	mov	r8, r3
 80019ce:	d11d      	bne.n	8001a0c <__aeabi_ddiv+0x358>
 80019d0:	2308      	movs	r3, #8
 80019d2:	4699      	mov	r9, r3
 80019d4:	3b06      	subs	r3, #6
 80019d6:	2500      	movs	r5, #0
 80019d8:	4683      	mov	fp, r0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e68f      	b.n	80016fe <__aeabi_ddiv+0x4a>
 80019de:	4652      	mov	r2, sl
 80019e0:	4322      	orrs	r2, r4
 80019e2:	d109      	bne.n	80019f8 <__aeabi_ddiv+0x344>
 80019e4:	2302      	movs	r3, #2
 80019e6:	4649      	mov	r1, r9
 80019e8:	4319      	orrs	r1, r3
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <__aeabi_ddiv+0x398>)
 80019ec:	4689      	mov	r9, r1
 80019ee:	469c      	mov	ip, r3
 80019f0:	2400      	movs	r4, #0
 80019f2:	2002      	movs	r0, #2
 80019f4:	44e3      	add	fp, ip
 80019f6:	e69d      	b.n	8001734 <__aeabi_ddiv+0x80>
 80019f8:	2303      	movs	r3, #3
 80019fa:	464a      	mov	r2, r9
 80019fc:	431a      	orrs	r2, r3
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <__aeabi_ddiv+0x398>)
 8001a00:	4691      	mov	r9, r2
 8001a02:	469c      	mov	ip, r3
 8001a04:	4652      	mov	r2, sl
 8001a06:	2003      	movs	r0, #3
 8001a08:	44e3      	add	fp, ip
 8001a0a:	e693      	b.n	8001734 <__aeabi_ddiv+0x80>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	4699      	mov	r9, r3
 8001a10:	3b09      	subs	r3, #9
 8001a12:	46a0      	mov	r8, r4
 8001a14:	4683      	mov	fp, r0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	e671      	b.n	80016fe <__aeabi_ddiv+0x4a>
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	2300      	movs	r3, #0
 8001a20:	469b      	mov	fp, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	2500      	movs	r5, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	e669      	b.n	80016fe <__aeabi_ddiv+0x4a>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	08019988 	.word	0x08019988
 8001a38:	000003ff 	.word	0x000003ff
 8001a3c:	feffffff 	.word	0xfeffffff
 8001a40:	000007fe 	.word	0x000007fe
 8001a44:	000003f3 	.word	0x000003f3
 8001a48:	fffffc0d 	.word	0xfffffc0d
 8001a4c:	fffff801 	.word	0xfffff801
 8001a50:	4649      	mov	r1, r9
 8001a52:	2301      	movs	r3, #1
 8001a54:	4319      	orrs	r1, r3
 8001a56:	4689      	mov	r9, r1
 8001a58:	2400      	movs	r4, #0
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e66a      	b.n	8001734 <__aeabi_ddiv+0x80>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2480      	movs	r4, #128	; 0x80
 8001a62:	469a      	mov	sl, r3
 8001a64:	2500      	movs	r5, #0
 8001a66:	4b8a      	ldr	r3, [pc, #552]	; (8001c90 <__aeabi_ddiv+0x5dc>)
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	e67a      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001a6c:	2501      	movs	r5, #1
 8001a6e:	426d      	negs	r5, r5
 8001a70:	2301      	movs	r3, #1
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	2b38      	cmp	r3, #56	; 0x38
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_ddiv+0x3c6>
 8001a78:	e670      	b.n	800175c <__aeabi_ddiv+0xa8>
 8001a7a:	2b1f      	cmp	r3, #31
 8001a7c:	dc00      	bgt.n	8001a80 <__aeabi_ddiv+0x3cc>
 8001a7e:	e0bf      	b.n	8001c00 <__aeabi_ddiv+0x54c>
 8001a80:	211f      	movs	r1, #31
 8001a82:	4249      	negs	r1, r1
 8001a84:	1a8a      	subs	r2, r1, r2
 8001a86:	4641      	mov	r1, r8
 8001a88:	40d1      	lsrs	r1, r2
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d004      	beq.n	8001a9a <__aeabi_ddiv+0x3e6>
 8001a90:	4641      	mov	r1, r8
 8001a92:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <__aeabi_ddiv+0x5e0>)
 8001a94:	445b      	add	r3, fp
 8001a96:	4099      	lsls	r1, r3
 8001a98:	430d      	orrs	r5, r1
 8001a9a:	1e6b      	subs	r3, r5, #1
 8001a9c:	419d      	sbcs	r5, r3
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	432a      	orrs	r2, r5
 8001aa2:	001d      	movs	r5, r3
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	4015      	ands	r5, r2
 8001aa8:	4213      	tst	r3, r2
 8001aaa:	d100      	bne.n	8001aae <__aeabi_ddiv+0x3fa>
 8001aac:	e0d4      	b.n	8001c58 <__aeabi_ddiv+0x5a4>
 8001aae:	210f      	movs	r1, #15
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4011      	ands	r1, r2
 8001ab4:	2904      	cmp	r1, #4
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0x406>
 8001ab8:	e0cb      	b.n	8001c52 <__aeabi_ddiv+0x59e>
 8001aba:	1d11      	adds	r1, r2, #4
 8001abc:	4291      	cmp	r1, r2
 8001abe:	4192      	sbcs	r2, r2
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	0219      	lsls	r1, r3, #8
 8001ac8:	d400      	bmi.n	8001acc <__aeabi_ddiv+0x418>
 8001aca:	e0c2      	b.n	8001c52 <__aeabi_ddiv+0x59e>
 8001acc:	2301      	movs	r3, #1
 8001ace:	2400      	movs	r4, #0
 8001ad0:	2500      	movs	r5, #0
 8001ad2:	e646      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	4641      	mov	r1, r8
 8001ad8:	031b      	lsls	r3, r3, #12
 8001ada:	4219      	tst	r1, r3
 8001adc:	d008      	beq.n	8001af0 <__aeabi_ddiv+0x43c>
 8001ade:	421c      	tst	r4, r3
 8001ae0:	d106      	bne.n	8001af0 <__aeabi_ddiv+0x43c>
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	46ba      	mov	sl, r7
 8001ae8:	0015      	movs	r5, r2
 8001aea:	4b69      	ldr	r3, [pc, #420]	; (8001c90 <__aeabi_ddiv+0x5dc>)
 8001aec:	0b24      	lsrs	r4, r4, #12
 8001aee:	e638      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001af0:	2480      	movs	r4, #128	; 0x80
 8001af2:	4643      	mov	r3, r8
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	431c      	orrs	r4, r3
 8001af8:	0324      	lsls	r4, r4, #12
 8001afa:	46b2      	mov	sl, r6
 8001afc:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <__aeabi_ddiv+0x5dc>)
 8001afe:	0b24      	lsrs	r4, r4, #12
 8001b00:	e62f      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_ddiv+0x454>
 8001b06:	e703      	b.n	8001910 <__aeabi_ddiv+0x25c>
 8001b08:	19a6      	adds	r6, r4, r6
 8001b0a:	1e68      	subs	r0, r5, #1
 8001b0c:	42a6      	cmp	r6, r4
 8001b0e:	d200      	bcs.n	8001b12 <__aeabi_ddiv+0x45e>
 8001b10:	e08d      	b.n	8001c2e <__aeabi_ddiv+0x57a>
 8001b12:	428e      	cmp	r6, r1
 8001b14:	d200      	bcs.n	8001b18 <__aeabi_ddiv+0x464>
 8001b16:	e0a3      	b.n	8001c60 <__aeabi_ddiv+0x5ac>
 8001b18:	d100      	bne.n	8001b1c <__aeabi_ddiv+0x468>
 8001b1a:	e0b3      	b.n	8001c84 <__aeabi_ddiv+0x5d0>
 8001b1c:	0005      	movs	r5, r0
 8001b1e:	e6f5      	b.n	800190c <__aeabi_ddiv+0x258>
 8001b20:	42aa      	cmp	r2, r5
 8001b22:	d900      	bls.n	8001b26 <__aeabi_ddiv+0x472>
 8001b24:	e639      	b.n	800179a <__aeabi_ddiv+0xe6>
 8001b26:	4643      	mov	r3, r8
 8001b28:	07de      	lsls	r6, r3, #31
 8001b2a:	0858      	lsrs	r0, r3, #1
 8001b2c:	086b      	lsrs	r3, r5, #1
 8001b2e:	431e      	orrs	r6, r3
 8001b30:	07ed      	lsls	r5, r5, #31
 8001b32:	e639      	b.n	80017a8 <__aeabi_ddiv+0xf4>
 8001b34:	4648      	mov	r0, r9
 8001b36:	f001 f937 	bl	8002da8 <__clzsi2>
 8001b3a:	0001      	movs	r1, r0
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	3115      	adds	r1, #21
 8001b40:	3220      	adds	r2, #32
 8001b42:	291c      	cmp	r1, #28
 8001b44:	dc00      	bgt.n	8001b48 <__aeabi_ddiv+0x494>
 8001b46:	e72c      	b.n	80019a2 <__aeabi_ddiv+0x2ee>
 8001b48:	464b      	mov	r3, r9
 8001b4a:	3808      	subs	r0, #8
 8001b4c:	4083      	lsls	r3, r0
 8001b4e:	2500      	movs	r5, #0
 8001b50:	4698      	mov	r8, r3
 8001b52:	e732      	b.n	80019ba <__aeabi_ddiv+0x306>
 8001b54:	f001 f928 	bl	8002da8 <__clzsi2>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	3215      	adds	r2, #21
 8001b5e:	3020      	adds	r0, #32
 8001b60:	2a1c      	cmp	r2, #28
 8001b62:	dc00      	bgt.n	8001b66 <__aeabi_ddiv+0x4b2>
 8001b64:	e700      	b.n	8001968 <__aeabi_ddiv+0x2b4>
 8001b66:	4654      	mov	r4, sl
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	409c      	lsls	r4, r3
 8001b6e:	e705      	b.n	800197c <__aeabi_ddiv+0x2c8>
 8001b70:	1936      	adds	r6, r6, r4
 8001b72:	3b01      	subs	r3, #1
 8001b74:	42b4      	cmp	r4, r6
 8001b76:	d900      	bls.n	8001b7a <__aeabi_ddiv+0x4c6>
 8001b78:	e6a6      	b.n	80018c8 <__aeabi_ddiv+0x214>
 8001b7a:	42b2      	cmp	r2, r6
 8001b7c:	d800      	bhi.n	8001b80 <__aeabi_ddiv+0x4cc>
 8001b7e:	e6a3      	b.n	80018c8 <__aeabi_ddiv+0x214>
 8001b80:	1e83      	subs	r3, r0, #2
 8001b82:	1936      	adds	r6, r6, r4
 8001b84:	e6a0      	b.n	80018c8 <__aeabi_ddiv+0x214>
 8001b86:	1909      	adds	r1, r1, r4
 8001b88:	3d01      	subs	r5, #1
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d900      	bls.n	8001b90 <__aeabi_ddiv+0x4dc>
 8001b8e:	e68d      	b.n	80018ac <__aeabi_ddiv+0x1f8>
 8001b90:	428a      	cmp	r2, r1
 8001b92:	d800      	bhi.n	8001b96 <__aeabi_ddiv+0x4e2>
 8001b94:	e68a      	b.n	80018ac <__aeabi_ddiv+0x1f8>
 8001b96:	1e85      	subs	r5, r0, #2
 8001b98:	1909      	adds	r1, r1, r4
 8001b9a:	e687      	b.n	80018ac <__aeabi_ddiv+0x1f8>
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	402b      	ands	r3, r5
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_ddiv+0x4f2>
 8001ba4:	e6bc      	b.n	8001920 <__aeabi_ddiv+0x26c>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	425b      	negs	r3, r3
 8001baa:	42ab      	cmp	r3, r5
 8001bac:	419b      	sbcs	r3, r3
 8001bae:	3504      	adds	r5, #4
 8001bb0:	425b      	negs	r3, r3
 8001bb2:	08ed      	lsrs	r5, r5, #3
 8001bb4:	4498      	add	r8, r3
 8001bb6:	e6b4      	b.n	8001922 <__aeabi_ddiv+0x26e>
 8001bb8:	42af      	cmp	r7, r5
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x50a>
 8001bbc:	e660      	b.n	8001880 <__aeabi_ddiv+0x1cc>
 8001bbe:	4282      	cmp	r2, r0
 8001bc0:	d804      	bhi.n	8001bcc <__aeabi_ddiv+0x518>
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_ddiv+0x512>
 8001bc4:	e65c      	b.n	8001880 <__aeabi_ddiv+0x1cc>
 8001bc6:	42ae      	cmp	r6, r5
 8001bc8:	d800      	bhi.n	8001bcc <__aeabi_ddiv+0x518>
 8001bca:	e659      	b.n	8001880 <__aeabi_ddiv+0x1cc>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	425b      	negs	r3, r3
 8001bd0:	469c      	mov	ip, r3
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	44e0      	add	r8, ip
 8001bd6:	469c      	mov	ip, r3
 8001bd8:	4465      	add	r5, ip
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c0      	adds	r0, r0, r3
 8001be4:	e64d      	b.n	8001882 <__aeabi_ddiv+0x1ce>
 8001be6:	428a      	cmp	r2, r1
 8001be8:	d800      	bhi.n	8001bec <__aeabi_ddiv+0x538>
 8001bea:	e60e      	b.n	800180a <__aeabi_ddiv+0x156>
 8001bec:	1e83      	subs	r3, r0, #2
 8001bee:	1909      	adds	r1, r1, r4
 8001bf0:	e60b      	b.n	800180a <__aeabi_ddiv+0x156>
 8001bf2:	428a      	cmp	r2, r1
 8001bf4:	d800      	bhi.n	8001bf8 <__aeabi_ddiv+0x544>
 8001bf6:	e5f4      	b.n	80017e2 <__aeabi_ddiv+0x12e>
 8001bf8:	1e83      	subs	r3, r0, #2
 8001bfa:	4698      	mov	r8, r3
 8001bfc:	1909      	adds	r1, r1, r4
 8001bfe:	e5f0      	b.n	80017e2 <__aeabi_ddiv+0x12e>
 8001c00:	4925      	ldr	r1, [pc, #148]	; (8001c98 <__aeabi_ddiv+0x5e4>)
 8001c02:	0028      	movs	r0, r5
 8001c04:	4459      	add	r1, fp
 8001c06:	408d      	lsls	r5, r1
 8001c08:	4642      	mov	r2, r8
 8001c0a:	408a      	lsls	r2, r1
 8001c0c:	1e69      	subs	r1, r5, #1
 8001c0e:	418d      	sbcs	r5, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	40d8      	lsrs	r0, r3
 8001c14:	40d9      	lsrs	r1, r3
 8001c16:	4302      	orrs	r2, r0
 8001c18:	432a      	orrs	r2, r5
 8001c1a:	000b      	movs	r3, r1
 8001c1c:	0751      	lsls	r1, r2, #29
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_ddiv+0x56e>
 8001c20:	e751      	b.n	8001ac6 <__aeabi_ddiv+0x412>
 8001c22:	210f      	movs	r1, #15
 8001c24:	4011      	ands	r1, r2
 8001c26:	2904      	cmp	r1, #4
 8001c28:	d000      	beq.n	8001c2c <__aeabi_ddiv+0x578>
 8001c2a:	e746      	b.n	8001aba <__aeabi_ddiv+0x406>
 8001c2c:	e74b      	b.n	8001ac6 <__aeabi_ddiv+0x412>
 8001c2e:	0005      	movs	r5, r0
 8001c30:	428e      	cmp	r6, r1
 8001c32:	d000      	beq.n	8001c36 <__aeabi_ddiv+0x582>
 8001c34:	e66a      	b.n	800190c <__aeabi_ddiv+0x258>
 8001c36:	9a00      	ldr	r2, [sp, #0]
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_ddiv+0x58a>
 8001c3c:	e666      	b.n	800190c <__aeabi_ddiv+0x258>
 8001c3e:	e667      	b.n	8001910 <__aeabi_ddiv+0x25c>
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <__aeabi_ddiv+0x5e8>)
 8001c42:	445a      	add	r2, fp
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_ddiv+0x596>
 8001c48:	e710      	b.n	8001a6c <__aeabi_ddiv+0x3b8>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	4498      	add	r8, r3
 8001c50:	e667      	b.n	8001922 <__aeabi_ddiv+0x26e>
 8001c52:	075d      	lsls	r5, r3, #29
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	0b1c      	lsrs	r4, r3, #12
 8001c58:	08d2      	lsrs	r2, r2, #3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	4315      	orrs	r5, r2
 8001c5e:	e580      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001c60:	9800      	ldr	r0, [sp, #0]
 8001c62:	3d02      	subs	r5, #2
 8001c64:	0042      	lsls	r2, r0, #1
 8001c66:	4282      	cmp	r2, r0
 8001c68:	41bf      	sbcs	r7, r7
 8001c6a:	427f      	negs	r7, r7
 8001c6c:	193c      	adds	r4, r7, r4
 8001c6e:	1936      	adds	r6, r6, r4
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	e7dd      	b.n	8001c30 <__aeabi_ddiv+0x57c>
 8001c74:	2480      	movs	r4, #128	; 0x80
 8001c76:	4643      	mov	r3, r8
 8001c78:	0324      	lsls	r4, r4, #12
 8001c7a:	431c      	orrs	r4, r3
 8001c7c:	0324      	lsls	r4, r4, #12
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__aeabi_ddiv+0x5dc>)
 8001c80:	0b24      	lsrs	r4, r4, #12
 8001c82:	e56e      	b.n	8001762 <__aeabi_ddiv+0xae>
 8001c84:	9a00      	ldr	r2, [sp, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3ea      	bcc.n	8001c60 <__aeabi_ddiv+0x5ac>
 8001c8a:	0005      	movs	r5, r0
 8001c8c:	e7d3      	b.n	8001c36 <__aeabi_ddiv+0x582>
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000043e 	.word	0x0000043e
 8001c98:	0000041e 	.word	0x0000041e
 8001c9c:	000003ff 	.word	0x000003ff

08001ca0 <__eqdf2>:
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	464e      	mov	r6, r9
 8001ca4:	4645      	mov	r5, r8
 8001ca6:	46de      	mov	lr, fp
 8001ca8:	4657      	mov	r7, sl
 8001caa:	4690      	mov	r8, r2
 8001cac:	b5e0      	push	{r5, r6, r7, lr}
 8001cae:	0017      	movs	r7, r2
 8001cb0:	031a      	lsls	r2, r3, #12
 8001cb2:	0b12      	lsrs	r2, r2, #12
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	4684      	mov	ip, r0
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <__eqdf2+0x80>)
 8001cba:	030e      	lsls	r6, r1, #12
 8001cbc:	004c      	lsls	r4, r1, #1
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	0fdb      	lsrs	r3, r3, #31
 8001cc4:	469b      	mov	fp, r3
 8001cc6:	0b36      	lsrs	r6, r6, #12
 8001cc8:	0d64      	lsrs	r4, r4, #21
 8001cca:	0fc9      	lsrs	r1, r1, #31
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	4284      	cmp	r4, r0
 8001cd0:	d019      	beq.n	8001d06 <__eqdf2+0x66>
 8001cd2:	4282      	cmp	r2, r0
 8001cd4:	d010      	beq.n	8001cf8 <__eqdf2+0x58>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	4294      	cmp	r4, r2
 8001cda:	d10e      	bne.n	8001cfa <__eqdf2+0x5a>
 8001cdc:	454e      	cmp	r6, r9
 8001cde:	d10c      	bne.n	8001cfa <__eqdf2+0x5a>
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	45c4      	cmp	ip, r8
 8001ce4:	d109      	bne.n	8001cfa <__eqdf2+0x5a>
 8001ce6:	4559      	cmp	r1, fp
 8001ce8:	d017      	beq.n	8001d1a <__eqdf2+0x7a>
 8001cea:	2c00      	cmp	r4, #0
 8001cec:	d105      	bne.n	8001cfa <__eqdf2+0x5a>
 8001cee:	0030      	movs	r0, r6
 8001cf0:	4328      	orrs	r0, r5
 8001cf2:	1e43      	subs	r3, r0, #1
 8001cf4:	4198      	sbcs	r0, r3
 8001cf6:	e000      	b.n	8001cfa <__eqdf2+0x5a>
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8001cfc:	46bb      	mov	fp, r7
 8001cfe:	46b2      	mov	sl, r6
 8001d00:	46a9      	mov	r9, r5
 8001d02:	46a0      	mov	r8, r4
 8001d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d06:	0033      	movs	r3, r6
 8001d08:	2001      	movs	r0, #1
 8001d0a:	432b      	orrs	r3, r5
 8001d0c:	d1f5      	bne.n	8001cfa <__eqdf2+0x5a>
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d1f3      	bne.n	8001cfa <__eqdf2+0x5a>
 8001d12:	464b      	mov	r3, r9
 8001d14:	433b      	orrs	r3, r7
 8001d16:	d1f0      	bne.n	8001cfa <__eqdf2+0x5a>
 8001d18:	e7e2      	b.n	8001ce0 <__eqdf2+0x40>
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e7ed      	b.n	8001cfa <__eqdf2+0x5a>
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	000007ff 	.word	0x000007ff

08001d24 <__gedf2>:
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	4647      	mov	r7, r8
 8001d28:	46ce      	mov	lr, r9
 8001d2a:	0004      	movs	r4, r0
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	0016      	movs	r6, r2
 8001d30:	031b      	lsls	r3, r3, #12
 8001d32:	0b1b      	lsrs	r3, r3, #12
 8001d34:	4d2d      	ldr	r5, [pc, #180]	; (8001dec <__gedf2+0xc8>)
 8001d36:	004a      	lsls	r2, r1, #1
 8001d38:	4699      	mov	r9, r3
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	0043      	lsls	r3, r0, #1
 8001d3e:	030f      	lsls	r7, r1, #12
 8001d40:	46a4      	mov	ip, r4
 8001d42:	46b0      	mov	r8, r6
 8001d44:	0b3f      	lsrs	r7, r7, #12
 8001d46:	0d52      	lsrs	r2, r2, #21
 8001d48:	0fc9      	lsrs	r1, r1, #31
 8001d4a:	0d5b      	lsrs	r3, r3, #21
 8001d4c:	0fc0      	lsrs	r0, r0, #31
 8001d4e:	42aa      	cmp	r2, r5
 8001d50:	d021      	beq.n	8001d96 <__gedf2+0x72>
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	d013      	beq.n	8001d7e <__gedf2+0x5a>
 8001d56:	2a00      	cmp	r2, #0
 8001d58:	d122      	bne.n	8001da0 <__gedf2+0x7c>
 8001d5a:	433c      	orrs	r4, r7
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <__gedf2+0x42>
 8001d60:	464d      	mov	r5, r9
 8001d62:	432e      	orrs	r6, r5
 8001d64:	d022      	beq.n	8001dac <__gedf2+0x88>
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	d010      	beq.n	8001d8c <__gedf2+0x68>
 8001d6a:	4281      	cmp	r1, r0
 8001d6c:	d022      	beq.n	8001db4 <__gedf2+0x90>
 8001d6e:	2002      	movs	r0, #2
 8001d70:	3901      	subs	r1, #1
 8001d72:	4008      	ands	r0, r1
 8001d74:	3801      	subs	r0, #1
 8001d76:	bcc0      	pop	{r6, r7}
 8001d78:	46b9      	mov	r9, r7
 8001d7a:	46b0      	mov	r8, r6
 8001d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7e:	464d      	mov	r5, r9
 8001d80:	432e      	orrs	r6, r5
 8001d82:	d129      	bne.n	8001dd8 <__gedf2+0xb4>
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d1f0      	bne.n	8001d6a <__gedf2+0x46>
 8001d88:	433c      	orrs	r4, r7
 8001d8a:	d1ee      	bne.n	8001d6a <__gedf2+0x46>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d1f2      	bne.n	8001d76 <__gedf2+0x52>
 8001d90:	2001      	movs	r0, #1
 8001d92:	4240      	negs	r0, r0
 8001d94:	e7ef      	b.n	8001d76 <__gedf2+0x52>
 8001d96:	003d      	movs	r5, r7
 8001d98:	4325      	orrs	r5, r4
 8001d9a:	d11d      	bne.n	8001dd8 <__gedf2+0xb4>
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d0ee      	beq.n	8001d7e <__gedf2+0x5a>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e2      	bne.n	8001d6a <__gedf2+0x46>
 8001da4:	464c      	mov	r4, r9
 8001da6:	4326      	orrs	r6, r4
 8001da8:	d1df      	bne.n	8001d6a <__gedf2+0x46>
 8001daa:	e7e0      	b.n	8001d6e <__gedf2+0x4a>
 8001dac:	2000      	movs	r0, #0
 8001dae:	2c00      	cmp	r4, #0
 8001db0:	d0e1      	beq.n	8001d76 <__gedf2+0x52>
 8001db2:	e7dc      	b.n	8001d6e <__gedf2+0x4a>
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dc0a      	bgt.n	8001dce <__gedf2+0xaa>
 8001db8:	dbe8      	blt.n	8001d8c <__gedf2+0x68>
 8001dba:	454f      	cmp	r7, r9
 8001dbc:	d8d7      	bhi.n	8001d6e <__gedf2+0x4a>
 8001dbe:	d00e      	beq.n	8001dde <__gedf2+0xba>
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	454f      	cmp	r7, r9
 8001dc4:	d2d7      	bcs.n	8001d76 <__gedf2+0x52>
 8001dc6:	2900      	cmp	r1, #0
 8001dc8:	d0e2      	beq.n	8001d90 <__gedf2+0x6c>
 8001dca:	0008      	movs	r0, r1
 8001dcc:	e7d3      	b.n	8001d76 <__gedf2+0x52>
 8001dce:	4243      	negs	r3, r0
 8001dd0:	4158      	adcs	r0, r3
 8001dd2:	0040      	lsls	r0, r0, #1
 8001dd4:	3801      	subs	r0, #1
 8001dd6:	e7ce      	b.n	8001d76 <__gedf2+0x52>
 8001dd8:	2002      	movs	r0, #2
 8001dda:	4240      	negs	r0, r0
 8001ddc:	e7cb      	b.n	8001d76 <__gedf2+0x52>
 8001dde:	45c4      	cmp	ip, r8
 8001de0:	d8c5      	bhi.n	8001d6e <__gedf2+0x4a>
 8001de2:	2000      	movs	r0, #0
 8001de4:	45c4      	cmp	ip, r8
 8001de6:	d2c6      	bcs.n	8001d76 <__gedf2+0x52>
 8001de8:	e7ed      	b.n	8001dc6 <__gedf2+0xa2>
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	000007ff 	.word	0x000007ff

08001df0 <__ledf2>:
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	4647      	mov	r7, r8
 8001df4:	46ce      	mov	lr, r9
 8001df6:	0004      	movs	r4, r0
 8001df8:	0018      	movs	r0, r3
 8001dfa:	0016      	movs	r6, r2
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	0b1b      	lsrs	r3, r3, #12
 8001e00:	4d2c      	ldr	r5, [pc, #176]	; (8001eb4 <__ledf2+0xc4>)
 8001e02:	004a      	lsls	r2, r1, #1
 8001e04:	4699      	mov	r9, r3
 8001e06:	b580      	push	{r7, lr}
 8001e08:	0043      	lsls	r3, r0, #1
 8001e0a:	030f      	lsls	r7, r1, #12
 8001e0c:	46a4      	mov	ip, r4
 8001e0e:	46b0      	mov	r8, r6
 8001e10:	0b3f      	lsrs	r7, r7, #12
 8001e12:	0d52      	lsrs	r2, r2, #21
 8001e14:	0fc9      	lsrs	r1, r1, #31
 8001e16:	0d5b      	lsrs	r3, r3, #21
 8001e18:	0fc0      	lsrs	r0, r0, #31
 8001e1a:	42aa      	cmp	r2, r5
 8001e1c:	d00d      	beq.n	8001e3a <__ledf2+0x4a>
 8001e1e:	42ab      	cmp	r3, r5
 8001e20:	d010      	beq.n	8001e44 <__ledf2+0x54>
 8001e22:	2a00      	cmp	r2, #0
 8001e24:	d127      	bne.n	8001e76 <__ledf2+0x86>
 8001e26:	433c      	orrs	r4, r7
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <__ledf2+0x60>
 8001e2c:	464d      	mov	r5, r9
 8001e2e:	432e      	orrs	r6, r5
 8001e30:	d10e      	bne.n	8001e50 <__ledf2+0x60>
 8001e32:	2000      	movs	r0, #0
 8001e34:	2c00      	cmp	r4, #0
 8001e36:	d015      	beq.n	8001e64 <__ledf2+0x74>
 8001e38:	e00e      	b.n	8001e58 <__ledf2+0x68>
 8001e3a:	003d      	movs	r5, r7
 8001e3c:	4325      	orrs	r5, r4
 8001e3e:	d110      	bne.n	8001e62 <__ledf2+0x72>
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d118      	bne.n	8001e76 <__ledf2+0x86>
 8001e44:	464d      	mov	r5, r9
 8001e46:	432e      	orrs	r6, r5
 8001e48:	d10b      	bne.n	8001e62 <__ledf2+0x72>
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d102      	bne.n	8001e54 <__ledf2+0x64>
 8001e4e:	433c      	orrs	r4, r7
 8001e50:	2c00      	cmp	r4, #0
 8001e52:	d00b      	beq.n	8001e6c <__ledf2+0x7c>
 8001e54:	4281      	cmp	r1, r0
 8001e56:	d014      	beq.n	8001e82 <__ledf2+0x92>
 8001e58:	2002      	movs	r0, #2
 8001e5a:	3901      	subs	r1, #1
 8001e5c:	4008      	ands	r0, r1
 8001e5e:	3801      	subs	r0, #1
 8001e60:	e000      	b.n	8001e64 <__ledf2+0x74>
 8001e62:	2002      	movs	r0, #2
 8001e64:	bcc0      	pop	{r6, r7}
 8001e66:	46b9      	mov	r9, r7
 8001e68:	46b0      	mov	r8, r6
 8001e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d1f9      	bne.n	8001e64 <__ledf2+0x74>
 8001e70:	2001      	movs	r0, #1
 8001e72:	4240      	negs	r0, r0
 8001e74:	e7f6      	b.n	8001e64 <__ledf2+0x74>
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ec      	bne.n	8001e54 <__ledf2+0x64>
 8001e7a:	464c      	mov	r4, r9
 8001e7c:	4326      	orrs	r6, r4
 8001e7e:	d1e9      	bne.n	8001e54 <__ledf2+0x64>
 8001e80:	e7ea      	b.n	8001e58 <__ledf2+0x68>
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dd04      	ble.n	8001e90 <__ledf2+0xa0>
 8001e86:	4243      	negs	r3, r0
 8001e88:	4158      	adcs	r0, r3
 8001e8a:	0040      	lsls	r0, r0, #1
 8001e8c:	3801      	subs	r0, #1
 8001e8e:	e7e9      	b.n	8001e64 <__ledf2+0x74>
 8001e90:	429a      	cmp	r2, r3
 8001e92:	dbeb      	blt.n	8001e6c <__ledf2+0x7c>
 8001e94:	454f      	cmp	r7, r9
 8001e96:	d8df      	bhi.n	8001e58 <__ledf2+0x68>
 8001e98:	d006      	beq.n	8001ea8 <__ledf2+0xb8>
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	454f      	cmp	r7, r9
 8001e9e:	d2e1      	bcs.n	8001e64 <__ledf2+0x74>
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d0e5      	beq.n	8001e70 <__ledf2+0x80>
 8001ea4:	0008      	movs	r0, r1
 8001ea6:	e7dd      	b.n	8001e64 <__ledf2+0x74>
 8001ea8:	45c4      	cmp	ip, r8
 8001eaa:	d8d5      	bhi.n	8001e58 <__ledf2+0x68>
 8001eac:	2000      	movs	r0, #0
 8001eae:	45c4      	cmp	ip, r8
 8001eb0:	d2d8      	bcs.n	8001e64 <__ledf2+0x74>
 8001eb2:	e7f5      	b.n	8001ea0 <__ledf2+0xb0>
 8001eb4:	000007ff 	.word	0x000007ff

08001eb8 <__aeabi_dmul>:
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	4657      	mov	r7, sl
 8001ebc:	464e      	mov	r6, r9
 8001ebe:	4645      	mov	r5, r8
 8001ec0:	46de      	mov	lr, fp
 8001ec2:	b5e0      	push	{r5, r6, r7, lr}
 8001ec4:	4698      	mov	r8, r3
 8001ec6:	030c      	lsls	r4, r1, #12
 8001ec8:	004b      	lsls	r3, r1, #1
 8001eca:	0006      	movs	r6, r0
 8001ecc:	4692      	mov	sl, r2
 8001ece:	b087      	sub	sp, #28
 8001ed0:	0b24      	lsrs	r4, r4, #12
 8001ed2:	0d5b      	lsrs	r3, r3, #21
 8001ed4:	0fcf      	lsrs	r7, r1, #31
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dmul+0x24>
 8001eda:	e15c      	b.n	8002196 <__aeabi_dmul+0x2de>
 8001edc:	4ad9      	ldr	r2, [pc, #868]	; (8002244 <__aeabi_dmul+0x38c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dmul+0x2c>
 8001ee2:	e175      	b.n	80021d0 <__aeabi_dmul+0x318>
 8001ee4:	0f42      	lsrs	r2, r0, #29
 8001ee6:	00e4      	lsls	r4, r4, #3
 8001ee8:	4314      	orrs	r4, r2
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0412      	lsls	r2, r2, #16
 8001eee:	4314      	orrs	r4, r2
 8001ef0:	4ad5      	ldr	r2, [pc, #852]	; (8002248 <__aeabi_dmul+0x390>)
 8001ef2:	00c5      	lsls	r5, r0, #3
 8001ef4:	4694      	mov	ip, r2
 8001ef6:	4463      	add	r3, ip
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	4699      	mov	r9, r3
 8001efe:	469b      	mov	fp, r3
 8001f00:	4643      	mov	r3, r8
 8001f02:	4642      	mov	r2, r8
 8001f04:	031e      	lsls	r6, r3, #12
 8001f06:	0fd2      	lsrs	r2, r2, #31
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4650      	mov	r0, sl
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	0b36      	lsrs	r6, r6, #12
 8001f10:	0d5b      	lsrs	r3, r3, #21
 8001f12:	d100      	bne.n	8001f16 <__aeabi_dmul+0x5e>
 8001f14:	e120      	b.n	8002158 <__aeabi_dmul+0x2a0>
 8001f16:	4acb      	ldr	r2, [pc, #812]	; (8002244 <__aeabi_dmul+0x38c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dmul+0x66>
 8001f1c:	e162      	b.n	80021e4 <__aeabi_dmul+0x32c>
 8001f1e:	49ca      	ldr	r1, [pc, #808]	; (8002248 <__aeabi_dmul+0x390>)
 8001f20:	0f42      	lsrs	r2, r0, #29
 8001f22:	468c      	mov	ip, r1
 8001f24:	9900      	ldr	r1, [sp, #0]
 8001f26:	4463      	add	r3, ip
 8001f28:	00f6      	lsls	r6, r6, #3
 8001f2a:	468c      	mov	ip, r1
 8001f2c:	4316      	orrs	r6, r2
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	449c      	add	ip, r3
 8001f32:	0412      	lsls	r2, r2, #16
 8001f34:	4663      	mov	r3, ip
 8001f36:	4316      	orrs	r6, r2
 8001f38:	00c2      	lsls	r2, r0, #3
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	9900      	ldr	r1, [sp, #0]
 8001f40:	4643      	mov	r3, r8
 8001f42:	3101      	adds	r1, #1
 8001f44:	468c      	mov	ip, r1
 8001f46:	4649      	mov	r1, r9
 8001f48:	407b      	eors	r3, r7
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	290f      	cmp	r1, #15
 8001f4e:	d826      	bhi.n	8001f9e <__aeabi_dmul+0xe6>
 8001f50:	4bbe      	ldr	r3, [pc, #760]	; (800224c <__aeabi_dmul+0x394>)
 8001f52:	0089      	lsls	r1, r1, #2
 8001f54:	5859      	ldr	r1, [r3, r1]
 8001f56:	468f      	mov	pc, r1
 8001f58:	4643      	mov	r3, r8
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	0034      	movs	r4, r6
 8001f5e:	0015      	movs	r5, r2
 8001f60:	4683      	mov	fp, r0
 8001f62:	465b      	mov	r3, fp
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d016      	beq.n	8001f96 <__aeabi_dmul+0xde>
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dmul+0xb6>
 8001f6c:	e203      	b.n	8002376 <__aeabi_dmul+0x4be>
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dmul+0xbc>
 8001f72:	e0cd      	b.n	8002110 <__aeabi_dmul+0x258>
 8001f74:	2200      	movs	r2, #0
 8001f76:	2400      	movs	r4, #0
 8001f78:	2500      	movs	r5, #0
 8001f7a:	9b01      	ldr	r3, [sp, #4]
 8001f7c:	0512      	lsls	r2, r2, #20
 8001f7e:	4322      	orrs	r2, r4
 8001f80:	07db      	lsls	r3, r3, #31
 8001f82:	431a      	orrs	r2, r3
 8001f84:	0028      	movs	r0, r5
 8001f86:	0011      	movs	r1, r2
 8001f88:	b007      	add	sp, #28
 8001f8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8c:	46bb      	mov	fp, r7
 8001f8e:	46b2      	mov	sl, r6
 8001f90:	46a9      	mov	r9, r5
 8001f92:	46a0      	mov	r8, r4
 8001f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f96:	2400      	movs	r4, #0
 8001f98:	2500      	movs	r5, #0
 8001f9a:	4aaa      	ldr	r2, [pc, #680]	; (8002244 <__aeabi_dmul+0x38c>)
 8001f9c:	e7ed      	b.n	8001f7a <__aeabi_dmul+0xc2>
 8001f9e:	0c28      	lsrs	r0, r5, #16
 8001fa0:	042d      	lsls	r5, r5, #16
 8001fa2:	0c2d      	lsrs	r5, r5, #16
 8001fa4:	002b      	movs	r3, r5
 8001fa6:	0c11      	lsrs	r1, r2, #16
 8001fa8:	0412      	lsls	r2, r2, #16
 8001faa:	0c12      	lsrs	r2, r2, #16
 8001fac:	4353      	muls	r3, r2
 8001fae:	4698      	mov	r8, r3
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	002f      	movs	r7, r5
 8001fb4:	4343      	muls	r3, r0
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	434f      	muls	r7, r1
 8001fba:	444f      	add	r7, r9
 8001fbc:	46bb      	mov	fp, r7
 8001fbe:	4647      	mov	r7, r8
 8001fc0:	000b      	movs	r3, r1
 8001fc2:	0c3f      	lsrs	r7, r7, #16
 8001fc4:	46ba      	mov	sl, r7
 8001fc6:	4343      	muls	r3, r0
 8001fc8:	44da      	add	sl, fp
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	45d1      	cmp	r9, sl
 8001fce:	d904      	bls.n	8001fda <__aeabi_dmul+0x122>
 8001fd0:	2780      	movs	r7, #128	; 0x80
 8001fd2:	027f      	lsls	r7, r7, #9
 8001fd4:	46b9      	mov	r9, r7
 8001fd6:	444b      	add	r3, r9
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	4653      	mov	r3, sl
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	469b      	mov	fp, r3
 8001fe0:	4653      	mov	r3, sl
 8001fe2:	041f      	lsls	r7, r3, #16
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	4698      	mov	r8, r3
 8001fec:	003b      	movs	r3, r7
 8001fee:	4443      	add	r3, r8
 8001ff0:	9304      	str	r3, [sp, #16]
 8001ff2:	0c33      	lsrs	r3, r6, #16
 8001ff4:	0436      	lsls	r6, r6, #16
 8001ff6:	0c36      	lsrs	r6, r6, #16
 8001ff8:	4698      	mov	r8, r3
 8001ffa:	0033      	movs	r3, r6
 8001ffc:	4343      	muls	r3, r0
 8001ffe:	4699      	mov	r9, r3
 8002000:	4643      	mov	r3, r8
 8002002:	4343      	muls	r3, r0
 8002004:	002f      	movs	r7, r5
 8002006:	469a      	mov	sl, r3
 8002008:	4643      	mov	r3, r8
 800200a:	4377      	muls	r7, r6
 800200c:	435d      	muls	r5, r3
 800200e:	0c38      	lsrs	r0, r7, #16
 8002010:	444d      	add	r5, r9
 8002012:	1945      	adds	r5, r0, r5
 8002014:	45a9      	cmp	r9, r5
 8002016:	d903      	bls.n	8002020 <__aeabi_dmul+0x168>
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	4699      	mov	r9, r3
 800201e:	44ca      	add	sl, r9
 8002020:	043f      	lsls	r7, r7, #16
 8002022:	0c28      	lsrs	r0, r5, #16
 8002024:	0c3f      	lsrs	r7, r7, #16
 8002026:	042d      	lsls	r5, r5, #16
 8002028:	19ed      	adds	r5, r5, r7
 800202a:	0c27      	lsrs	r7, r4, #16
 800202c:	0424      	lsls	r4, r4, #16
 800202e:	0c24      	lsrs	r4, r4, #16
 8002030:	0003      	movs	r3, r0
 8002032:	0020      	movs	r0, r4
 8002034:	4350      	muls	r0, r2
 8002036:	437a      	muls	r2, r7
 8002038:	4691      	mov	r9, r2
 800203a:	003a      	movs	r2, r7
 800203c:	4453      	add	r3, sl
 800203e:	9305      	str	r3, [sp, #20]
 8002040:	0c03      	lsrs	r3, r0, #16
 8002042:	469a      	mov	sl, r3
 8002044:	434a      	muls	r2, r1
 8002046:	4361      	muls	r1, r4
 8002048:	4449      	add	r1, r9
 800204a:	4451      	add	r1, sl
 800204c:	44ab      	add	fp, r5
 800204e:	4589      	cmp	r9, r1
 8002050:	d903      	bls.n	800205a <__aeabi_dmul+0x1a2>
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	025b      	lsls	r3, r3, #9
 8002056:	4699      	mov	r9, r3
 8002058:	444a      	add	r2, r9
 800205a:	0400      	lsls	r0, r0, #16
 800205c:	0c0b      	lsrs	r3, r1, #16
 800205e:	0c00      	lsrs	r0, r0, #16
 8002060:	0409      	lsls	r1, r1, #16
 8002062:	1809      	adds	r1, r1, r0
 8002064:	0020      	movs	r0, r4
 8002066:	4699      	mov	r9, r3
 8002068:	4643      	mov	r3, r8
 800206a:	4370      	muls	r0, r6
 800206c:	435c      	muls	r4, r3
 800206e:	437e      	muls	r6, r7
 8002070:	435f      	muls	r7, r3
 8002072:	0c03      	lsrs	r3, r0, #16
 8002074:	4698      	mov	r8, r3
 8002076:	19a4      	adds	r4, r4, r6
 8002078:	4444      	add	r4, r8
 800207a:	444a      	add	r2, r9
 800207c:	9703      	str	r7, [sp, #12]
 800207e:	42a6      	cmp	r6, r4
 8002080:	d904      	bls.n	800208c <__aeabi_dmul+0x1d4>
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	025b      	lsls	r3, r3, #9
 8002086:	4698      	mov	r8, r3
 8002088:	4447      	add	r7, r8
 800208a:	9703      	str	r7, [sp, #12]
 800208c:	0423      	lsls	r3, r4, #16
 800208e:	9e02      	ldr	r6, [sp, #8]
 8002090:	469a      	mov	sl, r3
 8002092:	9b05      	ldr	r3, [sp, #20]
 8002094:	445e      	add	r6, fp
 8002096:	4698      	mov	r8, r3
 8002098:	42ae      	cmp	r6, r5
 800209a:	41ad      	sbcs	r5, r5
 800209c:	1876      	adds	r6, r6, r1
 800209e:	428e      	cmp	r6, r1
 80020a0:	4189      	sbcs	r1, r1
 80020a2:	0400      	lsls	r0, r0, #16
 80020a4:	0c00      	lsrs	r0, r0, #16
 80020a6:	4450      	add	r0, sl
 80020a8:	4440      	add	r0, r8
 80020aa:	426d      	negs	r5, r5
 80020ac:	1947      	adds	r7, r0, r5
 80020ae:	46b8      	mov	r8, r7
 80020b0:	4693      	mov	fp, r2
 80020b2:	4249      	negs	r1, r1
 80020b4:	4689      	mov	r9, r1
 80020b6:	44c3      	add	fp, r8
 80020b8:	44d9      	add	r9, fp
 80020ba:	4298      	cmp	r0, r3
 80020bc:	4180      	sbcs	r0, r0
 80020be:	45a8      	cmp	r8, r5
 80020c0:	41ad      	sbcs	r5, r5
 80020c2:	4593      	cmp	fp, r2
 80020c4:	4192      	sbcs	r2, r2
 80020c6:	4589      	cmp	r9, r1
 80020c8:	4189      	sbcs	r1, r1
 80020ca:	426d      	negs	r5, r5
 80020cc:	4240      	negs	r0, r0
 80020ce:	4328      	orrs	r0, r5
 80020d0:	0c24      	lsrs	r4, r4, #16
 80020d2:	4252      	negs	r2, r2
 80020d4:	4249      	negs	r1, r1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	9b03      	ldr	r3, [sp, #12]
 80020da:	1900      	adds	r0, r0, r4
 80020dc:	1880      	adds	r0, r0, r2
 80020de:	18c7      	adds	r7, r0, r3
 80020e0:	464b      	mov	r3, r9
 80020e2:	0ddc      	lsrs	r4, r3, #23
 80020e4:	9b04      	ldr	r3, [sp, #16]
 80020e6:	0275      	lsls	r5, r6, #9
 80020e8:	431d      	orrs	r5, r3
 80020ea:	1e6a      	subs	r2, r5, #1
 80020ec:	4195      	sbcs	r5, r2
 80020ee:	464b      	mov	r3, r9
 80020f0:	0df6      	lsrs	r6, r6, #23
 80020f2:	027f      	lsls	r7, r7, #9
 80020f4:	4335      	orrs	r5, r6
 80020f6:	025a      	lsls	r2, r3, #9
 80020f8:	433c      	orrs	r4, r7
 80020fa:	4315      	orrs	r5, r2
 80020fc:	01fb      	lsls	r3, r7, #7
 80020fe:	d400      	bmi.n	8002102 <__aeabi_dmul+0x24a>
 8002100:	e11c      	b.n	800233c <__aeabi_dmul+0x484>
 8002102:	2101      	movs	r1, #1
 8002104:	086a      	lsrs	r2, r5, #1
 8002106:	400d      	ands	r5, r1
 8002108:	4315      	orrs	r5, r2
 800210a:	07e2      	lsls	r2, r4, #31
 800210c:	4315      	orrs	r5, r2
 800210e:	0864      	lsrs	r4, r4, #1
 8002110:	494f      	ldr	r1, [pc, #316]	; (8002250 <__aeabi_dmul+0x398>)
 8002112:	4461      	add	r1, ip
 8002114:	2900      	cmp	r1, #0
 8002116:	dc00      	bgt.n	800211a <__aeabi_dmul+0x262>
 8002118:	e0b0      	b.n	800227c <__aeabi_dmul+0x3c4>
 800211a:	076b      	lsls	r3, r5, #29
 800211c:	d009      	beq.n	8002132 <__aeabi_dmul+0x27a>
 800211e:	220f      	movs	r2, #15
 8002120:	402a      	ands	r2, r5
 8002122:	2a04      	cmp	r2, #4
 8002124:	d005      	beq.n	8002132 <__aeabi_dmul+0x27a>
 8002126:	1d2a      	adds	r2, r5, #4
 8002128:	42aa      	cmp	r2, r5
 800212a:	41ad      	sbcs	r5, r5
 800212c:	426d      	negs	r5, r5
 800212e:	1964      	adds	r4, r4, r5
 8002130:	0015      	movs	r5, r2
 8002132:	01e3      	lsls	r3, r4, #7
 8002134:	d504      	bpl.n	8002140 <__aeabi_dmul+0x288>
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	4a46      	ldr	r2, [pc, #280]	; (8002254 <__aeabi_dmul+0x39c>)
 800213a:	00c9      	lsls	r1, r1, #3
 800213c:	4014      	ands	r4, r2
 800213e:	4461      	add	r1, ip
 8002140:	4a45      	ldr	r2, [pc, #276]	; (8002258 <__aeabi_dmul+0x3a0>)
 8002142:	4291      	cmp	r1, r2
 8002144:	dd00      	ble.n	8002148 <__aeabi_dmul+0x290>
 8002146:	e726      	b.n	8001f96 <__aeabi_dmul+0xde>
 8002148:	0762      	lsls	r2, r4, #29
 800214a:	08ed      	lsrs	r5, r5, #3
 800214c:	0264      	lsls	r4, r4, #9
 800214e:	0549      	lsls	r1, r1, #21
 8002150:	4315      	orrs	r5, r2
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	0d4a      	lsrs	r2, r1, #21
 8002156:	e710      	b.n	8001f7a <__aeabi_dmul+0xc2>
 8002158:	4652      	mov	r2, sl
 800215a:	4332      	orrs	r2, r6
 800215c:	d100      	bne.n	8002160 <__aeabi_dmul+0x2a8>
 800215e:	e07f      	b.n	8002260 <__aeabi_dmul+0x3a8>
 8002160:	2e00      	cmp	r6, #0
 8002162:	d100      	bne.n	8002166 <__aeabi_dmul+0x2ae>
 8002164:	e0dc      	b.n	8002320 <__aeabi_dmul+0x468>
 8002166:	0030      	movs	r0, r6
 8002168:	f000 fe1e 	bl	8002da8 <__clzsi2>
 800216c:	0002      	movs	r2, r0
 800216e:	3a0b      	subs	r2, #11
 8002170:	231d      	movs	r3, #29
 8002172:	0001      	movs	r1, r0
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	4652      	mov	r2, sl
 8002178:	3908      	subs	r1, #8
 800217a:	40da      	lsrs	r2, r3
 800217c:	408e      	lsls	r6, r1
 800217e:	4316      	orrs	r6, r2
 8002180:	4652      	mov	r2, sl
 8002182:	408a      	lsls	r2, r1
 8002184:	9b00      	ldr	r3, [sp, #0]
 8002186:	4935      	ldr	r1, [pc, #212]	; (800225c <__aeabi_dmul+0x3a4>)
 8002188:	1a18      	subs	r0, r3, r0
 800218a:	0003      	movs	r3, r0
 800218c:	468c      	mov	ip, r1
 800218e:	4463      	add	r3, ip
 8002190:	2000      	movs	r0, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	e6d3      	b.n	8001f3e <__aeabi_dmul+0x86>
 8002196:	0025      	movs	r5, r4
 8002198:	4305      	orrs	r5, r0
 800219a:	d04a      	beq.n	8002232 <__aeabi_dmul+0x37a>
 800219c:	2c00      	cmp	r4, #0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0x2ea>
 80021a0:	e0b0      	b.n	8002304 <__aeabi_dmul+0x44c>
 80021a2:	0020      	movs	r0, r4
 80021a4:	f000 fe00 	bl	8002da8 <__clzsi2>
 80021a8:	0001      	movs	r1, r0
 80021aa:	0002      	movs	r2, r0
 80021ac:	390b      	subs	r1, #11
 80021ae:	231d      	movs	r3, #29
 80021b0:	0010      	movs	r0, r2
 80021b2:	1a5b      	subs	r3, r3, r1
 80021b4:	0031      	movs	r1, r6
 80021b6:	0035      	movs	r5, r6
 80021b8:	3808      	subs	r0, #8
 80021ba:	4084      	lsls	r4, r0
 80021bc:	40d9      	lsrs	r1, r3
 80021be:	4085      	lsls	r5, r0
 80021c0:	430c      	orrs	r4, r1
 80021c2:	4826      	ldr	r0, [pc, #152]	; (800225c <__aeabi_dmul+0x3a4>)
 80021c4:	1a83      	subs	r3, r0, r2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	4699      	mov	r9, r3
 80021cc:	469b      	mov	fp, r3
 80021ce:	e697      	b.n	8001f00 <__aeabi_dmul+0x48>
 80021d0:	0005      	movs	r5, r0
 80021d2:	4325      	orrs	r5, r4
 80021d4:	d126      	bne.n	8002224 <__aeabi_dmul+0x36c>
 80021d6:	2208      	movs	r2, #8
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2302      	movs	r3, #2
 80021dc:	2400      	movs	r4, #0
 80021de:	4691      	mov	r9, r2
 80021e0:	469b      	mov	fp, r3
 80021e2:	e68d      	b.n	8001f00 <__aeabi_dmul+0x48>
 80021e4:	4652      	mov	r2, sl
 80021e6:	9b00      	ldr	r3, [sp, #0]
 80021e8:	4332      	orrs	r2, r6
 80021ea:	d110      	bne.n	800220e <__aeabi_dmul+0x356>
 80021ec:	4915      	ldr	r1, [pc, #84]	; (8002244 <__aeabi_dmul+0x38c>)
 80021ee:	2600      	movs	r6, #0
 80021f0:	468c      	mov	ip, r1
 80021f2:	4463      	add	r3, ip
 80021f4:	4649      	mov	r1, r9
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2302      	movs	r3, #2
 80021fa:	4319      	orrs	r1, r3
 80021fc:	4689      	mov	r9, r1
 80021fe:	2002      	movs	r0, #2
 8002200:	e69d      	b.n	8001f3e <__aeabi_dmul+0x86>
 8002202:	465b      	mov	r3, fp
 8002204:	9701      	str	r7, [sp, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d000      	beq.n	800220c <__aeabi_dmul+0x354>
 800220a:	e6ad      	b.n	8001f68 <__aeabi_dmul+0xb0>
 800220c:	e6c3      	b.n	8001f96 <__aeabi_dmul+0xde>
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <__aeabi_dmul+0x38c>)
 8002210:	2003      	movs	r0, #3
 8002212:	4694      	mov	ip, r2
 8002214:	4463      	add	r3, ip
 8002216:	464a      	mov	r2, r9
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2303      	movs	r3, #3
 800221c:	431a      	orrs	r2, r3
 800221e:	4691      	mov	r9, r2
 8002220:	4652      	mov	r2, sl
 8002222:	e68c      	b.n	8001f3e <__aeabi_dmul+0x86>
 8002224:	220c      	movs	r2, #12
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2303      	movs	r3, #3
 800222a:	0005      	movs	r5, r0
 800222c:	4691      	mov	r9, r2
 800222e:	469b      	mov	fp, r3
 8002230:	e666      	b.n	8001f00 <__aeabi_dmul+0x48>
 8002232:	2304      	movs	r3, #4
 8002234:	4699      	mov	r9, r3
 8002236:	2300      	movs	r3, #0
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	2400      	movs	r4, #0
 800223e:	469b      	mov	fp, r3
 8002240:	e65e      	b.n	8001f00 <__aeabi_dmul+0x48>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	000007ff 	.word	0x000007ff
 8002248:	fffffc01 	.word	0xfffffc01
 800224c:	080199c8 	.word	0x080199c8
 8002250:	000003ff 	.word	0x000003ff
 8002254:	feffffff 	.word	0xfeffffff
 8002258:	000007fe 	.word	0x000007fe
 800225c:	fffffc0d 	.word	0xfffffc0d
 8002260:	4649      	mov	r1, r9
 8002262:	2301      	movs	r3, #1
 8002264:	4319      	orrs	r1, r3
 8002266:	4689      	mov	r9, r1
 8002268:	2600      	movs	r6, #0
 800226a:	2001      	movs	r0, #1
 800226c:	e667      	b.n	8001f3e <__aeabi_dmul+0x86>
 800226e:	2300      	movs	r3, #0
 8002270:	2480      	movs	r4, #128	; 0x80
 8002272:	2500      	movs	r5, #0
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <__aeabi_dmul+0x4cc>)
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	e67e      	b.n	8001f7a <__aeabi_dmul+0xc2>
 800227c:	2001      	movs	r0, #1
 800227e:	1a40      	subs	r0, r0, r1
 8002280:	2838      	cmp	r0, #56	; 0x38
 8002282:	dd00      	ble.n	8002286 <__aeabi_dmul+0x3ce>
 8002284:	e676      	b.n	8001f74 <__aeabi_dmul+0xbc>
 8002286:	281f      	cmp	r0, #31
 8002288:	dd5b      	ble.n	8002342 <__aeabi_dmul+0x48a>
 800228a:	221f      	movs	r2, #31
 800228c:	0023      	movs	r3, r4
 800228e:	4252      	negs	r2, r2
 8002290:	1a51      	subs	r1, r2, r1
 8002292:	40cb      	lsrs	r3, r1
 8002294:	0019      	movs	r1, r3
 8002296:	2820      	cmp	r0, #32
 8002298:	d003      	beq.n	80022a2 <__aeabi_dmul+0x3ea>
 800229a:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <__aeabi_dmul+0x4d0>)
 800229c:	4462      	add	r2, ip
 800229e:	4094      	lsls	r4, r2
 80022a0:	4325      	orrs	r5, r4
 80022a2:	1e6a      	subs	r2, r5, #1
 80022a4:	4195      	sbcs	r5, r2
 80022a6:	002a      	movs	r2, r5
 80022a8:	430a      	orrs	r2, r1
 80022aa:	2107      	movs	r1, #7
 80022ac:	000d      	movs	r5, r1
 80022ae:	2400      	movs	r4, #0
 80022b0:	4015      	ands	r5, r2
 80022b2:	4211      	tst	r1, r2
 80022b4:	d05b      	beq.n	800236e <__aeabi_dmul+0x4b6>
 80022b6:	210f      	movs	r1, #15
 80022b8:	2400      	movs	r4, #0
 80022ba:	4011      	ands	r1, r2
 80022bc:	2904      	cmp	r1, #4
 80022be:	d053      	beq.n	8002368 <__aeabi_dmul+0x4b0>
 80022c0:	1d11      	adds	r1, r2, #4
 80022c2:	4291      	cmp	r1, r2
 80022c4:	4192      	sbcs	r2, r2
 80022c6:	4252      	negs	r2, r2
 80022c8:	18a4      	adds	r4, r4, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	0223      	lsls	r3, r4, #8
 80022ce:	d54b      	bpl.n	8002368 <__aeabi_dmul+0x4b0>
 80022d0:	2201      	movs	r2, #1
 80022d2:	2400      	movs	r4, #0
 80022d4:	2500      	movs	r5, #0
 80022d6:	e650      	b.n	8001f7a <__aeabi_dmul+0xc2>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	031b      	lsls	r3, r3, #12
 80022dc:	421c      	tst	r4, r3
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x43c>
 80022e0:	421e      	tst	r6, r3
 80022e2:	d107      	bne.n	80022f4 <__aeabi_dmul+0x43c>
 80022e4:	4333      	orrs	r3, r6
 80022e6:	031c      	lsls	r4, r3, #12
 80022e8:	4643      	mov	r3, r8
 80022ea:	0015      	movs	r5, r2
 80022ec:	0b24      	lsrs	r4, r4, #12
 80022ee:	4a25      	ldr	r2, [pc, #148]	; (8002384 <__aeabi_dmul+0x4cc>)
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	e642      	b.n	8001f7a <__aeabi_dmul+0xc2>
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	0312      	lsls	r2, r2, #12
 80022f8:	4314      	orrs	r4, r2
 80022fa:	0324      	lsls	r4, r4, #12
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <__aeabi_dmul+0x4cc>)
 80022fe:	0b24      	lsrs	r4, r4, #12
 8002300:	9701      	str	r7, [sp, #4]
 8002302:	e63a      	b.n	8001f7a <__aeabi_dmul+0xc2>
 8002304:	f000 fd50 	bl	8002da8 <__clzsi2>
 8002308:	0001      	movs	r1, r0
 800230a:	0002      	movs	r2, r0
 800230c:	3115      	adds	r1, #21
 800230e:	3220      	adds	r2, #32
 8002310:	291c      	cmp	r1, #28
 8002312:	dc00      	bgt.n	8002316 <__aeabi_dmul+0x45e>
 8002314:	e74b      	b.n	80021ae <__aeabi_dmul+0x2f6>
 8002316:	0034      	movs	r4, r6
 8002318:	3808      	subs	r0, #8
 800231a:	2500      	movs	r5, #0
 800231c:	4084      	lsls	r4, r0
 800231e:	e750      	b.n	80021c2 <__aeabi_dmul+0x30a>
 8002320:	f000 fd42 	bl	8002da8 <__clzsi2>
 8002324:	0003      	movs	r3, r0
 8002326:	001a      	movs	r2, r3
 8002328:	3215      	adds	r2, #21
 800232a:	3020      	adds	r0, #32
 800232c:	2a1c      	cmp	r2, #28
 800232e:	dc00      	bgt.n	8002332 <__aeabi_dmul+0x47a>
 8002330:	e71e      	b.n	8002170 <__aeabi_dmul+0x2b8>
 8002332:	4656      	mov	r6, sl
 8002334:	3b08      	subs	r3, #8
 8002336:	2200      	movs	r2, #0
 8002338:	409e      	lsls	r6, r3
 800233a:	e723      	b.n	8002184 <__aeabi_dmul+0x2cc>
 800233c:	9b00      	ldr	r3, [sp, #0]
 800233e:	469c      	mov	ip, r3
 8002340:	e6e6      	b.n	8002110 <__aeabi_dmul+0x258>
 8002342:	4912      	ldr	r1, [pc, #72]	; (800238c <__aeabi_dmul+0x4d4>)
 8002344:	0022      	movs	r2, r4
 8002346:	4461      	add	r1, ip
 8002348:	002e      	movs	r6, r5
 800234a:	408d      	lsls	r5, r1
 800234c:	408a      	lsls	r2, r1
 800234e:	40c6      	lsrs	r6, r0
 8002350:	1e69      	subs	r1, r5, #1
 8002352:	418d      	sbcs	r5, r1
 8002354:	4332      	orrs	r2, r6
 8002356:	432a      	orrs	r2, r5
 8002358:	40c4      	lsrs	r4, r0
 800235a:	0753      	lsls	r3, r2, #29
 800235c:	d0b6      	beq.n	80022cc <__aeabi_dmul+0x414>
 800235e:	210f      	movs	r1, #15
 8002360:	4011      	ands	r1, r2
 8002362:	2904      	cmp	r1, #4
 8002364:	d1ac      	bne.n	80022c0 <__aeabi_dmul+0x408>
 8002366:	e7b1      	b.n	80022cc <__aeabi_dmul+0x414>
 8002368:	0765      	lsls	r5, r4, #29
 800236a:	0264      	lsls	r4, r4, #9
 800236c:	0b24      	lsrs	r4, r4, #12
 800236e:	08d2      	lsrs	r2, r2, #3
 8002370:	4315      	orrs	r5, r2
 8002372:	2200      	movs	r2, #0
 8002374:	e601      	b.n	8001f7a <__aeabi_dmul+0xc2>
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	0312      	lsls	r2, r2, #12
 800237a:	4314      	orrs	r4, r2
 800237c:	0324      	lsls	r4, r4, #12
 800237e:	4a01      	ldr	r2, [pc, #4]	; (8002384 <__aeabi_dmul+0x4cc>)
 8002380:	0b24      	lsrs	r4, r4, #12
 8002382:	e5fa      	b.n	8001f7a <__aeabi_dmul+0xc2>
 8002384:	000007ff 	.word	0x000007ff
 8002388:	0000043e 	.word	0x0000043e
 800238c:	0000041e 	.word	0x0000041e

08002390 <__aeabi_dsub>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	4657      	mov	r7, sl
 8002394:	464e      	mov	r6, r9
 8002396:	4645      	mov	r5, r8
 8002398:	46de      	mov	lr, fp
 800239a:	b5e0      	push	{r5, r6, r7, lr}
 800239c:	001e      	movs	r6, r3
 800239e:	0017      	movs	r7, r2
 80023a0:	004a      	lsls	r2, r1, #1
 80023a2:	030b      	lsls	r3, r1, #12
 80023a4:	0d52      	lsrs	r2, r2, #21
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	4690      	mov	r8, r2
 80023aa:	0f42      	lsrs	r2, r0, #29
 80023ac:	431a      	orrs	r2, r3
 80023ae:	0fcd      	lsrs	r5, r1, #31
 80023b0:	4ccd      	ldr	r4, [pc, #820]	; (80026e8 <__aeabi_dsub+0x358>)
 80023b2:	0331      	lsls	r1, r6, #12
 80023b4:	00c3      	lsls	r3, r0, #3
 80023b6:	4694      	mov	ip, r2
 80023b8:	0070      	lsls	r0, r6, #1
 80023ba:	0f7a      	lsrs	r2, r7, #29
 80023bc:	0a49      	lsrs	r1, r1, #9
 80023be:	00ff      	lsls	r7, r7, #3
 80023c0:	469a      	mov	sl, r3
 80023c2:	46b9      	mov	r9, r7
 80023c4:	0d40      	lsrs	r0, r0, #21
 80023c6:	0ff6      	lsrs	r6, r6, #31
 80023c8:	4311      	orrs	r1, r2
 80023ca:	42a0      	cmp	r0, r4
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x40>
 80023ce:	e0b1      	b.n	8002534 <__aeabi_dsub+0x1a4>
 80023d0:	2201      	movs	r2, #1
 80023d2:	4056      	eors	r6, r2
 80023d4:	46b3      	mov	fp, r6
 80023d6:	42b5      	cmp	r5, r6
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x4c>
 80023da:	e088      	b.n	80024ee <__aeabi_dsub+0x15e>
 80023dc:	4642      	mov	r2, r8
 80023de:	1a12      	subs	r2, r2, r0
 80023e0:	2a00      	cmp	r2, #0
 80023e2:	dc00      	bgt.n	80023e6 <__aeabi_dsub+0x56>
 80023e4:	e0ae      	b.n	8002544 <__aeabi_dsub+0x1b4>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x5c>
 80023ea:	e0c1      	b.n	8002570 <__aeabi_dsub+0x1e0>
 80023ec:	48be      	ldr	r0, [pc, #760]	; (80026e8 <__aeabi_dsub+0x358>)
 80023ee:	4580      	cmp	r8, r0
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x64>
 80023f2:	e151      	b.n	8002698 <__aeabi_dsub+0x308>
 80023f4:	2080      	movs	r0, #128	; 0x80
 80023f6:	0400      	lsls	r0, r0, #16
 80023f8:	4301      	orrs	r1, r0
 80023fa:	2a38      	cmp	r2, #56	; 0x38
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dsub+0x70>
 80023fe:	e17b      	b.n	80026f8 <__aeabi_dsub+0x368>
 8002400:	2a1f      	cmp	r2, #31
 8002402:	dd00      	ble.n	8002406 <__aeabi_dsub+0x76>
 8002404:	e1ee      	b.n	80027e4 <__aeabi_dsub+0x454>
 8002406:	2020      	movs	r0, #32
 8002408:	003e      	movs	r6, r7
 800240a:	1a80      	subs	r0, r0, r2
 800240c:	000c      	movs	r4, r1
 800240e:	40d6      	lsrs	r6, r2
 8002410:	40d1      	lsrs	r1, r2
 8002412:	4087      	lsls	r7, r0
 8002414:	4662      	mov	r2, ip
 8002416:	4084      	lsls	r4, r0
 8002418:	1a52      	subs	r2, r2, r1
 800241a:	1e78      	subs	r0, r7, #1
 800241c:	4187      	sbcs	r7, r0
 800241e:	4694      	mov	ip, r2
 8002420:	4334      	orrs	r4, r6
 8002422:	4327      	orrs	r7, r4
 8002424:	1bdc      	subs	r4, r3, r7
 8002426:	42a3      	cmp	r3, r4
 8002428:	419b      	sbcs	r3, r3
 800242a:	4662      	mov	r2, ip
 800242c:	425b      	negs	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4699      	mov	r9, r3
 8002432:	464b      	mov	r3, r9
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	d400      	bmi.n	800243a <__aeabi_dsub+0xaa>
 8002438:	e118      	b.n	800266c <__aeabi_dsub+0x2dc>
 800243a:	464b      	mov	r3, r9
 800243c:	0258      	lsls	r0, r3, #9
 800243e:	0a43      	lsrs	r3, r0, #9
 8002440:	4699      	mov	r9, r3
 8002442:	464b      	mov	r3, r9
 8002444:	2b00      	cmp	r3, #0
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0xba>
 8002448:	e137      	b.n	80026ba <__aeabi_dsub+0x32a>
 800244a:	4648      	mov	r0, r9
 800244c:	f000 fcac 	bl	8002da8 <__clzsi2>
 8002450:	0001      	movs	r1, r0
 8002452:	3908      	subs	r1, #8
 8002454:	2320      	movs	r3, #32
 8002456:	0022      	movs	r2, r4
 8002458:	4648      	mov	r0, r9
 800245a:	1a5b      	subs	r3, r3, r1
 800245c:	40da      	lsrs	r2, r3
 800245e:	4088      	lsls	r0, r1
 8002460:	408c      	lsls	r4, r1
 8002462:	4643      	mov	r3, r8
 8002464:	4310      	orrs	r0, r2
 8002466:	4588      	cmp	r8, r1
 8002468:	dd00      	ble.n	800246c <__aeabi_dsub+0xdc>
 800246a:	e136      	b.n	80026da <__aeabi_dsub+0x34a>
 800246c:	1ac9      	subs	r1, r1, r3
 800246e:	1c4b      	adds	r3, r1, #1
 8002470:	2b1f      	cmp	r3, #31
 8002472:	dd00      	ble.n	8002476 <__aeabi_dsub+0xe6>
 8002474:	e0ea      	b.n	800264c <__aeabi_dsub+0x2bc>
 8002476:	2220      	movs	r2, #32
 8002478:	0026      	movs	r6, r4
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	0001      	movs	r1, r0
 800247e:	4094      	lsls	r4, r2
 8002480:	40de      	lsrs	r6, r3
 8002482:	40d8      	lsrs	r0, r3
 8002484:	2300      	movs	r3, #0
 8002486:	4091      	lsls	r1, r2
 8002488:	1e62      	subs	r2, r4, #1
 800248a:	4194      	sbcs	r4, r2
 800248c:	4681      	mov	r9, r0
 800248e:	4698      	mov	r8, r3
 8002490:	4331      	orrs	r1, r6
 8002492:	430c      	orrs	r4, r1
 8002494:	0763      	lsls	r3, r4, #29
 8002496:	d009      	beq.n	80024ac <__aeabi_dsub+0x11c>
 8002498:	230f      	movs	r3, #15
 800249a:	4023      	ands	r3, r4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d005      	beq.n	80024ac <__aeabi_dsub+0x11c>
 80024a0:	1d23      	adds	r3, r4, #4
 80024a2:	42a3      	cmp	r3, r4
 80024a4:	41a4      	sbcs	r4, r4
 80024a6:	4264      	negs	r4, r4
 80024a8:	44a1      	add	r9, r4
 80024aa:	001c      	movs	r4, r3
 80024ac:	464b      	mov	r3, r9
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	d400      	bmi.n	80024b4 <__aeabi_dsub+0x124>
 80024b2:	e0de      	b.n	8002672 <__aeabi_dsub+0x2e2>
 80024b4:	4641      	mov	r1, r8
 80024b6:	4b8c      	ldr	r3, [pc, #560]	; (80026e8 <__aeabi_dsub+0x358>)
 80024b8:	3101      	adds	r1, #1
 80024ba:	4299      	cmp	r1, r3
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x130>
 80024be:	e0e7      	b.n	8002690 <__aeabi_dsub+0x300>
 80024c0:	464b      	mov	r3, r9
 80024c2:	488a      	ldr	r0, [pc, #552]	; (80026ec <__aeabi_dsub+0x35c>)
 80024c4:	08e4      	lsrs	r4, r4, #3
 80024c6:	4003      	ands	r3, r0
 80024c8:	0018      	movs	r0, r3
 80024ca:	0549      	lsls	r1, r1, #21
 80024cc:	075b      	lsls	r3, r3, #29
 80024ce:	0240      	lsls	r0, r0, #9
 80024d0:	4323      	orrs	r3, r4
 80024d2:	0d4a      	lsrs	r2, r1, #21
 80024d4:	0b04      	lsrs	r4, r0, #12
 80024d6:	0512      	lsls	r2, r2, #20
 80024d8:	07ed      	lsls	r5, r5, #31
 80024da:	4322      	orrs	r2, r4
 80024dc:	432a      	orrs	r2, r5
 80024de:	0018      	movs	r0, r3
 80024e0:	0011      	movs	r1, r2
 80024e2:	bcf0      	pop	{r4, r5, r6, r7}
 80024e4:	46bb      	mov	fp, r7
 80024e6:	46b2      	mov	sl, r6
 80024e8:	46a9      	mov	r9, r5
 80024ea:	46a0      	mov	r8, r4
 80024ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ee:	4642      	mov	r2, r8
 80024f0:	1a12      	subs	r2, r2, r0
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	dd52      	ble.n	800259c <__aeabi_dsub+0x20c>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x16c>
 80024fa:	e09c      	b.n	8002636 <__aeabi_dsub+0x2a6>
 80024fc:	45a0      	cmp	r8, r4
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x172>
 8002500:	e0ca      	b.n	8002698 <__aeabi_dsub+0x308>
 8002502:	2080      	movs	r0, #128	; 0x80
 8002504:	0400      	lsls	r0, r0, #16
 8002506:	4301      	orrs	r1, r0
 8002508:	2a38      	cmp	r2, #56	; 0x38
 800250a:	dd00      	ble.n	800250e <__aeabi_dsub+0x17e>
 800250c:	e149      	b.n	80027a2 <__aeabi_dsub+0x412>
 800250e:	2a1f      	cmp	r2, #31
 8002510:	dc00      	bgt.n	8002514 <__aeabi_dsub+0x184>
 8002512:	e197      	b.n	8002844 <__aeabi_dsub+0x4b4>
 8002514:	0010      	movs	r0, r2
 8002516:	000e      	movs	r6, r1
 8002518:	3820      	subs	r0, #32
 800251a:	40c6      	lsrs	r6, r0
 800251c:	2a20      	cmp	r2, #32
 800251e:	d004      	beq.n	800252a <__aeabi_dsub+0x19a>
 8002520:	2040      	movs	r0, #64	; 0x40
 8002522:	1a82      	subs	r2, r0, r2
 8002524:	4091      	lsls	r1, r2
 8002526:	430f      	orrs	r7, r1
 8002528:	46b9      	mov	r9, r7
 800252a:	464c      	mov	r4, r9
 800252c:	1e62      	subs	r2, r4, #1
 800252e:	4194      	sbcs	r4, r2
 8002530:	4334      	orrs	r4, r6
 8002532:	e13a      	b.n	80027aa <__aeabi_dsub+0x41a>
 8002534:	000a      	movs	r2, r1
 8002536:	433a      	orrs	r2, r7
 8002538:	d028      	beq.n	800258c <__aeabi_dsub+0x1fc>
 800253a:	46b3      	mov	fp, r6
 800253c:	42b5      	cmp	r5, r6
 800253e:	d02b      	beq.n	8002598 <__aeabi_dsub+0x208>
 8002540:	4a6b      	ldr	r2, [pc, #428]	; (80026f0 <__aeabi_dsub+0x360>)
 8002542:	4442      	add	r2, r8
 8002544:	2a00      	cmp	r2, #0
 8002546:	d05d      	beq.n	8002604 <__aeabi_dsub+0x274>
 8002548:	4642      	mov	r2, r8
 800254a:	4644      	mov	r4, r8
 800254c:	1a82      	subs	r2, r0, r2
 800254e:	2c00      	cmp	r4, #0
 8002550:	d000      	beq.n	8002554 <__aeabi_dsub+0x1c4>
 8002552:	e0f5      	b.n	8002740 <__aeabi_dsub+0x3b0>
 8002554:	4665      	mov	r5, ip
 8002556:	431d      	orrs	r5, r3
 8002558:	d100      	bne.n	800255c <__aeabi_dsub+0x1cc>
 800255a:	e19c      	b.n	8002896 <__aeabi_dsub+0x506>
 800255c:	1e55      	subs	r5, r2, #1
 800255e:	2a01      	cmp	r2, #1
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x1d4>
 8002562:	e1fb      	b.n	800295c <__aeabi_dsub+0x5cc>
 8002564:	4c60      	ldr	r4, [pc, #384]	; (80026e8 <__aeabi_dsub+0x358>)
 8002566:	42a2      	cmp	r2, r4
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x1dc>
 800256a:	e1bd      	b.n	80028e8 <__aeabi_dsub+0x558>
 800256c:	002a      	movs	r2, r5
 800256e:	e0f0      	b.n	8002752 <__aeabi_dsub+0x3c2>
 8002570:	0008      	movs	r0, r1
 8002572:	4338      	orrs	r0, r7
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x1e8>
 8002576:	e0c3      	b.n	8002700 <__aeabi_dsub+0x370>
 8002578:	1e50      	subs	r0, r2, #1
 800257a:	2a01      	cmp	r2, #1
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x1f0>
 800257e:	e1a8      	b.n	80028d2 <__aeabi_dsub+0x542>
 8002580:	4c59      	ldr	r4, [pc, #356]	; (80026e8 <__aeabi_dsub+0x358>)
 8002582:	42a2      	cmp	r2, r4
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x1f8>
 8002586:	e087      	b.n	8002698 <__aeabi_dsub+0x308>
 8002588:	0002      	movs	r2, r0
 800258a:	e736      	b.n	80023fa <__aeabi_dsub+0x6a>
 800258c:	2201      	movs	r2, #1
 800258e:	4056      	eors	r6, r2
 8002590:	46b3      	mov	fp, r6
 8002592:	42b5      	cmp	r5, r6
 8002594:	d000      	beq.n	8002598 <__aeabi_dsub+0x208>
 8002596:	e721      	b.n	80023dc <__aeabi_dsub+0x4c>
 8002598:	4a55      	ldr	r2, [pc, #340]	; (80026f0 <__aeabi_dsub+0x360>)
 800259a:	4442      	add	r2, r8
 800259c:	2a00      	cmp	r2, #0
 800259e:	d100      	bne.n	80025a2 <__aeabi_dsub+0x212>
 80025a0:	e0b5      	b.n	800270e <__aeabi_dsub+0x37e>
 80025a2:	4642      	mov	r2, r8
 80025a4:	4644      	mov	r4, r8
 80025a6:	1a82      	subs	r2, r0, r2
 80025a8:	2c00      	cmp	r4, #0
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x21e>
 80025ac:	e138      	b.n	8002820 <__aeabi_dsub+0x490>
 80025ae:	4e4e      	ldr	r6, [pc, #312]	; (80026e8 <__aeabi_dsub+0x358>)
 80025b0:	42b0      	cmp	r0, r6
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x226>
 80025b4:	e1de      	b.n	8002974 <__aeabi_dsub+0x5e4>
 80025b6:	2680      	movs	r6, #128	; 0x80
 80025b8:	4664      	mov	r4, ip
 80025ba:	0436      	lsls	r6, r6, #16
 80025bc:	4334      	orrs	r4, r6
 80025be:	46a4      	mov	ip, r4
 80025c0:	2a38      	cmp	r2, #56	; 0x38
 80025c2:	dd00      	ble.n	80025c6 <__aeabi_dsub+0x236>
 80025c4:	e196      	b.n	80028f4 <__aeabi_dsub+0x564>
 80025c6:	2a1f      	cmp	r2, #31
 80025c8:	dd00      	ble.n	80025cc <__aeabi_dsub+0x23c>
 80025ca:	e224      	b.n	8002a16 <__aeabi_dsub+0x686>
 80025cc:	2620      	movs	r6, #32
 80025ce:	1ab4      	subs	r4, r6, r2
 80025d0:	46a2      	mov	sl, r4
 80025d2:	4664      	mov	r4, ip
 80025d4:	4656      	mov	r6, sl
 80025d6:	40b4      	lsls	r4, r6
 80025d8:	46a1      	mov	r9, r4
 80025da:	001c      	movs	r4, r3
 80025dc:	464e      	mov	r6, r9
 80025de:	40d4      	lsrs	r4, r2
 80025e0:	4326      	orrs	r6, r4
 80025e2:	0034      	movs	r4, r6
 80025e4:	4656      	mov	r6, sl
 80025e6:	40b3      	lsls	r3, r6
 80025e8:	1e5e      	subs	r6, r3, #1
 80025ea:	41b3      	sbcs	r3, r6
 80025ec:	431c      	orrs	r4, r3
 80025ee:	4663      	mov	r3, ip
 80025f0:	40d3      	lsrs	r3, r2
 80025f2:	18c9      	adds	r1, r1, r3
 80025f4:	19e4      	adds	r4, r4, r7
 80025f6:	42bc      	cmp	r4, r7
 80025f8:	41bf      	sbcs	r7, r7
 80025fa:	427f      	negs	r7, r7
 80025fc:	46b9      	mov	r9, r7
 80025fe:	4680      	mov	r8, r0
 8002600:	4489      	add	r9, r1
 8002602:	e0d8      	b.n	80027b6 <__aeabi_dsub+0x426>
 8002604:	4640      	mov	r0, r8
 8002606:	4c3b      	ldr	r4, [pc, #236]	; (80026f4 <__aeabi_dsub+0x364>)
 8002608:	3001      	adds	r0, #1
 800260a:	4220      	tst	r0, r4
 800260c:	d000      	beq.n	8002610 <__aeabi_dsub+0x280>
 800260e:	e0b4      	b.n	800277a <__aeabi_dsub+0x3ea>
 8002610:	4640      	mov	r0, r8
 8002612:	2800      	cmp	r0, #0
 8002614:	d000      	beq.n	8002618 <__aeabi_dsub+0x288>
 8002616:	e144      	b.n	80028a2 <__aeabi_dsub+0x512>
 8002618:	4660      	mov	r0, ip
 800261a:	4318      	orrs	r0, r3
 800261c:	d100      	bne.n	8002620 <__aeabi_dsub+0x290>
 800261e:	e190      	b.n	8002942 <__aeabi_dsub+0x5b2>
 8002620:	0008      	movs	r0, r1
 8002622:	4338      	orrs	r0, r7
 8002624:	d000      	beq.n	8002628 <__aeabi_dsub+0x298>
 8002626:	e1aa      	b.n	800297e <__aeabi_dsub+0x5ee>
 8002628:	4661      	mov	r1, ip
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	0749      	lsls	r1, r1, #29
 800262e:	430b      	orrs	r3, r1
 8002630:	4661      	mov	r1, ip
 8002632:	08cc      	lsrs	r4, r1, #3
 8002634:	e027      	b.n	8002686 <__aeabi_dsub+0x2f6>
 8002636:	0008      	movs	r0, r1
 8002638:	4338      	orrs	r0, r7
 800263a:	d061      	beq.n	8002700 <__aeabi_dsub+0x370>
 800263c:	1e50      	subs	r0, r2, #1
 800263e:	2a01      	cmp	r2, #1
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x2b4>
 8002642:	e139      	b.n	80028b8 <__aeabi_dsub+0x528>
 8002644:	42a2      	cmp	r2, r4
 8002646:	d027      	beq.n	8002698 <__aeabi_dsub+0x308>
 8002648:	0002      	movs	r2, r0
 800264a:	e75d      	b.n	8002508 <__aeabi_dsub+0x178>
 800264c:	0002      	movs	r2, r0
 800264e:	391f      	subs	r1, #31
 8002650:	40ca      	lsrs	r2, r1
 8002652:	0011      	movs	r1, r2
 8002654:	2b20      	cmp	r3, #32
 8002656:	d003      	beq.n	8002660 <__aeabi_dsub+0x2d0>
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	4098      	lsls	r0, r3
 800265e:	4304      	orrs	r4, r0
 8002660:	1e63      	subs	r3, r4, #1
 8002662:	419c      	sbcs	r4, r3
 8002664:	2300      	movs	r3, #0
 8002666:	4699      	mov	r9, r3
 8002668:	4698      	mov	r8, r3
 800266a:	430c      	orrs	r4, r1
 800266c:	0763      	lsls	r3, r4, #29
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x2e2>
 8002670:	e712      	b.n	8002498 <__aeabi_dsub+0x108>
 8002672:	464b      	mov	r3, r9
 8002674:	464a      	mov	r2, r9
 8002676:	08e4      	lsrs	r4, r4, #3
 8002678:	075b      	lsls	r3, r3, #29
 800267a:	4323      	orrs	r3, r4
 800267c:	08d4      	lsrs	r4, r2, #3
 800267e:	4642      	mov	r2, r8
 8002680:	4919      	ldr	r1, [pc, #100]	; (80026e8 <__aeabi_dsub+0x358>)
 8002682:	428a      	cmp	r2, r1
 8002684:	d00e      	beq.n	80026a4 <__aeabi_dsub+0x314>
 8002686:	0324      	lsls	r4, r4, #12
 8002688:	0552      	lsls	r2, r2, #21
 800268a:	0b24      	lsrs	r4, r4, #12
 800268c:	0d52      	lsrs	r2, r2, #21
 800268e:	e722      	b.n	80024d6 <__aeabi_dsub+0x146>
 8002690:	000a      	movs	r2, r1
 8002692:	2400      	movs	r4, #0
 8002694:	2300      	movs	r3, #0
 8002696:	e71e      	b.n	80024d6 <__aeabi_dsub+0x146>
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	4662      	mov	r2, ip
 800269c:	0752      	lsls	r2, r2, #29
 800269e:	4313      	orrs	r3, r2
 80026a0:	4662      	mov	r2, ip
 80026a2:	08d4      	lsrs	r4, r2, #3
 80026a4:	001a      	movs	r2, r3
 80026a6:	4322      	orrs	r2, r4
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x31c>
 80026aa:	e1fc      	b.n	8002aa6 <__aeabi_dsub+0x716>
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	0312      	lsls	r2, r2, #12
 80026b0:	4314      	orrs	r4, r2
 80026b2:	0324      	lsls	r4, r4, #12
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <__aeabi_dsub+0x358>)
 80026b6:	0b24      	lsrs	r4, r4, #12
 80026b8:	e70d      	b.n	80024d6 <__aeabi_dsub+0x146>
 80026ba:	0020      	movs	r0, r4
 80026bc:	f000 fb74 	bl	8002da8 <__clzsi2>
 80026c0:	0001      	movs	r1, r0
 80026c2:	3118      	adds	r1, #24
 80026c4:	291f      	cmp	r1, #31
 80026c6:	dc00      	bgt.n	80026ca <__aeabi_dsub+0x33a>
 80026c8:	e6c4      	b.n	8002454 <__aeabi_dsub+0xc4>
 80026ca:	3808      	subs	r0, #8
 80026cc:	4084      	lsls	r4, r0
 80026ce:	4643      	mov	r3, r8
 80026d0:	0020      	movs	r0, r4
 80026d2:	2400      	movs	r4, #0
 80026d4:	4588      	cmp	r8, r1
 80026d6:	dc00      	bgt.n	80026da <__aeabi_dsub+0x34a>
 80026d8:	e6c8      	b.n	800246c <__aeabi_dsub+0xdc>
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__aeabi_dsub+0x35c>)
 80026dc:	1a5b      	subs	r3, r3, r1
 80026de:	4010      	ands	r0, r2
 80026e0:	4698      	mov	r8, r3
 80026e2:	4681      	mov	r9, r0
 80026e4:	e6d6      	b.n	8002494 <__aeabi_dsub+0x104>
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	000007ff 	.word	0x000007ff
 80026ec:	ff7fffff 	.word	0xff7fffff
 80026f0:	fffff801 	.word	0xfffff801
 80026f4:	000007fe 	.word	0x000007fe
 80026f8:	430f      	orrs	r7, r1
 80026fa:	1e7a      	subs	r2, r7, #1
 80026fc:	4197      	sbcs	r7, r2
 80026fe:	e691      	b.n	8002424 <__aeabi_dsub+0x94>
 8002700:	4661      	mov	r1, ip
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	0749      	lsls	r1, r1, #29
 8002706:	430b      	orrs	r3, r1
 8002708:	4661      	mov	r1, ip
 800270a:	08cc      	lsrs	r4, r1, #3
 800270c:	e7b8      	b.n	8002680 <__aeabi_dsub+0x2f0>
 800270e:	4640      	mov	r0, r8
 8002710:	4cd3      	ldr	r4, [pc, #844]	; (8002a60 <__aeabi_dsub+0x6d0>)
 8002712:	3001      	adds	r0, #1
 8002714:	4220      	tst	r0, r4
 8002716:	d000      	beq.n	800271a <__aeabi_dsub+0x38a>
 8002718:	e0a2      	b.n	8002860 <__aeabi_dsub+0x4d0>
 800271a:	4640      	mov	r0, r8
 800271c:	2800      	cmp	r0, #0
 800271e:	d000      	beq.n	8002722 <__aeabi_dsub+0x392>
 8002720:	e101      	b.n	8002926 <__aeabi_dsub+0x596>
 8002722:	4660      	mov	r0, ip
 8002724:	4318      	orrs	r0, r3
 8002726:	d100      	bne.n	800272a <__aeabi_dsub+0x39a>
 8002728:	e15e      	b.n	80029e8 <__aeabi_dsub+0x658>
 800272a:	0008      	movs	r0, r1
 800272c:	4338      	orrs	r0, r7
 800272e:	d000      	beq.n	8002732 <__aeabi_dsub+0x3a2>
 8002730:	e15f      	b.n	80029f2 <__aeabi_dsub+0x662>
 8002732:	4661      	mov	r1, ip
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	0749      	lsls	r1, r1, #29
 8002738:	430b      	orrs	r3, r1
 800273a:	4661      	mov	r1, ip
 800273c:	08cc      	lsrs	r4, r1, #3
 800273e:	e7a2      	b.n	8002686 <__aeabi_dsub+0x2f6>
 8002740:	4dc8      	ldr	r5, [pc, #800]	; (8002a64 <__aeabi_dsub+0x6d4>)
 8002742:	42a8      	cmp	r0, r5
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x3b8>
 8002746:	e0cf      	b.n	80028e8 <__aeabi_dsub+0x558>
 8002748:	2580      	movs	r5, #128	; 0x80
 800274a:	4664      	mov	r4, ip
 800274c:	042d      	lsls	r5, r5, #16
 800274e:	432c      	orrs	r4, r5
 8002750:	46a4      	mov	ip, r4
 8002752:	2a38      	cmp	r2, #56	; 0x38
 8002754:	dc56      	bgt.n	8002804 <__aeabi_dsub+0x474>
 8002756:	2a1f      	cmp	r2, #31
 8002758:	dd00      	ble.n	800275c <__aeabi_dsub+0x3cc>
 800275a:	e0d1      	b.n	8002900 <__aeabi_dsub+0x570>
 800275c:	2520      	movs	r5, #32
 800275e:	001e      	movs	r6, r3
 8002760:	1aad      	subs	r5, r5, r2
 8002762:	4664      	mov	r4, ip
 8002764:	40ab      	lsls	r3, r5
 8002766:	40ac      	lsls	r4, r5
 8002768:	40d6      	lsrs	r6, r2
 800276a:	1e5d      	subs	r5, r3, #1
 800276c:	41ab      	sbcs	r3, r5
 800276e:	4334      	orrs	r4, r6
 8002770:	4323      	orrs	r3, r4
 8002772:	4664      	mov	r4, ip
 8002774:	40d4      	lsrs	r4, r2
 8002776:	1b09      	subs	r1, r1, r4
 8002778:	e049      	b.n	800280e <__aeabi_dsub+0x47e>
 800277a:	4660      	mov	r0, ip
 800277c:	1bdc      	subs	r4, r3, r7
 800277e:	1a46      	subs	r6, r0, r1
 8002780:	42a3      	cmp	r3, r4
 8002782:	4180      	sbcs	r0, r0
 8002784:	4240      	negs	r0, r0
 8002786:	4681      	mov	r9, r0
 8002788:	0030      	movs	r0, r6
 800278a:	464e      	mov	r6, r9
 800278c:	1b80      	subs	r0, r0, r6
 800278e:	4681      	mov	r9, r0
 8002790:	0200      	lsls	r0, r0, #8
 8002792:	d476      	bmi.n	8002882 <__aeabi_dsub+0x4f2>
 8002794:	464b      	mov	r3, r9
 8002796:	4323      	orrs	r3, r4
 8002798:	d000      	beq.n	800279c <__aeabi_dsub+0x40c>
 800279a:	e652      	b.n	8002442 <__aeabi_dsub+0xb2>
 800279c:	2400      	movs	r4, #0
 800279e:	2500      	movs	r5, #0
 80027a0:	e771      	b.n	8002686 <__aeabi_dsub+0x2f6>
 80027a2:	4339      	orrs	r1, r7
 80027a4:	000c      	movs	r4, r1
 80027a6:	1e62      	subs	r2, r4, #1
 80027a8:	4194      	sbcs	r4, r2
 80027aa:	18e4      	adds	r4, r4, r3
 80027ac:	429c      	cmp	r4, r3
 80027ae:	419b      	sbcs	r3, r3
 80027b0:	425b      	negs	r3, r3
 80027b2:	4463      	add	r3, ip
 80027b4:	4699      	mov	r9, r3
 80027b6:	464b      	mov	r3, r9
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	d400      	bmi.n	80027be <__aeabi_dsub+0x42e>
 80027bc:	e756      	b.n	800266c <__aeabi_dsub+0x2dc>
 80027be:	2301      	movs	r3, #1
 80027c0:	469c      	mov	ip, r3
 80027c2:	4ba8      	ldr	r3, [pc, #672]	; (8002a64 <__aeabi_dsub+0x6d4>)
 80027c4:	44e0      	add	r8, ip
 80027c6:	4598      	cmp	r8, r3
 80027c8:	d038      	beq.n	800283c <__aeabi_dsub+0x4ac>
 80027ca:	464b      	mov	r3, r9
 80027cc:	48a6      	ldr	r0, [pc, #664]	; (8002a68 <__aeabi_dsub+0x6d8>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	4003      	ands	r3, r0
 80027d2:	0018      	movs	r0, r3
 80027d4:	0863      	lsrs	r3, r4, #1
 80027d6:	4014      	ands	r4, r2
 80027d8:	431c      	orrs	r4, r3
 80027da:	07c3      	lsls	r3, r0, #31
 80027dc:	431c      	orrs	r4, r3
 80027de:	0843      	lsrs	r3, r0, #1
 80027e0:	4699      	mov	r9, r3
 80027e2:	e657      	b.n	8002494 <__aeabi_dsub+0x104>
 80027e4:	0010      	movs	r0, r2
 80027e6:	000e      	movs	r6, r1
 80027e8:	3820      	subs	r0, #32
 80027ea:	40c6      	lsrs	r6, r0
 80027ec:	2a20      	cmp	r2, #32
 80027ee:	d004      	beq.n	80027fa <__aeabi_dsub+0x46a>
 80027f0:	2040      	movs	r0, #64	; 0x40
 80027f2:	1a82      	subs	r2, r0, r2
 80027f4:	4091      	lsls	r1, r2
 80027f6:	430f      	orrs	r7, r1
 80027f8:	46b9      	mov	r9, r7
 80027fa:	464f      	mov	r7, r9
 80027fc:	1e7a      	subs	r2, r7, #1
 80027fe:	4197      	sbcs	r7, r2
 8002800:	4337      	orrs	r7, r6
 8002802:	e60f      	b.n	8002424 <__aeabi_dsub+0x94>
 8002804:	4662      	mov	r2, ip
 8002806:	431a      	orrs	r2, r3
 8002808:	0013      	movs	r3, r2
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4193      	sbcs	r3, r2
 800280e:	1afc      	subs	r4, r7, r3
 8002810:	42a7      	cmp	r7, r4
 8002812:	41bf      	sbcs	r7, r7
 8002814:	427f      	negs	r7, r7
 8002816:	1bcb      	subs	r3, r1, r7
 8002818:	4699      	mov	r9, r3
 800281a:	465d      	mov	r5, fp
 800281c:	4680      	mov	r8, r0
 800281e:	e608      	b.n	8002432 <__aeabi_dsub+0xa2>
 8002820:	4666      	mov	r6, ip
 8002822:	431e      	orrs	r6, r3
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x498>
 8002826:	e0be      	b.n	80029a6 <__aeabi_dsub+0x616>
 8002828:	1e56      	subs	r6, r2, #1
 800282a:	2a01      	cmp	r2, #1
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x4a0>
 800282e:	e109      	b.n	8002a44 <__aeabi_dsub+0x6b4>
 8002830:	4c8c      	ldr	r4, [pc, #560]	; (8002a64 <__aeabi_dsub+0x6d4>)
 8002832:	42a2      	cmp	r2, r4
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x4a8>
 8002836:	e119      	b.n	8002a6c <__aeabi_dsub+0x6dc>
 8002838:	0032      	movs	r2, r6
 800283a:	e6c1      	b.n	80025c0 <__aeabi_dsub+0x230>
 800283c:	4642      	mov	r2, r8
 800283e:	2400      	movs	r4, #0
 8002840:	2300      	movs	r3, #0
 8002842:	e648      	b.n	80024d6 <__aeabi_dsub+0x146>
 8002844:	2020      	movs	r0, #32
 8002846:	000c      	movs	r4, r1
 8002848:	1a80      	subs	r0, r0, r2
 800284a:	003e      	movs	r6, r7
 800284c:	4087      	lsls	r7, r0
 800284e:	4084      	lsls	r4, r0
 8002850:	40d6      	lsrs	r6, r2
 8002852:	1e78      	subs	r0, r7, #1
 8002854:	4187      	sbcs	r7, r0
 8002856:	40d1      	lsrs	r1, r2
 8002858:	4334      	orrs	r4, r6
 800285a:	433c      	orrs	r4, r7
 800285c:	448c      	add	ip, r1
 800285e:	e7a4      	b.n	80027aa <__aeabi_dsub+0x41a>
 8002860:	4a80      	ldr	r2, [pc, #512]	; (8002a64 <__aeabi_dsub+0x6d4>)
 8002862:	4290      	cmp	r0, r2
 8002864:	d100      	bne.n	8002868 <__aeabi_dsub+0x4d8>
 8002866:	e0e9      	b.n	8002a3c <__aeabi_dsub+0x6ac>
 8002868:	19df      	adds	r7, r3, r7
 800286a:	429f      	cmp	r7, r3
 800286c:	419b      	sbcs	r3, r3
 800286e:	4461      	add	r1, ip
 8002870:	425b      	negs	r3, r3
 8002872:	18c9      	adds	r1, r1, r3
 8002874:	07cc      	lsls	r4, r1, #31
 8002876:	087f      	lsrs	r7, r7, #1
 8002878:	084b      	lsrs	r3, r1, #1
 800287a:	4699      	mov	r9, r3
 800287c:	4680      	mov	r8, r0
 800287e:	433c      	orrs	r4, r7
 8002880:	e6f4      	b.n	800266c <__aeabi_dsub+0x2dc>
 8002882:	1afc      	subs	r4, r7, r3
 8002884:	42a7      	cmp	r7, r4
 8002886:	41bf      	sbcs	r7, r7
 8002888:	4663      	mov	r3, ip
 800288a:	427f      	negs	r7, r7
 800288c:	1ac9      	subs	r1, r1, r3
 800288e:	1bcb      	subs	r3, r1, r7
 8002890:	4699      	mov	r9, r3
 8002892:	465d      	mov	r5, fp
 8002894:	e5d5      	b.n	8002442 <__aeabi_dsub+0xb2>
 8002896:	08ff      	lsrs	r7, r7, #3
 8002898:	074b      	lsls	r3, r1, #29
 800289a:	465d      	mov	r5, fp
 800289c:	433b      	orrs	r3, r7
 800289e:	08cc      	lsrs	r4, r1, #3
 80028a0:	e6ee      	b.n	8002680 <__aeabi_dsub+0x2f0>
 80028a2:	4662      	mov	r2, ip
 80028a4:	431a      	orrs	r2, r3
 80028a6:	d000      	beq.n	80028aa <__aeabi_dsub+0x51a>
 80028a8:	e082      	b.n	80029b0 <__aeabi_dsub+0x620>
 80028aa:	000b      	movs	r3, r1
 80028ac:	433b      	orrs	r3, r7
 80028ae:	d11b      	bne.n	80028e8 <__aeabi_dsub+0x558>
 80028b0:	2480      	movs	r4, #128	; 0x80
 80028b2:	2500      	movs	r5, #0
 80028b4:	0324      	lsls	r4, r4, #12
 80028b6:	e6f9      	b.n	80026ac <__aeabi_dsub+0x31c>
 80028b8:	19dc      	adds	r4, r3, r7
 80028ba:	429c      	cmp	r4, r3
 80028bc:	419b      	sbcs	r3, r3
 80028be:	4461      	add	r1, ip
 80028c0:	4689      	mov	r9, r1
 80028c2:	425b      	negs	r3, r3
 80028c4:	4499      	add	r9, r3
 80028c6:	464b      	mov	r3, r9
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	d444      	bmi.n	8002956 <__aeabi_dsub+0x5c6>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4698      	mov	r8, r3
 80028d0:	e6cc      	b.n	800266c <__aeabi_dsub+0x2dc>
 80028d2:	1bdc      	subs	r4, r3, r7
 80028d4:	4662      	mov	r2, ip
 80028d6:	42a3      	cmp	r3, r4
 80028d8:	419b      	sbcs	r3, r3
 80028da:	1a51      	subs	r1, r2, r1
 80028dc:	425b      	negs	r3, r3
 80028de:	1acb      	subs	r3, r1, r3
 80028e0:	4699      	mov	r9, r3
 80028e2:	2301      	movs	r3, #1
 80028e4:	4698      	mov	r8, r3
 80028e6:	e5a4      	b.n	8002432 <__aeabi_dsub+0xa2>
 80028e8:	08ff      	lsrs	r7, r7, #3
 80028ea:	074b      	lsls	r3, r1, #29
 80028ec:	465d      	mov	r5, fp
 80028ee:	433b      	orrs	r3, r7
 80028f0:	08cc      	lsrs	r4, r1, #3
 80028f2:	e6d7      	b.n	80026a4 <__aeabi_dsub+0x314>
 80028f4:	4662      	mov	r2, ip
 80028f6:	431a      	orrs	r2, r3
 80028f8:	0014      	movs	r4, r2
 80028fa:	1e63      	subs	r3, r4, #1
 80028fc:	419c      	sbcs	r4, r3
 80028fe:	e679      	b.n	80025f4 <__aeabi_dsub+0x264>
 8002900:	0015      	movs	r5, r2
 8002902:	4664      	mov	r4, ip
 8002904:	3d20      	subs	r5, #32
 8002906:	40ec      	lsrs	r4, r5
 8002908:	46a0      	mov	r8, r4
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dsub+0x58a>
 800290e:	2540      	movs	r5, #64	; 0x40
 8002910:	4664      	mov	r4, ip
 8002912:	1aaa      	subs	r2, r5, r2
 8002914:	4094      	lsls	r4, r2
 8002916:	4323      	orrs	r3, r4
 8002918:	469a      	mov	sl, r3
 800291a:	4654      	mov	r4, sl
 800291c:	1e63      	subs	r3, r4, #1
 800291e:	419c      	sbcs	r4, r3
 8002920:	4643      	mov	r3, r8
 8002922:	4323      	orrs	r3, r4
 8002924:	e773      	b.n	800280e <__aeabi_dsub+0x47e>
 8002926:	4662      	mov	r2, ip
 8002928:	431a      	orrs	r2, r3
 800292a:	d023      	beq.n	8002974 <__aeabi_dsub+0x5e4>
 800292c:	000a      	movs	r2, r1
 800292e:	433a      	orrs	r2, r7
 8002930:	d000      	beq.n	8002934 <__aeabi_dsub+0x5a4>
 8002932:	e0a0      	b.n	8002a76 <__aeabi_dsub+0x6e6>
 8002934:	4662      	mov	r2, ip
 8002936:	08db      	lsrs	r3, r3, #3
 8002938:	0752      	lsls	r2, r2, #29
 800293a:	4313      	orrs	r3, r2
 800293c:	4662      	mov	r2, ip
 800293e:	08d4      	lsrs	r4, r2, #3
 8002940:	e6b0      	b.n	80026a4 <__aeabi_dsub+0x314>
 8002942:	000b      	movs	r3, r1
 8002944:	433b      	orrs	r3, r7
 8002946:	d100      	bne.n	800294a <__aeabi_dsub+0x5ba>
 8002948:	e728      	b.n	800279c <__aeabi_dsub+0x40c>
 800294a:	08ff      	lsrs	r7, r7, #3
 800294c:	074b      	lsls	r3, r1, #29
 800294e:	465d      	mov	r5, fp
 8002950:	433b      	orrs	r3, r7
 8002952:	08cc      	lsrs	r4, r1, #3
 8002954:	e697      	b.n	8002686 <__aeabi_dsub+0x2f6>
 8002956:	2302      	movs	r3, #2
 8002958:	4698      	mov	r8, r3
 800295a:	e736      	b.n	80027ca <__aeabi_dsub+0x43a>
 800295c:	1afc      	subs	r4, r7, r3
 800295e:	42a7      	cmp	r7, r4
 8002960:	41bf      	sbcs	r7, r7
 8002962:	4663      	mov	r3, ip
 8002964:	427f      	negs	r7, r7
 8002966:	1ac9      	subs	r1, r1, r3
 8002968:	1bcb      	subs	r3, r1, r7
 800296a:	4699      	mov	r9, r3
 800296c:	2301      	movs	r3, #1
 800296e:	465d      	mov	r5, fp
 8002970:	4698      	mov	r8, r3
 8002972:	e55e      	b.n	8002432 <__aeabi_dsub+0xa2>
 8002974:	074b      	lsls	r3, r1, #29
 8002976:	08ff      	lsrs	r7, r7, #3
 8002978:	433b      	orrs	r3, r7
 800297a:	08cc      	lsrs	r4, r1, #3
 800297c:	e692      	b.n	80026a4 <__aeabi_dsub+0x314>
 800297e:	1bdc      	subs	r4, r3, r7
 8002980:	4660      	mov	r0, ip
 8002982:	42a3      	cmp	r3, r4
 8002984:	41b6      	sbcs	r6, r6
 8002986:	1a40      	subs	r0, r0, r1
 8002988:	4276      	negs	r6, r6
 800298a:	1b80      	subs	r0, r0, r6
 800298c:	4681      	mov	r9, r0
 800298e:	0200      	lsls	r0, r0, #8
 8002990:	d560      	bpl.n	8002a54 <__aeabi_dsub+0x6c4>
 8002992:	1afc      	subs	r4, r7, r3
 8002994:	42a7      	cmp	r7, r4
 8002996:	41bf      	sbcs	r7, r7
 8002998:	4663      	mov	r3, ip
 800299a:	427f      	negs	r7, r7
 800299c:	1ac9      	subs	r1, r1, r3
 800299e:	1bcb      	subs	r3, r1, r7
 80029a0:	4699      	mov	r9, r3
 80029a2:	465d      	mov	r5, fp
 80029a4:	e576      	b.n	8002494 <__aeabi_dsub+0x104>
 80029a6:	08ff      	lsrs	r7, r7, #3
 80029a8:	074b      	lsls	r3, r1, #29
 80029aa:	433b      	orrs	r3, r7
 80029ac:	08cc      	lsrs	r4, r1, #3
 80029ae:	e667      	b.n	8002680 <__aeabi_dsub+0x2f0>
 80029b0:	000a      	movs	r2, r1
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	433a      	orrs	r2, r7
 80029b6:	d100      	bne.n	80029ba <__aeabi_dsub+0x62a>
 80029b8:	e66f      	b.n	800269a <__aeabi_dsub+0x30a>
 80029ba:	4662      	mov	r2, ip
 80029bc:	0752      	lsls	r2, r2, #29
 80029be:	4313      	orrs	r3, r2
 80029c0:	4662      	mov	r2, ip
 80029c2:	08d4      	lsrs	r4, r2, #3
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	0312      	lsls	r2, r2, #12
 80029c8:	4214      	tst	r4, r2
 80029ca:	d007      	beq.n	80029dc <__aeabi_dsub+0x64c>
 80029cc:	08c8      	lsrs	r0, r1, #3
 80029ce:	4210      	tst	r0, r2
 80029d0:	d104      	bne.n	80029dc <__aeabi_dsub+0x64c>
 80029d2:	465d      	mov	r5, fp
 80029d4:	0004      	movs	r4, r0
 80029d6:	08fb      	lsrs	r3, r7, #3
 80029d8:	0749      	lsls	r1, r1, #29
 80029da:	430b      	orrs	r3, r1
 80029dc:	0f5a      	lsrs	r2, r3, #29
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	0752      	lsls	r2, r2, #29
 80029e4:	4313      	orrs	r3, r2
 80029e6:	e65d      	b.n	80026a4 <__aeabi_dsub+0x314>
 80029e8:	074b      	lsls	r3, r1, #29
 80029ea:	08ff      	lsrs	r7, r7, #3
 80029ec:	433b      	orrs	r3, r7
 80029ee:	08cc      	lsrs	r4, r1, #3
 80029f0:	e649      	b.n	8002686 <__aeabi_dsub+0x2f6>
 80029f2:	19dc      	adds	r4, r3, r7
 80029f4:	429c      	cmp	r4, r3
 80029f6:	419b      	sbcs	r3, r3
 80029f8:	4461      	add	r1, ip
 80029fa:	4689      	mov	r9, r1
 80029fc:	425b      	negs	r3, r3
 80029fe:	4499      	add	r9, r3
 8002a00:	464b      	mov	r3, r9
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	d400      	bmi.n	8002a08 <__aeabi_dsub+0x678>
 8002a06:	e631      	b.n	800266c <__aeabi_dsub+0x2dc>
 8002a08:	464a      	mov	r2, r9
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <__aeabi_dsub+0x6d8>)
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	4691      	mov	r9, r2
 8002a12:	4698      	mov	r8, r3
 8002a14:	e62a      	b.n	800266c <__aeabi_dsub+0x2dc>
 8002a16:	0016      	movs	r6, r2
 8002a18:	4664      	mov	r4, ip
 8002a1a:	3e20      	subs	r6, #32
 8002a1c:	40f4      	lsrs	r4, r6
 8002a1e:	46a0      	mov	r8, r4
 8002a20:	2a20      	cmp	r2, #32
 8002a22:	d005      	beq.n	8002a30 <__aeabi_dsub+0x6a0>
 8002a24:	2640      	movs	r6, #64	; 0x40
 8002a26:	4664      	mov	r4, ip
 8002a28:	1ab2      	subs	r2, r6, r2
 8002a2a:	4094      	lsls	r4, r2
 8002a2c:	4323      	orrs	r3, r4
 8002a2e:	469a      	mov	sl, r3
 8002a30:	4654      	mov	r4, sl
 8002a32:	1e63      	subs	r3, r4, #1
 8002a34:	419c      	sbcs	r4, r3
 8002a36:	4643      	mov	r3, r8
 8002a38:	431c      	orrs	r4, r3
 8002a3a:	e5db      	b.n	80025f4 <__aeabi_dsub+0x264>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	2400      	movs	r4, #0
 8002a40:	2300      	movs	r3, #0
 8002a42:	e548      	b.n	80024d6 <__aeabi_dsub+0x146>
 8002a44:	19dc      	adds	r4, r3, r7
 8002a46:	42bc      	cmp	r4, r7
 8002a48:	41bf      	sbcs	r7, r7
 8002a4a:	4461      	add	r1, ip
 8002a4c:	4689      	mov	r9, r1
 8002a4e:	427f      	negs	r7, r7
 8002a50:	44b9      	add	r9, r7
 8002a52:	e738      	b.n	80028c6 <__aeabi_dsub+0x536>
 8002a54:	464b      	mov	r3, r9
 8002a56:	4323      	orrs	r3, r4
 8002a58:	d100      	bne.n	8002a5c <__aeabi_dsub+0x6cc>
 8002a5a:	e69f      	b.n	800279c <__aeabi_dsub+0x40c>
 8002a5c:	e606      	b.n	800266c <__aeabi_dsub+0x2dc>
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	000007fe 	.word	0x000007fe
 8002a64:	000007ff 	.word	0x000007ff
 8002a68:	ff7fffff 	.word	0xff7fffff
 8002a6c:	08ff      	lsrs	r7, r7, #3
 8002a6e:	074b      	lsls	r3, r1, #29
 8002a70:	433b      	orrs	r3, r7
 8002a72:	08cc      	lsrs	r4, r1, #3
 8002a74:	e616      	b.n	80026a4 <__aeabi_dsub+0x314>
 8002a76:	4662      	mov	r2, ip
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	0752      	lsls	r2, r2, #29
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	4662      	mov	r2, ip
 8002a80:	08d4      	lsrs	r4, r2, #3
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0312      	lsls	r2, r2, #12
 8002a86:	4214      	tst	r4, r2
 8002a88:	d007      	beq.n	8002a9a <__aeabi_dsub+0x70a>
 8002a8a:	08c8      	lsrs	r0, r1, #3
 8002a8c:	4210      	tst	r0, r2
 8002a8e:	d104      	bne.n	8002a9a <__aeabi_dsub+0x70a>
 8002a90:	465d      	mov	r5, fp
 8002a92:	0004      	movs	r4, r0
 8002a94:	08fb      	lsrs	r3, r7, #3
 8002a96:	0749      	lsls	r1, r1, #29
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	0f5a      	lsrs	r2, r3, #29
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	0752      	lsls	r2, r2, #29
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	e5fe      	b.n	80026a4 <__aeabi_dsub+0x314>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	4a01      	ldr	r2, [pc, #4]	; (8002ab0 <__aeabi_dsub+0x720>)
 8002aaa:	001c      	movs	r4, r3
 8002aac:	e513      	b.n	80024d6 <__aeabi_dsub+0x146>
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	000007ff 	.word	0x000007ff

08002ab4 <__aeabi_dcmpun>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	0005      	movs	r5, r0
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <__aeabi_dcmpun+0x38>)
 8002aba:	031c      	lsls	r4, r3, #12
 8002abc:	0016      	movs	r6, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	030a      	lsls	r2, r1, #12
 8002ac2:	0049      	lsls	r1, r1, #1
 8002ac4:	0b12      	lsrs	r2, r2, #12
 8002ac6:	0d49      	lsrs	r1, r1, #21
 8002ac8:	0b24      	lsrs	r4, r4, #12
 8002aca:	0d5b      	lsrs	r3, r3, #21
 8002acc:	4281      	cmp	r1, r0
 8002ace:	d008      	beq.n	8002ae2 <__aeabi_dcmpun+0x2e>
 8002ad0:	4a06      	ldr	r2, [pc, #24]	; (8002aec <__aeabi_dcmpun+0x38>)
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d103      	bne.n	8002ae0 <__aeabi_dcmpun+0x2c>
 8002ad8:	0020      	movs	r0, r4
 8002ada:	4330      	orrs	r0, r6
 8002adc:	1e43      	subs	r3, r0, #1
 8002ade:	4198      	sbcs	r0, r3
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	432a      	orrs	r2, r5
 8002ae6:	d1fb      	bne.n	8002ae0 <__aeabi_dcmpun+0x2c>
 8002ae8:	e7f2      	b.n	8002ad0 <__aeabi_dcmpun+0x1c>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	000007ff 	.word	0x000007ff

08002af0 <__aeabi_d2iz>:
 8002af0:	000a      	movs	r2, r1
 8002af2:	b530      	push	{r4, r5, lr}
 8002af4:	4c13      	ldr	r4, [pc, #76]	; (8002b44 <__aeabi_d2iz+0x54>)
 8002af6:	0053      	lsls	r3, r2, #1
 8002af8:	0309      	lsls	r1, r1, #12
 8002afa:	0005      	movs	r5, r0
 8002afc:	0b09      	lsrs	r1, r1, #12
 8002afe:	2000      	movs	r0, #0
 8002b00:	0d5b      	lsrs	r3, r3, #21
 8002b02:	0fd2      	lsrs	r2, r2, #31
 8002b04:	42a3      	cmp	r3, r4
 8002b06:	dd04      	ble.n	8002b12 <__aeabi_d2iz+0x22>
 8002b08:	480f      	ldr	r0, [pc, #60]	; (8002b48 <__aeabi_d2iz+0x58>)
 8002b0a:	4283      	cmp	r3, r0
 8002b0c:	dd02      	ble.n	8002b14 <__aeabi_d2iz+0x24>
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <__aeabi_d2iz+0x5c>)
 8002b10:	18d0      	adds	r0, r2, r3
 8002b12:	bd30      	pop	{r4, r5, pc}
 8002b14:	2080      	movs	r0, #128	; 0x80
 8002b16:	0340      	lsls	r0, r0, #13
 8002b18:	4301      	orrs	r1, r0
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <__aeabi_d2iz+0x60>)
 8002b1c:	1ac0      	subs	r0, r0, r3
 8002b1e:	281f      	cmp	r0, #31
 8002b20:	dd08      	ble.n	8002b34 <__aeabi_d2iz+0x44>
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <__aeabi_d2iz+0x64>)
 8002b24:	1ac3      	subs	r3, r0, r3
 8002b26:	40d9      	lsrs	r1, r3
 8002b28:	000b      	movs	r3, r1
 8002b2a:	4258      	negs	r0, r3
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d1f0      	bne.n	8002b12 <__aeabi_d2iz+0x22>
 8002b30:	0018      	movs	r0, r3
 8002b32:	e7ee      	b.n	8002b12 <__aeabi_d2iz+0x22>
 8002b34:	4c08      	ldr	r4, [pc, #32]	; (8002b58 <__aeabi_d2iz+0x68>)
 8002b36:	40c5      	lsrs	r5, r0
 8002b38:	46a4      	mov	ip, r4
 8002b3a:	4463      	add	r3, ip
 8002b3c:	4099      	lsls	r1, r3
 8002b3e:	000b      	movs	r3, r1
 8002b40:	432b      	orrs	r3, r5
 8002b42:	e7f2      	b.n	8002b2a <__aeabi_d2iz+0x3a>
 8002b44:	000003fe 	.word	0x000003fe
 8002b48:	0000041d 	.word	0x0000041d
 8002b4c:	7fffffff 	.word	0x7fffffff
 8002b50:	00000433 	.word	0x00000433
 8002b54:	00000413 	.word	0x00000413
 8002b58:	fffffbed 	.word	0xfffffbed

08002b5c <__aeabi_i2d>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d016      	beq.n	8002b90 <__aeabi_i2d+0x34>
 8002b62:	17c3      	asrs	r3, r0, #31
 8002b64:	18c5      	adds	r5, r0, r3
 8002b66:	405d      	eors	r5, r3
 8002b68:	0fc4      	lsrs	r4, r0, #31
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f91c 	bl	8002da8 <__clzsi2>
 8002b70:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <__aeabi_i2d+0x5c>)
 8002b72:	1a12      	subs	r2, r2, r0
 8002b74:	280a      	cmp	r0, #10
 8002b76:	dc16      	bgt.n	8002ba6 <__aeabi_i2d+0x4a>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	002e      	movs	r6, r5
 8002b7c:	3315      	adds	r3, #21
 8002b7e:	409e      	lsls	r6, r3
 8002b80:	230b      	movs	r3, #11
 8002b82:	1a18      	subs	r0, r3, r0
 8002b84:	40c5      	lsrs	r5, r0
 8002b86:	0552      	lsls	r2, r2, #21
 8002b88:	032d      	lsls	r5, r5, #12
 8002b8a:	0b2d      	lsrs	r5, r5, #12
 8002b8c:	0d53      	lsrs	r3, r2, #21
 8002b8e:	e003      	b.n	8002b98 <__aeabi_i2d+0x3c>
 8002b90:	2400      	movs	r4, #0
 8002b92:	2300      	movs	r3, #0
 8002b94:	2500      	movs	r5, #0
 8002b96:	2600      	movs	r6, #0
 8002b98:	051b      	lsls	r3, r3, #20
 8002b9a:	432b      	orrs	r3, r5
 8002b9c:	07e4      	lsls	r4, r4, #31
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	0030      	movs	r0, r6
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	bd70      	pop	{r4, r5, r6, pc}
 8002ba6:	380b      	subs	r0, #11
 8002ba8:	4085      	lsls	r5, r0
 8002baa:	0552      	lsls	r2, r2, #21
 8002bac:	032d      	lsls	r5, r5, #12
 8002bae:	2600      	movs	r6, #0
 8002bb0:	0b2d      	lsrs	r5, r5, #12
 8002bb2:	0d53      	lsrs	r3, r2, #21
 8002bb4:	e7f0      	b.n	8002b98 <__aeabi_i2d+0x3c>
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	0000041e 	.word	0x0000041e

08002bbc <__aeabi_ui2d>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	1e04      	subs	r4, r0, #0
 8002bc0:	d010      	beq.n	8002be4 <__aeabi_ui2d+0x28>
 8002bc2:	f000 f8f1 	bl	8002da8 <__clzsi2>
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <__aeabi_ui2d+0x48>)
 8002bc8:	1a1b      	subs	r3, r3, r0
 8002bca:	280a      	cmp	r0, #10
 8002bcc:	dc11      	bgt.n	8002bf2 <__aeabi_ui2d+0x36>
 8002bce:	220b      	movs	r2, #11
 8002bd0:	0021      	movs	r1, r4
 8002bd2:	1a12      	subs	r2, r2, r0
 8002bd4:	40d1      	lsrs	r1, r2
 8002bd6:	3015      	adds	r0, #21
 8002bd8:	030a      	lsls	r2, r1, #12
 8002bda:	055b      	lsls	r3, r3, #21
 8002bdc:	4084      	lsls	r4, r0
 8002bde:	0b12      	lsrs	r2, r2, #12
 8002be0:	0d5b      	lsrs	r3, r3, #21
 8002be2:	e001      	b.n	8002be8 <__aeabi_ui2d+0x2c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2200      	movs	r2, #0
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	4313      	orrs	r3, r2
 8002bec:	0020      	movs	r0, r4
 8002bee:	0019      	movs	r1, r3
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	0022      	movs	r2, r4
 8002bf4:	380b      	subs	r0, #11
 8002bf6:	4082      	lsls	r2, r0
 8002bf8:	055b      	lsls	r3, r3, #21
 8002bfa:	0312      	lsls	r2, r2, #12
 8002bfc:	2400      	movs	r4, #0
 8002bfe:	0b12      	lsrs	r2, r2, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e7f1      	b.n	8002be8 <__aeabi_ui2d+0x2c>
 8002c04:	0000041e 	.word	0x0000041e

08002c08 <__aeabi_f2d>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	0043      	lsls	r3, r0, #1
 8002c0c:	0246      	lsls	r6, r0, #9
 8002c0e:	0fc4      	lsrs	r4, r0, #31
 8002c10:	20fe      	movs	r0, #254	; 0xfe
 8002c12:	0e1b      	lsrs	r3, r3, #24
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	0a75      	lsrs	r5, r6, #9
 8002c18:	4208      	tst	r0, r1
 8002c1a:	d00c      	beq.n	8002c36 <__aeabi_f2d+0x2e>
 8002c1c:	22e0      	movs	r2, #224	; 0xe0
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	4694      	mov	ip, r2
 8002c22:	076d      	lsls	r5, r5, #29
 8002c24:	0b36      	lsrs	r6, r6, #12
 8002c26:	4463      	add	r3, ip
 8002c28:	051b      	lsls	r3, r3, #20
 8002c2a:	4333      	orrs	r3, r6
 8002c2c:	07e4      	lsls	r4, r4, #31
 8002c2e:	4323      	orrs	r3, r4
 8002c30:	0028      	movs	r0, r5
 8002c32:	0019      	movs	r1, r3
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d114      	bne.n	8002c64 <__aeabi_f2d+0x5c>
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d01b      	beq.n	8002c76 <__aeabi_f2d+0x6e>
 8002c3e:	0028      	movs	r0, r5
 8002c40:	f000 f8b2 	bl	8002da8 <__clzsi2>
 8002c44:	280a      	cmp	r0, #10
 8002c46:	dc1c      	bgt.n	8002c82 <__aeabi_f2d+0x7a>
 8002c48:	230b      	movs	r3, #11
 8002c4a:	002e      	movs	r6, r5
 8002c4c:	1a1b      	subs	r3, r3, r0
 8002c4e:	40de      	lsrs	r6, r3
 8002c50:	0003      	movs	r3, r0
 8002c52:	3315      	adds	r3, #21
 8002c54:	409d      	lsls	r5, r3
 8002c56:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <__aeabi_f2d+0x88>)
 8002c58:	0336      	lsls	r6, r6, #12
 8002c5a:	1a12      	subs	r2, r2, r0
 8002c5c:	0552      	lsls	r2, r2, #21
 8002c5e:	0b36      	lsrs	r6, r6, #12
 8002c60:	0d53      	lsrs	r3, r2, #21
 8002c62:	e7e1      	b.n	8002c28 <__aeabi_f2d+0x20>
 8002c64:	2d00      	cmp	r5, #0
 8002c66:	d009      	beq.n	8002c7c <__aeabi_f2d+0x74>
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	0b36      	lsrs	r6, r6, #12
 8002c6c:	0312      	lsls	r2, r2, #12
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <__aeabi_f2d+0x8c>)
 8002c70:	076d      	lsls	r5, r5, #29
 8002c72:	4316      	orrs	r6, r2
 8002c74:	e7d8      	b.n	8002c28 <__aeabi_f2d+0x20>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2600      	movs	r6, #0
 8002c7a:	e7d5      	b.n	8002c28 <__aeabi_f2d+0x20>
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <__aeabi_f2d+0x8c>)
 8002c80:	e7d2      	b.n	8002c28 <__aeabi_f2d+0x20>
 8002c82:	0003      	movs	r3, r0
 8002c84:	3b0b      	subs	r3, #11
 8002c86:	409d      	lsls	r5, r3
 8002c88:	002e      	movs	r6, r5
 8002c8a:	2500      	movs	r5, #0
 8002c8c:	e7e3      	b.n	8002c56 <__aeabi_f2d+0x4e>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	00000389 	.word	0x00000389
 8002c94:	000007ff 	.word	0x000007ff

08002c98 <__aeabi_d2f>:
 8002c98:	0002      	movs	r2, r0
 8002c9a:	004b      	lsls	r3, r1, #1
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	0d5b      	lsrs	r3, r3, #21
 8002ca0:	030c      	lsls	r4, r1, #12
 8002ca2:	4e3d      	ldr	r6, [pc, #244]	; (8002d98 <__aeabi_d2f+0x100>)
 8002ca4:	0a64      	lsrs	r4, r4, #9
 8002ca6:	0f40      	lsrs	r0, r0, #29
 8002ca8:	1c5f      	adds	r7, r3, #1
 8002caa:	0fc9      	lsrs	r1, r1, #31
 8002cac:	4304      	orrs	r4, r0
 8002cae:	00d5      	lsls	r5, r2, #3
 8002cb0:	4237      	tst	r7, r6
 8002cb2:	d00a      	beq.n	8002cca <__aeabi_d2f+0x32>
 8002cb4:	4839      	ldr	r0, [pc, #228]	; (8002d9c <__aeabi_d2f+0x104>)
 8002cb6:	181e      	adds	r6, r3, r0
 8002cb8:	2efe      	cmp	r6, #254	; 0xfe
 8002cba:	dd16      	ble.n	8002cea <__aeabi_d2f+0x52>
 8002cbc:	20ff      	movs	r0, #255	; 0xff
 8002cbe:	2400      	movs	r4, #0
 8002cc0:	05c0      	lsls	r0, r0, #23
 8002cc2:	4320      	orrs	r0, r4
 8002cc4:	07c9      	lsls	r1, r1, #31
 8002cc6:	4308      	orrs	r0, r1
 8002cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <__aeabi_d2f+0x44>
 8002cce:	432c      	orrs	r4, r5
 8002cd0:	d026      	beq.n	8002d20 <__aeabi_d2f+0x88>
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	0192      	lsls	r2, r2, #6
 8002cd6:	0a54      	lsrs	r4, r2, #9
 8002cd8:	b2d8      	uxtb	r0, r3
 8002cda:	e7f1      	b.n	8002cc0 <__aeabi_d2f+0x28>
 8002cdc:	4325      	orrs	r5, r4
 8002cde:	d0ed      	beq.n	8002cbc <__aeabi_d2f+0x24>
 8002ce0:	2080      	movs	r0, #128	; 0x80
 8002ce2:	03c0      	lsls	r0, r0, #15
 8002ce4:	4304      	orrs	r4, r0
 8002ce6:	20ff      	movs	r0, #255	; 0xff
 8002ce8:	e7ea      	b.n	8002cc0 <__aeabi_d2f+0x28>
 8002cea:	2e00      	cmp	r6, #0
 8002cec:	dd1b      	ble.n	8002d26 <__aeabi_d2f+0x8e>
 8002cee:	0192      	lsls	r2, r2, #6
 8002cf0:	1e53      	subs	r3, r2, #1
 8002cf2:	419a      	sbcs	r2, r3
 8002cf4:	00e4      	lsls	r4, r4, #3
 8002cf6:	0f6d      	lsrs	r5, r5, #29
 8002cf8:	4322      	orrs	r2, r4
 8002cfa:	432a      	orrs	r2, r5
 8002cfc:	0753      	lsls	r3, r2, #29
 8002cfe:	d048      	beq.n	8002d92 <__aeabi_d2f+0xfa>
 8002d00:	230f      	movs	r3, #15
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d000      	beq.n	8002d0a <__aeabi_d2f+0x72>
 8002d08:	3204      	adds	r2, #4
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	04db      	lsls	r3, r3, #19
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d03f      	beq.n	8002d92 <__aeabi_d2f+0xfa>
 8002d12:	1c70      	adds	r0, r6, #1
 8002d14:	2efe      	cmp	r6, #254	; 0xfe
 8002d16:	d0d1      	beq.n	8002cbc <__aeabi_d2f+0x24>
 8002d18:	0192      	lsls	r2, r2, #6
 8002d1a:	0a54      	lsrs	r4, r2, #9
 8002d1c:	b2c0      	uxtb	r0, r0
 8002d1e:	e7cf      	b.n	8002cc0 <__aeabi_d2f+0x28>
 8002d20:	2000      	movs	r0, #0
 8002d22:	2400      	movs	r4, #0
 8002d24:	e7cc      	b.n	8002cc0 <__aeabi_d2f+0x28>
 8002d26:	0032      	movs	r2, r6
 8002d28:	3217      	adds	r2, #23
 8002d2a:	db22      	blt.n	8002d72 <__aeabi_d2f+0xda>
 8002d2c:	2080      	movs	r0, #128	; 0x80
 8002d2e:	0400      	lsls	r0, r0, #16
 8002d30:	4320      	orrs	r0, r4
 8002d32:	241e      	movs	r4, #30
 8002d34:	1ba4      	subs	r4, r4, r6
 8002d36:	2c1f      	cmp	r4, #31
 8002d38:	dd1d      	ble.n	8002d76 <__aeabi_d2f+0xde>
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4252      	negs	r2, r2
 8002d3e:	1b96      	subs	r6, r2, r6
 8002d40:	0002      	movs	r2, r0
 8002d42:	40f2      	lsrs	r2, r6
 8002d44:	0016      	movs	r6, r2
 8002d46:	2c20      	cmp	r4, #32
 8002d48:	d004      	beq.n	8002d54 <__aeabi_d2f+0xbc>
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <__aeabi_d2f+0x108>)
 8002d4c:	4694      	mov	ip, r2
 8002d4e:	4463      	add	r3, ip
 8002d50:	4098      	lsls	r0, r3
 8002d52:	4305      	orrs	r5, r0
 8002d54:	002a      	movs	r2, r5
 8002d56:	1e53      	subs	r3, r2, #1
 8002d58:	419a      	sbcs	r2, r3
 8002d5a:	4332      	orrs	r2, r6
 8002d5c:	2600      	movs	r6, #0
 8002d5e:	0753      	lsls	r3, r2, #29
 8002d60:	d1ce      	bne.n	8002d00 <__aeabi_d2f+0x68>
 8002d62:	2480      	movs	r4, #128	; 0x80
 8002d64:	0013      	movs	r3, r2
 8002d66:	04e4      	lsls	r4, r4, #19
 8002d68:	2001      	movs	r0, #1
 8002d6a:	4023      	ands	r3, r4
 8002d6c:	4222      	tst	r2, r4
 8002d6e:	d1d3      	bne.n	8002d18 <__aeabi_d2f+0x80>
 8002d70:	e7b0      	b.n	8002cd4 <__aeabi_d2f+0x3c>
 8002d72:	2300      	movs	r3, #0
 8002d74:	e7ad      	b.n	8002cd2 <__aeabi_d2f+0x3a>
 8002d76:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <__aeabi_d2f+0x10c>)
 8002d78:	4694      	mov	ip, r2
 8002d7a:	002a      	movs	r2, r5
 8002d7c:	40e2      	lsrs	r2, r4
 8002d7e:	0014      	movs	r4, r2
 8002d80:	002a      	movs	r2, r5
 8002d82:	4463      	add	r3, ip
 8002d84:	409a      	lsls	r2, r3
 8002d86:	4098      	lsls	r0, r3
 8002d88:	1e55      	subs	r5, r2, #1
 8002d8a:	41aa      	sbcs	r2, r5
 8002d8c:	4302      	orrs	r2, r0
 8002d8e:	4322      	orrs	r2, r4
 8002d90:	e7e4      	b.n	8002d5c <__aeabi_d2f+0xc4>
 8002d92:	0033      	movs	r3, r6
 8002d94:	e79e      	b.n	8002cd4 <__aeabi_d2f+0x3c>
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	000007fe 	.word	0x000007fe
 8002d9c:	fffffc80 	.word	0xfffffc80
 8002da0:	fffffca2 	.word	0xfffffca2
 8002da4:	fffffc82 	.word	0xfffffc82

08002da8 <__clzsi2>:
 8002da8:	211c      	movs	r1, #28
 8002daa:	2301      	movs	r3, #1
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	4298      	cmp	r0, r3
 8002db0:	d301      	bcc.n	8002db6 <__clzsi2+0xe>
 8002db2:	0c00      	lsrs	r0, r0, #16
 8002db4:	3910      	subs	r1, #16
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	4298      	cmp	r0, r3
 8002dba:	d301      	bcc.n	8002dc0 <__clzsi2+0x18>
 8002dbc:	0a00      	lsrs	r0, r0, #8
 8002dbe:	3908      	subs	r1, #8
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	4298      	cmp	r0, r3
 8002dc4:	d301      	bcc.n	8002dca <__clzsi2+0x22>
 8002dc6:	0900      	lsrs	r0, r0, #4
 8002dc8:	3904      	subs	r1, #4
 8002dca:	a202      	add	r2, pc, #8	; (adr r2, 8002dd4 <__clzsi2+0x2c>)
 8002dcc:	5c10      	ldrb	r0, [r2, r0]
 8002dce:	1840      	adds	r0, r0, r1
 8002dd0:	4770      	bx	lr
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	02020304 	.word	0x02020304
 8002dd8:	01010101 	.word	0x01010101
	...

08002de4 <__clzdi2>:
 8002de4:	b510      	push	{r4, lr}
 8002de6:	2900      	cmp	r1, #0
 8002de8:	d103      	bne.n	8002df2 <__clzdi2+0xe>
 8002dea:	f7ff ffdd 	bl	8002da8 <__clzsi2>
 8002dee:	3020      	adds	r0, #32
 8002df0:	e002      	b.n	8002df8 <__clzdi2+0x14>
 8002df2:	0008      	movs	r0, r1
 8002df4:	f7ff ffd8 	bl	8002da8 <__clzsi2>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)

08002dfc <Processor_type>:
 */


 // Function To find  type of MCU
char Processor_type(uint8_t module_name)
{
 8002dfc:	0003      	movs	r3, r0
	{
	  return 'F' ;
      }
    else
      {
	  return 'G';
 8002dfe:	2047      	movs	r0, #71	; 0x47
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	d804      	bhi.n	8002e0e <Processor_type+0x12>
 8002e04:	4a02      	ldr	r2, [pc, #8]	; (8002e10 <Processor_type+0x14>)
	  return 'G';
 8002e06:	3846      	subs	r0, #70	; 0x46
	if( module_name==_H1AR2 || module_name==_H23R3 || module_name==_H10R4||
 8002e08:	40da      	lsrs	r2, r3
	  return 'G';
 8002e0a:	4390      	bics	r0, r2
 8002e0c:	3046      	adds	r0, #70	; 0x46
	  }
}
 8002e0e:	4770      	bx	lr
 8002e10:	0f8ac7e0 	.word	0x0f8ac7e0

08002e14 <Send_BOS_Message>:
{
	 return array[dst-1][0];
}

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout,uint8_t dst)
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46c6      	mov	lr, r8
 8002e18:	0017      	movs	r7, r2
	 return array[dst-1][0];
 8002e1a:	2216      	movs	r2, #22
{
 8002e1c:	0006      	movs	r6, r0
 8002e1e:	b500      	push	{lr}
 8002e20:	001d      	movs	r5, r3
 8002e22:	ab06      	add	r3, sp, #24
 8002e24:	7818      	ldrb	r0, [r3, #0]
	 return array[dst-1][0];
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <Send_BOS_Message+0x94>)
 8002e28:	3801      	subs	r0, #1
 8002e2a:	4342      	muls	r2, r0
 8002e2c:	5ad3      	ldrh	r3, [r2, r3]
	uint8_t module_name=Get_Module_Name(dst);
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL)
 8002e2e:	0030      	movs	r0, r6
{
 8002e30:	000c      	movs	r4, r1
	 return array[dst-1][0];
 8002e32:	4698      	mov	r8, r3
	if(GetUart(port) != NULL)
 8002e34:	f00a fc7a 	bl	800d72c <GetUart>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d024      	beq.n	8002e86 <Send_BOS_Message+0x72>
	{
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK)
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <Send_BOS_Message+0x98>)
 8002e3e:	00b2      	lsls	r2, r6, #2
 8002e40:	0029      	movs	r1, r5
 8002e42:	58d0      	ldr	r0, [r2, r3]
 8002e44:	f00a fe08 	bl	800da58 <osSemaphoreWait>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d11c      	bne.n	8002e86 <Send_BOS_Message+0x72>
		{
			if(Processor_type(module_name)=='G')
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	b2d8      	uxtb	r0, r3
 8002e50:	f7ff ffd4 	bl	8002dfc <Processor_type>
 8002e54:	2847      	cmp	r0, #71	; 0x47
 8002e56:	d01e      	beq.n	8002e96 <Send_BOS_Message+0x82>
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
			}
			else
			{
			for(uint8_t i=0;i<n;i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4698      	mov	r8, r3
 8002e5c:	2f00      	cmp	r7, #0
 8002e5e:	d012      	beq.n	8002e86 <Send_BOS_Message+0x72>
			  {
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002e60:	0030      	movs	r0, r6
 8002e62:	f00a fc63 	bl	800d72c <GetUart>
 8002e66:	2201      	movs	r2, #1
 8002e68:	0021      	movs	r1, r4
 8002e6a:	f00f f9ef 	bl	801224c <HAL_UART_Transmit_IT>
 8002e6e:	0005      	movs	r5, r0
				buffer++;
				//Delay_us(500);
			 	Delay_ms(2);
 8002e70:	2002      	movs	r0, #2
 8002e72:	f00c fca5 	bl	800f7c0 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002e76:	4643      	mov	r3, r8
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4690      	mov	r8, r2
				buffer++;
 8002e7e:	3401      	adds	r4, #1
			for(uint8_t i=0;i<n;i++)
 8002e80:	42ba      	cmp	r2, r7
 8002e82:	d3ed      	bcc.n	8002e60 <Send_BOS_Message+0x4c>
 8002e84:	e000      	b.n	8002e88 <Send_BOS_Message+0x74>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002e86:	2501      	movs	r5, #1
			  }
			}
		}
	}

	Delay_ms(10);// Delay Between Sending Two Messages.
 8002e88:	200a      	movs	r0, #10
 8002e8a:	f00c fc99 	bl	800f7c0 <HAL_Delay>
	return result;
}
 8002e8e:	0028      	movs	r0, r5
 8002e90:	bc80      	pop	{r7}
 8002e92:	46b8      	mov	r8, r7
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,n);
 8002e96:	0030      	movs	r0, r6
 8002e98:	f00a fc48 	bl	800d72c <GetUart>
 8002e9c:	003a      	movs	r2, r7
 8002e9e:	0021      	movs	r1, r4
 8002ea0:	f00f f9d4 	bl	801224c <HAL_UART_Transmit_IT>
 8002ea4:	0005      	movs	r5, r0
 8002ea6:	e7ef      	b.n	8002e88 <Send_BOS_Message+0x74>
 8002ea8:	20000f84 	.word	0x20000f84
 8002eac:	20001f08 	.word	0x20001f08

08002eb0 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <LoadROtopology+0x8c>)
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002eb4:	4922      	ldr	r1, [pc, #136]	; (8002f40 <LoadROtopology+0x90>)
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002eb6:	881b      	ldrh	r3, [r3, #0]
BOS_Status LoadROtopology(void){
 8002eb8:	b083      	sub	sp, #12
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002eba:	b29a      	uxth	r2, r3
	if(temp == 0xFFFF)				// Memory has been erased
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d035      	beq.n	8002f2c <LoadROtopology+0x7c>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002ec0:	0a16      	lsrs	r6, r2, #8
		if(N == 0)
 8002ec2:	d02c      	beq.n	8002f1e <LoadROtopology+0x6e>
		N =(uint8_t )(temp >> 8);
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <LoadROtopology+0x94>)
 8002ec6:	b2f6      	uxtb	r6, r6
 8002ec8:	701e      	strb	r6, [r3, #0]
			N =1;
		myID =(uint8_t )temp;
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <LoadROtopology+0x98>)
 8002ecc:	701a      	strb	r2, [r3, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002ece:	466b      	mov	r3, sp
 8002ed0:	1dd9      	adds	r1, r3, #7
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ed2:	2300      	movs	r3, #0
	uint16_t add =2, temp =0;
 8002ed4:	2202      	movs	r2, #2
		for(uint8_t i =1; i <= N; i++){
 8002ed6:	2501      	movs	r5, #1
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ed8:	469c      	mov	ip, r3
 8002eda:	4c1c      	ldr	r4, [pc, #112]	; (8002f4c <LoadROtopology+0x9c>)
 8002edc:	4663      	mov	r3, ip
 8002ede:	700b      	strb	r3, [r1, #0]
 8002ee0:	780b      	ldrb	r3, [r1, #0]
 8002ee2:	2b0a      	cmp	r3, #10
 8002ee4:	d814      	bhi.n	8002f10 <LoadROtopology+0x60>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ee6:	1e6b      	subs	r3, r5, #1
 8002ee8:	0098      	lsls	r0, r3, #2
 8002eea:	18c0      	adds	r0, r0, r3
 8002eec:	0040      	lsls	r0, r0, #1
 8002eee:	18c0      	adds	r0, r0, r3
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <LoadROtopology+0x8c>)
 8002ef2:	18d7      	adds	r7, r2, r3
 8002ef4:	780b      	ldrb	r3, [r1, #0]
 8002ef6:	883f      	ldrh	r7, [r7, #0]
 8002ef8:	18c3      	adds	r3, r0, r3
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	52e7      	strh	r7, [r4, r3]
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002efe:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002f00:	3202      	adds	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002f02:	3301      	adds	r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	700b      	strb	r3, [r1, #0]
 8002f08:	780b      	ldrb	r3, [r1, #0]
				add +=2;
 8002f0a:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002f0c:	2b0a      	cmp	r3, #10
 8002f0e:	d9ef      	bls.n	8002ef0 <LoadROtopology+0x40>
		for(uint8_t i =1; i <= N; i++){
 8002f10:	3501      	adds	r5, #1
 8002f12:	b2ed      	uxtb	r5, r5
 8002f14:	42ae      	cmp	r6, r5
 8002f16:	d2e1      	bcs.n	8002edc <LoadROtopology+0x2c>
 8002f18:	2000      	movs	r0, #0
			}
		}
	}
	
	return result;
}
 8002f1a:	b003      	add	sp, #12
 8002f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			N =1;
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <LoadROtopology+0x94>)
		myID =(uint8_t )temp;
 8002f22:	2601      	movs	r6, #1
			N =1;
 8002f24:	7019      	strb	r1, [r3, #0]
		myID =(uint8_t )temp;
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <LoadROtopology+0x98>)
 8002f28:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =1; i <= N; i++){
 8002f2a:	e7d0      	b.n	8002ece <LoadROtopology+0x1e>
		N =1;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <LoadROtopology+0x94>)
		return BOS_MEM_ERASED;
 8002f30:	20fa      	movs	r0, #250	; 0xfa
		N =1;
 8002f32:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <LoadROtopology+0x98>)
 8002f38:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002f3a:	e7ee      	b.n	8002f1a <LoadROtopology+0x6a>
 8002f3c:	0801d800 	.word	0x0801d800
 8002f40:	0000ffff 	.word	0x0000ffff
 8002f44:	20000008 	.word	0x20000008
 8002f48:	20000aa8 	.word	0x20000aa8
 8002f4c:	20000f84 	.word	0x20000f84

08002f50 <LoadEEalias>:
}

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f52:	4657      	mov	r7, sl
 8002f54:	464e      	mov	r6, r9
 8002f56:	46de      	mov	lr, fp
 8002f58:	4645      	mov	r5, r8
 8002f5a:	b5e0      	push	{r5, r6, r7, lr}
 8002f5c:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f5e:	466b      	mov	r3, sp
 8002f60:	1d9e      	adds	r6, r3, #6
 8002f62:	2300      	movs	r3, #0
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f64:	4698      	mov	r8, r3
	uint16_t add =0, temp =0;
 8002f66:	8033      	strh	r3, [r6, #0]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <LoadEEalias+0x80>)
	uint16_t add =0, temp =0;
 8002f6a:	2721      	movs	r7, #33	; 0x21
 8002f6c:	469a      	mov	sl, r3
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <LoadEEalias+0x84>)
 8002f70:	469b      	mov	fp, r3
 8002f72:	4643      	mov	r3, r8
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	001d      	movs	r5, r3
 8002f78:	4699      	mov	r9, r3
 8002f7a:	4445      	add	r5, r8
 8002f7c:	1f7c      	subs	r4, r7, #5
 8002f7e:	006d      	lsls	r5, r5, #1
 8002f80:	b2a4      	uxth	r4, r4
 8002f82:	4455      	add	r5, sl
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002f84:	0020      	movs	r0, r4
 8002f86:	0031      	movs	r1, r6
 8002f88:	f008 fae8 	bl	800b55c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002f8c:	8833      	ldrh	r3, [r6, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f8e:	3401      	adds	r4, #1
			moduleAlias[i][j] =(uint8_t )temp;
 8002f90:	706b      	strb	r3, [r5, #1]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f92:	b2a4      	uxth	r4, r4
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f98:	3502      	adds	r5, #2
 8002f9a:	42bc      	cmp	r4, r7
 8002f9c:	d1f2      	bne.n	8002f84 <LoadEEalias+0x34>
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002f9e:	464f      	mov	r7, r9
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4447      	add	r7, r8
 8002fa4:	007f      	lsls	r7, r7, #1
 8002fa6:	4457      	add	r7, sl
 8002fa8:	727b      	strb	r3, [r7, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002faa:	4643      	mov	r3, r8
 8002fac:	3301      	adds	r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	465b      	mov	r3, fp
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3405      	adds	r4, #5
 8002fb8:	b2a7      	uxth	r7, r4
 8002fba:	4543      	cmp	r3, r8
 8002fbc:	d2d9      	bcs.n	8002f72 <LoadEEalias+0x22>
	}
	
	return result;
}
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	b003      	add	sp, #12
 8002fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8002fc4:	46bb      	mov	fp, r7
 8002fc6:	46b2      	mov	sl, r6
 8002fc8:	46a9      	mov	r9, r5
 8002fca:	46a0      	mov	r8, r4
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000e74 	.word	0x20000e74
 8002fd4:	20000008 	.word	0x20000008

08002fd8 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	4646      	mov	r6, r8
 8002fdc:	46d6      	mov	lr, sl
 8002fde:	464f      	mov	r7, r9
 8002fe0:	b5c0      	push	{r6, r7, lr}
 8002fe2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002fe4:	466b      	mov	r3, sp
 8002fe6:	1d9e      	adds	r6, r3, #6
 8002fe8:	2300      	movs	r3, #0
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002fea:	4d23      	ldr	r5, [pc, #140]	; (8003078 <LoadEEgroup+0xa0>)
	uint16_t add =0, temp =0;
 8002fec:	8033      	strh	r3, [r6, #0]
	for(i =0; i < N; i++)			// N modules
 8002fee:	782b      	ldrb	r3, [r5, #0]
	uint16_t add =0, temp =0;
 8002ff0:	2400      	movs	r4, #0
	for(i =0; i < N; i++)			// N modules
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03c      	beq.n	8003070 <LoadEEgroup+0x98>
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <LoadEEgroup+0xa4>)
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4698      	mov	r8, r3
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ffc:	1d1f      	adds	r7, r3, #4
 8002ffe:	0020      	movs	r0, r4
 8003000:	0049      	lsls	r1, r1, #1
 8003002:	30cb      	adds	r0, #203	; 0xcb
 8003004:	1879      	adds	r1, r7, r1
 8003006:	b280      	uxth	r0, r0
 8003008:	f008 faa8 	bl	800b55c <EE_ReadVariable>
		add++;
 800300c:	1c61      	adds	r1, r4, #1
	for(i =0; i < N; i++)			// N modules
 800300e:	782b      	ldrb	r3, [r5, #0]
		add++;
 8003010:	b28c      	uxth	r4, r1
	for(i =0; i < N; i++)			// N modules
 8003012:	b2c9      	uxtb	r1, r1
 8003014:	428b      	cmp	r3, r1
 8003016:	d8f2      	bhi.n	8002ffe <LoadEEgroup+0x26>
 8003018:	2338      	movs	r3, #56	; 0x38
 800301a:	0027      	movs	r7, r4
 800301c:	34d0      	adds	r4, #208	; 0xd0
 800301e:	469c      	mov	ip, r3
 8003020:	b2a3      	uxth	r3, r4
 8003022:	4699      	mov	r9, r3
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003024:	2300      	movs	r3, #0
 8003026:	469a      	mov	sl, r3
 8003028:	379e      	adds	r7, #158	; 0x9e
 800302a:	44e0      	add	r8, ip
 800302c:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 800302e:	4645      	mov	r5, r8
 8003030:	1f7c      	subs	r4, r7, #5
 8003032:	b2a4      	uxth	r4, r4
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003034:	0020      	movs	r0, r4
 8003036:	0031      	movs	r1, r6
 8003038:	f008 fa90 	bl	800b55c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 800303c:	8833      	ldrh	r3, [r6, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800303e:	3401      	adds	r4, #1
			groupAlias[i][j] =(uint8_t )temp;
 8003040:	706b      	strb	r3, [r5, #1]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003042:	b2a4      	uxth	r4, r4
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003048:	3502      	adds	r5, #2
 800304a:	42a7      	cmp	r7, r4
 800304c:	d1f2      	bne.n	8003034 <LoadEEgroup+0x5c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800304e:	4643      	mov	r3, r8
 8003050:	4652      	mov	r2, sl
 8003052:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003054:	230a      	movs	r3, #10
 8003056:	469c      	mov	ip, r3
 8003058:	3705      	adds	r7, #5
 800305a:	b2bf      	uxth	r7, r7
 800305c:	44e0      	add	r8, ip
 800305e:	454f      	cmp	r7, r9
 8003060:	d1e5      	bne.n	800302e <LoadEEgroup+0x56>
	}
	
	return result;
}
 8003062:	2000      	movs	r0, #0
 8003064:	b002      	add	sp, #8
 8003066:	bce0      	pop	{r5, r6, r7}
 8003068:	46ba      	mov	sl, r7
 800306a:	46b1      	mov	r9, r6
 800306c:	46a8      	mov	r8, r5
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <LoadEEgroup+0xa4>)
 8003072:	4698      	mov	r8, r3
 8003074:	e7d0      	b.n	8003018 <LoadEEgroup+0x40>
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	20000008 	.word	0x20000008
 800307c:	20000aa8 	.word	0x20000aa8

08003080 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b085      	sub	sp, #20
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003084:	2300      	movs	r3, #0
 8003086:	466a      	mov	r2, sp
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003088:	20e4      	movs	r0, #228	; 0xe4
 800308a:	a903      	add	r1, sp, #12
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 800308c:	8193      	strh	r3, [r2, #12]
 800308e:	81d3      	strh	r3, [r2, #14]
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003090:	f008 fa64 	bl	800b55c <EE_ReadVariable>
	uint8_t direction =0;
 8003094:	2500      	movs	r5, #0
	if(!status1){
 8003096:	2800      	cmp	r0, #0
 8003098:	d101      	bne.n	800309e <LoadEEstreams+0x1e>
		direction =(uint8_t )temp1;
 800309a:	466b      	mov	r3, sp
 800309c:	7b1d      	ldrb	r5, [r3, #12]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 800309e:	a903      	add	r1, sp, #12
 80030a0:	20e5      	movs	r0, #229	; 0xe5
 80030a2:	f008 fa5b 	bl	800b55c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80030a6:	230e      	movs	r3, #14
 80030a8:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80030aa:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80030ac:	0019      	movs	r1, r3
 80030ae:	20e6      	movs	r0, #230	; 0xe6
 80030b0:	f008 fa54 	bl	800b55c <EE_ReadVariable>
	if(!status1 && !status2){
 80030b4:	4304      	orrs	r4, r0
 80030b6:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80030b8:	2600      	movs	r6, #0
	if(!status1 && !status2){
 80030ba:	2c00      	cmp	r4, #0
 80030bc:	d104      	bne.n	80030c8 <LoadEEstreams+0x48>
		count =((uint32_t )temp1 << 16) + temp2;
 80030be:	466b      	mov	r3, sp
 80030c0:	899e      	ldrh	r6, [r3, #12]
 80030c2:	89db      	ldrh	r3, [r3, #14]
 80030c4:	0436      	lsls	r6, r6, #16
 80030c6:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80030c8:	a903      	add	r1, sp, #12
 80030ca:	20e7      	movs	r0, #231	; 0xe7
 80030cc:	f008 fa46 	bl	800b55c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80030d0:	230e      	movs	r3, #14
 80030d2:	446b      	add	r3, sp
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80030d4:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80030d6:	0019      	movs	r1, r3
 80030d8:	20e8      	movs	r0, #232	; 0xe8
 80030da:	f008 fa3f 	bl	800b55c <EE_ReadVariable>
	if(!status1 && !status2){
 80030de:	4304      	orrs	r4, r0
 80030e0:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80030e2:	2700      	movs	r7, #0
	if(!status1 && !status2){
 80030e4:	2c00      	cmp	r4, #0
 80030e6:	d104      	bne.n	80030f2 <LoadEEstreams+0x72>
		timeout =((uint32_t )temp1 << 16) + temp2;
 80030e8:	466b      	mov	r3, sp
 80030ea:	899f      	ldrh	r7, [r3, #12]
 80030ec:	89db      	ldrh	r3, [r3, #14]
 80030ee:	043f      	lsls	r7, r7, #16
 80030f0:	18ff      	adds	r7, r7, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 80030f2:	20e9      	movs	r0, #233	; 0xe9
 80030f4:	a903      	add	r1, sp, #12
 80030f6:	f008 fa31 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d02f      	beq.n	800315e <LoadEEstreams+0xde>
 80030fe:	4c26      	ldr	r4, [pc, #152]	; (8003198 <LoadEEstreams+0x118>)
		src1 =(uint8_t )(temp1 >> 8);
		dst1 =(uint8_t )temp1;
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003100:	20ea      	movs	r0, #234	; 0xea
 8003102:	a903      	add	r1, sp, #12
 8003104:	f008 fa2a 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 8003108:	2800      	cmp	r0, #0
 800310a:	d104      	bne.n	8003116 <LoadEEstreams+0x96>
		src2 =(uint8_t )(temp1 >> 8);
 800310c:	466b      	mov	r3, sp
 800310e:	899b      	ldrh	r3, [r3, #12]
 8003110:	0a1a      	lsrs	r2, r3, #8
 8003112:	77a2      	strb	r2, [r4, #30]
		dst2 =(uint8_t )temp1;
 8003114:	77e3      	strb	r3, [r4, #31]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8003116:	20eb      	movs	r0, #235	; 0xeb
 8003118:	a903      	add	r1, sp, #12
 800311a:	f008 fa1f 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 800311e:	2800      	cmp	r0, #0
 8003120:	d106      	bne.n	8003130 <LoadEEstreams+0xb0>
		src3 =(uint8_t )(temp1 >> 8);
 8003122:	466b      	mov	r3, sp
 8003124:	2220      	movs	r2, #32
 8003126:	899b      	ldrh	r3, [r3, #12]
 8003128:	0a19      	lsrs	r1, r3, #8
 800312a:	54a1      	strb	r1, [r4, r2]
		dst3 =(uint8_t )temp1;
 800312c:	3201      	adds	r2, #1
 800312e:	54a3      	strb	r3, [r4, r2]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003130:	7f23      	ldrb	r3, [r4, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <LoadEEstreams+0xbc>
 8003136:	7f62      	ldrb	r2, [r4, #29]
 8003138:	2a00      	cmp	r2, #0
 800313a:	d11e      	bne.n	800317a <LoadEEstreams+0xfa>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 800313c:	7fa3      	ldrb	r3, [r4, #30]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <LoadEEstreams+0xc8>
 8003142:	7fe2      	ldrb	r2, [r4, #31]
 8003144:	2a00      	cmp	r2, #0
 8003146:	d11f      	bne.n	8003188 <LoadEEstreams+0x108>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003148:	2320      	movs	r3, #32
 800314a:	5ce3      	ldrb	r3, [r4, r3]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <LoadEEstreams+0xd8>
 8003150:	2221      	movs	r2, #33	; 0x21
 8003152:	5ca2      	ldrb	r2, [r4, r2]
 8003154:	2a00      	cmp	r2, #0
 8003156:	d109      	bne.n	800316c <LoadEEstreams+0xec>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003158:	2000      	movs	r0, #0
 800315a:	b005      	add	sp, #20
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		src1 =(uint8_t )(temp1 >> 8);
 800315e:	466b      	mov	r3, sp
 8003160:	899b      	ldrh	r3, [r3, #12]
 8003162:	4c0d      	ldr	r4, [pc, #52]	; (8003198 <LoadEEstreams+0x118>)
 8003164:	0a1a      	lsrs	r2, r3, #8
 8003166:	7722      	strb	r2, [r4, #28]
		dst1 =(uint8_t )temp1;
 8003168:	7763      	strb	r3, [r4, #29]
 800316a:	e7c9      	b.n	8003100 <LoadEEstreams+0x80>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 800316c:	9200      	str	r2, [sp, #0]
 800316e:	0031      	movs	r1, r6
 8003170:	003a      	movs	r2, r7
 8003172:	0028      	movs	r0, r5
 8003174:	f004 fcee 	bl	8007b54 <SetupDMAStreams>
 8003178:	e7ee      	b.n	8003158 <LoadEEstreams+0xd8>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800317a:	9200      	str	r2, [sp, #0]
 800317c:	0031      	movs	r1, r6
 800317e:	003a      	movs	r2, r7
 8003180:	0028      	movs	r0, r5
 8003182:	f004 fce7 	bl	8007b54 <SetupDMAStreams>
 8003186:	e7d9      	b.n	800313c <LoadEEstreams+0xbc>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	0031      	movs	r1, r6
 800318c:	003a      	movs	r2, r7
 800318e:	0028      	movs	r0, r5
 8003190:	f004 fce0 	bl	8007b54 <SetupDMAStreams>
 8003194:	e7d8      	b.n	8003148 <LoadEEstreams+0xc8>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	20000b28 	.word	0x20000b28

0800319c <LoadEEparams>:
BOS_Status LoadEEparams(void){
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800319c:	208a      	movs	r0, #138	; 0x8a
BOS_Status LoadEEparams(void){
 800319e:	b530      	push	{r4, r5, lr}
 80031a0:	b083      	sub	sp, #12
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80031a2:	a901      	add	r1, sp, #4
 80031a4:	0040      	lsls	r0, r0, #1
 80031a6:	f008 f9d9 	bl	800b55c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
		BOSMessaging.response =(uint8_t )temp1;
 80031aa:	4c53      	ldr	r4, [pc, #332]	; (80032f8 <LoadEEparams+0x15c>)
	if(!status1){
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d15e      	bne.n	800326e <LoadEEparams+0xd2>
		BOSMessaging.response =(uint8_t )temp1;
 80031b0:	466b      	mov	r3, sp
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80031b2:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =(uint8_t )temp1;
 80031b4:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80031b6:	a901      	add	r1, sp, #4
		BOSMessaging.response =(uint8_t )temp1;
 80031b8:	84a3      	strh	r3, [r4, #36]	; 0x24
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80031ba:	0040      	lsls	r0, r0, #1
 80031bc:	f008 f9ce 	bl	800b55c <EE_ReadVariable>

	if(!status1){
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d15e      	bne.n	8003282 <LoadEEparams+0xe6>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80031c4:	466b      	mov	r3, sp
 80031c6:	0021      	movs	r1, r4
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031c8:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	3124      	adds	r1, #36	; 0x24
 80031ce:	0bda      	lsrs	r2, r3, #15
 80031d0:	710a      	strb	r2, [r1, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80031d2:	085b      	lsrs	r3, r3, #1
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031d4:	a901      	add	r1, sp, #4
 80031d6:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80031d8:	8563      	strh	r3, [r4, #42]	; 0x2a
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80031da:	f008 f9bf 	bl	800b55c <EE_ReadVariable>
	if(!status1)
 80031de:	2800      	cmp	r0, #0
 80031e0:	d15d      	bne.n	800329e <LoadEEparams+0x102>
		BOS.buttons.debounce =temp1;
 80031e2:	466b      	mov	r3, sp
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031e4:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =temp1;
 80031e6:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80031e8:	a901      	add	r1, sp, #4
 80031ea:	0040      	lsls	r0, r0, #1
 80031ec:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80031ee:	f008 f9b5 	bl	800b55c <EE_ReadVariable>
	if(!status1)
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d15d      	bne.n	80032b2 <LoadEEparams+0x116>
		BOS.buttons.singleClickTime =temp1;
 80031f6:	466b      	mov	r3, sp
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031f8:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =temp1;
 80031fa:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80031fc:	a901      	add	r1, sp, #4
 80031fe:	30ff      	adds	r0, #255	; 0xff
 8003200:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8003202:	f008 f9ab 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 8003206:	2800      	cmp	r0, #0
 8003208:	d15d      	bne.n	80032c6 <LoadEEparams+0x12a>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 800320a:	466b      	mov	r3, sp
 800320c:	889b      	ldrh	r3, [r3, #4]
 800320e:	8623      	strh	r3, [r4, #48]	; 0x30
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003210:	208c      	movs	r0, #140	; 0x8c
 8003212:	a901      	add	r1, sp, #4
 8003214:	0040      	lsls	r0, r0, #1
 8003216:	f008 f9a1 	bl	800b55c <EE_ReadVariable>
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800321a:	466b      	mov	r3, sp
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800321c:	0005      	movs	r5, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800321e:	201a      	movs	r0, #26
 8003220:	1d99      	adds	r1, r3, #6
 8003222:	30ff      	adds	r0, #255	; 0xff
 8003224:	f008 f99a 	bl	800b55c <EE_ReadVariable>
	if(!status1 && !status2){
 8003228:	4305      	orrs	r5, r0
 800322a:	b2ad      	uxth	r5, r5
 800322c:	2d00      	cmp	r5, #0
 800322e:	d156      	bne.n	80032de <LoadEEparams+0x142>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003230:	466b      	mov	r3, sp
 8003232:	466a      	mov	r2, sp
 8003234:	88db      	ldrh	r3, [r3, #6]
 8003236:	8892      	ldrh	r2, [r2, #4]
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	4313      	orrs	r3, r2
 800323c:	6363      	str	r3, [r4, #52]	; 0x34
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800323e:	208d      	movs	r0, #141	; 0x8d
 8003240:	a901      	add	r1, sp, #4
 8003242:	0040      	lsls	r0, r0, #1
 8003244:	f008 f98a 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 8003248:	2800      	cmp	r0, #0
 800324a:	d144      	bne.n	80032d6 <LoadEEparams+0x13a>
		BOS.daylightsaving =(int8_t )temp1;
 800324c:	466b      	mov	r3, sp
 800324e:	889b      	ldrh	r3, [r3, #4]
 8003250:	8723      	strh	r3, [r4, #56]	; 0x38
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003252:	201c      	movs	r0, #28
 8003254:	a901      	add	r1, sp, #4
 8003256:	30ff      	adds	r0, #255	; 0xff
 8003258:	f008 f980 	bl	800b55c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800325c:	2800      	cmp	r0, #0
 800325e:	d136      	bne.n	80032ce <LoadEEparams+0x132>
		BOS.disableCLI =(uint8_t )temp1;
 8003260:	466b      	mov	r3, sp
 8003262:	791b      	ldrb	r3, [r3, #4]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 8003264:	2000      	movs	r0, #0
 8003266:	342c      	adds	r4, #44	; 0x2c
 8003268:	76a3      	strb	r3, [r4, #26]
 800326a:	b003      	add	sp, #12
 800326c:	bd30      	pop	{r4, r5, pc}
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800326e:	208e      	movs	r0, #142	; 0x8e
		BOSMessaging.response =BOSMessging_default.response;
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003272:	a901      	add	r1, sp, #4
		BOSMessaging.response =BOSMessging_default.response;
 8003274:	889b      	ldrh	r3, [r3, #4]
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003276:	0040      	lsls	r0, r0, #1
		BOSMessaging.response =BOSMessging_default.response;
 8003278:	84a3      	strh	r3, [r4, #36]	; 0x24
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800327a:	f008 f96f 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 800327e:	2800      	cmp	r0, #0
 8003280:	d0a0      	beq.n	80031c4 <LoadEEparams+0x28>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003282:	0022      	movs	r2, r4
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003284:	2016      	movs	r0, #22
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <LoadEEparams+0x160>)
 8003288:	3224      	adds	r2, #36	; 0x24
 800328a:	7a19      	ldrb	r1, [r3, #8]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800328c:	30ff      	adds	r0, #255	; 0xff
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800328e:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003290:	895b      	ldrh	r3, [r3, #10]
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003292:	a901      	add	r1, sp, #4
		BOSMessaging.trial=BOSMessging_default.trial;
 8003294:	8563      	strh	r3, [r4, #42]	; 0x2a
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003296:	f008 f961 	bl	800b55c <EE_ReadVariable>
	if(!status1)
 800329a:	2800      	cmp	r0, #0
 800329c:	d0a1      	beq.n	80031e2 <LoadEEparams+0x46>
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800329e:	208b      	movs	r0, #139	; 0x8b
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80032a2:	a901      	add	r1, sp, #4
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80032a4:	899b      	ldrh	r3, [r3, #12]
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80032a6:	0040      	lsls	r0, r0, #1
 80032a8:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80032aa:	f008 f957 	bl	800b55c <EE_ReadVariable>
	if(!status1)
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d0a1      	beq.n	80031f6 <LoadEEparams+0x5a>
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80032b2:	2018      	movs	r0, #24
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <LoadEEparams+0x160>)
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80032b6:	a901      	add	r1, sp, #4
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80032b8:	89db      	ldrh	r3, [r3, #14]
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80032ba:	30ff      	adds	r0, #255	; 0xff
 80032bc:	85e3      	strh	r3, [r4, #46]	; 0x2e
 80032be:	f008 f94d 	bl	800b55c <EE_ReadVariable>
	if(!status1){
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d0a1      	beq.n	800320a <LoadEEparams+0x6e>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <LoadEEparams+0x160>)
 80032c8:	8a1b      	ldrh	r3, [r3, #16]
 80032ca:	8623      	strh	r3, [r4, #48]	; 0x30
 80032cc:	e7a0      	b.n	8003210 <LoadEEparams+0x74>
		BOS.disableCLI =BOS_default.disableCLI;
 80032ce:	2326      	movs	r3, #38	; 0x26
 80032d0:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <LoadEEparams+0x160>)
 80032d2:	5cd3      	ldrb	r3, [r2, r3]
 80032d4:	e7c6      	b.n	8003264 <LoadEEparams+0xc8>
		BOS.daylightsaving =DAYLIGHT_NONE;
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	015b      	lsls	r3, r3, #5
 80032da:	8723      	strh	r3, [r4, #56]	; 0x38
 80032dc:	e7b9      	b.n	8003252 <LoadEEparams+0xb6>
	else if(CLI_LOW_Baudrate_Flag)
 80032de:	2348      	movs	r3, #72	; 0x48
 80032e0:	5ce3      	ldrb	r3, [r4, r3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80032e6:	23e1      	movs	r3, #225	; 0xe1
 80032e8:	025b      	lsls	r3, r3, #9
 80032ea:	6363      	str	r3, [r4, #52]	; 0x34
 80032ec:	e7a7      	b.n	800323e <LoadEEparams+0xa2>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80032ee:	4b03      	ldr	r3, [pc, #12]	; (80032fc <LoadEEparams+0x160>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	6363      	str	r3, [r4, #52]	; 0x34
 80032f4:	e7a3      	b.n	800323e <LoadEEparams+0xa2>
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	20000b28 	.word	0x20000b28
 80032fc:	20000008 	.word	0x20000008

08003300 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	464f      	mov	r7, r9
 8003304:	4646      	mov	r6, r8
 8003306:	46d6      	mov	lr, sl
 8003308:	b5c0      	push	{r6, r7, lr}
 800330a:	b088      	sub	sp, #32
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800330c:	2300      	movs	r3, #0
 800330e:	466a      	mov	r2, sp
 8003310:	83d3      	strh	r3, [r2, #30]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003312:	330f      	adds	r3, #15
 8003314:	4698      	mov	r8, r3
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003316:	3b0e      	subs	r3, #14
 8003318:	4699      	mov	r9, r3
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800331a:	3304      	adds	r3, #4
 800331c:	33ff      	adds	r3, #255	; 0xff
	uint16_t temp16 =0, status1 =0;
 800331e:	2701      	movs	r7, #1
 8003320:	24ec      	movs	r4, #236	; 0xec
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003322:	469a      	mov	sl, r3
 8003324:	4e33      	ldr	r6, [pc, #204]	; (80033f4 <LoadEEbuttons+0xf4>)
 8003326:	e006      	b.n	8003336 <LoadEEbuttons+0x36>
 8003328:	3404      	adds	r4, #4
 800332a:	3701      	adds	r7, #1
 800332c:	b2a4      	uxth	r4, r4
 800332e:	b2ff      	uxtb	r7, r7
 8003330:	3609      	adds	r6, #9
 8003332:	4554      	cmp	r4, sl
 8003334:	d057      	beq.n	80033e6 <LoadEEbuttons+0xe6>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003336:	231e      	movs	r3, #30
 8003338:	446b      	add	r3, sp
 800333a:	0019      	movs	r1, r3
 800333c:	0020      	movs	r0, r4
 800333e:	f008 f90d 	bl	800b55c <EE_ReadVariable>
 8003342:	1e05      	subs	r5, r0, #0
		if(!status1)									// This variable exists
 8003344:	d1f0      	bne.n	8003328 <LoadEEbuttons+0x28>
			temp8 =(uint8_t )(temp16 >> 8);
 8003346:	466b      	mov	r3, sp
 8003348:	8bdb      	ldrh	r3, [r3, #30]
 800334a:	0a19      	lsrs	r1, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800334c:	0b1a      	lsrs	r2, r3, #12
 800334e:	42ba      	cmp	r2, r7
 8003350:	d1ea      	bne.n	8003328 <LoadEEbuttons+0x28>
 8003352:	4642      	mov	r2, r8
 8003354:	4640      	mov	r0, r8
 8003356:	400a      	ands	r2, r1
 8003358:	4208      	tst	r0, r1
 800335a:	d0e5      	beq.n	8003328 <LoadEEbuttons+0x28>
				button[i + 1].events =(uint8_t )temp16;
 800335c:	71f3      	strb	r3, [r6, #7]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800335e:	231e      	movs	r3, #30
 8003360:	1c60      	adds	r0, r4, #1
 8003362:	446b      	add	r3, sp
 8003364:	0019      	movs	r1, r3
				button[i + 1].type =temp8 & 0x0F;
 8003366:	7032      	strb	r2, [r6, #0]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003368:	b280      	uxth	r0, r0
 800336a:	f008 f8f7 	bl	800b55c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800336e:	466b      	mov	r3, sp
 8003370:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003372:	1ca0      	adds	r0, r4, #2
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003374:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003376:	7133      	strb	r3, [r6, #4]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003378:	231e      	movs	r3, #30
 800337a:	446b      	add	r3, sp
 800337c:	0019      	movs	r1, r3
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800337e:	7072      	strb	r2, [r6, #1]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003380:	b280      	uxth	r0, r0
 8003382:	f008 f8eb 	bl	800b55c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003386:	466b      	mov	r3, sp
 8003388:	8bdb      	ldrh	r3, [r3, #30]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800338a:	1ce0      	adds	r0, r4, #3
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800338c:	0a1a      	lsrs	r2, r3, #8
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800338e:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003390:	231e      	movs	r3, #30
 8003392:	446b      	add	r3, sp
 8003394:	0019      	movs	r1, r3
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003396:	70b2      	strb	r2, [r6, #2]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003398:	b280      	uxth	r0, r0
 800339a:	f008 f8df 	bl	800b55c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800339e:	466b      	mov	r3, sp
 80033a0:	8bdb      	ldrh	r3, [r3, #30]
				AddPortButton(button[i + 1].type,i + 1);
 80033a2:	0039      	movs	r1, r7
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80033a4:	0a1a      	lsrs	r2, r3, #8
 80033a6:	70f2      	strb	r2, [r6, #3]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80033a8:	71b3      	strb	r3, [r6, #6]
				AddPortButton(button[i + 1].type,i + 1);
 80033aa:	7830      	ldrb	r0, [r6, #0]
 80033ac:	f008 fcdc 	bl	800bd68 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033b0:	4648      	mov	r0, r9
 80033b2:	79f1      	ldrb	r1, [r6, #7]
 80033b4:	7873      	ldrb	r3, [r6, #1]
 80033b6:	104a      	asrs	r2, r1, #1
 80033b8:	9505      	str	r5, [sp, #20]
 80033ba:	4002      	ands	r2, r0
 80033bc:	4001      	ands	r1, r0
 80033be:	79b0      	ldrb	r0, [r6, #6]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033c0:	3404      	adds	r4, #4
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033c2:	9004      	str	r0, [sp, #16]
 80033c4:	7970      	ldrb	r0, [r6, #5]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033c6:	b2a4      	uxth	r4, r4
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033c8:	9003      	str	r0, [sp, #12]
 80033ca:	7930      	ldrb	r0, [r6, #4]
 80033cc:	9002      	str	r0, [sp, #8]
 80033ce:	78f0      	ldrb	r0, [r6, #3]
 80033d0:	9001      	str	r0, [sp, #4]
 80033d2:	78b0      	ldrb	r0, [r6, #2]
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033d4:	3609      	adds	r6, #9
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033d6:	9000      	str	r0, [sp, #0]
 80033d8:	0038      	movs	r0, r7
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033da:	3701      	adds	r7, #1
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033dc:	f008 fdca 	bl	800bf74 <SetButtonEvents>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80033e0:	b2ff      	uxtb	r7, r7
 80033e2:	4554      	cmp	r4, sl
 80033e4:	d1a7      	bne.n	8003336 <LoadEEbuttons+0x36>
			}
		}
	}
	
	return result;
}
 80033e6:	2000      	movs	r0, #0
 80033e8:	b008      	add	sp, #32
 80033ea:	bce0      	pop	{r5, r6, r7}
 80033ec:	46ba      	mov	sl, r7
 80033ee:	46b1      	mov	r9, r6
 80033f0:	46a8      	mov	r8, r5
 80033f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f4:	20002846 	.word	0x20002846

080033f8 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fa:	46d6      	mov	lr, sl
 80033fc:	4646      	mov	r6, r8
 80033fe:	464f      	mov	r7, r9
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003400:	2032      	movs	r0, #50	; 0x32
BOS_Status LoadROsnippets(void){
 8003402:	b5c0      	push	{r6, r7, lr}
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003404:	f00f fc8e 	bl	8012d24 <malloc>
 8003408:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 800340a:	d06c      	beq.n	80034e6 <LoadROsnippets+0xee>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800340c:	4c37      	ldr	r4, [pc, #220]	; (80034ec <LoadROsnippets+0xf4>)
 800340e:	7823      	ldrb	r3, [r4, #0]
 8003410:	2bfe      	cmp	r3, #254	; 0xfe
 8003412:	d157      	bne.n	80034c4 <LoadROsnippets+0xcc>
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	4699      	mov	r9, r3
 8003418:	2364      	movs	r3, #100	; 0x64
 800341a:	469a      	mov	sl, r3
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 800341c:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <LoadROsnippets+0xf8>)
 800341e:	4f35      	ldr	r7, [pc, #212]	; (80034f4 <LoadROsnippets+0xfc>)
 8003420:	4698      	mov	r8, r3
 8003422:	44ba      	add	sl, r7
		for(i =0; i < sizeof(snippet_t); i++)
 8003424:	0021      	movs	r1, r4
BOS_Status LoadROsnippets(void){
 8003426:	0023      	movs	r3, r4
 8003428:	3114      	adds	r1, #20
 800342a:	1b35      	subs	r5, r6, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	54ea      	strb	r2, [r5, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 8003430:	3301      	adds	r3, #1
 8003432:	428b      	cmp	r3, r1
 8003434:	d1fa      	bne.n	800342c <LoadROsnippets+0x34>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003436:	2214      	movs	r2, #20
 8003438:	4649      	mov	r1, r9
 800343a:	0038      	movs	r0, r7
 800343c:	f00f fea6 	bl	801318c <memcpy>
		currentAdd=currentAdd+20;
 8003440:	3428      	adds	r4, #40	; 0x28
		memset(snipBuffer,0,sizeof(snippet_t));
 8003442:	2214      	movs	r2, #20
 8003444:	2100      	movs	r1, #0
 8003446:	0030      	movs	r0, r6
 8003448:	f00f fea9 	bl	801319e <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800344c:	7822      	ldrb	r2, [r4, #0]
 800344e:	2afd      	cmp	r2, #253	; 0xfd
 8003450:	d83a      	bhi.n	80034c8 <LoadROsnippets+0xd0>
		i =0;
 8003452:	2300      	movs	r3, #0
 8003454:	3d28      	subs	r5, #40	; 0x28
 8003456:	e001      	b.n	800345c <LoadROsnippets+0x64>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003458:	2b32      	cmp	r3, #50	; 0x32
 800345a:	d030      	beq.n	80034be <LoadROsnippets+0xc6>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 800345c:	552a      	strb	r2, [r5, r4]
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800345e:	7862      	ldrb	r2, [r4, #1]
			++i;
 8003460:	3301      	adds	r3, #1
			++currentAdd;
 8003462:	3401      	adds	r4, #1
			++i;
 8003464:	b2db      	uxtb	r3, r3
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003466:	2afd      	cmp	r2, #253	; 0xfd
 8003468:	d9f6      	bls.n	8003458 <LoadROsnippets+0x60>
		if(snipBuffer[i - 1] != 0)
 800346a:	001d      	movs	r5, r3
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	5cb2      	ldrb	r2, [r6, r2]
 8003470:	2a00      	cmp	r2, #0
 8003472:	d001      	beq.n	8003478 <LoadROsnippets+0x80>
			++i;	// String termination char was not recorded, then add one
 8003474:	3301      	adds	r3, #1
		snippets[s].cmd =(char* )malloc(i);
 8003476:	b2dd      	uxtb	r5, r3
 8003478:	0028      	movs	r0, r5
 800347a:	f00f fc53 	bl	8012d24 <malloc>
 800347e:	60f8      	str	r0, [r7, #12]
		if(snippets[s].cmd == NULL){
 8003480:	2800      	cmp	r0, #0
 8003482:	d026      	beq.n	80034d2 <LoadROsnippets+0xda>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003484:	002a      	movs	r2, r5
 8003486:	0031      	movs	r1, r6
 8003488:	f00f fe80 	bl	801318c <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800348c:	4643      	mov	r3, r8
 800348e:	4642      	mov	r2, r8
 8003490:	781b      	ldrb	r3, [r3, #0]
			memset(snipBuffer,0,i);
 8003492:	2100      	movs	r1, #0
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003494:	3301      	adds	r3, #1
 8003496:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003498:	0030      	movs	r0, r6
 800349a:	002a      	movs	r2, r5
 800349c:	f00f fe7f 	bl	801319e <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80034a0:	7823      	ldrb	r3, [r4, #0]
 80034a2:	2bfe      	cmp	r3, #254	; 0xfe
 80034a4:	d102      	bne.n	80034ac <LoadROsnippets+0xb4>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80034a6:	3714      	adds	r7, #20
 80034a8:	45ba      	cmp	sl, r7
 80034aa:	d1bb      	bne.n	8003424 <LoadROsnippets+0x2c>
			break;
	}
	
	free(snipBuffer);
 80034ac:	0030      	movs	r0, r6
 80034ae:	f00f fc43 	bl	8012d38 <free>
	return BOS_OK;
 80034b2:	2000      	movs	r0, #0
}
 80034b4:	bce0      	pop	{r5, r6, r7}
 80034b6:	46ba      	mov	sl, r7
 80034b8:	46b1      	mov	r9, r6
 80034ba:	46a8      	mov	r8, r5
 80034bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034be:	2231      	movs	r2, #49	; 0x31
 80034c0:	2532      	movs	r5, #50	; 0x32
 80034c2:	e7d4      	b.n	800346e <LoadROsnippets+0x76>
		return BOS_ERROR;
 80034c4:	20ff      	movs	r0, #255	; 0xff
 80034c6:	e7f5      	b.n	80034b4 <LoadROsnippets+0xbc>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034c8:	2201      	movs	r2, #1
 80034ca:	2500      	movs	r5, #0
		i =0;
 80034cc:	2300      	movs	r3, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034ce:	4252      	negs	r2, r2
 80034d0:	e7cd      	b.n	800346e <LoadROsnippets+0x76>
			memset(&snippets[s],0,sizeof(snippet_t));
 80034d2:	2214      	movs	r2, #20
 80034d4:	2100      	movs	r1, #0
 80034d6:	0038      	movs	r0, r7
 80034d8:	f00f fe61 	bl	801319e <memset>
			free(snipBuffer);
 80034dc:	0030      	movs	r0, r6
 80034de:	f00f fc2b 	bl	8012d38 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80034e2:	200e      	movs	r0, #14
 80034e4:	e7e6      	b.n	80034b4 <LoadROsnippets+0xbc>
		return BOS_MEM_FULL;
 80034e6:	20fb      	movs	r0, #251	; 0xfb
 80034e8:	e7e4      	b.n	80034b4 <LoadROsnippets+0xbc>
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	0801dc00 	.word	0x0801dc00
 80034f0:	200017ac 	.word	0x200017ac
 80034f4:	200017b0 	.word	0x200017b0

080034f8 <LoadEEvars>:
void LoadEEvars(void){
 80034f8:	b570      	push	{r4, r5, r6, lr}
	LoadROtopology();
 80034fa:	f7ff fcd9 	bl	8002eb0 <LoadROtopology>
	for(uint8_t i =1; i <= N; i++){
 80034fe:	4c0f      	ldr	r4, [pc, #60]	; (800353c <LoadEEvars+0x44>)
 8003500:	7823      	ldrb	r3, [r4, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <LoadEEvars+0x28>
 8003506:	2001      	movs	r0, #1
 8003508:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <LoadEEvars+0x48>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800350a:	1e41      	subs	r1, r0, #1
 800350c:	1c46      	adds	r6, r0, #1
 800350e:	0049      	lsls	r1, r1, #1
 8003510:	0030      	movs	r0, r6
 8003512:	1869      	adds	r1, r5, r1
 8003514:	f008 f822 	bl	800b55c <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8003518:	7823      	ldrb	r3, [r4, #0]
 800351a:	b2f0      	uxtb	r0, r6
 800351c:	4283      	cmp	r3, r0
 800351e:	d2f4      	bcs.n	800350a <LoadEEvars+0x12>
	LoadEEalias();
 8003520:	f7ff fd16 	bl	8002f50 <LoadEEalias>
	LoadEEgroup();
 8003524:	f7ff fd58 	bl	8002fd8 <LoadEEgroup>
	LoadEEstreams();
 8003528:	f7ff fdaa 	bl	8003080 <LoadEEstreams>
	LoadEEparams();
 800352c:	f7ff fe36 	bl	800319c <LoadEEparams>
	LoadEEbuttons();
 8003530:	f7ff fee6 	bl	8003300 <LoadEEbuttons>
	LoadROsnippets();
 8003534:	f7ff ff60 	bl	80033f8 <LoadROsnippets>
}
 8003538:	bd70      	pop	{r4, r5, r6, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000008 	.word	0x20000008
 8003540:	200029d4 	.word	0x200029d4

08003544 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	46c6      	mov	lr, r8
 8003548:	b500      	push	{lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800354a:	4e10      	ldr	r6, [pc, #64]	; (800358c <SaveEEportsDir+0x48>)
 800354c:	7833      	ldrb	r3, [r6, #0]
 800354e:	4698      	mov	r8, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d016      	beq.n	8003582 <SaveEEportsDir+0x3e>
	BOS_Status result =BOS_OK;
 8003554:	2300      	movs	r3, #0
	for(uint8_t i =1; i <= N; i++){
 8003556:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003558:	4698      	mov	r8, r3
 800355a:	4f0d      	ldr	r7, [pc, #52]	; (8003590 <SaveEEportsDir+0x4c>)
 800355c:	e007      	b.n	800356e <SaveEEportsDir+0x2a>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800355e:	2c19      	cmp	r4, #25
 8003560:	d901      	bls.n	8003566 <SaveEEportsDir+0x22>
			result =BOS_ERR_EEPROM;
 8003562:	230a      	movs	r3, #10
 8003564:	4698      	mov	r8, r3
	for(uint8_t i =1; i <= N; i++){
 8003566:	7833      	ldrb	r3, [r6, #0]
 8003568:	b2ec      	uxtb	r4, r5
 800356a:	42a3      	cmp	r3, r4
 800356c:	d309      	bcc.n	8003582 <SaveEEportsDir+0x3e>
		if(arrayPortsDir[i - 1])
 800356e:	1e63      	subs	r3, r4, #1
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	5af9      	ldrh	r1, [r7, r3]
 8003574:	1c65      	adds	r5, r4, #1
 8003576:	2900      	cmp	r1, #0
 8003578:	d0f1      	beq.n	800355e <SaveEEportsDir+0x1a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800357a:	b2a8      	uxth	r0, r5
 800357c:	f008 f81a 	bl	800b5b4 <EE_WriteVariable>
 8003580:	e7ed      	b.n	800355e <SaveEEportsDir+0x1a>
	}
	
	return result;
}
 8003582:	4640      	mov	r0, r8
 8003584:	bc80      	pop	{r7}
 8003586:	46b8      	mov	r8, r7
 8003588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	20000008 	.word	0x20000008
 8003590:	200029d4 	.word	0x200029d4

08003594 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8003594:	2300      	movs	r3, #0
BOS_Status SaveEEalias(void){
 8003596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003598:	4646      	mov	r6, r8
 800359a:	46d6      	mov	lr, sl
 800359c:	464f      	mov	r7, r9
	uint16_t add =0, temp =0;
 800359e:	4698      	mov	r8, r3
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <SaveEEalias+0x80>)
BOS_Status SaveEEalias(void){
 80035a2:	b5c0      	push	{r6, r7, lr}
 80035a4:	4699      	mov	r9, r3
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <SaveEEalias+0x84>)
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035a8:	2600      	movs	r6, #0
 80035aa:	469a      	mov	sl, r3
 80035ac:	e005      	b.n	80035ba <SaveEEalias+0x26>
 80035ae:	4653      	mov	r3, sl
 80035b0:	3601      	adds	r6, #1
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	b2f6      	uxtb	r6, r6
 80035b6:	42b3      	cmp	r3, r6
 80035b8:	d326      	bcc.n	8003608 <SaveEEalias+0x74>
	    {
		if(moduleAlias[i][0]){
 80035ba:	464b      	mov	r3, r9
 80035bc:	00b4      	lsls	r4, r6, #2
 80035be:	19a4      	adds	r4, r4, r6
 80035c0:	0064      	lsls	r4, r4, #1
 80035c2:	5d1b      	ldrb	r3, [r3, r4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f2      	beq.n	80035ae <SaveEEalias+0x1a>
 80035c8:	4645      	mov	r5, r8
 80035ca:	4647      	mov	r7, r8
 80035cc:	3401      	adds	r4, #1
 80035ce:	351c      	adds	r5, #28
 80035d0:	3721      	adds	r7, #33	; 0x21
 80035d2:	444c      	add	r4, r9
 80035d4:	b2ad      	uxth	r5, r5
 80035d6:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80035d8:	7821      	ldrb	r1, [r4, #0]
 80035da:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80035dc:	0028      	movs	r0, r5
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80035de:	18c9      	adds	r1, r1, r3
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80035e0:	3501      	adds	r5, #1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80035e2:	b289      	uxth	r1, r1
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80035e4:	b2ad      	uxth	r5, r5
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80035e6:	f007 ffe5 	bl	800b5b4 <EE_WriteVariable>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80035ea:	42bd      	cmp	r5, r7
 80035ec:	d002      	beq.n	80035f4 <SaveEEalias+0x60>
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80035ee:	7863      	ldrb	r3, [r4, #1]
 80035f0:	3402      	adds	r4, #2
 80035f2:	e7f1      	b.n	80035d8 <SaveEEalias+0x44>
				add++;
 80035f4:	4643      	mov	r3, r8
 80035f6:	3305      	adds	r3, #5
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4698      	mov	r8, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035fc:	4653      	mov	r3, sl
 80035fe:	3601      	adds	r6, #1
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2f6      	uxtb	r6, r6
 8003604:	42b3      	cmp	r3, r6
 8003606:	d2d8      	bcs.n	80035ba <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 8003608:	2000      	movs	r0, #0
 800360a:	bce0      	pop	{r5, r6, r7}
 800360c:	46ba      	mov	sl, r7
 800360e:	46b1      	mov	r9, r6
 8003610:	46a8      	mov	r8, r5
 8003612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003614:	20000e74 	.word	0x20000e74
 8003618:	20000008 	.word	0x20000008

0800361c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46de      	mov	lr, fp
 8003620:	4657      	mov	r7, sl
 8003622:	464e      	mov	r6, r9
 8003624:	4645      	mov	r5, r8
 8003626:	468b      	mov	fp, r1
 8003628:	b5e0      	push	{r5, r6, r7, lr}
 800362a:	001c      	movs	r4, r3
 800362c:	ab0a      	add	r3, sp, #40	; 0x28
 800362e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003630:	0001      	movs	r1, r0
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003632:	469a      	mov	sl, r3
 8003634:	ab0b      	add	r3, sp, #44	; 0x2c
 8003636:	781b      	ldrb	r3, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003638:	20e4      	movs	r0, #228	; 0xe4
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800363a:	4698      	mov	r8, r3
 800363c:	ab0c      	add	r3, sp, #48	; 0x30
 800363e:	781f      	ldrb	r7, [r3, #0]
 8003640:	ab0d      	add	r3, sp, #52	; 0x34
 8003642:	781e      	ldrb	r6, [r3, #0]
 8003644:	ab0e      	add	r3, sp, #56	; 0x38
 8003646:	4691      	mov	r9, r2
 8003648:	781d      	ldrb	r5, [r3, #0]
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 800364a:	f007 ffb3 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800364e:	465b      	mov	r3, fp
 8003650:	0a19      	lsrs	r1, r3, #8
 8003652:	b289      	uxth	r1, r1
 8003654:	20e5      	movs	r0, #229	; 0xe5
 8003656:	f007 ffad 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800365a:	465b      	mov	r3, fp
 800365c:	20e6      	movs	r0, #230	; 0xe6
 800365e:	b299      	uxth	r1, r3
 8003660:	f007 ffa8 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003664:	464b      	mov	r3, r9
 8003666:	0a19      	lsrs	r1, r3, #8
 8003668:	b289      	uxth	r1, r1
 800366a:	20e7      	movs	r0, #231	; 0xe7
 800366c:	f007 ffa2 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003670:	464b      	mov	r3, r9
 8003672:	20e8      	movs	r0, #232	; 0xe8
 8003674:	b299      	uxth	r1, r3
 8003676:	f007 ff9d 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 800367a:	0221      	lsls	r1, r4, #8
 800367c:	4451      	add	r1, sl
 800367e:	b289      	uxth	r1, r1
 8003680:	20e9      	movs	r0, #233	; 0xe9
 8003682:	f007 ff97 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 8003686:	4643      	mov	r3, r8
 8003688:	0219      	lsls	r1, r3, #8
 800368a:	19c9      	adds	r1, r1, r7
 800368c:	b289      	uxth	r1, r1
 800368e:	20ea      	movs	r0, #234	; 0xea
 8003690:	f007 ff90 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 8003694:	0231      	lsls	r1, r6, #8
 8003696:	1949      	adds	r1, r1, r5
 8003698:	b289      	uxth	r1, r1
 800369a:	20eb      	movs	r0, #235	; 0xeb
 800369c:	f007 ff8a 	bl	800b5b4 <EE_WriteVariable>
	
	return result;
}
 80036a0:	2000      	movs	r0, #0
 80036a2:	bcf0      	pop	{r4, r5, r6, r7}
 80036a4:	46bb      	mov	fp, r7
 80036a6:	46b2      	mov	sl, r6
 80036a8:	46a9      	mov	r9, r5
 80036aa:	46a0      	mov	r8, r4
 80036ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)

080036b0 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80036b0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80036b2:	4c21      	ldr	r4, [pc, #132]	; (8003738 <SaveEEparams+0x88>)
 80036b4:	2224      	movs	r2, #36	; 0x24
 80036b6:	0025      	movs	r5, r4
 80036b8:	208a      	movs	r0, #138	; 0x8a
 80036ba:	3524      	adds	r5, #36	; 0x24
 80036bc:	786b      	ldrb	r3, [r5, #1]
 80036be:	5ca1      	ldrb	r1, [r4, r2]
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	4319      	orrs	r1, r3
 80036c4:	0040      	lsls	r0, r0, #1
 80036c6:	f007 ff75 	bl	800b5b4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80036ca:	208e      	movs	r0, #142	; 0x8e
 80036cc:	7929      	ldrb	r1, [r5, #4]
 80036ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036d0:	03c9      	lsls	r1, r1, #15
 80036d2:	4319      	orrs	r1, r3
 80036d4:	b289      	uxth	r1, r1
 80036d6:	0040      	lsls	r0, r0, #1
 80036d8:	f007 ff6c 	bl	800b5b4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80036dc:	2016      	movs	r0, #22
 80036de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80036e0:	30ff      	adds	r0, #255	; 0xff
 80036e2:	f007 ff67 	bl	800b5b4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80036e6:	208b      	movs	r0, #139	; 0x8b
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80036e8:	0025      	movs	r5, r4
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80036ea:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80036ec:	0040      	lsls	r0, r0, #1
 80036ee:	f007 ff61 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80036f2:	2018      	movs	r0, #24
 80036f4:	352c      	adds	r5, #44	; 0x2c
 80036f6:	796b      	ldrb	r3, [r5, #5]
 80036f8:	7b29      	ldrb	r1, [r5, #12]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	4319      	orrs	r1, r3
 80036fe:	30ff      	adds	r0, #255	; 0xff
 8003700:	f007 ff58 	bl	800b5b4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003704:	208c      	movs	r0, #140	; 0x8c
 8003706:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003708:	0040      	lsls	r0, r0, #1
 800370a:	f007 ff53 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800370e:	201a      	movs	r0, #26
 8003710:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003712:	30ff      	adds	r0, #255	; 0xff
 8003714:	f007 ff4e 	bl	800b5b4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003718:	208d      	movs	r0, #141	; 0x8d
 800371a:	7b6b      	ldrb	r3, [r5, #13]
 800371c:	7929      	ldrb	r1, [r5, #4]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	4319      	orrs	r1, r3
 8003722:	0040      	lsls	r0, r0, #1
 8003724:	f007 ff46 	bl	800b5b4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003728:	201c      	movs	r0, #28
 800372a:	7ea9      	ldrb	r1, [r5, #26]
 800372c:	30ff      	adds	r0, #255	; 0xff
 800372e:	f007 ff41 	bl	800b5b4 <EE_WriteVariable>
	
	return result;
}
 8003732:	2000      	movs	r0, #0
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	20000b28 	.word	0x20000b28

0800373c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800373c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373e:	46c6      	mov	lr, r8
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003740:	4e12      	ldr	r6, [pc, #72]	; (800378c <ClearEEportsDir+0x50>)
 8003742:	2234      	movs	r2, #52	; 0x34
 8003744:	2100      	movs	r1, #0
 8003746:	0030      	movs	r0, r6
BOS_Status ClearEEportsDir(void){
 8003748:	b500      	push	{lr}
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 800374a:	f00f fd28 	bl	801319e <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800374e:	4d10      	ldr	r5, [pc, #64]	; (8003790 <ClearEEportsDir+0x54>)
 8003750:	782f      	ldrb	r7, [r5, #0]
 8003752:	2f00      	cmp	r7, #0
 8003754:	d016      	beq.n	8003784 <ClearEEportsDir+0x48>
 8003756:	2302      	movs	r3, #2
 8003758:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800375a:	2700      	movs	r7, #0
 800375c:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800375e:	2c19      	cmp	r4, #25
 8003760:	d900      	bls.n	8003764 <ClearEEportsDir+0x28>
			result =BOS_ERR_EEPROM;
 8003762:	270a      	movs	r7, #10
	for(uint8_t i =1; i <= N; i++){
 8003764:	4643      	mov	r3, r8
 8003766:	b2dc      	uxtb	r4, r3
 8003768:	782b      	ldrb	r3, [r5, #0]
 800376a:	42a3      	cmp	r3, r4
 800376c:	d30a      	bcc.n	8003784 <ClearEEportsDir+0x48>
		if(arrayPortsDir[i - 1])
 800376e:	1e63      	subs	r3, r4, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	5af1      	ldrh	r1, [r6, r3]
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003774:	1c63      	adds	r3, r4, #1
 8003776:	4698      	mov	r8, r3
		if(arrayPortsDir[i - 1])
 8003778:	2900      	cmp	r1, #0
 800377a:	d0f0      	beq.n	800375e <ClearEEportsDir+0x22>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800377c:	0018      	movs	r0, r3
 800377e:	f007 ff19 	bl	800b5b4 <EE_WriteVariable>
 8003782:	e7ec      	b.n	800375e <ClearEEportsDir+0x22>
	}
	
	return result;
}
 8003784:	0038      	movs	r0, r7
 8003786:	bc80      	pop	{r7}
 8003788:	46b8      	mov	r8, r7
 800378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378c:	200029d4 	.word	0x200029d4
 8003790:	20000008 	.word	0x20000008

08003794 <IsLowerCLIbaud>:
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003794:	230e      	movs	r3, #14
uint8_t IsLowerCLIbaud(void){
 8003796:	b530      	push	{r4, r5, lr}
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003798:	2412      	movs	r4, #18
uint8_t IsLowerCLIbaud(void){
 800379a:	b08f      	sub	sp, #60	; 0x3c
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800379c:	446b      	add	r3, sp
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800379e:	446c      	add	r4, sp
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	aa03      	add	r2, sp, #12
 80037a4:	ab06      	add	r3, sp, #24
 80037a6:	a905      	add	r1, sp, #20
 80037a8:	2001      	movs	r0, #1
 80037aa:	f008 f9b3 	bl	800bb14 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80037ae:	aa04      	add	r2, sp, #16
 80037b0:	ab08      	add	r3, sp, #32
 80037b2:	a907      	add	r1, sp, #28
 80037b4:	2002      	movs	r0, #2
 80037b6:	9400      	str	r4, [sp, #0]
 80037b8:	f008 f9ac 	bl	800bb14 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037bc:	2301      	movs	r3, #1
 80037be:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80037c0:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80037c4:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80037c6:	9805      	ldr	r0, [sp, #20]
 80037c8:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	950b      	str	r5, [sp, #44]	; 0x2c
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80037ce:	f00d fba7 	bl	8010f20 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037d2:	2302      	movs	r3, #2
 80037d4:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80037d6:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80037d8:	9808      	ldr	r0, [sp, #32]
 80037da:	a909      	add	r1, sp, #36	; 0x24
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80037dc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037de:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80037e0:	f00d fb9e 	bl	8010f20 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80037e4:	466b      	mov	r3, sp
 80037e6:	2200      	movs	r2, #0
 80037e8:	8999      	ldrh	r1, [r3, #12]
 80037ea:	9805      	ldr	r0, [sp, #20]
 80037ec:	f00d fd4c 	bl	8011288 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80037f0:	2005      	movs	r0, #5
 80037f2:	f009 fdb7 	bl	800d364 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80037f6:	8821      	ldrh	r1, [r4, #0]
 80037f8:	9808      	ldr	r0, [sp, #32]
 80037fa:	f00d fd3f 	bl	801127c <HAL_GPIO_ReadPin>
 80037fe:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003800:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <IsLowerCLIbaud+0x76>
}
 8003806:	b00f      	add	sp, #60	; 0x3c
 8003808:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800380a:	466b      	mov	r3, sp
 800380c:	2201      	movs	r2, #1
 800380e:	8999      	ldrh	r1, [r3, #12]
 8003810:	9805      	ldr	r0, [sp, #20]
 8003812:	f00d fd39 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003816:	2005      	movs	r0, #5
 8003818:	f009 fda4 	bl	800d364 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800381c:	8821      	ldrh	r1, [r4, #0]
 800381e:	9808      	ldr	r0, [sp, #32]
 8003820:	f00d fd2c 	bl	801127c <HAL_GPIO_ReadPin>
 8003824:	3801      	subs	r0, #1
 8003826:	4243      	negs	r3, r0
 8003828:	4158      	adcs	r0, r3
			return 1;
 800382a:	b2c0      	uxtb	r0, r0
 800382c:	e7eb      	b.n	8003806 <IsLowerCLIbaud+0x72>
 800382e:	46c0      	nop			; (mov r8, r8)

08003830 <IsModuleParameter>:

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <IsModuleParameter+0x14>)
uint8_t IsModuleParameter(char *name){
 8003832:	b510      	push	{r4, lr}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003834:	6899      	ldr	r1, [r3, #8]
 8003836:	f7fc fc65 	bl	8000104 <strcmp>
 800383a:	4243      	negs	r3, r0
 800383c:	4158      	adcs	r0, r3
			return i + 1;
	}
	return 0;
}
 800383e:	b2c0      	uxtb	r0, r0
 8003840:	bd10      	pop	{r4, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	20000098 	.word	0x20000098

08003848 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003848:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800384a:	7801      	ldrb	r1, [r0, #0]
uint8_t IsMathOperator(char *string){
 800384c:	0003      	movs	r3, r0
		if(!strcmp(string,"="))
 800384e:	000c      	movs	r4, r1
 8003850:	3c3d      	subs	r4, #61	; 0x3d
 8003852:	293d      	cmp	r1, #61	; 0x3d
 8003854:	d100      	bne.n	8003858 <IsMathOperator+0x10>
 8003856:	7844      	ldrb	r4, [r0, #1]
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 8003858:	000d      	movs	r5, r1
		if(!strcmp(string,"="))
 800385a:	2006      	movs	r0, #6
		else if(!strcmp(string,">"))
 800385c:	3d3e      	subs	r5, #62	; 0x3e
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 800385e:	393c      	subs	r1, #60	; 0x3c
		if(!strcmp(string,"="))
 8003860:	2c00      	cmp	r4, #0
 8003862:	d027      	beq.n	80038b4 <IsMathOperator+0x6c>
		else if(!strcmp(string,">"))
 8003864:	2d00      	cmp	r5, #0
 8003866:	d102      	bne.n	800386e <IsMathOperator+0x26>
 8003868:	785a      	ldrb	r2, [r3, #1]
 800386a:	2a00      	cmp	r2, #0
 800386c:	d024      	beq.n	80038b8 <IsMathOperator+0x70>
		else if(!strcmp(string,"<"))
 800386e:	2900      	cmp	r1, #0
 8003870:	d102      	bne.n	8003878 <IsMathOperator+0x30>
 8003872:	785a      	ldrb	r2, [r3, #1]
 8003874:	2a00      	cmp	r2, #0
 8003876:	d021      	beq.n	80038bc <IsMathOperator+0x74>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	2a3e      	cmp	r2, #62	; 0x3e
 800387c:	d105      	bne.n	800388a <IsMathOperator+0x42>
 800387e:	785e      	ldrb	r6, [r3, #1]
 8003880:	2e3d      	cmp	r6, #61	; 0x3d
 8003882:	d102      	bne.n	800388a <IsMathOperator+0x42>
 8003884:	789e      	ldrb	r6, [r3, #2]
 8003886:	2e00      	cmp	r6, #0
 8003888:	d01a      	beq.n	80038c0 <IsMathOperator+0x78>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 800388a:	2a3c      	cmp	r2, #60	; 0x3c
 800388c:	d105      	bne.n	800389a <IsMathOperator+0x52>
 800388e:	785e      	ldrb	r6, [r3, #1]
 8003890:	2e3d      	cmp	r6, #61	; 0x3d
 8003892:	d102      	bne.n	800389a <IsMathOperator+0x52>
 8003894:	789e      	ldrb	r6, [r3, #2]
 8003896:	2e00      	cmp	r6, #0
 8003898:	d014      	beq.n	80038c4 <IsMathOperator+0x7c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800389a:	2a21      	cmp	r2, #33	; 0x21
 800389c:	d105      	bne.n	80038aa <IsMathOperator+0x62>
 800389e:	785a      	ldrb	r2, [r3, #1]
 80038a0:	2a3d      	cmp	r2, #61	; 0x3d
 80038a2:	d102      	bne.n	80038aa <IsMathOperator+0x62>
 80038a4:	789a      	ldrb	r2, [r3, #2]
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d00e      	beq.n	80038c8 <IsMathOperator+0x80>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80038aa:	3801      	subs	r0, #1
 80038ac:	b2c0      	uxtb	r0, r0
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d1d6      	bne.n	8003860 <IsMathOperator+0x18>
			return MATH_NOT_EQUAL;
	}
	return 0;
}
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80038b4:	2001      	movs	r0, #1
 80038b6:	e7fc      	b.n	80038b2 <IsMathOperator+0x6a>
			return MATH_GREATER;
 80038b8:	2002      	movs	r0, #2
 80038ba:	e7fa      	b.n	80038b2 <IsMathOperator+0x6a>
			return MATH_SMALLER;
 80038bc:	2003      	movs	r0, #3
 80038be:	e7f8      	b.n	80038b2 <IsMathOperator+0x6a>
			return MATH_GREATER_EQUAL;
 80038c0:	2004      	movs	r0, #4
 80038c2:	e7f6      	b.n	80038b2 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
 80038c4:	2005      	movs	r0, #5
 80038c6:	e7f4      	b.n	80038b2 <IsMathOperator+0x6a>
			return MATH_NOT_EQUAL;
 80038c8:	2006      	movs	r0, #6
 80038ca:	e7f2      	b.n	80038b2 <IsMathOperator+0x6a>

080038cc <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 80038cc:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 80038ce:	f009 fc01 	bl	800d0d4 <RTC_Init>
	GetTimeDate();
 80038d2:	f009 fc9f 	bl	800d214 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 80038d6:	f007 ff51 	bl	800b77c <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 80038da:	f008 f8c7 	bl	800ba6c <GPIO_Init>
	DMA_Init();
 80038de:	f006 ffaf 	bl	800a840 <DMA_Init>
	TIM_USEC_Init();
 80038e2:	f009 fcc9 	bl	800d278 <TIM_USEC_Init>
	CRC_Init();
 80038e6:	f007 fd73 	bl	800b3d0 <CRC_Init>
	TIM_MSEC_Init();
 80038ea:	f009 fcf7 	bl	800d2dc <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 80038ee:	f008 f96d 	bl	800bbcc <IsFactoryReset>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d161      	bne.n	80039ba <BOS_Init+0xee>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 80038f6:	f7ff ff4d 	bl	8003794 <IsLowerCLIbaud>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d01c      	beq.n	8003938 <BOS_Init+0x6c>
		CLI_LOW_Baudrate_Flag =1;
 80038fe:	2348      	movs	r3, #72	; 0x48
 8003900:	2201      	movs	r2, #1
 8003902:	4d37      	ldr	r5, [pc, #220]	; (80039e0 <BOS_Init+0x114>)
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003904:	2032      	movs	r0, #50	; 0x32
		Module_Peripheral_Init();
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003906:	2401      	movs	r4, #1
		CLI_LOW_Baudrate_Flag =1;
 8003908:	54ea      	strb	r2, [r5, r3]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800390a:	f009 fd2b 	bl	800d364 <StartMilliDelay>
		Module_Peripheral_Init();
 800390e:	f006 fe49 	bl	800a5a4 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003912:	21e1      	movs	r1, #225	; 0xe1
			UpdateBaudrate(port,BOS.clibaudrate);
 8003914:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003916:	3401      	adds	r4, #1
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003918:	0249      	lsls	r1, r1, #9
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800391a:	b2e4      	uxtb	r4, r4
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800391c:	6369      	str	r1, [r5, #52]	; 0x34
			UpdateBaudrate(port,BOS.clibaudrate);
 800391e:	f009 fef3 	bl	800d708 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003922:	2c06      	cmp	r4, #6
 8003924:	d00e      	beq.n	8003944 <BOS_Init+0x78>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003926:	0020      	movs	r0, r4
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003928:	3401      	adds	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 800392a:	6b69      	ldr	r1, [r5, #52]	; 0x34
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800392c:	b2e4      	uxtb	r4, r4
			UpdateBaudrate(port,BOS.clibaudrate);
 800392e:	f009 feeb 	bl	800d708 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003932:	2c06      	cmp	r4, #6
 8003934:	d1f7      	bne.n	8003926 <BOS_Init+0x5a>
 8003936:	e005      	b.n	8003944 <BOS_Init+0x78>
		}
	}
	else{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003938:	2032      	movs	r0, #50	; 0x32
 800393a:	f009 fd13 	bl	800d364 <StartMilliDelay>
		Module_Peripheral_Init();
 800393e:	f006 fe31 	bl	800a5a4 <Module_Peripheral_Init>
 8003942:	4d27      	ldr	r5, [pc, #156]	; (80039e0 <BOS_Init+0x114>)
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003944:	f7ff fdd8 	bl	80034f8 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003948:	f009 ff88 	bl	800d85c <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 800394c:	f007 fca4 	bl	800b298 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
	{
		IND_ON();
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	2090      	movs	r0, #144	; 0x90
	if(myID == 0) /* Native module */
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <BOS_Init+0x118>)
		IND_ON();
 8003956:	2201      	movs	r2, #1
	if(myID == 0) /* Native module */
 8003958:	781b      	ldrb	r3, [r3, #0]
		IND_ON();
 800395a:	0109      	lsls	r1, r1, #4
 800395c:	05c0      	lsls	r0, r0, #23
	if(myID == 0) /* Native module */
 800395e:	2b00      	cmp	r3, #0
 8003960:	d112      	bne.n	8003988 <BOS_Init+0xbc>
		IND_ON();
 8003962:	f00d fc91 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003966:	20fa      	movs	r0, #250	; 0xfa
 8003968:	0040      	lsls	r0, r0, #1
		IND_ON();
		Delay_ms_no_rtos(500);
		IND_OFF();
		Delay_ms_no_rtos(100);
		IND_ON();
		Delay_ms_no_rtos(100);
 800396a:	f009 fcfb 	bl	800d364 <StartMilliDelay>
		IND_OFF();
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	2090      	movs	r0, #144	; 0x90
 8003972:	2200      	movs	r2, #0
 8003974:	0109      	lsls	r1, r1, #4
 8003976:	05c0      	lsls	r0, r0, #23
 8003978:	f00d fc86 	bl	8011288 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 800397c:	f003 fdb8 	bl	80074f0 <ResetUartORE>
	
	BOS_initialized =1;
 8003980:	2349      	movs	r3, #73	; 0x49
 8003982:	2201      	movs	r2, #1
 8003984:	54ea      	strb	r2, [r5, r3]
}
 8003986:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8003988:	f00d fc7e 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800398c:	20fa      	movs	r0, #250	; 0xfa
 800398e:	0040      	lsls	r0, r0, #1
 8003990:	f009 fce8 	bl	800d364 <StartMilliDelay>
		IND_OFF();
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	2090      	movs	r0, #144	; 0x90
 8003998:	2200      	movs	r2, #0
 800399a:	0109      	lsls	r1, r1, #4
 800399c:	05c0      	lsls	r0, r0, #23
 800399e:	f00d fc73 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80039a2:	2064      	movs	r0, #100	; 0x64
 80039a4:	f009 fcde 	bl	800d364 <StartMilliDelay>
		IND_ON();
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	2090      	movs	r0, #144	; 0x90
 80039ac:	2201      	movs	r2, #1
 80039ae:	05c0      	lsls	r0, r0, #23
 80039b0:	0109      	lsls	r1, r1, #4
 80039b2:	f00d fc69 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80039b6:	2064      	movs	r0, #100	; 0x64
 80039b8:	e7d7      	b.n	800396a <BOS_Init+0x9e>
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80039ba:	4c0b      	ldr	r4, [pc, #44]	; (80039e8 <BOS_Init+0x11c>)
 80039bc:	4d0b      	ldr	r5, [pc, #44]	; (80039ec <BOS_Init+0x120>)
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	d004      	beq.n	80039ce <BOS_Init+0x102>
		if(EE_Format() == HAL_OK){
 80039c4:	f007 fe8a 	bl	800b6dc <EE_Format>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d100      	bne.n	80039ce <BOS_Init+0x102>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80039cc:	6025      	str	r5, [r4, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039ce:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <BOS_Init+0x124>)
 80039d4:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <BOS_Init+0x128>)
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	e7fd      	b.n	80039dc <BOS_Init+0x110>
 80039e0:	20000b28 	.word	0x20000b28
 80039e4:	20000aa8 	.word	0x20000aa8
 80039e8:	20007ff0 	.word	0x20007ff0
 80039ec:	beefdead 	.word	0xbeefdead
 80039f0:	e000ed00 	.word	0xe000ed00
 80039f4:	05fa0004 	.word	0x05fa0004

080039f8 <Module_Init>:
void Module_Init(void){
 80039f8:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80039fa:	f00b fec3 	bl	800f784 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80039fe:	f006 fbd7 	bl	800a1b0 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003a02:	f7ff ff63 	bl	80038cc <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003a06:	f003 ff91 	bl	800792c <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003a0a:	f00a f801 	bl	800da10 <osKernelStart>
}
 8003a0e:	bd10      	pop	{r4, pc}

08003a10 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	46c6      	mov	lr, r8
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a14:	4e12      	ldr	r6, [pc, #72]	; (8003a60 <ExploreNeighbors+0x50>)
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <ExploreNeighbors+0x54>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
 8003a18:	0037      	movs	r7, r6
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a1a:	0005      	movs	r5, r0
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a1c:	2401      	movs	r4, #1
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a1e:	4698      	mov	r8, r3
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a20:	b500      	push	{lr}
			messageParams[2] =port;
 8003a22:	374c      	adds	r7, #76	; 0x4c
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a24:	b082      	sub	sp, #8
		if(port != ignore){
 8003a26:	42a5      	cmp	r5, r4
 8003a28:	d010      	beq.n	8003a4c <ExploreNeighbors+0x3c>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a2a:	4643      	mov	r3, r8
 8003a2c:	224c      	movs	r2, #76	; 0x4c
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			messageParams[2] =port;
 8003a30:	70bc      	strb	r4, [r7, #2]
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a32:	ba5b      	rev16	r3, r3
 8003a34:	52b3      	strh	r3, [r6, r2]
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a36:	2303      	movs	r3, #3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	0020      	movs	r0, r4
 8003a40:	3307      	adds	r3, #7
 8003a42:	f004 f979 	bl	8007d38 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003a46:	200a      	movs	r0, #10
 8003a48:	f009 ffe8 	bl	800da1c <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	b2e4      	uxtb	r4, r4
 8003a50:	2c06      	cmp	r4, #6
 8003a52:	d1e8      	bne.n	8003a26 <ExploreNeighbors+0x16>
		}
	}
	
	return result;
}
 8003a54:	2000      	movs	r0, #0
 8003a56:	b002      	add	sp, #8
 8003a58:	bc80      	pop	{r7}
 8003a5a:	46b8      	mov	r8, r7
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	20000b28 	.word	0x20000b28
 8003a64:	20000008 	.word	0x20000008

08003a68 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	4657      	mov	r7, sl
 8003a6c:	464e      	mov	r6, r9
 8003a6e:	4645      	mov	r5, r8
 8003a70:	46de      	mov	lr, fp
 8003a72:	b5e0      	push	{r5, r6, r7, lr}
 8003a74:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003a76:	466a      	mov	r2, sp
 8003a78:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <FindBroadcastRoutes+0x13c>)
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003a7a:	af00      	add	r7, sp, #0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003a7c:	781e      	ldrb	r6, [r3, #0]
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003a7e:	0004      	movs	r4, r0
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003a80:	1df3      	adds	r3, r6, #7
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	469d      	mov	sp, r3
 8003a8a:	466d      	mov	r5, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003a8c:	2e00      	cmp	r6, #0
 8003a8e:	d00a      	beq.n	8003aa6 <FindBroadcastRoutes+0x3e>
		modules[m] =0;
 8003a90:	0032      	movs	r2, r6
 8003a92:	2100      	movs	r1, #0
 8003a94:	4668      	mov	r0, sp
 8003a96:	f00f fb82 	bl	801319e <memset>
		bcastRoutes[m] =0;
 8003a9a:	4843      	ldr	r0, [pc, #268]	; (8003ba8 <FindBroadcastRoutes+0x140>)
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	0072      	lsls	r2, r6, #1
 8003aa0:	307c      	adds	r0, #124	; 0x7c
 8003aa2:	f00f fb7c 	bl	801319e <memset>
	}
	modules[src - 1] =++level;					// Tag the source
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2216      	movs	r2, #22
 8003aaa:	1e60      	subs	r0, r4, #1
 8003aac:	542b      	strb	r3, [r5, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003aae:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <FindBroadcastRoutes+0x144>)
 8003ab0:	4342      	muls	r2, r0
 8003ab2:	469c      	mov	ip, r3
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	; (8003ba8 <FindBroadcastRoutes+0x140>)
 8003ab6:	0040      	lsls	r0, r0, #1
 8003ab8:	1818      	adds	r0, r3, r0
 8003aba:	2301      	movs	r3, #1
 8003abc:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4462      	add	r2, ip
	modules[src - 1] =++level;					// Tag the source
 8003ac2:	2100      	movs	r1, #0
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003ac4:	247c      	movs	r4, #124	; 0x7c
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003ac6:	469c      	mov	ip, r3
 8003ac8:	46ab      	mov	fp, r5
 8003aca:	607e      	str	r6, [r7, #4]
		if(array[src - 1][p]){
 8003acc:	8853      	ldrh	r3, [r2, #2]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <FindBroadcastRoutes+0x86>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003ad2:	5b06      	ldrh	r6, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003ad4:	08db      	lsrs	r3, r3, #3
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003ad6:	46b1      	mov	r9, r6
 8003ad8:	4646      	mov	r6, r8
 8003ada:	408e      	lsls	r6, r1
 8003adc:	46b2      	mov	sl, r6
 8003ade:	464e      	mov	r6, r9
 8003ae0:	4655      	mov	r5, sl
 8003ae2:	432e      	orrs	r6, r5
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003ae4:	4665      	mov	r5, ip
 8003ae6:	445b      	add	r3, fp
 8003ae8:	3b01      	subs	r3, #1
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003aea:	5306      	strh	r6, [r0, r4]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003aec:	701d      	strb	r5, [r3, #0]
	for(p =1; p <= 6; p++){
 8003aee:	3101      	adds	r1, #1
 8003af0:	3202      	adds	r2, #2
 8003af2:	2906      	cmp	r1, #6
 8003af4:	d1ea      	bne.n	8003acc <FindBroadcastRoutes+0x64>
	++level;												// Move one level
 8003af6:	465d      	mov	r5, fp
 8003af8:	2302      	movs	r3, #2
 8003afa:	687e      	ldr	r6, [r7, #4]
 8003afc:	469b      	mov	fp, r3
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003afe:	46b0      	mov	r8, r6
 8003b00:	002e      	movs	r6, r5
		++level;											// Move one level
 8003b02:	465b      	mov	r3, fp
 8003b04:	3301      	adds	r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	469b      	mov	fp, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b0a:	4643      	mov	r3, r8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03f      	beq.n	8003b90 <FindBroadcastRoutes+0x128>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b10:	2301      	movs	r3, #1
 8003b12:	425b      	negs	r3, r3
 8003b14:	445b      	add	r3, fp
 8003b16:	4699      	mov	r9, r3
		untaged =0;								// Reset the untaged counter
 8003b18:	2300      	movs	r3, #0
 8003b1a:	4c23      	ldr	r4, [pc, #140]	; (8003ba8 <FindBroadcastRoutes+0x140>)
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b1c:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003b1e:	469c      	mov	ip, r3
 8003b20:	4d22      	ldr	r5, [pc, #136]	; (8003bac <FindBroadcastRoutes+0x144>)
 8003b22:	347c      	adds	r4, #124	; 0x7c
 8003b24:	e005      	b.n	8003b32 <FindBroadcastRoutes+0xca>
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b26:	3201      	adds	r2, #1
 8003b28:	b2d3      	uxtb	r3, r2
 8003b2a:	3402      	adds	r4, #2
 8003b2c:	3516      	adds	r5, #22
 8003b2e:	4598      	cmp	r8, r3
 8003b30:	d92b      	bls.n	8003b8a <FindBroadcastRoutes+0x122>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b32:	5cb3      	ldrb	r3, [r6, r2]
 8003b34:	454b      	cmp	r3, r9
 8003b36:	d1f6      	bne.n	8003b26 <FindBroadcastRoutes+0xbe>
 8003b38:	4643      	mov	r3, r8
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	46aa      	mov	sl, r5
 8003b3e:	2100      	movs	r1, #0
 8003b40:	0025      	movs	r5, r4
 8003b42:	4690      	mov	r8, r2
 8003b44:	607b      	str	r3, [r7, #4]
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003b46:	8843      	ldrh	r3, [r0, #2]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <FindBroadcastRoutes+0x104>
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	5cf2      	ldrb	r2, [r6, r3]
 8003b52:	2a00      	cmp	r2, #0
 8003b54:	d10a      	bne.n	8003b6c <FindBroadcastRoutes+0x104>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b56:	2401      	movs	r4, #1
 8003b58:	408c      	lsls	r4, r1
 8003b5a:	882a      	ldrh	r2, [r5, #0]
 8003b5c:	4322      	orrs	r2, r4
 8003b5e:	802a      	strh	r2, [r5, #0]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003b60:	465a      	mov	r2, fp
 8003b62:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003b64:	4663      	mov	r3, ip
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	469c      	mov	ip, r3
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003b6c:	3101      	adds	r1, #1
 8003b6e:	3002      	adds	r0, #2
 8003b70:	2906      	cmp	r1, #6
 8003b72:	d1e8      	bne.n	8003b46 <FindBroadcastRoutes+0xde>
 8003b74:	4642      	mov	r2, r8
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	002c      	movs	r4, r5
 8003b7a:	4698      	mov	r8, r3
 8003b7c:	4655      	mov	r5, sl
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b7e:	3201      	adds	r2, #1
 8003b80:	b2d3      	uxtb	r3, r2
 8003b82:	3402      	adds	r4, #2
 8003b84:	3516      	adds	r5, #22
 8003b86:	4598      	cmp	r8, r3
 8003b88:	d8d3      	bhi.n	8003b32 <FindBroadcastRoutes+0xca>
					}
				}
			}
		}
	} while(untaged);
 8003b8a:	4663      	mov	r3, ip
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1b8      	bne.n	8003b02 <FindBroadcastRoutes+0x9a>
	
	return result;
}
 8003b90:	2000      	movs	r0, #0
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b003      	add	sp, #12
 8003b96:	bcf0      	pop	{r4, r5, r6, r7}
 8003b98:	46bb      	mov	fp, r7
 8003b9a:	46b2      	mov	sl, r6
 8003b9c:	46a9      	mov	r9, r5
 8003b9e:	46a0      	mov	r8, r4
 8003ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000008 	.word	0x20000008
 8003ba8:	20000b28 	.word	0x20000b28
 8003bac:	20000f84 	.word	0x20000f84

08003bb0 <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb2:	46de      	mov	lr, fp
 8003bb4:	4645      	mov	r5, r8
 8003bb6:	464e      	mov	r6, r9
 8003bb8:	4657      	mov	r7, sl
 8003bba:	b5e0      	push	{r5, r6, r7, lr}
#ifdef __N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003bbc:	2500      	movs	r5, #0
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003bbe:	b093      	sub	sp, #76	; 0x4c
 8003bc0:	0004      	movs	r4, r0
 8003bc2:	000e      	movs	r6, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003bc4:	222e      	movs	r2, #46	; 0x2e
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003bc6:	9102      	str	r1, [sp, #8]
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003bc8:	a806      	add	r0, sp, #24
 8003bca:	2100      	movs	r1, #0
 8003bcc:	9505      	str	r5, [sp, #20]
 8003bce:	f00f fae6 	bl	801319e <memset>
	uint8_t alt =0;
	uint8_t u =0;
	uint8_t v =0;
	uint8_t j =0;
	
	memset(route,0,sizeof(route));
 8003bd2:	221a      	movs	r2, #26
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	486a      	ldr	r0, [pc, #424]	; (8003d80 <FindRoute+0x1d0>)
 8003bd8:	f00f fae1 	bl	801319e <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003bdc:	2130      	movs	r1, #48	; 0x30
 8003bde:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <FindRoute+0x1d4>)
 8003be0:	1e62      	subs	r2, r4, #1
 8003be2:	4698      	mov	r8, r3
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	545d      	strb	r5, [r3, r1]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003be8:	311c      	adds	r1, #28
 8003bea:	545d      	strb	r5, [r3, r1]
	
	/* Check adjacent neighbors first! */
	for(int col =1; col <= 6; col++){
 8003bec:	2316      	movs	r3, #22
 8003bee:	4353      	muls	r3, r2
 8003bf0:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <FindRoute+0x1d8>)
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	4693      	mov	fp, r2
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	445a      	add	r2, fp
 8003bfa:	9203      	str	r2, [sp, #12]
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003bfc:	b2b1      	uxth	r1, r6
 8003bfe:	0043      	lsls	r3, r0, #1
 8003c00:	5ad3      	ldrh	r3, [r2, r3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <FindRoute+0x5e>
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d100      	bne.n	8003c0e <FindRoute+0x5e>
 8003c0c:	e0a8      	b.n	8003d60 <FindRoute+0x1b0>
	for(int col =1; col <= 6; col++){
 8003c0e:	3001      	adds	r0, #1
 8003c10:	2807      	cmp	r0, #7
 8003c12:	d1f4      	bne.n	8003bfe <FindRoute+0x4e>
			return col;
		}
	}
	
	/* Initialization */
	for(int i =1; i <= N; i++){
 8003c14:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <FindRoute+0x1dc>)
 8003c16:	7818      	ldrb	r0, [r3, #0]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d100      	bne.n	8003c20 <FindRoute+0x70>
 8003c1e:	e0ab      	b.n	8003d78 <FindRoute+0x1c8>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c20:	4647      	mov	r7, r8
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c22:	4645      	mov	r5, r8
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c24:	26ff      	movs	r6, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c26:	2100      	movs	r1, #0
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c28:	372f      	adds	r7, #47	; 0x2f
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c2a:	354b      	adds	r5, #75	; 0x4b
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003c2c:	429c      	cmp	r4, r3
 8003c2e:	d002      	beq.n	8003c36 <FindRoute+0x86>
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c30:	195a      	adds	r2, r3, r5
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c32:	54fe      	strb	r6, [r7, r3]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c34:	7011      	strb	r1, [r2, #0]
	for(int i =1; i <= N; i++){
 8003c36:	3301      	adds	r3, #1
 8003c38:	4283      	cmp	r3, r0
 8003c3a:	ddf7      	ble.n	8003c2c <FindRoute+0x7c>
	uint8_t u =0;
 8003c3c:	2300      	movs	r3, #0
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
		smallest =arr[0];
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
 8003c3e:	4646      	mov	r6, r8
	uint8_t u =0;
 8003c40:	469a      	mov	sl, r3
		smallest =arr[0];
 8003c42:	3330      	adds	r3, #48	; 0x30
 8003c44:	4699      	mov	r9, r3
 8003c46:	af05      	add	r7, sp, #20
		if((arr[i] < smallest) && !Q[i]){
 8003c48:	3630      	adds	r6, #48	; 0x30
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003c4a:	003c      	movs	r4, r7
	uint8_t u =0;
 8003c4c:	003a      	movs	r2, r7
	char temp =1;
 8003c4e:	2101      	movs	r1, #1
	for(int i =0; i < N; i++){
 8003c50:	2300      	movs	r3, #0
		temp &=Q[i];
 8003c52:	7815      	ldrb	r5, [r2, #0]
	for(int i =0; i < N; i++){
 8003c54:	3301      	adds	r3, #1
		temp &=Q[i];
 8003c56:	4029      	ands	r1, r5
	for(int i =0; i < N; i++){
 8003c58:	3201      	adds	r2, #1
 8003c5a:	4283      	cmp	r3, r0
 8003c5c:	dbf9      	blt.n	8003c52 <FindRoute+0xa2>
	while(!QnotEmpty(Q)){
 8003c5e:	2900      	cmp	r1, #0
 8003c60:	d14a      	bne.n	8003cf8 <FindRoute+0x148>
	if(!Q[0])						// Not visited yet
 8003c62:	783b      	ldrb	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d042      	beq.n	8003cee <FindRoute+0x13e>
		smallest =arr[0];
 8003c68:	4643      	mov	r3, r8
 8003c6a:	464a      	mov	r2, r9
	uint8_t smallest =0xFF;
 8003c6c:	25ff      	movs	r5, #255	; 0xff
		smallest =arr[0];
 8003c6e:	5c9a      	ldrb	r2, [r3, r2]
	uint8_t smallest =0xFF;
 8003c70:	2300      	movs	r3, #0
 8003c72:	468c      	mov	ip, r1
 8003c74:	e000      	b.n	8003c78 <FindRoute+0xc8>
		if((arr[i] < smallest) && !Q[i]){
 8003c76:	5d9a      	ldrb	r2, [r3, r6]
 8003c78:	4295      	cmp	r5, r2
 8003c7a:	d905      	bls.n	8003c88 <FindRoute+0xd8>
 8003c7c:	7821      	ldrb	r1, [r4, #0]
 8003c7e:	2900      	cmp	r1, #0
 8003c80:	d102      	bne.n	8003c88 <FindRoute+0xd8>
			index =i;
 8003c82:	b2d9      	uxtb	r1, r3
 8003c84:	468c      	mov	ip, r1
		if((arr[i] < smallest) && !Q[i]){
 8003c86:	0015      	movs	r5, r2
	for(int i =0; i < N; i++){
 8003c88:	3301      	adds	r3, #1
 8003c8a:	3401      	adds	r4, #1
 8003c8c:	4283      	cmp	r3, r0
 8003c8e:	dbf2      	blt.n	8003c76 <FindRoute+0xc6>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003c90:	4661      	mov	r1, ip
 8003c92:	3101      	adds	r1, #1
 8003c94:	b2cb      	uxtb	r3, r1
 8003c96:	469a      	mov	sl, r3
		if(u == desID){
 8003c98:	9b02      	ldr	r3, [sp, #8]
 8003c9a:	459a      	cmp	sl, r3
 8003c9c:	d02d      	beq.n	8003cfa <FindRoute+0x14a>
			Q[u - 1] =1;									// Remove u from Q
 8003c9e:	4653      	mov	r3, sl
 8003ca0:	1e5d      	subs	r5, r3, #1
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	2416      	movs	r4, #22
 8003ca6:	557b      	strb	r3, [r7, r5]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ca8:	465b      	mov	r3, fp
 8003caa:	436c      	muls	r4, r5
 8003cac:	191a      	adds	r2, r3, r4
 8003cae:	330c      	adds	r3, #12
 8003cb0:	191c      	adds	r4, r3, r4
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003cb2:	4445      	add	r5, r8
 8003cb4:	9001      	str	r0, [sp, #4]
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003cb6:	8853      	ldrh	r3, [r2, #2]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <FindRoute+0x134>
				v =(array[u - 1][n] >> 3);
 8003cbc:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	5cf9      	ldrb	r1, [r7, r3]
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d10d      	bne.n	8003ce4 <FindRoute+0x134>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003cc8:	4649      	mov	r1, r9
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003cca:	4648      	mov	r0, r9
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ccc:	5c69      	ldrb	r1, [r5, r1]
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003cce:	4443      	add	r3, r8
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003cd0:	3101      	adds	r1, #1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003cd2:	5c18      	ldrb	r0, [r3, r0]
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003cd4:	b2c9      	uxtb	r1, r1
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003cd6:	4288      	cmp	r0, r1
 8003cd8:	d904      	bls.n	8003ce4 <FindRoute+0x134>
						routeDist[v - 1] =alt;
 8003cda:	4648      	mov	r0, r9
 8003cdc:	5419      	strb	r1, [r3, r0]
						routePrev[v - 1] =u;
 8003cde:	214c      	movs	r1, #76	; 0x4c
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	5458      	strb	r0, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ce4:	3202      	adds	r2, #2
 8003ce6:	42a2      	cmp	r2, r4
 8003ce8:	d1e5      	bne.n	8003cb6 <FindRoute+0x106>
 8003cea:	9801      	ldr	r0, [sp, #4]
 8003cec:	e7ad      	b.n	8003c4a <FindRoute+0x9a>
		smallest =arr[0];
 8003cee:	464a      	mov	r2, r9
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	5c9d      	ldrb	r5, [r3, r2]
 8003cf4:	002a      	movs	r2, r5
 8003cf6:	e7bb      	b.n	8003c70 <FindRoute+0xc0>
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003cf8:	4653      	mov	r3, sl
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	214c      	movs	r1, #76	; 0x4c
 8003cfe:	4443      	add	r3, r8
 8003d00:	5c59      	ldrb	r1, [r3, r1]
 8003d02:	4650      	mov	r0, sl
 8003d04:	2300      	movs	r3, #0
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d101      	bne.n	8003d0e <FindRoute+0x15e>
 8003d0a:	e00c      	b.n	8003d26 <FindRoute+0x176>
 8003d0c:	0011      	movs	r1, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003d0e:	001a      	movs	r2, r3
 8003d10:	4c1b      	ldr	r4, [pc, #108]	; (8003d80 <FindRoute+0x1d0>)
 8003d12:	3301      	adds	r3, #1
 8003d14:	54a0      	strb	r0, [r4, r2]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d16:	4642      	mov	r2, r8
 8003d18:	1852      	adds	r2, r2, r1
 8003d1a:	324b      	adds	r2, #75	; 0x4b
 8003d1c:	7812      	ldrb	r2, [r2, #0]
 8003d1e:	0008      	movs	r0, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003d20:	b2db      	uxtb	r3, r3
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d1f2      	bne.n	8003d0c <FindRoute+0x15c>
	for(int col =1; col <= 6; col++){
 8003d26:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003d28:	9902      	ldr	r1, [sp, #8]
 8003d2a:	9c03      	ldr	r4, [sp, #12]
 8003d2c:	4441      	add	r1, r8
 8003d2e:	312f      	adds	r1, #47	; 0x2f
 8003d30:	0043      	lsls	r3, r0, #1
 8003d32:	5ae3      	ldrh	r3, [r4, r3]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <FindRoute+0x19a>
 8003d38:	4d11      	ldr	r5, [pc, #68]	; (8003d80 <FindRoute+0x1d0>)
 8003d3a:	780a      	ldrb	r2, [r1, #0]
 8003d3c:	46ac      	mov	ip, r5
 8003d3e:	4462      	add	r2, ip
 8003d40:	3a01      	subs	r2, #1
 8003d42:	7812      	ldrb	r2, [r2, #0]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d014      	beq.n	8003d74 <FindRoute+0x1c4>
	for(int col =1; col <= 6; col++){
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	2807      	cmp	r0, #7
 8003d4e:	d1ef      	bne.n	8003d30 <FindRoute+0x180>
	return 0;
 8003d50:	2000      	movs	r0, #0
}
 8003d52:	b013      	add	sp, #76	; 0x4c
 8003d54:	bcf0      	pop	{r4, r5, r6, r7}
 8003d56:	46bb      	mov	fp, r7
 8003d58:	46b2      	mov	sl, r6
 8003d5a:	46a9      	mov	r9, r5
 8003d5c:	46a0      	mov	r8, r4
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			routeDist[desID - 1] =1;
 8003d60:	9b02      	ldr	r3, [sp, #8]
 8003d62:	2101      	movs	r1, #1
 8003d64:	001a      	movs	r2, r3
 8003d66:	4442      	add	r2, r8
 8003d68:	322f      	adds	r2, #47	; 0x2f
 8003d6a:	7011      	strb	r1, [r2, #0]
			route[0] =desID;
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <FindRoute+0x1d0>)
			return col;
 8003d6e:	b2c0      	uxtb	r0, r0
			route[0] =desID;
 8003d70:	7013      	strb	r3, [r2, #0]
			return col;
 8003d72:	e7ee      	b.n	8003d52 <FindRoute+0x1a2>
			return col;
 8003d74:	b2c0      	uxtb	r0, r0
 8003d76:	e7ec      	b.n	8003d52 <FindRoute+0x1a2>
	for(int i =1; i <= N; i++){
 8003d78:	2200      	movs	r2, #0
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	4692      	mov	sl, r2
 8003d7e:	e7bd      	b.n	8003cfc <FindRoute+0x14c>
 8003d80:	20001f2c 	.word	0x20001f2c
 8003d84:	20000ba8 	.word	0x20000ba8
 8003d88:	20000f84 	.word	0x20000f84
 8003d8c:	20000008 	.word	0x20000008

08003d90 <DisplayTopology>:

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003d90:	4b5c      	ldr	r3, [pc, #368]	; (8003f04 <DisplayTopology+0x174>)
void DisplayTopology(uint8_t port){
 8003d92:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003d94:	001c      	movs	r4, r3
void DisplayTopology(uint8_t port){
 8003d96:	4645      	mov	r5, r8
 8003d98:	46de      	mov	lr, fp
 8003d9a:	464e      	mov	r6, r9
 8003d9c:	4657      	mov	r7, sl
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003d9e:	3468      	adds	r4, #104	; 0x68
 8003da0:	0022      	movs	r2, r4
void DisplayTopology(uint8_t port){
 8003da2:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003da4:	4698      	mov	r8, r3
 8003da6:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <DisplayTopology+0x178>)
void DisplayTopology(uint8_t port){
 8003da8:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003daa:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003dac:	c223      	stmia	r2!, {r0, r1, r5}
 8003dae:	6819      	ldr	r1, [r3, #0]
void DisplayTopology(uint8_t port){
 8003db0:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003db2:	6011      	str	r1, [r2, #0]
 8003db4:	889b      	ldrh	r3, [r3, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003db6:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003db8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dba:	2501      	movs	r5, #1
 8003dbc:	f7fc f9ac 	bl	8000118 <strlen>
 8003dc0:	426d      	negs	r5, r5
 8003dc2:	2332      	movs	r3, #50	; 0x32
 8003dc4:	b282      	uxth	r2, r0
 8003dc6:	0021      	movs	r1, r4
 8003dc8:	0030      	movs	r0, r6
 8003dca:	9500      	str	r5, [sp, #0]
 8003dcc:	f009 fc46 	bl	800d65c <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003dd0:	4b4e      	ldr	r3, [pc, #312]	; (8003f0c <DisplayTopology+0x17c>)
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dd2:	2701      	movs	r7, #1
 8003dd4:	4699      	mov	r9, r3
		sprintf(pcUserMessage,"P%d\t",i);
 8003dd6:	003a      	movs	r2, r7
 8003dd8:	4649      	mov	r1, r9
 8003dda:	0020      	movs	r0, r4
 8003ddc:	f00f fbd0 	bl	8013580 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003de0:	0020      	movs	r0, r4
 8003de2:	f7fc f999 	bl	8000118 <strlen>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003de6:	3701      	adds	r7, #1
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003de8:	b282      	uxth	r2, r0
 8003dea:	2332      	movs	r3, #50	; 0x32
 8003dec:	0021      	movs	r1, r4
 8003dee:	0030      	movs	r0, r6
 8003df0:	9500      	str	r5, [sp, #0]
 8003df2:	f009 fc33 	bl	800d65c <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003df6:	2f06      	cmp	r7, #6
 8003df8:	d1ed      	bne.n	8003dd6 <DisplayTopology+0x46>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003dfa:	2332      	movs	r3, #50	; 0x32
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	0030      	movs	r0, r6
 8003e00:	4943      	ldr	r1, [pc, #268]	; (8003f10 <DisplayTopology+0x180>)
 8003e02:	9500      	str	r5, [sp, #0]
 8003e04:	f009 fc2a 	bl	800d65c <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003e08:	4b42      	ldr	r3, [pc, #264]	; (8003f14 <DisplayTopology+0x184>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d060      	beq.n	8003ed2 <DisplayTopology+0x142>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e10:	2301      	movs	r3, #1
 8003e12:	425b      	negs	r3, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e14:	4645      	mov	r5, r8
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e16:	4698      	mov	r8, r3
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <DisplayTopology+0x188>)
	for(uint8_t row =0; row < N; row++){
 8003e1a:	2400      	movs	r4, #0
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e1c:	469b      	mov	fp, r3
				sprintf(pcUserMessage,"%d\t",0);
 8003e1e:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <DisplayTopology+0x18c>)
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e20:	3568      	adds	r5, #104	; 0x68
				sprintf(pcUserMessage,"%d\t",0);
 8003e22:	469a      	mov	sl, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e24:	1c63      	adds	r3, r4, #1
 8003e26:	001a      	movs	r2, r3
 8003e28:	493d      	ldr	r1, [pc, #244]	; (8003f20 <DisplayTopology+0x190>)
 8003e2a:	0028      	movs	r0, r5
 8003e2c:	4699      	mov	r9, r3
 8003e2e:	f00f fba7 	bl	8013580 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e32:	0028      	movs	r0, r5
 8003e34:	f7fc f970 	bl	8000118 <strlen>
 8003e38:	4643      	mov	r3, r8
 8003e3a:	b282      	uxth	r2, r0
 8003e3c:	0029      	movs	r1, r5
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	0030      	movs	r0, r6
 8003e42:	2332      	movs	r3, #50	; 0x32
 8003e44:	f009 fc0a 	bl	800d65c <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e48:	2316      	movs	r3, #22
 8003e4a:	435c      	muls	r4, r3
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <DisplayTopology+0x194>)
 8003e4e:	2205      	movs	r2, #5
 8003e50:	5b1b      	ldrh	r3, [r3, r4]
 8003e52:	0028      	movs	r0, r5
 8003e54:	0059      	lsls	r1, r3, #1
 8003e56:	18c9      	adds	r1, r1, r3
 8003e58:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <DisplayTopology+0x198>)
 8003e5a:	0049      	lsls	r1, r1, #1
 8003e5c:	469c      	mov	ip, r3
 8003e5e:	4461      	add	r1, ip
 8003e60:	f00f fbe3 	bl	801362a <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003e64:	4643      	mov	r3, r8
 8003e66:	2205      	movs	r2, #5
 8003e68:	0029      	movs	r1, r5
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	0030      	movs	r0, r6
 8003e6e:	2332      	movs	r3, #50	; 0x32
 8003e70:	f009 fbf4 	bl	800d65c <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003e74:	4643      	mov	r3, r8
 8003e76:	2201      	movs	r2, #1
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0030      	movs	r0, r6
 8003e7c:	2332      	movs	r3, #50	; 0x32
 8003e7e:	492b      	ldr	r1, [pc, #172]	; (8003f2c <DisplayTopology+0x19c>)
 8003e80:	f009 fbec 	bl	800d65c <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003e84:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <DisplayTopology+0x194>)
 8003e86:	191f      	adds	r7, r3, r4
 8003e88:	330a      	adds	r3, #10
 8003e8a:	191c      	adds	r4, r3, r4
			if(!array[row][col])
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	d12f      	bne.n	8003ef2 <DisplayTopology+0x162>
				sprintf(pcUserMessage,"%d\t",0);
 8003e92:	4651      	mov	r1, sl
 8003e94:	0028      	movs	r0, r5
 8003e96:	f00f fb73 	bl	8013580 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e9a:	0028      	movs	r0, r5
 8003e9c:	f7fc f93c 	bl	8000118 <strlen>
 8003ea0:	4643      	mov	r3, r8
 8003ea2:	b282      	uxth	r2, r0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	0029      	movs	r1, r5
 8003ea8:	2332      	movs	r3, #50	; 0x32
 8003eaa:	0030      	movs	r0, r6
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003eac:	3702      	adds	r7, #2
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003eae:	f009 fbd5 	bl	800d65c <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003eb2:	42a7      	cmp	r7, r4
 8003eb4:	d1ea      	bne.n	8003e8c <DisplayTopology+0xfc>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003eb6:	4643      	mov	r3, r8
 8003eb8:	2202      	movs	r2, #2
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	0030      	movs	r0, r6
 8003ebe:	2332      	movs	r3, #50	; 0x32
 8003ec0:	491b      	ldr	r1, [pc, #108]	; (8003f30 <DisplayTopology+0x1a0>)
 8003ec2:	f009 fbcb 	bl	800d65c <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	b2dc      	uxtb	r4, r3
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <DisplayTopology+0x184>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	42a3      	cmp	r3, r4
 8003ed0:	d8a8      	bhi.n	8003e24 <DisplayTopology+0x94>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	425b      	negs	r3, r3
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	0030      	movs	r0, r6
 8003edc:	4915      	ldr	r1, [pc, #84]	; (8003f34 <DisplayTopology+0x1a4>)
 8003ede:	3333      	adds	r3, #51	; 0x33
 8003ee0:	f009 fbbc 	bl	800d65c <writePxMutex>
}
 8003ee4:	b003      	add	sp, #12
 8003ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ee8:	46bb      	mov	fp, r7
 8003eea:	46b2      	mov	sl, r6
 8003eec:	46a9      	mov	r9, r5
 8003eee:	46a0      	mov	r8, r4
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003ef2:	2307      	movs	r3, #7
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	0028      	movs	r0, r5
 8003efa:	08d2      	lsrs	r2, r2, #3
 8003efc:	f00f fb40 	bl	8013580 <sprintf>
 8003f00:	e7cb      	b.n	8003e9a <DisplayTopology+0x10a>
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	20000ba8 	.word	0x20000ba8
 8003f08:	08019a08 	.word	0x08019a08
 8003f0c:	08019a1c 	.word	0x08019a1c
 8003f10:	0801a900 	.word	0x0801a900
 8003f14:	20000008 	.word	0x20000008
 8003f18:	08019a34 	.word	0x08019a34
 8003f1c:	08019a30 	.word	0x08019a30
 8003f20:	08019a24 	.word	0x08019a24
 8003f24:	20000f84 	.word	0x20000f84
 8003f28:	0801935c 	.word	0x0801935c
 8003f2c:	08019a18 	.word	0x08019a18
 8003f30:	08019b40 	.word	0x08019b40
 8003f34:	0801b304 	.word	0x0801b304

08003f38 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	46de      	mov	lr, fp
 8003f3c:	4645      	mov	r5, r8
 8003f3e:	4657      	mov	r7, sl
 8003f40:	464e      	mov	r6, r9
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f42:	4c37      	ldr	r4, [pc, #220]	; (8004020 <DisplayPortsDir+0xe8>)
void DisplayPortsDir(uint8_t port){
 8003f44:	b5e0      	push	{r5, r6, r7, lr}
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f46:	3468      	adds	r4, #104	; 0x68
 8003f48:	0022      	movs	r2, r4
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <DisplayPortsDir+0xec>)
void DisplayPortsDir(uint8_t port){
 8003f4c:	4682      	mov	sl, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f4e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f50:	c223      	stmia	r2!, {r0, r1, r5}
 8003f52:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f54:	c223      	stmia	r2!, {r0, r1, r5}
 8003f56:	681b      	ldr	r3, [r3, #0]
void DisplayPortsDir(uint8_t port){
 8003f58:	b083      	sub	sp, #12
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f5a:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7fc f8db 	bl	8000118 <strlen>
 8003f62:	2301      	movs	r3, #1
 8003f64:	425b      	negs	r3, r3
 8003f66:	b282      	uxth	r2, r0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	0021      	movs	r1, r4
 8003f6c:	3333      	adds	r3, #51	; 0x33
 8003f6e:	4650      	mov	r0, sl
 8003f70:	f009 fb74 	bl	800d65c <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <DisplayPortsDir+0xf0>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d034      	beq.n	8003fe6 <DisplayPortsDir+0xae>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	4699      	mov	r9, r3
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <DisplayPortsDir+0xf4>)
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f82:	2780      	movs	r7, #128	; 0x80
 8003f84:	4698      	mov	r8, r3
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <DisplayPortsDir+0xf8>)
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f88:	023f      	lsls	r7, r7, #8
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f8a:	469b      	mov	fp, r3
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f8c:	464b      	mov	r3, r9
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f8e:	4e24      	ldr	r6, [pc, #144]	; (8004020 <DisplayPortsDir+0xe8>)
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f90:	1e5d      	subs	r5, r3, #1
 8003f92:	2400      	movs	r4, #0
 8003f94:	006d      	lsls	r5, r5, #1
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f96:	3668      	adds	r6, #104	; 0x68
 8003f98:	e001      	b.n	8003f9e <DisplayPortsDir+0x66>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003f9a:	2c0a      	cmp	r4, #10
 8003f9c:	d01b      	beq.n	8003fd6 <DisplayPortsDir+0x9e>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f9e:	0022      	movs	r2, r4
 8003fa0:	0039      	movs	r1, r7
 8003fa2:	4643      	mov	r3, r8
 8003fa4:	4111      	asrs	r1, r2
 8003fa6:	5b5b      	ldrh	r3, [r3, r5]
 8003fa8:	3401      	adds	r4, #1
 8003faa:	4219      	tst	r1, r3
 8003fac:	d0f5      	beq.n	8003f9a <DisplayPortsDir+0x62>
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003fae:	0023      	movs	r3, r4
 8003fb0:	464a      	mov	r2, r9
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	0030      	movs	r0, r6
 8003fb6:	f00f fae3 	bl	8013580 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003fba:	0030      	movs	r0, r6
 8003fbc:	f7fc f8ac 	bl	8000118 <strlen>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	b282      	uxth	r2, r0
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	0031      	movs	r1, r6
 8003fca:	4650      	mov	r0, sl
 8003fcc:	3333      	adds	r3, #51	; 0x33
 8003fce:	f009 fb45 	bl	800d65c <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003fd2:	2c0a      	cmp	r4, #10
 8003fd4:	d1e3      	bne.n	8003f9e <DisplayPortsDir+0x66>
	for(uint8_t i =1; i <= N; i++){
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4699      	mov	r9, r3
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <DisplayPortsDir+0xf0>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	454b      	cmp	r3, r9
 8003fe4:	d2d2      	bcs.n	8003f8c <DisplayPortsDir+0x54>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003fe6:	4c0e      	ldr	r4, [pc, #56]	; (8004020 <DisplayPortsDir+0xe8>)
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <DisplayPortsDir+0xfc>)
 8003fea:	3468      	adds	r4, #104	; 0x68
 8003fec:	0022      	movs	r2, r4
 8003fee:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ff0:	c223      	stmia	r2!, {r0, r1, r5}
 8003ff2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ff4:	c223      	stmia	r2!, {r0, r1, r5}
 8003ff6:	cb03      	ldmia	r3!, {r0, r1}
 8003ff8:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ffa:	0020      	movs	r0, r4
 8003ffc:	f7fc f88c 	bl	8000118 <strlen>
 8004000:	2301      	movs	r3, #1
 8004002:	425b      	negs	r3, r3
 8004004:	b282      	uxth	r2, r0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0021      	movs	r1, r4
 800400a:	4650      	mov	r0, sl
 800400c:	3333      	adds	r3, #51	; 0x33
 800400e:	f009 fb25 	bl	800d65c <writePxMutex>
	HAL_MAX_DELAY);
}
 8004012:	b003      	add	sp, #12
 8004014:	bcf0      	pop	{r4, r5, r6, r7}
 8004016:	46bb      	mov	fp, r7
 8004018:	46b2      	mov	sl, r6
 800401a:	46a9      	mov	r9, r5
 800401c:	46a0      	mov	r8, r4
 800401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004020:	20000ba8 	.word	0x20000ba8
 8004024:	08019a3c 	.word	0x08019a3c
 8004028:	20000008 	.word	0x20000008
 800402c:	200029d4 	.word	0x200029d4
 8004030:	08019a78 	.word	0x08019a78
 8004034:	08019a58 	.word	0x08019a58

08004038 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	46de      	mov	lr, fp
 800403c:	464e      	mov	r6, r9
 800403e:	4645      	mov	r5, r8
 8004040:	4657      	mov	r7, sl
 8004042:	b5e0      	push	{r5, r6, r7, lr}
 8004044:	b085      	sub	sp, #20
 8004046:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004048:	f009 fe90 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
	
	strcpy((char* )pcOutputString,"");
 800404c:	2300      	movs	r3, #0
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800404e:	0004      	movs	r4, r0
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004050:	4d99      	ldr	r5, [pc, #612]	; (80042b8 <DisplayModuleStatus+0x280>)
	strcpy((char* )pcOutputString,"");
 8004052:	7003      	strb	r3, [r0, #0]
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8004054:	4b99      	ldr	r3, [pc, #612]	; (80042bc <DisplayModuleStatus+0x284>)
 8004056:	3568      	adds	r5, #104	; 0x68
 8004058:	781a      	ldrb	r2, [r3, #0]
 800405a:	4999      	ldr	r1, [pc, #612]	; (80042c0 <DisplayModuleStatus+0x288>)
 800405c:	0028      	movs	r0, r5
 800405e:	f00f fa8f 	bl	8013580 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004062:	0029      	movs	r1, r5
 8004064:	0020      	movs	r0, r4
 8004066:	f00f faab 	bl	80135c0 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 800406a:	4b96      	ldr	r3, [pc, #600]	; (80042c4 <DisplayModuleStatus+0x28c>)
 800406c:	4996      	ldr	r1, [pc, #600]	; (80042c8 <DisplayModuleStatus+0x290>)
 800406e:	4698      	mov	r8, r3
 8004070:	2338      	movs	r3, #56	; 0x38
 8004072:	4642      	mov	r2, r8
 8004074:	0028      	movs	r0, r5
 8004076:	5cd2      	ldrb	r2, [r2, r3]
 8004078:	f00f fa82 	bl	8013580 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800407c:	0029      	movs	r1, r5
 800407e:	0020      	movs	r0, r4
 8004080:	f00f fa9e 	bl	80135c0 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8004084:	2306      	movs	r3, #6
 8004086:	2200      	movs	r2, #0
 8004088:	4990      	ldr	r1, [pc, #576]	; (80042cc <DisplayModuleStatus+0x294>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	0028      	movs	r0, r5
 800408e:	3b04      	subs	r3, #4
 8004090:	f00f fa76 	bl	8013580 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8004094:	0029      	movs	r1, r5
 8004096:	0020      	movs	r0, r4
 8004098:	f00f fa92 	bl	80135c0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 800409c:	4a8c      	ldr	r2, [pc, #560]	; (80042d0 <DisplayModuleStatus+0x298>)
 800409e:	498d      	ldr	r1, [pc, #564]	; (80042d4 <DisplayModuleStatus+0x29c>)
 80040a0:	0028      	movs	r0, r5
 80040a2:	f00f fa6d 	bl	8013580 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040a6:	0029      	movs	r1, r5
 80040a8:	0020      	movs	r0, r4
 80040aa:	f00f fa89 	bl	80135c0 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80040ae:	4a8a      	ldr	r2, [pc, #552]	; (80042d8 <DisplayModuleStatus+0x2a0>)
 80040b0:	498a      	ldr	r1, [pc, #552]	; (80042dc <DisplayModuleStatus+0x2a4>)
 80040b2:	0028      	movs	r0, r5
 80040b4:	f00f fa64 	bl	8013580 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040b8:	0029      	movs	r1, r5
 80040ba:	0020      	movs	r0, r4
 80040bc:	f00f fa80 	bl	80135c0 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040c0:	002a      	movs	r2, r5
 80040c2:	4b87      	ldr	r3, [pc, #540]	; (80042e0 <DisplayModuleStatus+0x2a8>)
 80040c4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040c6:	c243      	stmia	r2!, {r0, r1, r6}
 80040c8:	6819      	ldr	r1, [r3, #0]
	strcat((char* )pcOutputString,pcUserMessage);
 80040ca:	0020      	movs	r0, r4
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040cc:	6011      	str	r1, [r2, #0]
 80040ce:	8899      	ldrh	r1, [r3, #4]
	strcat((char* )pcOutputString,pcUserMessage);
 80040d0:	2601      	movs	r6, #1
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040d2:	8091      	strh	r1, [r2, #4]
 80040d4:	799b      	ldrb	r3, [r3, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80040d6:	0029      	movs	r1, r5
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040d8:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80040da:	f00f fa71 	bl	80135c0 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 80040de:	4b81      	ldr	r3, [pc, #516]	; (80042e4 <DisplayModuleStatus+0x2ac>)
 80040e0:	469a      	mov	sl, r3
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 80040e2:	4b81      	ldr	r3, [pc, #516]	; (80042e8 <DisplayModuleStatus+0x2b0>)
 80040e4:	4699      	mov	r9, r3
				break;
			case CLI:
				sprintf(pcUserMessage,"Receiving user commands\n\r");
				break;
			case PORTBUTTON:
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80040e6:	4b81      	ldr	r3, [pc, #516]	; (80042ec <DisplayModuleStatus+0x2b4>)
 80040e8:	469b      	mov	fp, r3
		sprintf(pcUserMessage,"P%d: ",i);
 80040ea:	0032      	movs	r2, r6
 80040ec:	4651      	mov	r1, sl
 80040ee:	0028      	movs	r0, r5
 80040f0:	f00f fa46 	bl	8013580 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 80040f4:	0029      	movs	r1, r5
 80040f6:	0020      	movs	r0, r4
 80040f8:	f00f fa62 	bl	80135c0 <strcat>
		switch(portStatus[i]){
 80040fc:	4643      	mov	r3, r8
 80040fe:	333c      	adds	r3, #60	; 0x3c
 8004100:	5cf3      	ldrb	r3, [r6, r3]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d80b      	bhi.n	800411e <DisplayModuleStatus+0xe6>
 8004106:	464a      	mov	r2, r9
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	58d3      	ldr	r3, [r2, r3]
 800410c:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800410e:	4b78      	ldr	r3, [pc, #480]	; (80042f0 <DisplayModuleStatus+0x2b8>)
 8004110:	4a78      	ldr	r2, [pc, #480]	; (80042f4 <DisplayModuleStatus+0x2bc>)
 8004112:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004114:	c283      	stmia	r2!, {r0, r1, r7}
 8004116:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004118:	c283      	stmia	r2!, {r0, r1, r7}
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	8013      	strh	r3, [r2, #0]
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800411e:	0029      	movs	r1, r5
 8004120:	0020      	movs	r0, r4
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004122:	3601      	adds	r6, #1
		strcat((char* )pcOutputString,pcUserMessage);
 8004124:	f00f fa4c 	bl	80135c0 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004128:	2e06      	cmp	r6, #6
 800412a:	d1de      	bne.n	80040ea <DisplayModuleStatus+0xb2>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800412c:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <DisplayModuleStatus+0x2c0>)
 800412e:	4a71      	ldr	r2, [pc, #452]	; (80042f4 <DisplayModuleStatus+0x2bc>)
	strcat((char* )pcOutputString,pcUserMessage);
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004130:	46a0      	mov	r8, r4
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004132:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004134:	c243      	stmia	r2!, {r0, r1, r6}
 8004136:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004138:	c243      	stmia	r2!, {r0, r1, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800413a:	0029      	movs	r1, r5
 800413c:	0020      	movs	r0, r4
 800413e:	f00f fa3f 	bl	80135c0 <strcat>
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004142:	2268      	movs	r2, #104	; 0x68
 8004144:	4694      	mov	ip, r2
 8004146:	4b6d      	ldr	r3, [pc, #436]	; (80042fc <DisplayModuleStatus+0x2c4>)
 8004148:	4f6d      	ldr	r7, [pc, #436]	; (8004300 <DisplayModuleStatus+0x2c8>)
 800414a:	469a      	mov	sl, r3
 800414c:	4b5a      	ldr	r3, [pc, #360]	; (80042b8 <DisplayModuleStatus+0x280>)
	strcat((char* )pcOutputString,pcUserMessage);
 800414e:	2501      	movs	r5, #1
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004150:	4463      	add	r3, ip
 8004152:	4699      	mov	r9, r3
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004154:	4b6b      	ldr	r3, [pc, #428]	; (8004304 <DisplayModuleStatus+0x2cc>)
 8004156:	003c      	movs	r4, r7
 8004158:	469b      	mov	fp, r3
 800415a:	4e6b      	ldr	r6, [pc, #428]	; (8004308 <DisplayModuleStatus+0x2d0>)
 800415c:	e016      	b.n	800418c <DisplayModuleStatus+0x154>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800415e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004160:	f006 fa56 	bl	800a610 <GetPort>
 8004164:	0007      	movs	r7, r0
 8004166:	6820      	ldr	r0, [r4, #0]
 8004168:	f006 fa52 	bl	800a610 <GetPort>
 800416c:	002a      	movs	r2, r5
 800416e:	003b      	movs	r3, r7
 8004170:	4651      	mov	r1, sl
 8004172:	9000      	str	r0, [sp, #0]
 8004174:	4648      	mov	r0, r9
 8004176:	f00f fa03 	bl	8013580 <sprintf>
	for(char i =1; i <= 6; i++){
 800417a:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800417c:	4649      	mov	r1, r9
 800417e:	4640      	mov	r0, r8
 8004180:	f00f fa1e 	bl	80135c0 <strcat>
	for(char i =1; i <= 6; i++){
 8004184:	3638      	adds	r6, #56	; 0x38
 8004186:	3404      	adds	r4, #4
 8004188:	2d07      	cmp	r5, #7
 800418a:	d010      	beq.n	80041ae <DisplayModuleStatus+0x176>
		if(streamDMA[i - 1].Instance == 0){
 800418c:	6833      	ldr	r3, [r6, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <DisplayModuleStatus+0x126>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004192:	002a      	movs	r2, r5
 8004194:	4659      	mov	r1, fp
 8004196:	4648      	mov	r0, r9
 8004198:	f00f f9f2 	bl	8013580 <sprintf>
	for(char i =1; i <= 6; i++){
 800419c:	3501      	adds	r5, #1
			strcat((char* )pcOutputString,pcUserMessage);
 800419e:	4649      	mov	r1, r9
 80041a0:	4640      	mov	r0, r8
 80041a2:	f00f fa0d 	bl	80135c0 <strcat>
	for(char i =1; i <= 6; i++){
 80041a6:	3638      	adds	r6, #56	; 0x38
 80041a8:	3404      	adds	r4, #4
 80041aa:	2d07      	cmp	r5, #7
 80041ac:	d1ee      	bne.n	800418c <DisplayModuleStatus+0x154>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80041ae:	4640      	mov	r0, r8
 80041b0:	f7fb ffb2 	bl	8000118 <strlen>
 80041b4:	4644      	mov	r4, r8
 80041b6:	0006      	movs	r6, r0
 80041b8:	4b54      	ldr	r3, [pc, #336]	; (800430c <DisplayModuleStatus+0x2d4>)
 80041ba:	2202      	movs	r2, #2
 80041bc:	0019      	movs	r1, r3
 80041be:	1820      	adds	r0, r4, r0
 80041c0:	469a      	mov	sl, r3
 80041c2:	f00e ffe3 	bl	801318c <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80041c6:	1cb0      	adds	r0, r6, #2
 80041c8:	221d      	movs	r2, #29
 80041ca:	4951      	ldr	r1, [pc, #324]	; (8004310 <DisplayModuleStatus+0x2d8>)
 80041cc:	1820      	adds	r0, r4, r0
 80041ce:	f00e ffdd 	bl	801318c <memcpy>
	temp =strlen((char* )pcOutputString);
 80041d2:	231e      	movs	r3, #30
 80041d4:	4698      	mov	r8, r3
 80041d6:	4b4f      	ldr	r3, [pc, #316]	; (8004314 <DisplayModuleStatus+0x2dc>)
 80041d8:	44b0      	add	r8, r6
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80041da:	4699      	mov	r9, r3
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <DisplayModuleStatus+0x2e0>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041de:	2680      	movs	r6, #128	; 0x80
	temp =strlen((char* )pcOutputString);
 80041e0:	2500      	movs	r5, #0
			sprintf(pcUserMessage,"P%d ",p);
 80041e2:	469b      	mov	fp, r3
 80041e4:	4f34      	ldr	r7, [pc, #208]	; (80042b8 <DisplayModuleStatus+0x280>)
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041e6:	0236      	lsls	r6, r6, #8
			sprintf(pcUserMessage,"P%d ",p);
 80041e8:	3768      	adds	r7, #104	; 0x68
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80041ea:	4649      	mov	r1, r9
 80041ec:	4b33      	ldr	r3, [pc, #204]	; (80042bc <DisplayModuleStatus+0x284>)
 80041ee:	002a      	movs	r2, r5
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3501      	adds	r5, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	5acb      	ldrh	r3, [r1, r3]
 80041fa:	0031      	movs	r1, r6
 80041fc:	4111      	asrs	r1, r2
 80041fe:	4219      	tst	r1, r3
 8004200:	d13c      	bne.n	800427c <DisplayModuleStatus+0x244>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004202:	2d05      	cmp	r5, #5
 8004204:	d1f1      	bne.n	80041ea <DisplayModuleStatus+0x1b2>
			strcat((char* )pcOutputString,pcUserMessage);
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004206:	0020      	movs	r0, r4
 8004208:	f7fb ff86 	bl	8000118 <strlen>
 800420c:	4643      	mov	r3, r8
 800420e:	041e      	lsls	r6, r3, #16
 8004210:	0005      	movs	r5, r0
 8004212:	0c36      	lsrs	r6, r6, #16
 8004214:	42b0      	cmp	r0, r6
 8004216:	d048      	beq.n	80042aa <DisplayModuleStatus+0x272>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004218:	2203      	movs	r2, #3
 800421a:	4651      	mov	r1, sl
 800421c:	1960      	adds	r0, r4, r5
 800421e:	f00e ffb5 	bl	801318c <memcpy>
	
	/* Display output */
	if(port)
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d133      	bne.n	8004290 <DisplayModuleStatus+0x258>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8004228:	b005      	add	sp, #20
 800422a:	bcf0      	pop	{r4, r5, r6, r7}
 800422c:	46bb      	mov	fp, r7
 800422e:	46b2      	mov	sl, r6
 8004230:	46a9      	mov	r9, r5
 8004232:	46a0      	mov	r8, r4
 8004234:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(pcUserMessage,"Streaming\n\r");
 8004236:	4b39      	ldr	r3, [pc, #228]	; (800431c <DisplayModuleStatus+0x2e4>)
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <DisplayModuleStatus+0x2bc>)
 800423a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800423c:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 800423e:	e76e      	b.n	800411e <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004240:	4b37      	ldr	r3, [pc, #220]	; (8004320 <DisplayModuleStatus+0x2e8>)
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <DisplayModuleStatus+0x2bc>)
 8004244:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004246:	c283      	stmia	r2!, {r0, r1, r7}
 8004248:	cb03      	ldmia	r3!, {r0, r1}
 800424a:	c203      	stmia	r2!, {r0, r1}
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	7013      	strb	r3, [r2, #0]
				break;
 8004250:	e765      	b.n	800411e <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004252:	465a      	mov	r2, fp
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <DisplayModuleStatus+0x2bc>)
 8004256:	ca83      	ldmia	r2!, {r0, r1, r7}
 8004258:	c383      	stmia	r3!, {r0, r1, r7}
 800425a:	ca83      	ldmia	r2!, {r0, r1, r7}
 800425c:	c383      	stmia	r3!, {r0, r1, r7}
 800425e:	6811      	ldr	r1, [r2, #0]
 8004260:	6019      	str	r1, [r3, #0]
 8004262:	8891      	ldrh	r1, [r2, #4]
 8004264:	8099      	strh	r1, [r3, #4]
 8004266:	7992      	ldrb	r2, [r2, #6]
 8004268:	719a      	strb	r2, [r3, #6]
				break;
 800426a:	e758      	b.n	800411e <DisplayModuleStatus+0xe6>
				sprintf(pcUserMessage,"Free\n\r");
 800426c:	4b2d      	ldr	r3, [pc, #180]	; (8004324 <DisplayModuleStatus+0x2ec>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	602a      	str	r2, [r5, #0]
 8004272:	889a      	ldrh	r2, [r3, #4]
 8004274:	80aa      	strh	r2, [r5, #4]
 8004276:	799b      	ldrb	r3, [r3, #6]
 8004278:	71ab      	strb	r3, [r5, #6]
				break;
 800427a:	e750      	b.n	800411e <DisplayModuleStatus+0xe6>
			sprintf(pcUserMessage,"P%d ",p);
 800427c:	4659      	mov	r1, fp
 800427e:	002a      	movs	r2, r5
 8004280:	0038      	movs	r0, r7
 8004282:	f00f f97d 	bl	8013580 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004286:	0039      	movs	r1, r7
 8004288:	0020      	movs	r0, r4
 800428a:	f00f f999 	bl	80135c0 <strcat>
 800428e:	e7b8      	b.n	8004202 <DisplayModuleStatus+0x1ca>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004290:	0020      	movs	r0, r4
 8004292:	f7fb ff41 	bl	8000118 <strlen>
 8004296:	2301      	movs	r3, #1
 8004298:	425b      	negs	r3, r3
 800429a:	b282      	uxth	r2, r0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	0021      	movs	r1, r4
 80042a0:	9803      	ldr	r0, [sp, #12]
 80042a2:	3333      	adds	r3, #51	; 0x33
 80042a4:	f009 f9da 	bl	800d65c <writePxMutex>
}
 80042a8:	e7be      	b.n	8004228 <DisplayModuleStatus+0x1f0>
		strcat((char* )pcOutputString,"None");
 80042aa:	2205      	movs	r2, #5
 80042ac:	491e      	ldr	r1, [pc, #120]	; (8004328 <DisplayModuleStatus+0x2f0>)
 80042ae:	1820      	adds	r0, r4, r0
 80042b0:	f00e ff6c 	bl	801318c <memcpy>
	strcat((char* )pcOutputString,"\n\r");
 80042b4:	3504      	adds	r5, #4
 80042b6:	e7af      	b.n	8004218 <DisplayModuleStatus+0x1e0>
 80042b8:	20000ba8 	.word	0x20000ba8
 80042bc:	20000aa8 	.word	0x20000aa8
 80042c0:	08019a8c 	.word	0x08019a8c
 80042c4:	20000c28 	.word	0x20000c28
 80042c8:	08019aa8 	.word	0x08019aa8
 80042cc:	08019ac4 	.word	0x08019ac4
 80042d0:	08019ae4 	.word	0x08019ae4
 80042d4:	08019af0 	.word	0x08019af0
 80042d8:	08019b08 	.word	0x08019b08
 80042dc:	08019b14 	.word	0x08019b14
 80042e0:	08019b30 	.word	0x08019b30
 80042e4:	08019b44 	.word	0x08019b44
 80042e8:	080192b0 	.word	0x080192b0
 80042ec:	08019b94 	.word	0x08019b94
 80042f0:	08019b78 	.word	0x08019b78
 80042f4:	20000c10 	.word	0x20000c10
 80042f8:	08019bb4 	.word	0x08019bb4
 80042fc:	08019be8 	.word	0x08019be8
 8004300:	2000198c 	.word	0x2000198c
 8004304:	08019bcc 	.word	0x08019bcc
 8004308:	200024f0 	.word	0x200024f0
 800430c:	08019b40 	.word	0x08019b40
 8004310:	08019c18 	.word	0x08019c18
 8004314:	200029d4 	.word	0x200029d4
 8004318:	08019c38 	.word	0x08019c38
 800431c:	08019b6c 	.word	0x08019b6c
 8004320:	08019b54 	.word	0x08019b54
 8004324:	08019b4c 	.word	0x08019b4c
 8004328:	08019c40 	.word	0x08019c40

0800432c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	46c6      	mov	lr, r8
 8004330:	b500      	push	{lr}
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004332:	7803      	ldrb	r3, [r0, #0]
int16_t GetID(char *string){
 8004334:	0006      	movs	r6, r0
	if(!strcmp(string,"me")) /* Check keywords */
 8004336:	2b6d      	cmp	r3, #109	; 0x6d
 8004338:	d10a      	bne.n	8004350 <GetID+0x24>
 800433a:	7843      	ldrb	r3, [r0, #1]
 800433c:	2b65      	cmp	r3, #101	; 0x65
 800433e:	d107      	bne.n	8004350 <GetID+0x24>
 8004340:	7883      	ldrb	r3, [r0, #2]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <GetID+0x24>
		return myID;
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <GetID+0xb4>)
 8004348:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 800434a:	bc80      	pop	{r7}
 800434c:	46b8      	mov	r8, r7
 800434e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strcmp(string,"all"))
 8004350:	0030      	movs	r0, r6
 8004352:	4924      	ldr	r1, [pc, #144]	; (80043e4 <GetID+0xb8>)
 8004354:	f7fb fed6 	bl	8000104 <strcmp>
 8004358:	2800      	cmp	r0, #0
 800435a:	d037      	beq.n	80043cc <GetID+0xa0>
	else if(string[0] == '#') /* Check IDs */
 800435c:	7833      	ldrb	r3, [r6, #0]
 800435e:	4698      	mov	r8, r3
 8004360:	2b23      	cmp	r3, #35	; 0x23
 8004362:	d022      	beq.n	80043aa <GetID+0x7e>
		for(i =0; i < N; i++){
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <GetID+0xbc>)
 8004366:	781f      	ldrb	r7, [r3, #0]
 8004368:	2f00      	cmp	r7, #0
 800436a:	d00f      	beq.n	800438c <GetID+0x60>
 800436c:	2400      	movs	r4, #0
 800436e:	4d1f      	ldr	r5, [pc, #124]	; (80043ec <GetID+0xc0>)
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004370:	0029      	movs	r1, r5
 8004372:	0030      	movs	r0, r6
 8004374:	f7fb fec6 	bl	8000104 <strcmp>
 8004378:	2800      	cmp	r0, #0
 800437a:	d102      	bne.n	8004382 <GetID+0x56>
 800437c:	4643      	mov	r3, r8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d126      	bne.n	80043d0 <GetID+0xa4>
		for(i =0; i < N; i++){
 8004382:	3401      	adds	r4, #1
 8004384:	b2e4      	uxtb	r4, r4
 8004386:	350a      	adds	r5, #10
 8004388:	42a7      	cmp	r7, r4
 800438a:	d1f1      	bne.n	8004370 <GetID+0x44>
 800438c:	2400      	movs	r4, #0
 800438e:	4d14      	ldr	r5, [pc, #80]	; (80043e0 <GetID+0xb4>)
 8004390:	3538      	adds	r5, #56	; 0x38
			if(!strcmp(string,groupAlias[i]))
 8004392:	0029      	movs	r1, r5
 8004394:	0030      	movs	r0, r6
 8004396:	f7fb feb5 	bl	8000104 <strcmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	d01a      	beq.n	80043d4 <GetID+0xa8>
		for(i =0; i < MaxNumOfGroups; i++){
 800439e:	3401      	adds	r4, #1
 80043a0:	350a      	adds	r5, #10
 80043a2:	2c0a      	cmp	r4, #10
 80043a4:	d1f5      	bne.n	8004392 <GetID+0x66>
		return BOS_ERR_WrongName;
 80043a6:	2064      	movs	r0, #100	; 0x64
 80043a8:	e7cf      	b.n	800434a <GetID+0x1e>
		id =atol(string + 1);
 80043aa:	1c70      	adds	r0, r6, #1
 80043ac:	f00e fc2f 	bl	8012c0e <atol>
 80043b0:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <GetID+0x92>
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <GetID+0xbc>)
 80043b8:	7812      	ldrb	r2, [r2, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d204      	bcs.n	80043c8 <GetID+0x9c>
		else if(id == myID)
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <GetID+0xb4>)
			return BOS_ERR_WrongID;
 80043c0:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80043c2:	7812      	ldrb	r2, [r2, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1c0      	bne.n	800434a <GetID+0x1e>
			return myID;
 80043c8:	b218      	sxth	r0, r3
 80043ca:	e7be      	b.n	800434a <GetID+0x1e>
		return BOS_BROADCAST;
 80043cc:	20ff      	movs	r0, #255	; 0xff
 80043ce:	e7bc      	b.n	800434a <GetID+0x1e>
				return (i);
 80043d0:	b220      	sxth	r0, r4
 80043d2:	e7ba      	b.n	800434a <GetID+0x1e>
				return (BOS_MULTICAST | (i << 8));
 80043d4:	20fe      	movs	r0, #254	; 0xfe
 80043d6:	0224      	lsls	r4, r4, #8
 80043d8:	4320      	orrs	r0, r4
 80043da:	b200      	sxth	r0, r0
 80043dc:	e7b5      	b.n	800434a <GetID+0x1e>
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	20000aa8 	.word	0x20000aa8
 80043e4:	08019c48 	.word	0x08019c48
 80043e8:	20000008 	.word	0x20000008
 80043ec:	20000e74 	.word	0x20000e74

080043f0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	46c6      	mov	lr, r8
 80043f4:	4c2a      	ldr	r4, [pc, #168]	; (80044a0 <NameModule+0xb0>)
 80043f6:	4680      	mov	r8, r0
 80043f8:	0025      	movs	r5, r4
 80043fa:	000e      	movs	r6, r1
 80043fc:	b500      	push	{lr}
 80043fe:	3510      	adds	r5, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 8004400:	0021      	movs	r1, r4
 8004402:	0030      	movs	r0, r6
 8004404:	f7fb fe7e 	bl	8000104 <strcmp>
 8004408:	2800      	cmp	r0, #0
 800440a:	d03a      	beq.n	8004482 <NameModule+0x92>
	for(i =0; i < NumOfKeywords; i++){
 800440c:	3404      	adds	r4, #4
 800440e:	42ac      	cmp	r4, r5
 8004410:	d1f6      	bne.n	8004400 <NameModule+0x10>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <NameModule+0xb4>)
 8004414:	781f      	ldrb	r7, [r3, #0]
 8004416:	2f01      	cmp	r7, #1
 8004418:	dd10      	ble.n	800443c <NameModule+0x4c>
 800441a:	2501      	movs	r5, #1
 800441c:	4c22      	ldr	r4, [pc, #136]	; (80044a8 <NameModule+0xb8>)
 800441e:	e003      	b.n	8004428 <NameModule+0x38>
 8004420:	3501      	adds	r5, #1
 8004422:	340a      	adds	r4, #10
 8004424:	42bd      	cmp	r5, r7
 8004426:	da09      	bge.n	800443c <NameModule+0x4c>
		if(!strcmp(alias,moduleAlias[i]))
 8004428:	0021      	movs	r1, r4
 800442a:	0030      	movs	r0, r6
 800442c:	f7fb fe6a 	bl	8000104 <strcmp>
 8004430:	2800      	cmp	r0, #0
 8004432:	d1f5      	bne.n	8004420 <NameModule+0x30>
			return BOS_ERR_ExistingAlias;
 8004434:	2007      	movs	r0, #7

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
	
	return result;
}
 8004436:	bc80      	pop	{r7}
 8004438:	46b8      	mov	r8, r7
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	4d1b      	ldr	r5, [pc, #108]	; (80044ac <NameModule+0xbc>)
 800443e:	002c      	movs	r4, r5
 8004440:	359c      	adds	r5, #156	; 0x9c
 8004442:	3438      	adds	r4, #56	; 0x38
		if(!strcmp(alias,groupAlias[i]))
 8004444:	0021      	movs	r1, r4
 8004446:	0030      	movs	r0, r6
 8004448:	f7fb fe5c 	bl	8000104 <strcmp>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0f1      	beq.n	8004434 <NameModule+0x44>
	for(i =0; i < MaxNumOfGroups; i++){
 8004450:	340a      	adds	r4, #10
 8004452:	42a5      	cmp	r5, r4
 8004454:	d1f6      	bne.n	8004444 <NameModule+0x54>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004456:	4f16      	ldr	r7, [pc, #88]	; (80044b0 <NameModule+0xc0>)
 8004458:	4c16      	ldr	r4, [pc, #88]	; (80044b4 <NameModule+0xc4>)
 800445a:	647c      	str	r4, [r7, #68]	; 0x44
 800445c:	e003      	b.n	8004466 <NameModule+0x76>
 800445e:	6864      	ldr	r4, [r4, #4]
 8004460:	647c      	str	r4, [r7, #68]	; 0x44
 8004462:	2c00      	cmp	r4, #0
 8004464:	d00f      	beq.n	8004486 <NameModule+0x96>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800446a:	0028      	movs	r0, r5
 800446c:	f7fb fe54 	bl	8000118 <strlen>
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004470:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004472:	0002      	movs	r2, r0
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004474:	0030      	movs	r0, r6
 8004476:	f00f f8c6 	bl	8013606 <strncmp>
 800447a:	2800      	cmp	r0, #0
 800447c:	d1ef      	bne.n	800445e <NameModule+0x6e>
			return BOS_ERR_ExistingCmd;
 800447e:	2008      	movs	r0, #8
 8004480:	e7d9      	b.n	8004436 <NameModule+0x46>
			return BOS_ERR_Keyword;
 8004482:	2006      	movs	r0, #6
 8004484:	e7d7      	b.n	8004436 <NameModule+0x46>
	strcpy(moduleAlias[module],alias);
 8004486:	4643      	mov	r3, r8
 8004488:	0098      	lsls	r0, r3, #2
 800448a:	4f0b      	ldr	r7, [pc, #44]	; (80044b8 <NameModule+0xc8>)
 800448c:	4440      	add	r0, r8
 800448e:	0040      	lsls	r0, r0, #1
 8004490:	0031      	movs	r1, r6
 8004492:	19c0      	adds	r0, r0, r7
 8004494:	f00f f8af 	bl	80135f6 <strcpy>
	result =SaveEEalias();
 8004498:	f7ff f87c 	bl	8003594 <SaveEEalias>
	return result;
 800449c:	e7cb      	b.n	8004436 <NameModule+0x46>
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	0801930c 	.word	0x0801930c
 80044a4:	20000008 	.word	0x20000008
 80044a8:	20000e7e 	.word	0x20000e7e
 80044ac:	20000aa8 	.word	0x20000aa8
 80044b0:	20000c28 	.word	0x20000c28
 80044b4:	200000bc 	.word	0x200000bc
 80044b8:	20000e74 	.word	0x20000e74

080044bc <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	464f      	mov	r7, r9
 80044c0:	4646      	mov	r6, r8
 80044c2:	46d6      	mov	lr, sl
 80044c4:	4b3c      	ldr	r3, [pc, #240]	; (80045b8 <AddModuleToGroup+0xfc>)
 80044c6:	b5c0      	push	{r6, r7, lr}
 80044c8:	001f      	movs	r7, r3
 80044ca:	3738      	adds	r7, #56	; 0x38
 80044cc:	4680      	mov	r8, r0
 80044ce:	000e      	movs	r6, r1
 80044d0:	4699      	mov	r9, r3
 80044d2:	003d      	movs	r5, r7
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80044d4:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80044d6:	0029      	movs	r1, r5
 80044d8:	0030      	movs	r0, r6
 80044da:	f7fb fe13 	bl	8000104 <strcmp>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d051      	beq.n	8004586 <AddModuleToGroup+0xca>
	for(i =0; i < MaxNumOfGroups; i++){
 80044e2:	3401      	adds	r4, #1
 80044e4:	350a      	adds	r5, #10
 80044e6:	2c0a      	cmp	r4, #10
 80044e8:	d1f5      	bne.n	80044d6 <AddModuleToGroup+0x1a>
 80044ea:	4c34      	ldr	r4, [pc, #208]	; (80045bc <AddModuleToGroup+0x100>)
 80044ec:	0025      	movs	r5, r4
 80044ee:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80044f0:	0021      	movs	r1, r4
 80044f2:	0030      	movs	r0, r6
 80044f4:	f7fb fe06 	bl	8000104 <strcmp>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d04e      	beq.n	800459a <AddModuleToGroup+0xde>
	for(j =0; j < NumOfKeywords; j++){
 80044fc:	3404      	adds	r4, #4
 80044fe:	42a5      	cmp	r5, r4
 8004500:	d1f6      	bne.n	80044f0 <AddModuleToGroup+0x34>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004502:	4b2f      	ldr	r3, [pc, #188]	; (80045c0 <AddModuleToGroup+0x104>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	469a      	mov	sl, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	dd12      	ble.n	8004532 <AddModuleToGroup+0x76>
 800450c:	2501      	movs	r5, #1
 800450e:	4c2d      	ldr	r4, [pc, #180]	; (80045c4 <AddModuleToGroup+0x108>)
 8004510:	e003      	b.n	800451a <AddModuleToGroup+0x5e>
 8004512:	3501      	adds	r5, #1
 8004514:	340a      	adds	r4, #10
 8004516:	45aa      	cmp	sl, r5
 8004518:	dd0b      	ble.n	8004532 <AddModuleToGroup+0x76>
		if(!strcmp(group,moduleAlias[j]))
 800451a:	0021      	movs	r1, r4
 800451c:	0030      	movs	r0, r6
 800451e:	f7fb fdf1 	bl	8000104 <strcmp>
 8004522:	2800      	cmp	r0, #0
 8004524:	d1f5      	bne.n	8004512 <AddModuleToGroup+0x56>
			return BOS_ERR_ExistingAlias;
 8004526:	2007      	movs	r0, #7
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 8004528:	bce0      	pop	{r5, r6, r7}
 800452a:	46ba      	mov	sl, r7
 800452c:	46b1      	mov	r9, r6
 800452e:	46a8      	mov	r8, r5
 8004530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004532:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <AddModuleToGroup+0x10c>)
 8004534:	4c25      	ldr	r4, [pc, #148]	; (80045cc <AddModuleToGroup+0x110>)
 8004536:	469a      	mov	sl, r3
 8004538:	649c      	str	r4, [r3, #72]	; 0x48
 800453a:	e004      	b.n	8004546 <AddModuleToGroup+0x8a>
 800453c:	4653      	mov	r3, sl
 800453e:	6864      	ldr	r4, [r4, #4]
 8004540:	649c      	str	r4, [r3, #72]	; 0x48
 8004542:	2c00      	cmp	r4, #0
 8004544:	d00d      	beq.n	8004562 <AddModuleToGroup+0xa6>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800454a:	0028      	movs	r0, r5
 800454c:	f7fb fde4 	bl	8000118 <strlen>
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004550:	0029      	movs	r1, r5
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004552:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004554:	0030      	movs	r0, r6
 8004556:	f00f f856 	bl	8013606 <strncmp>
 800455a:	2800      	cmp	r0, #0
 800455c:	d1ee      	bne.n	800453c <AddModuleToGroup+0x80>
			return BOS_ERR_ExistingCmd;
 800455e:	2008      	movs	r0, #8
 8004560:	e7e2      	b.n	8004528 <AddModuleToGroup+0x6c>
		if(!groupAlias[i][0]){
 8004562:	783b      	ldrb	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01a      	beq.n	800459e <AddModuleToGroup+0xe2>
	for(i =0; i < MaxNumOfGroups; i++){
 8004568:	3401      	adds	r4, #1
 800456a:	370a      	adds	r7, #10
 800456c:	2c0a      	cmp	r4, #10
 800456e:	d1f8      	bne.n	8004562 <AddModuleToGroup+0xa6>
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	00db      	lsls	r3, r3, #3
	groupModules[module - 1] |=(0x0001 << i);
 8004574:	4647      	mov	r7, r8
 8004576:	3f01      	subs	r7, #1
 8004578:	007f      	lsls	r7, r7, #1
 800457a:	444f      	add	r7, r9
 800457c:	88ba      	ldrh	r2, [r7, #4]
	return result;
 800457e:	2000      	movs	r0, #0
	groupModules[module - 1] |=(0x0001 << i);
 8004580:	4313      	orrs	r3, r2
 8004582:	80bb      	strh	r3, [r7, #4]
	return result;
 8004584:	e7d0      	b.n	8004528 <AddModuleToGroup+0x6c>
			groupModules[module - 1] |=(0x0001 << i);
 8004586:	2201      	movs	r2, #1
 8004588:	4647      	mov	r7, r8
 800458a:	40a2      	lsls	r2, r4
 800458c:	3f01      	subs	r7, #1
 800458e:	007f      	lsls	r7, r7, #1
 8004590:	444f      	add	r7, r9
 8004592:	88bb      	ldrh	r3, [r7, #4]
 8004594:	4313      	orrs	r3, r2
 8004596:	80bb      	strh	r3, [r7, #4]
			return result;
 8004598:	e7c6      	b.n	8004528 <AddModuleToGroup+0x6c>
			return BOS_ERR_Keyword;
 800459a:	2006      	movs	r0, #6
 800459c:	e7c4      	b.n	8004528 <AddModuleToGroup+0x6c>
			strcpy(groupAlias[i],group);
 800459e:	464a      	mov	r2, r9
 80045a0:	00a3      	lsls	r3, r4, #2
 80045a2:	191b      	adds	r3, r3, r4
 80045a4:	0058      	lsls	r0, r3, #1
 80045a6:	3238      	adds	r2, #56	; 0x38
 80045a8:	0031      	movs	r1, r6
 80045aa:	1810      	adds	r0, r2, r0
 80045ac:	f00f f823 	bl	80135f6 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 80045b0:	2301      	movs	r3, #1
 80045b2:	40a3      	lsls	r3, r4
 80045b4:	b21b      	sxth	r3, r3
			break;
 80045b6:	e7dd      	b.n	8004574 <AddModuleToGroup+0xb8>
 80045b8:	20000aa8 	.word	0x20000aa8
 80045bc:	0801930c 	.word	0x0801930c
 80045c0:	20000008 	.word	0x20000008
 80045c4:	20000e7e 	.word	0x20000e7e
 80045c8:	20000c28 	.word	0x20000c28
 80045cc:	200000bc 	.word	0x200000bc

080045d0 <WriteToRemote>:
 remoteAddress: Remote memory address (RAM or Flash). Use the 1 to MAX_BOS_VARS to write BOS variables.
 format: Local format sent to remote module (FMT_UINT8, FMT_INT8, FMT_UINT16, FMT_INT16, FMT_UINT32, FMT_INT32, FMT_FLOAT, FMT_BOOL)
 timeout: Write confirmation timeout in msec. Use 0 to disable confirmation.
 force: Put 1 to force full-page erase before writing to Flash.
 */
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	4647      	mov	r7, r8
 80045d4:	46ce      	mov	lr, r9
	
	uint8_t response;
	uint16_t code;
	
	/* Check whether response is enabled or disabled */
	response =BOSMessaging.response;
 80045d6:	2524      	movs	r5, #36	; 0x24
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80045d8:	b580      	push	{r7, lr}
 80045da:	468c      	mov	ip, r1
 80045dc:	a908      	add	r1, sp, #32
 80045de:	c910      	ldmia	r1!, {r4}
	response =BOSMessaging.response;
 80045e0:	4e92      	ldr	r6, [pc, #584]	; (800482c <WriteToRemote+0x25c>)
 80045e2:	46a8      	mov	r8, r5
 80045e4:	5d77      	ldrb	r7, [r6, r5]
	if(timeout)
		BOSMessaging.response = BOS_RESPONSE_MSG;
 80045e6:	0025      	movs	r5, r4
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80045e8:	4681      	mov	r9, r0
		BOSMessaging.response = BOS_RESPONSE_MSG;
 80045ea:	1e68      	subs	r0, r5, #1
 80045ec:	4185      	sbcs	r5, r0
 80045ee:	4640      	mov	r0, r8
BOS_Status WriteToRemote(uint8_t module,uint32_t localAddress,uint32_t remoteAddress,varFormat_t format,uint32_t timeout,uint8_t force){
 80045f0:	7809      	ldrb	r1, [r1, #0]
		BOSMessaging.response = BOS_RESPONSE_MSG;
 80045f2:	016d      	lsls	r5, r5, #5
 80045f4:	5435      	strb	r5, [r6, r0]
	
	/* Check if a force write is needed */
	if(force)
		code = CODE_WRITE_REMOTE_FORCE;
	else
		code = CODE_WRITE_REMOTE;
 80045f6:	000d      	movs	r5, r1
 80045f8:	1e69      	subs	r1, r5, #1
 80045fa:	418d      	sbcs	r5, r1
 80045fc:	0069      	lsls	r1, r5, #1
	
	/* Writing to a BOS var */
	if(remoteAddress < FLASH_BASE){
 80045fe:	2580      	movs	r5, #128	; 0x80
		code = CODE_WRITE_REMOTE;
 8004600:	3120      	adds	r1, #32
	if(remoteAddress < FLASH_BASE){
 8004602:	052d      	lsls	r5, r5, #20
 8004604:	42aa      	cmp	r2, r5
 8004606:	d229      	bcs.n	800465c <WriteToRemote+0x8c>
		messageParams[0] =remoteAddress;			// Send BOS variable index
 8004608:	214c      	movs	r1, #76	; 0x4c
 800460a:	5472      	strb	r2, [r6, r1]
		messageParams[1] =format;						// Send local format
 800460c:	0032      	movs	r2, r6
 800460e:	324c      	adds	r2, #76	; 0x4c
 8004610:	7053      	strb	r3, [r2, #1]
		/* Send variable value based on local format */
		switch(format){
 8004612:	2b08      	cmp	r3, #8
 8004614:	d819      	bhi.n	800464a <WriteToRemote+0x7a>
 8004616:	4a86      	ldr	r2, [pc, #536]	; (8004830 <WriteToRemote+0x260>)
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	58d3      	ldr	r3, [r2, r3]
 800461c:	469f      	mov	pc, r3
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
				break;
			case FMT_INT32:
				messageParams[2] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800461e:	4663      	mov	r3, ip
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	0033      	movs	r3, r6
 8004624:	334c      	adds	r3, #76	; 0x4c
 8004626:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 8004628:	4662      	mov	r2, ip
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	1212      	asrs	r2, r2, #8
 800462e:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 8004630:	4662      	mov	r2, ip
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	1412      	asrs	r2, r2, #16
 8004636:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 8004638:	4662      	mov	r2, ip
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	1612      	asrs	r2, r2, #24
 800463e:	715a      	strb	r2, [r3, #5]
				SendMessageToModule(module,CODE_WRITE_REMOTE,6);
 8004640:	2120      	movs	r1, #32
 8004642:	2206      	movs	r2, #6
 8004644:	4648      	mov	r0, r9
 8004646:	f003 fde7 	bl	8008218 <SendMessageToModule>
				break;
		}
	}
	
	/* Restore response settings to default */
	BOSMessaging.response =response;
 800464a:	2324      	movs	r3, #36	; 0x24
		uint32_t t0 =HAL_GetTick();
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
		return responseStatus;
	}
	
	return BOS_OK;
 800464c:	2000      	movs	r0, #0
	BOSMessaging.response =response;
 800464e:	54f7      	strb	r7, [r6, r3]
	if(timeout){
 8004650:	2c00      	cmp	r4, #0
 8004652:	d115      	bne.n	8004680 <WriteToRemote+0xb0>
}
 8004654:	bcc0      	pop	{r6, r7}
 8004656:	46b9      	mov	r9, r7
 8004658:	46b0      	mov	r8, r6
 800465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		messageParams[0] =0;
 800465c:	254c      	movs	r5, #76	; 0x4c
 800465e:	2000      	movs	r0, #0
 8004660:	5570      	strb	r0, [r6, r5]
		messageParams[1] =format;							// Local format
 8004662:	0035      	movs	r5, r6
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 8004664:	0e10      	lsrs	r0, r2, #24
		messageParams[1] =format;							// Local format
 8004666:	354c      	adds	r5, #76	; 0x4c
		messageParams[2] =(uint8_t )(remoteAddress >> 24);
 8004668:	70a8      	strb	r0, [r5, #2]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 800466a:	0c10      	lsrs	r0, r2, #16
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 800466c:	ba52      	rev16	r2, r2
		messageParams[1] =format;							// Local format
 800466e:	706b      	strb	r3, [r5, #1]
		messageParams[3] =(uint8_t )(remoteAddress >> 16); // Remote address
 8004670:	70e8      	strb	r0, [r5, #3]
		messageParams[4] =(uint8_t )(remoteAddress >> 8);
 8004672:	80aa      	strh	r2, [r5, #4]
		switch(format){
 8004674:	2b08      	cmp	r3, #8
 8004676:	d8e8      	bhi.n	800464a <WriteToRemote+0x7a>
 8004678:	4a6e      	ldr	r2, [pc, #440]	; (8004834 <WriteToRemote+0x264>)
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	58d3      	ldr	r3, [r2, r3]
 800467e:	469f      	mov	pc, r3
		uint32_t t0 =HAL_GetTick();
 8004680:	f00b f898 	bl	800f7b4 <HAL_GetTick>
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004684:	264c      	movs	r6, #76	; 0x4c
		uint32_t t0 =HAL_GetTick();
 8004686:	0005      	movs	r5, r0
		while((responseStatus != BOS_OK) && ((HAL_GetTick() - t0) < timeout)){};
 8004688:	4f6b      	ldr	r7, [pc, #428]	; (8004838 <WriteToRemote+0x268>)
 800468a:	5db8      	ldrb	r0, [r7, r6]
 800468c:	2800      	cmp	r0, #0
 800468e:	d0e1      	beq.n	8004654 <WriteToRemote+0x84>
 8004690:	f00b f890 	bl	800f7b4 <HAL_GetTick>
 8004694:	1b40      	subs	r0, r0, r5
 8004696:	42a0      	cmp	r0, r4
 8004698:	d3f7      	bcc.n	800468a <WriteToRemote+0xba>
		return responseStatus;
 800469a:	5db8      	ldrb	r0, [r7, r6]
 800469c:	e7da      	b.n	8004654 <WriteToRemote+0x84>
				messageParams[6] =*(__IO int8_t* )localAddress;
 800469e:	4663      	mov	r3, ip
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	0033      	movs	r3, r6
 80046a4:	334c      	adds	r3, #76	; 0x4c
 80046a6:	719a      	strb	r2, [r3, #6]
				SendMessageToModule(module,code,7);
 80046a8:	4648      	mov	r0, r9
 80046aa:	2207      	movs	r2, #7
 80046ac:	f003 fdb4 	bl	8008218 <SendMessageToModule>
				break;
 80046b0:	e7cb      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[2] =*(__IO int8_t* )localAddress;
 80046b2:	4663      	mov	r3, ip
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	0033      	movs	r3, r6
 80046b8:	334c      	adds	r3, #76	; 0x4c
 80046ba:	709a      	strb	r2, [r3, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,3);
 80046bc:	2120      	movs	r1, #32
 80046be:	2203      	movs	r2, #3
 80046c0:	4648      	mov	r0, r9
 80046c2:	f003 fda9 	bl	8008218 <SendMessageToModule>
				break;
 80046c6:	e7c0      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[2] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 80046c8:	4663      	mov	r3, ip
 80046ca:	0032      	movs	r2, r6
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	324c      	adds	r2, #76	; 0x4c
 80046d0:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 80046d2:	4663      	mov	r3, ip
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	0a1b      	lsrs	r3, r3, #8
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80046d8:	70d3      	strb	r3, [r2, #3]
				SendMessageToModule(module,CODE_WRITE_REMOTE,4);
 80046da:	2120      	movs	r1, #32
 80046dc:	2204      	movs	r2, #4
 80046de:	4648      	mov	r0, r9
 80046e0:	f003 fd9a 	bl	8008218 <SendMessageToModule>
				break;
 80046e4:	e7b1      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[2] =*(__IO uint8_t* )(localAddress + 0);
 80046e6:	4663      	mov	r3, ip
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	0033      	movs	r3, r6
 80046ec:	334c      	adds	r3, #76	; 0x4c
 80046ee:	709a      	strb	r2, [r3, #2]
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 80046f0:	4662      	mov	r2, ip
 80046f2:	7852      	ldrb	r2, [r2, #1]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80046f4:	2120      	movs	r1, #32
				messageParams[3] =*(__IO uint8_t* )(localAddress + 1);
 80046f6:	70da      	strb	r2, [r3, #3]
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 80046f8:	4662      	mov	r2, ip
 80046fa:	7892      	ldrb	r2, [r2, #2]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 80046fc:	4648      	mov	r0, r9
				messageParams[4] =*(__IO uint8_t* )(localAddress + 2);
 80046fe:	711a      	strb	r2, [r3, #4]
				messageParams[5] =*(__IO uint8_t* )(localAddress + 3);
 8004700:	4662      	mov	r2, ip
 8004702:	78d2      	ldrb	r2, [r2, #3]
 8004704:	715a      	strb	r2, [r3, #5]
				messageParams[6] =*(__IO uint8_t* )(localAddress + 4);
 8004706:	4662      	mov	r2, ip
 8004708:	7912      	ldrb	r2, [r2, #4]
 800470a:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 5);
 800470c:	4662      	mov	r2, ip
 800470e:	7952      	ldrb	r2, [r2, #5]
 8004710:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 6);
 8004712:	4662      	mov	r2, ip
 8004714:	7992      	ldrb	r2, [r2, #6]
 8004716:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004718:	4662      	mov	r2, ip
 800471a:	79d2      	ldrb	r2, [r2, #7]
 800471c:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,CODE_WRITE_REMOTE,10);
 800471e:	220a      	movs	r2, #10
 8004720:	f003 fd7a 	bl	8008218 <SendMessageToModule>
				break;
 8004724:	e791      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[6] =*(__IO uint8_t* )(localAddress + 0);
 8004726:	4663      	mov	r3, ip
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	0033      	movs	r3, r6
 800472c:	334c      	adds	r3, #76	; 0x4c
 800472e:	719a      	strb	r2, [r3, #6]
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004730:	4662      	mov	r2, ip
 8004732:	7852      	ldrb	r2, [r2, #1]
				SendMessageToModule(module,code,14);
 8004734:	4648      	mov	r0, r9
				messageParams[7] =*(__IO uint8_t* )(localAddress + 1);
 8004736:	71da      	strb	r2, [r3, #7]
				messageParams[8] =*(__IO uint8_t* )(localAddress + 2);
 8004738:	4662      	mov	r2, ip
 800473a:	7892      	ldrb	r2, [r2, #2]
 800473c:	721a      	strb	r2, [r3, #8]
				messageParams[9] =*(__IO uint8_t* )(localAddress + 3);
 800473e:	4662      	mov	r2, ip
 8004740:	78d2      	ldrb	r2, [r2, #3]
 8004742:	725a      	strb	r2, [r3, #9]
				messageParams[10] =*(__IO uint8_t* )(localAddress + 4);
 8004744:	4662      	mov	r2, ip
 8004746:	7912      	ldrb	r2, [r2, #4]
 8004748:	729a      	strb	r2, [r3, #10]
				messageParams[11] =*(__IO uint8_t* )(localAddress + 5);
 800474a:	4662      	mov	r2, ip
 800474c:	7952      	ldrb	r2, [r2, #5]
 800474e:	72da      	strb	r2, [r3, #11]
				messageParams[12] =*(__IO uint8_t* )(localAddress + 6);
 8004750:	4662      	mov	r2, ip
 8004752:	7992      	ldrb	r2, [r2, #6]
 8004754:	731a      	strb	r2, [r3, #12]
				messageParams[13] =*(__IO uint8_t* )(localAddress + 7); // You cannot bitwise floats
 8004756:	4662      	mov	r2, ip
 8004758:	79d2      	ldrb	r2, [r2, #7]
 800475a:	735a      	strb	r2, [r3, #13]
				SendMessageToModule(module,code,14);
 800475c:	220e      	movs	r2, #14
 800475e:	f003 fd5b 	bl	8008218 <SendMessageToModule>
				break;
 8004762:	e772      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[2] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 8004764:	4663      	mov	r3, ip
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	0033      	movs	r3, r6
 800476a:	334c      	adds	r3, #76	; 0x4c
 800476c:	709a      	strb	r2, [r3, #2]
				messageParams[3] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 800476e:	4662      	mov	r2, ip
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	0a12      	lsrs	r2, r2, #8
 8004774:	70da      	strb	r2, [r3, #3]
				messageParams[4] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 8004776:	4662      	mov	r2, ip
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	0c12      	lsrs	r2, r2, #16
 800477c:	711a      	strb	r2, [r3, #4]
				messageParams[5] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 800477e:	4662      	mov	r2, ip
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	0e12      	lsrs	r2, r2, #24
 8004784:	e75b      	b.n	800463e <WriteToRemote+0x6e>
				messageParams[2] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 8004786:	4663      	mov	r3, ip
 8004788:	0032      	movs	r2, r6
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	324c      	adds	r2, #76	; 0x4c
 800478e:	7093      	strb	r3, [r2, #2]
				messageParams[3] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004790:	4663      	mov	r3, ip
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b21b      	sxth	r3, r3
 8004796:	121b      	asrs	r3, r3, #8
 8004798:	e79e      	b.n	80046d8 <WriteToRemote+0x108>
				messageParams[6] =(uint8_t )((*(__IO int32_t* )localAddress) >> 0);
 800479a:	4663      	mov	r3, ip
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	0033      	movs	r3, r6
 80047a0:	334c      	adds	r3, #76	; 0x4c
 80047a2:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80047a4:	4662      	mov	r2, ip
 80047a6:	6812      	ldr	r2, [r2, #0]
				SendMessageToModule(module,code,10);
 80047a8:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO int32_t* )localAddress) >> 8);
 80047aa:	1212      	asrs	r2, r2, #8
 80047ac:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO int32_t* )localAddress) >> 16);
 80047ae:	4662      	mov	r2, ip
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	1412      	asrs	r2, r2, #16
 80047b4:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO int32_t* )localAddress) >> 24);
 80047b6:	4662      	mov	r2, ip
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	1612      	asrs	r2, r2, #24
 80047bc:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 80047be:	220a      	movs	r2, #10
 80047c0:	f003 fd2a 	bl	8008218 <SendMessageToModule>
				break;
 80047c4:	e741      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 0);
 80047c6:	4663      	mov	r3, ip
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	0033      	movs	r3, r6
 80047cc:	334c      	adds	r3, #76	; 0x4c
 80047ce:	719a      	strb	r2, [r3, #6]
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80047d0:	4662      	mov	r2, ip
 80047d2:	6812      	ldr	r2, [r2, #0]
				SendMessageToModule(module,code,10);
 80047d4:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 8);
 80047d6:	0a12      	lsrs	r2, r2, #8
 80047d8:	71da      	strb	r2, [r3, #7]
				messageParams[8] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 16);
 80047da:	4662      	mov	r2, ip
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	0c12      	lsrs	r2, r2, #16
 80047e0:	721a      	strb	r2, [r3, #8]
				messageParams[9] =(uint8_t )((*(__IO uint32_t* )localAddress) >> 24);
 80047e2:	4662      	mov	r2, ip
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	0e12      	lsrs	r2, r2, #24
 80047e8:	725a      	strb	r2, [r3, #9]
				SendMessageToModule(module,code,10);
 80047ea:	220a      	movs	r2, #10
 80047ec:	f003 fd14 	bl	8008218 <SendMessageToModule>
				break;
 80047f0:	e72b      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO int16_t* )localAddress) >> 0);
 80047f2:	4663      	mov	r3, ip
 80047f4:	0032      	movs	r2, r6
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	324c      	adds	r2, #76	; 0x4c
 80047fa:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 80047fc:	4663      	mov	r3, ip
 80047fe:	881b      	ldrh	r3, [r3, #0]
				SendMessageToModule(module,code,8);
 8004800:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO int16_t* )localAddress) >> 8);
 8004802:	b21b      	sxth	r3, r3
 8004804:	121b      	asrs	r3, r3, #8
 8004806:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 8004808:	2208      	movs	r2, #8
 800480a:	f003 fd05 	bl	8008218 <SendMessageToModule>
				break;
 800480e:	e71c      	b.n	800464a <WriteToRemote+0x7a>
				messageParams[6] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 0);
 8004810:	4663      	mov	r3, ip
 8004812:	0032      	movs	r2, r6
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	324c      	adds	r2, #76	; 0x4c
 8004818:	7193      	strb	r3, [r2, #6]
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 800481a:	4663      	mov	r3, ip
 800481c:	881b      	ldrh	r3, [r3, #0]
				SendMessageToModule(module,code,8);
 800481e:	4648      	mov	r0, r9
				messageParams[7] =(uint8_t )((*(__IO uint16_t* )localAddress) >> 8);
 8004820:	0a1b      	lsrs	r3, r3, #8
 8004822:	71d3      	strb	r3, [r2, #7]
				SendMessageToModule(module,code,8);
 8004824:	2208      	movs	r2, #8
 8004826:	f003 fcf7 	bl	8008218 <SendMessageToModule>
				break;
 800482a:	e70e      	b.n	800464a <WriteToRemote+0x7a>
 800482c:	20000b28 	.word	0x20000b28
 8004830:	080192c4 	.word	0x080192c4
 8004834:	080192e8 	.word	0x080192e8
 8004838:	20000c28 	.word	0x20000c28

0800483c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800483c:	b570      	push	{r4, r5, r6, lr}
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 800483e:	2101      	movs	r1, #1
char* GetDateString(void){
 8004840:	b082      	sub	sp, #8
	char *buffer =malloc(30 * sizeof(int8_t));
 8004842:	201e      	movs	r0, #30
 8004844:	f00e f9ea 	bl	8012c1c <calloc>
	memset(buffer,0x00,30 * sizeof(int8_t));
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004848:	4d0b      	ldr	r5, [pc, #44]	; (8004878 <GetDateString+0x3c>)
	char *buffer =malloc(30 * sizeof(int8_t));
 800484a:	0004      	movs	r4, r0
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 800484c:	0028      	movs	r0, r5
 800484e:	2644      	movs	r6, #68	; 0x44
 8004850:	302c      	adds	r0, #44	; 0x2c
 8004852:	7d02      	ldrb	r2, [r0, #20]
 8004854:	5bad      	ldrh	r5, [r5, r6]
 8004856:	7d83      	ldrb	r3, [r0, #22]
 8004858:	4908      	ldr	r1, [pc, #32]	; (800487c <GetDateString+0x40>)
 800485a:	9501      	str	r5, [sp, #4]
 800485c:	3a01      	subs	r2, #1
 800485e:	7d40      	ldrb	r0, [r0, #21]
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	188a      	adds	r2, r1, r2
 8004864:	9000      	str	r0, [sp, #0]
 8004866:	6912      	ldr	r2, [r2, #16]
 8004868:	0020      	movs	r0, r4
 800486a:	312c      	adds	r1, #44	; 0x2c
 800486c:	f00e fe88 	bl	8013580 <sprintf>
	return buffer;
}
 8004870:	0020      	movs	r0, r4
 8004872:	b002      	add	sp, #8
 8004874:	bd70      	pop	{r4, r5, r6, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	20000b28 	.word	0x20000b28
 800487c:	0801930c 	.word	0x0801930c

08004880 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004880:	b500      	push	{lr}
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <Bridge+0x24>)
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004884:	000a      	movs	r2, r1
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004886:	7819      	ldrb	r1, [r3, #0]
 8004888:	2301      	movs	r3, #1
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 800488a:	b085      	sub	sp, #20
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	3b02      	subs	r3, #2
 8004890:	9302      	str	r3, [sp, #8]
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	3303      	adds	r3, #3
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	000b      	movs	r3, r1
 800489a:	f003 fcf3 	bl	8008284 <StartScastDMAStream>
}
 800489e:	b005      	add	sp, #20
 80048a0:	bd00      	pop	{pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000aa8 	.word	0x20000aa8

080048a8 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	0005      	movs	r5, r0
 80048ac:	000c      	movs	r4, r1
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80048ae:	20e4      	movs	r0, #228	; 0xe4
 80048b0:	2100      	movs	r1, #0
 80048b2:	f006 fe7f 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80048b6:	2100      	movs	r1, #0
 80048b8:	20e5      	movs	r0, #229	; 0xe5
 80048ba:	f006 fe7b 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80048be:	2100      	movs	r1, #0
 80048c0:	20e6      	movs	r0, #230	; 0xe6
 80048c2:	f006 fe77 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80048c6:	2100      	movs	r1, #0
 80048c8:	20e7      	movs	r0, #231	; 0xe7
 80048ca:	f006 fe73 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80048ce:	2100      	movs	r1, #0
 80048d0:	20e8      	movs	r0, #232	; 0xe8
 80048d2:	f006 fe6f 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80048d6:	2100      	movs	r1, #0
 80048d8:	20e9      	movs	r0, #233	; 0xe9
 80048da:	f006 fe6b 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80048de:	2100      	movs	r1, #0
 80048e0:	20ea      	movs	r0, #234	; 0xea
 80048e2:	f006 fe67 	bl	800b5b4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80048e6:	2100      	movs	r1, #0
 80048e8:	20eb      	movs	r0, #235	; 0xeb
 80048ea:	f006 fe63 	bl	800b5b4 <EE_WriteVariable>
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80048ee:	1e69      	subs	r1, r5, #1
 80048f0:	00cb      	lsls	r3, r1, #3
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	4a10      	ldr	r2, [pc, #64]	; (8004938 <Unbridge+0x90>)
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	589b      	ldr	r3, [r3, r2]
 80048fa:	1e61      	subs	r1, r4, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d011      	beq.n	8004924 <Unbridge+0x7c>
 8004900:	00cb      	lsls	r3, r1, #3
 8004902:	1a5b      	subs	r3, r3, r1
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	589b      	ldr	r3, [r3, r2]
		SwitchStreamDMAToMsg(port1);
 8004908:	0028      	movs	r0, r5
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <Unbridge+0x6e>
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port2);
 800490e:	f006 fc65 	bl	800b1dc <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004912:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004914:	bd70      	pop	{r4, r5, r6, pc}
		SwitchStreamDMAToMsg(port1);
 8004916:	f006 fc61 	bl	800b1dc <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800491a:	0020      	movs	r0, r4
 800491c:	f006 fc5e 	bl	800b1dc <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004920:	2000      	movs	r0, #0
 8004922:	e7f7      	b.n	8004914 <Unbridge+0x6c>
	else if(streamDMA[port2 - 1].Instance != 0){
 8004924:	00cb      	lsls	r3, r1, #3
 8004926:	1a5b      	subs	r3, r3, r1
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	589b      	ldr	r3, [r3, r2]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <Unbridge+0x8c>
		SwitchStreamDMAToMsg(port2);
 8004930:	0020      	movs	r0, r4
 8004932:	e7ec      	b.n	800490e <Unbridge+0x66>
		return BOS_ERR_WrongValue;
 8004934:	2068      	movs	r0, #104	; 0x68
 8004936:	e7ed      	b.n	8004914 <Unbridge+0x6c>
 8004938:	200024f0 	.word	0x200024f0

0800493c <AddSnippet.part.0>:

/*-----------------------------------------------------------*/

/* Add a set of Commands to Command Snippets and activate
 */
BOS_Status AddSnippet(uint8_t code,char *string){
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493e:	46c6      	mov	lr, r8
 8004940:	b500      	push	{lr}
		case SNIPPET_CONDITION:
			return ParseSnippetCondition(string);
			
		case SNIPPET_COMMANDS:
			// Did we allocate a buffer already?
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004942:	4d26      	ldr	r5, [pc, #152]	; (80049dc <AddSnippet.part.0+0xa0>)
BOS_Status AddSnippet(uint8_t code,char *string){
 8004944:	0007      	movs	r7, r0
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004946:	782b      	ldrb	r3, [r5, #0]
 8004948:	3b01      	subs	r3, #1
 800494a:	009c      	lsls	r4, r3, #2
 800494c:	18e4      	adds	r4, r4, r3
 800494e:	00a4      	lsls	r4, r4, #2
 8004950:	192c      	adds	r4, r5, r4
 8004952:	6923      	ldr	r3, [r4, #16]
 8004954:	4698      	mov	r8, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d02e      	beq.n	80049b8 <AddSnippet.part.0+0x7c>
				// re-allocate with new size
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 800495a:	0018      	movs	r0, r3
 800495c:	f7fb fbdc 	bl	8000118 <strlen>
 8004960:	0006      	movs	r6, r0
				// Add two more bytes for the ENTER key (0x13) and end of string (0x00)
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004962:	0038      	movs	r0, r7
 8004964:	f7fb fbd8 	bl	8000118 <strlen>
 8004968:	1831      	adds	r1, r6, r0
 800496a:	3102      	adds	r1, #2
 800496c:	4640      	mov	r0, r8
 800496e:	f00e fc49 	bl	8013204 <realloc>
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004972:	782a      	ldrb	r2, [r5, #0]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004974:	6120      	str	r0, [r4, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004976:	3a01      	subs	r2, #1
 8004978:	0093      	lsls	r3, r2, #2
 800497a:	189b      	adds	r3, r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	18eb      	adds	r3, r5, r3
 8004980:	6918      	ldr	r0, [r3, #16]
 8004982:	1c72      	adds	r2, r6, #1
 8004984:	1880      	adds	r0, r0, r2
 8004986:	0039      	movs	r1, r7
 8004988:	f00e fe35 	bl	80135f6 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 800498c:	782a      	ldrb	r2, [r5, #0]
 800498e:	3a01      	subs	r2, #1
 8004990:	0093      	lsls	r3, r2, #2
 8004992:	189b      	adds	r3, r3, r2
 8004994:	2213      	movs	r2, #19
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	18eb      	adds	r3, r5, r3
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	559a      	strb	r2, [r3, r6]
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
				// Copy the command
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
			}
			// Return error if allocation fails
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 800499e:	782b      	ldrb	r3, [r5, #0]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	0098      	lsls	r0, r3, #2
 80049a4:	18c3      	adds	r3, r0, r3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	18ea      	adds	r2, r5, r3
 80049aa:	6912      	ldr	r2, [r2, #16]
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d00d      	beq.n	80049cc <AddSnippet.part.0+0x90>
			
		default:
			break;
	}
	
	return BOS_OK;
 80049b0:	2000      	movs	r0, #0
}
 80049b2:	bc80      	pop	{r7}
 80049b4:	46b8      	mov	r8, r7
 80049b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 80049b8:	f7fb fbae 	bl	8000118 <strlen>
 80049bc:	3001      	adds	r0, #1
 80049be:	f00e f9b1 	bl	8012d24 <malloc>
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 80049c2:	0039      	movs	r1, r7
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 80049c4:	6120      	str	r0, [r4, #16]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 80049c6:	f00e fe16 	bl	80135f6 <strcpy>
 80049ca:	e7f1      	b.n	80049b0 <AddSnippet.part.0+0x74>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 80049cc:	1d28      	adds	r0, r5, #4
 80049ce:	2214      	movs	r2, #20
 80049d0:	2100      	movs	r1, #0
 80049d2:	18c0      	adds	r0, r0, r3
 80049d4:	f00e fbe3 	bl	801319e <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 80049d8:	200e      	movs	r0, #14
 80049da:	e7ea      	b.n	80049b2 <AddSnippet.part.0+0x76>
 80049dc:	200017ac 	.word	0x200017ac

080049e0 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	464e      	mov	r6, r9
 80049e4:	4645      	mov	r5, r8
 80049e6:	46de      	mov	lr, fp
 80049e8:	4657      	mov	r7, sl
 80049ea:	b5e0      	push	{r5, r6, r7, lr}
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80049ec:	4cd0      	ldr	r4, [pc, #832]	; (8004d30 <ParseSnippetCondition+0x350>)
BOS_Status ParseSnippetCondition(char *string){
 80049ee:	0005      	movs	r5, r0
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80049f0:	7826      	ldrb	r6, [r4, #0]
BOS_Status ParseSnippetCondition(char *string){
 80049f2:	b089      	sub	sp, #36	; 0x24
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80049f4:	2e05      	cmp	r6, #5
 80049f6:	d065      	beq.n	8004ac4 <ParseSnippetCondition+0xe4>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80049f8:	00b3      	lsls	r3, r6, #2
 80049fa:	1998      	adds	r0, r3, r6
 80049fc:	0080      	lsls	r0, r0, #2
 80049fe:	4699      	mov	r9, r3
 8004a00:	1823      	adds	r3, r4, r0
 8004a02:	4698      	mov	r8, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	4642      	mov	r2, r8
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004a08:	4640      	mov	r0, r8
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004a0a:	8093      	strh	r3, [r2, #4]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2204      	movs	r2, #4
 8004a10:	3006      	adds	r0, #6
 8004a12:	f00e fbc4 	bl	801319e <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004a16:	782b      	ldrb	r3, [r5, #0]
 8004a18:	2b62      	cmp	r3, #98	; 0x62
 8004a1a:	d102      	bne.n	8004a22 <ParseSnippetCondition+0x42>
 8004a1c:	78ab      	ldrb	r3, [r5, #2]
 8004a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a20:	d052      	beq.n	8004ac8 <ParseSnippetCondition+0xe8>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004a22:	0027      	movs	r7, r4
 8004a24:	3768      	adds	r7, #104	; 0x68
 8004a26:	0029      	movs	r1, r5
 8004a28:	0038      	movs	r0, r7
 8004a2a:	f00e fde4 	bl	80135f6 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004a2e:	4ec1      	ldr	r6, [pc, #772]	; (8004d34 <ParseSnippetCondition+0x354>)
 8004a30:	0038      	movs	r0, r7
 8004a32:	0031      	movs	r1, r6
 8004a34:	f00f fc48 	bl	80142c8 <strtok>
		secondPart =strtok( NULL," ");
 8004a38:	0031      	movs	r1, r6
		firstPart =strtok((char* )cInputString," ");
 8004a3a:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f00f fc43 	bl	80142c8 <strtok>
		thirdPart =strtok( NULL," ");
 8004a42:	0031      	movs	r1, r6
		secondPart =strtok( NULL," ");
 8004a44:	0007      	movs	r7, r0
		thirdPart =strtok( NULL," ");
 8004a46:	2000      	movs	r0, #0
 8004a48:	f00f fc3e 	bl	80142c8 <strtok>
 8004a4c:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	d036      	beq.n	8004ac0 <ParseSnippetCondition+0xe0>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004a52:	0028      	movs	r0, r5
 8004a54:	f7fe feec 	bl	8003830 <IsModuleParameter>
 8004a58:	4680      	mov	r8, r0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d12c      	bne.n	8004ab8 <ParseSnippetCondition+0xd8>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d02e      	beq.n	8004ac0 <ParseSnippetCondition+0xe0>
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d02c      	beq.n	8004ac0 <ParseSnippetCondition+0xe0>
				modPar2 =IsModuleParameter(thirdPart);
 8004a66:	0030      	movs	r0, r6
 8004a68:	f7fe fee2 	bl	8003830 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d059      	beq.n	8004b24 <ParseSnippetCondition+0x144>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004a70:	2204      	movs	r2, #4
 8004a72:	7826      	ldrb	r6, [r4, #0]
 8004a74:	00b5      	lsls	r5, r6, #2
 8004a76:	19ab      	adds	r3, r5, r6
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	18e3      	adds	r3, r4, r3
 8004a7c:	711a      	strb	r2, [r3, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a7e:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004a80:	72d8      	strb	r0, [r3, #11]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a82:	71da      	strb	r2, [r3, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a84:	0038      	movs	r0, r7
 8004a86:	f7fe fedf 	bl	8003848 <IsMathOperator>
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a8a:	7822      	ldrb	r2, [r4, #0]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a8c:	19ad      	adds	r5, r5, r6
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a8e:	0093      	lsls	r3, r2, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a90:	00ad      	lsls	r5, r5, #2
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a92:	189b      	adds	r3, r3, r2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a94:	1965      	adds	r5, r4, r5
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a96:	009b      	lsls	r3, r3, #2
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004a98:	7168      	strb	r0, [r5, #5]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a9a:	18e3      	adds	r3, r4, r3
 8004a9c:	795b      	ldrb	r3, [r3, #5]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00e      	beq.n	8004ac0 <ParseSnippetCondition+0xe0>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
 8004aa2:	2700      	movs	r7, #0
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004aa4:	3201      	adds	r2, #1
 8004aa6:	7022      	strb	r2, [r4, #0]
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004aa8:	0038      	movs	r0, r7
 8004aaa:	b009      	add	sp, #36	; 0x24
 8004aac:	bcf0      	pop	{r4, r5, r6, r7}
 8004aae:	46bb      	mov	fp, r7
 8004ab0:	46b2      	mov	sl, r6
 8004ab2:	46a9      	mov	r9, r5
 8004ab4:	46a0      	mov	r8, r4
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	d1d2      	bne.n	8004a62 <ParseSnippetCondition+0x82>
 8004abc:	2e00      	cmp	r6, #0
 8004abe:	d068      	beq.n	8004b92 <ParseSnippetCondition+0x1b2>
			return BOS_ERR_WrongParam;
 8004ac0:	2767      	movs	r7, #103	; 0x67
 8004ac2:	e7f1      	b.n	8004aa8 <ParseSnippetCondition+0xc8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004ac4:	270e      	movs	r7, #14
 8004ac6:	e7ef      	b.n	8004aa8 <ParseSnippetCondition+0xc8>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004ac8:	786b      	ldrb	r3, [r5, #1]
	BOS_Status status =BOS_OK;
 8004aca:	2700      	movs	r7, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004acc:	3b30      	subs	r3, #48	; 0x30
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	469a      	mov	sl, r3
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d8e8      	bhi.n	8004aa8 <ParseSnippetCondition+0xc8>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004ad6:	4641      	mov	r1, r8
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004ad8:	4650      	mov	r0, sl
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004ada:	2301      	movs	r3, #1
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004adc:	7188      	strb	r0, [r1, #6]
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004ade:	808b      	strh	r3, [r1, #4]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004ae0:	1ce9      	adds	r1, r5, #3
 8004ae2:	468b      	mov	fp, r1
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	4658      	mov	r0, fp
 8004ae8:	4993      	ldr	r1, [pc, #588]	; (8004d38 <ParseSnippetCondition+0x358>)
 8004aea:	f00e fd8c 	bl	8013606 <strncmp>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	d032      	beq.n	8004b58 <ParseSnippetCondition+0x178>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004af2:	220e      	movs	r2, #14
 8004af4:	4658      	mov	r0, fp
 8004af6:	4991      	ldr	r1, [pc, #580]	; (8004d3c <ParseSnippetCondition+0x35c>)
 8004af8:	f00e fd85 	bl	8013606 <strncmp>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d162      	bne.n	8004bc6 <ParseSnippetCondition+0x1e6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004b00:	2306      	movs	r3, #6
 8004b02:	4642      	mov	r2, r8
 8004b04:	71d3      	strb	r3, [r2, #7]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004b06:	4653      	mov	r3, sl
 8004b08:	00da      	lsls	r2, r3, #3
 8004b0a:	4b8d      	ldr	r3, [pc, #564]	; (8004d40 <ParseSnippetCondition+0x360>)
 8004b0c:	4452      	add	r2, sl
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	2202      	movs	r2, #2
 8004b12:	0017      	movs	r7, r2
 8004b14:	7a1b      	ldrb	r3, [r3, #8]
 8004b16:	401f      	ands	r7, r3
 8004b18:	421a      	tst	r2, r3
 8004b1a:	d045      	beq.n	8004ba8 <ParseSnippetCondition+0x1c8>
				status =BOS_OK;
 8004b1c:	2700      	movs	r7, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004b1e:	3601      	adds	r6, #1
 8004b20:	7026      	strb	r6, [r4, #0]
 8004b22:	e7c1      	b.n	8004aa8 <ParseSnippetCondition+0xc8>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b24:	7822      	ldrb	r2, [r4, #0]
					float constant =atof(thirdPart);
 8004b26:	0030      	movs	r0, r6
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004b28:	0093      	lsls	r3, r2, #2
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	18e3      	adds	r3, r4, r3
 8004b32:	711a      	strb	r2, [r3, #4]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004b34:	4642      	mov	r2, r8
 8004b36:	71da      	strb	r2, [r3, #7]
					float constant =atof(thirdPart);
 8004b38:	f00e f85e 	bl	8012bf8 <atof>
 8004b3c:	f7fe f8ac 	bl	8002c98 <__aeabi_d2f>
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004b40:	7826      	ldrb	r6, [r4, #0]
					float constant =atof(thirdPart);
 8004b42:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004b44:	00b5      	lsls	r5, r6, #2
 8004b46:	19a8      	adds	r0, r5, r6
 8004b48:	0080      	lsls	r0, r0, #2
 8004b4a:	1820      	adds	r0, r4, r0
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	a907      	add	r1, sp, #28
 8004b50:	300a      	adds	r0, #10
 8004b52:	f00e fb1b 	bl	801318c <memcpy>
 8004b56:	e795      	b.n	8004a84 <ParseSnippetCondition+0xa4>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004b58:	2305      	movs	r3, #5
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	71cb      	strb	r3, [r1, #7]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004b5e:	4651      	mov	r1, sl
 8004b60:	4b77      	ldr	r3, [pc, #476]	; (8004d40 <ParseSnippetCondition+0x360>)
 8004b62:	00ca      	lsls	r2, r1, #3
 8004b64:	4452      	add	r2, sl
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	2201      	movs	r2, #1
 8004b6a:	7a1b      	ldrb	r3, [r3, #8]
 8004b6c:	3701      	adds	r7, #1
 8004b6e:	401f      	ands	r7, r3
 8004b70:	421a      	tst	r2, r3
 8004b72:	d1d3      	bne.n	8004b1c <ParseSnippetCondition+0x13c>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004b74:	2301      	movs	r3, #1
 8004b76:	2200      	movs	r2, #0
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4650      	mov	r0, sl
 8004b80:	9704      	str	r7, [sp, #16]
 8004b82:	9703      	str	r7, [sp, #12]
 8004b84:	9702      	str	r7, [sp, #8]
 8004b86:	9701      	str	r7, [sp, #4]
 8004b88:	9700      	str	r7, [sp, #0]
 8004b8a:	f007 f9f3 	bl	800bf74 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004b8e:	7826      	ldrb	r6, [r4, #0]
 8004b90:	e7c5      	b.n	8004b1e <ParseSnippetCondition+0x13e>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004b92:	2102      	movs	r1, #2
 8004b94:	7822      	ldrb	r2, [r4, #0]
 8004b96:	0093      	lsls	r3, r2, #2
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	18e3      	adds	r3, r4, r3
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004b9e:	3201      	adds	r2, #1
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004ba0:	7119      	strb	r1, [r3, #4]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004ba2:	71d8      	strb	r0, [r3, #7]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004ba4:	7022      	strb	r2, [r4, #0]
				return BOS_OK;
 8004ba6:	e77f      	b.n	8004aa8 <ParseSnippetCondition+0xc8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004ba8:	2301      	movs	r3, #1
 8004baa:	2100      	movs	r1, #0
 8004bac:	9305      	str	r3, [sp, #20]
 8004bae:	4650      	mov	r0, sl
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9704      	str	r7, [sp, #16]
 8004bb4:	9703      	str	r7, [sp, #12]
 8004bb6:	9702      	str	r7, [sp, #8]
 8004bb8:	9701      	str	r7, [sp, #4]
 8004bba:	9700      	str	r7, [sp, #0]
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	f007 f9d9 	bl	800bf74 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004bc2:	7826      	ldrb	r6, [r4, #0]
 8004bc4:	e7ab      	b.n	8004b1e <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	4658      	mov	r0, fp
 8004bca:	495e      	ldr	r1, [pc, #376]	; (8004d44 <ParseSnippetCondition+0x364>)
 8004bcc:	f00e fd1b 	bl	8013606 <strncmp>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d10f      	bne.n	8004bf4 <ParseSnippetCondition+0x214>
				if(!button[port].pressedX1Sec){
 8004bd4:	4653      	mov	r3, sl
 8004bd6:	00da      	lsls	r2, r3, #3
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <ParseSnippetCondition+0x360>)
 8004bda:	4452      	add	r2, sl
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	789f      	ldrb	r7, [r3, #2]
 8004be0:	2f00      	cmp	r7, #0
 8004be2:	d021      	beq.n	8004c28 <ParseSnippetCondition+0x248>
				else if(!button[port].pressedX2Sec){
 8004be4:	78df      	ldrb	r7, [r3, #3]
 8004be6:	2f00      	cmp	r7, #0
 8004be8:	d03a      	beq.n	8004c60 <ParseSnippetCondition+0x280>
				else if(!button[port].pressedX3Sec){
 8004bea:	791f      	ldrb	r7, [r3, #4]
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	d065      	beq.n	8004cbc <ParseSnippetCondition+0x2dc>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004bf0:	270c      	movs	r7, #12
 8004bf2:	e794      	b.n	8004b1e <ParseSnippetCondition+0x13e>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004bf4:	220d      	movs	r2, #13
 8004bf6:	4658      	mov	r0, fp
 8004bf8:	4953      	ldr	r1, [pc, #332]	; (8004d48 <ParseSnippetCondition+0x368>)
 8004bfa:	f00e fd04 	bl	8013606 <strncmp>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d18d      	bne.n	8004b1e <ParseSnippetCondition+0x13e>
				if(!button[port].releasedY1Sec){
 8004c02:	4653      	mov	r3, sl
 8004c04:	4a4e      	ldr	r2, [pc, #312]	; (8004d40 <ParseSnippetCondition+0x360>)
 8004c06:	00d9      	lsls	r1, r3, #3
 8004c08:	18cb      	adds	r3, r1, r3
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	795f      	ldrb	r7, [r3, #5]
 8004c0e:	2f00      	cmp	r7, #0
 8004c10:	d03d      	beq.n	8004c8e <ParseSnippetCondition+0x2ae>
				else if(!button[port].releasedY2Sec){
 8004c12:	799f      	ldrb	r7, [r3, #6]
 8004c14:	2f00      	cmp	r7, #0
 8004c16:	d06b      	beq.n	8004cf0 <ParseSnippetCondition+0x310>
				else if(!button[port].releasedY3Sec){
 8004c18:	4451      	add	r1, sl
 8004c1a:	1852      	adds	r2, r2, r1
 8004c1c:	79d7      	ldrb	r7, [r2, #7]
 8004c1e:	2f00      	cmp	r7, #0
 8004c20:	d100      	bne.n	8004c24 <ParseSnippetCondition+0x244>
 8004c22:	e093      	b.n	8004d4c <ParseSnippetCondition+0x36c>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004c24:	270d      	movs	r7, #13
 8004c26:	e77a      	b.n	8004b1e <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004c28:	2309      	movs	r3, #9
 8004c2a:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c2c:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 8004c2e:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c30:	300f      	adds	r0, #15
 8004c32:	f00d ffe6 	bl	8012c02 <atoi>
 8004c36:	7821      	ldrb	r1, [r4, #0]
 8004c38:	b2c3      	uxtb	r3, r0
 8004c3a:	008a      	lsls	r2, r1, #2
 8004c3c:	1852      	adds	r2, r2, r1
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	18a2      	adds	r2, r4, r2
 8004c42:	7213      	strb	r3, [r2, #8]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c44:	2201      	movs	r2, #1
 8004c46:	9704      	str	r7, [sp, #16]
 8004c48:	9205      	str	r2, [sp, #20]
 8004c4a:	9703      	str	r7, [sp, #12]
 8004c4c:	9702      	str	r7, [sp, #8]
 8004c4e:	9701      	str	r7, [sp, #4]
 8004c50:	9700      	str	r7, [sp, #0]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	4650      	mov	r0, sl
 8004c58:	f007 f98c 	bl	800bf74 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004c5c:	7826      	ldrb	r6, [r4, #0]
 8004c5e:	e75e      	b.n	8004b1e <ParseSnippetCondition+0x13e>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004c60:	230a      	movs	r3, #10
 8004c62:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c64:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004c66:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004c68:	300f      	adds	r0, #15
 8004c6a:	f00d ffca 	bl	8012c02 <atoi>
 8004c6e:	7822      	ldrb	r2, [r4, #0]
 8004c70:	b2c0      	uxtb	r0, r0
 8004c72:	0093      	lsls	r3, r2, #2
 8004c74:	189b      	adds	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	18e3      	adds	r3, r4, r3
 8004c7a:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	9704      	str	r7, [sp, #16]
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	9703      	str	r7, [sp, #12]
 8004c84:	2300      	movs	r3, #0
 8004c86:	9702      	str	r7, [sp, #8]
 8004c88:	9701      	str	r7, [sp, #4]
 8004c8a:	9000      	str	r0, [sp, #0]
 8004c8c:	e7e1      	b.n	8004c52 <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c8e:	230c      	movs	r3, #12
 8004c90:	4642      	mov	r2, r8
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c92:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004c94:	71d3      	strb	r3, [r2, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004c96:	3010      	adds	r0, #16
 8004c98:	f00d ffb3 	bl	8012c02 <atoi>
 8004c9c:	7822      	ldrb	r2, [r4, #0]
 8004c9e:	b2c0      	uxtb	r0, r0
 8004ca0:	0093      	lsls	r3, r2, #2
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	18e3      	adds	r3, r4, r3
 8004ca8:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004caa:	2301      	movs	r3, #1
 8004cac:	9704      	str	r7, [sp, #16]
 8004cae:	9305      	str	r3, [sp, #20]
 8004cb0:	9703      	str	r7, [sp, #12]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9002      	str	r0, [sp, #8]
 8004cb6:	9701      	str	r7, [sp, #4]
 8004cb8:	9700      	str	r7, [sp, #0]
 8004cba:	e7ca      	b.n	8004c52 <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cbc:	0033      	movs	r3, r6
 8004cbe:	220b      	movs	r2, #11
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cc0:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004cc2:	444b      	add	r3, r9
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	18e3      	adds	r3, r4, r3
 8004cc8:	71da      	strb	r2, [r3, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004cca:	300f      	adds	r0, #15
 8004ccc:	f00d ff99 	bl	8012c02 <atoi>
 8004cd0:	7822      	ldrb	r2, [r4, #0]
 8004cd2:	b2c0      	uxtb	r0, r0
 8004cd4:	0093      	lsls	r3, r2, #2
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	18e3      	adds	r3, r4, r3
 8004cdc:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004cde:	2301      	movs	r3, #1
 8004ce0:	9305      	str	r3, [sp, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9001      	str	r0, [sp, #4]
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	e7b0      	b.n	8004c52 <ParseSnippetCondition+0x272>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004cf0:	2314      	movs	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004cf2:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004cf4:	4698      	mov	r8, r3
 8004cf6:	435e      	muls	r6, r3
 8004cf8:	3b07      	subs	r3, #7
 8004cfa:	19a6      	adds	r6, r4, r6
 8004cfc:	71f3      	strb	r3, [r6, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004cfe:	3010      	adds	r0, #16
 8004d00:	f00d ff7f 	bl	8012c02 <atoi>
 8004d04:	4642      	mov	r2, r8
 8004d06:	7823      	ldrb	r3, [r4, #0]
 8004d08:	b2c0      	uxtb	r0, r0
 8004d0a:	4353      	muls	r3, r2
 8004d0c:	18e3      	adds	r3, r4, r3
 8004d0e:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004d10:	2100      	movs	r1, #0
 8004d12:	2301      	movs	r3, #1
 8004d14:	9003      	str	r0, [sp, #12]
 8004d16:	9305      	str	r3, [sp, #20]
 8004d18:	000a      	movs	r2, r1
 8004d1a:	000b      	movs	r3, r1
 8004d1c:	4650      	mov	r0, sl
 8004d1e:	9104      	str	r1, [sp, #16]
 8004d20:	9102      	str	r1, [sp, #8]
 8004d22:	9101      	str	r1, [sp, #4]
 8004d24:	9100      	str	r1, [sp, #0]
 8004d26:	f007 f925 	bl	800bf74 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d2a:	7826      	ldrb	r6, [r4, #0]
 8004d2c:	e6f7      	b.n	8004b1e <ParseSnippetCondition+0x13e>
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	200017ac 	.word	0x200017ac
 8004d34:	08019b48 	.word	0x08019b48
 8004d38:	0801a934 	.word	0x0801a934
 8004d3c:	0801a10c 	.word	0x0801a10c
 8004d40:	2000283c 	.word	0x2000283c
 8004d44:	0801a11c 	.word	0x0801a11c
 8004d48:	0801a12c 	.word	0x0801a12c
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d4c:	2314      	movs	r3, #20
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d4e:	0028      	movs	r0, r5
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004d50:	4698      	mov	r8, r3
 8004d52:	435e      	muls	r6, r3
 8004d54:	3b06      	subs	r3, #6
 8004d56:	19a6      	adds	r6, r4, r6
 8004d58:	71f3      	strb	r3, [r6, #7]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004d5a:	3010      	adds	r0, #16
 8004d5c:	f00d ff51 	bl	8012c02 <atoi>
 8004d60:	4642      	mov	r2, r8
 8004d62:	7823      	ldrb	r3, [r4, #0]
 8004d64:	b2c0      	uxtb	r0, r0
 8004d66:	4353      	muls	r3, r2
 8004d68:	18e3      	adds	r3, r4, r3
 8004d6a:	7218      	strb	r0, [r3, #8]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	9305      	str	r3, [sp, #20]
 8004d70:	2300      	movs	r3, #0
 8004d72:	9004      	str	r0, [sp, #16]
 8004d74:	001a      	movs	r2, r3
 8004d76:	0019      	movs	r1, r3
 8004d78:	4650      	mov	r0, sl
 8004d7a:	9703      	str	r7, [sp, #12]
 8004d7c:	9702      	str	r7, [sp, #8]
 8004d7e:	9701      	str	r7, [sp, #4]
 8004d80:	9700      	str	r7, [sp, #0]
 8004d82:	f007 f8f7 	bl	800bf74 <SetButtonEvents>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004d86:	7826      	ldrb	r6, [r4, #0]
 8004d88:	e6c9      	b.n	8004b1e <ParseSnippetCondition+0x13e>
 8004d8a:	46c0      	nop			; (mov r8, r8)

08004d8c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d8e:	46de      	mov	lr, fp
 8004d90:	464e      	mov	r6, r9
 8004d92:	4657      	mov	r7, sl
 8004d94:	4645      	mov	r5, r8
 8004d96:	b5e0      	push	{r5, r6, r7, lr}
 8004d98:	001e      	movs	r6, r3
	char idString[MaxLengthOfAlias] ={0};
 8004d9a:	2300      	movs	r3, #0
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004d9c:	b08b      	sub	sp, #44	; 0x2c
 8004d9e:	4682      	mov	sl, r0
 8004da0:	468b      	mov	fp, r1
 8004da2:	0015      	movs	r5, r2
	char idString[MaxLengthOfAlias] ={0};
 8004da4:	2100      	movs	r1, #0
 8004da6:	2205      	movs	r2, #5
 8004da8:	a808      	add	r0, sp, #32
 8004daa:	9307      	str	r3, [sp, #28]
 8004dac:	f00e f9f7 	bl	801319e <memset>
 8004db0:	4bd3      	ldr	r3, [pc, #844]	; (8005100 <CLI_CommandParser+0x374>)
 8004db2:	4cd4      	ldr	r4, [pc, #848]	; (8005104 <CLI_CommandParser+0x378>)
 8004db4:	4699      	mov	r9, r3
	for(int i =0; string[i]; i++){
 8004db6:	782b      	ldrb	r3, [r5, #0]
 8004db8:	002a      	movs	r2, r5
		string[i] =tolower(string[i]);
 8004dba:	2003      	movs	r0, #3
	for(int i =0; string[i]; i++){
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <CLI_CommandParser+0x4a>
		string[i] =tolower(string[i]);
 8004dc0:	5ce1      	ldrb	r1, [r4, r3]
 8004dc2:	4001      	ands	r1, r0
 8004dc4:	2901      	cmp	r1, #1
 8004dc6:	d101      	bne.n	8004dcc <CLI_CommandParser+0x40>
 8004dc8:	3320      	adds	r3, #32
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	7013      	strb	r3, [r2, #0]
	for(int i =0; string[i]; i++){
 8004dce:	7853      	ldrb	r3, [r2, #1]
 8004dd0:	3201      	adds	r2, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f4      	bne.n	8004dc0 <CLI_CommandParser+0x34>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	7e9f      	ldrb	r7, [r3, #26]
 8004dda:	2f00      	cmp	r7, #0
 8004ddc:	d04d      	beq.n	8004e7a <CLI_CommandParser+0xee>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004dde:	2206      	movs	r2, #6
 8004de0:	0028      	movs	r0, r5
 8004de2:	49c9      	ldr	r1, [pc, #804]	; (8005108 <CLI_CommandParser+0x37c>)
 8004de4:	f00e fc0f 	bl	8013606 <strncmp>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d100      	bne.n	8004dee <CLI_CommandParser+0x62>
 8004dec:	e0a5      	b.n	8004f3a <CLI_CommandParser+0x1ae>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004dee:	2f02      	cmp	r7, #2
 8004df0:	d125      	bne.n	8004e3e <CLI_CommandParser+0xb2>
	switch(code){
 8004df2:	0028      	movs	r0, r5
 8004df4:	f7ff fda2 	bl	800493c <AddSnippet.part.0>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d000      	beq.n	8004dfe <CLI_CommandParser+0x72>
 8004dfc:	e0d7      	b.n	8004fae <CLI_CommandParser+0x222>
				pcOutputString[0] ='\r';
 8004dfe:	230d      	movs	r3, #13
 8004e00:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e02:	465b      	mov	r3, fp
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d100      	bne.n	8004e0a <CLI_CommandParser+0x7e>
 8004e08:	e0ad      	b.n	8004f66 <CLI_CommandParser+0x1da>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	4698      	mov	r8, r3
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e0e:	0030      	movs	r0, r6
 8004e10:	f7fb f982 	bl	8000118 <strlen>
 8004e14:	2301      	movs	r3, #1
 8004e16:	425b      	negs	r3, r3
 8004e18:	b282      	uxth	r2, r0
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	0031      	movs	r1, r6
 8004e1e:	4650      	mov	r0, sl
 8004e20:	3333      	adds	r3, #51	; 0x33
 8004e22:	f008 fc1b 	bl	800d65c <writePxMutex>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004e26:	0030      	movs	r0, r6
 8004e28:	f7fb f976 	bl	8000118 <strlen>
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	0002      	movs	r2, r0
 8004e30:	0030      	movs	r0, r6
 8004e32:	f00e f9b4 	bl	801319e <memset>
	} while(xReturned != pdFALSE);
 8004e36:	4643      	mov	r3, r8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1bc      	bne.n	8004db6 <CLI_CommandParser+0x2a>
 8004e3c:	e09b      	b.n	8004f76 <CLI_CommandParser+0x1ea>
			loc =strchr((char* )cInputString,'.');
 8004e3e:	212e      	movs	r1, #46	; 0x2e
 8004e40:	0028      	movs	r0, r5
 8004e42:	f00e fbca 	bl	80135da <strchr>
 8004e46:	1e07      	subs	r7, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e48:	d009      	beq.n	8004e5e <CLI_CommandParser+0xd2>
 8004e4a:	1ec3      	subs	r3, r0, #3
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	2a62      	cmp	r2, #98	; 0x62
 8004e50:	d12a      	bne.n	8004ea8 <CLI_CommandParser+0x11c>
 8004e52:	785a      	ldrb	r2, [r3, #1]
 8004e54:	2a6f      	cmp	r2, #111	; 0x6f
 8004e56:	d127      	bne.n	8004ea8 <CLI_CommandParser+0x11c>
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	2b73      	cmp	r3, #115	; 0x73
 8004e5c:	d124      	bne.n	8004ea8 <CLI_CommandParser+0x11c>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e5e:	2299      	movs	r2, #153	; 0x99
 8004e60:	0031      	movs	r1, r6
 8004e62:	0028      	movs	r0, r5
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	f008 feff 	bl	800dc68 <FreeRTOS_CLIProcessCommand>
 8004e6a:	4680      	mov	r8, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e6c:	7833      	ldrb	r3, [r6, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0d9      	beq.n	8004e26 <CLI_CommandParser+0x9a>
 8004e72:	465b      	mov	r3, fp
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0d6      	beq.n	8004e26 <CLI_CommandParser+0x9a>
 8004e78:	e7c9      	b.n	8004e0e <CLI_CommandParser+0x82>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004e7a:	782b      	ldrb	r3, [r5, #0]
 8004e7c:	2b69      	cmp	r3, #105	; 0x69
 8004e7e:	d1de      	bne.n	8004e3e <CLI_CommandParser+0xb2>
 8004e80:	786b      	ldrb	r3, [r5, #1]
 8004e82:	2b66      	cmp	r3, #102	; 0x66
 8004e84:	d1db      	bne.n	8004e3e <CLI_CommandParser+0xb2>
 8004e86:	78ab      	ldrb	r3, [r5, #2]
 8004e88:	001f      	movs	r7, r3
 8004e8a:	3f20      	subs	r7, #32
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d1d6      	bne.n	8004e3e <CLI_CommandParser+0xb2>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004e90:	1ce8      	adds	r0, r5, #3
			return ParseSnippetCondition(string);
 8004e92:	f7ff fda5 	bl	80049e0 <ParseSnippetCondition>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d000      	beq.n	8004e9c <CLI_CommandParser+0x110>
 8004e9a:	e07f      	b.n	8004f9c <CLI_CommandParser+0x210>
				recordSnippet = SNIPPET_COMMANDS;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	464a      	mov	r2, r9
 8004ea0:	7693      	strb	r3, [r2, #26]
				pcOutputString[0] ='\r';
 8004ea2:	330b      	adds	r3, #11
 8004ea4:	7033      	strb	r3, [r6, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ea6:	e7ac      	b.n	8004e02 <CLI_CommandParser+0x76>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004ea8:	787b      	ldrb	r3, [r7, #1]
 8004eaa:	5ce3      	ldrb	r3, [r4, r3]
 8004eac:	075b      	lsls	r3, r3, #29
 8004eae:	d4d6      	bmi.n	8004e5e <CLI_CommandParser+0xd2>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004eb0:	0029      	movs	r1, r5
 8004eb2:	1b7a      	subs	r2, r7, r5
 8004eb4:	a807      	add	r0, sp, #28
 8004eb6:	f00e fbb8 	bl	801362a <strncpy>
				id =GetID(idString);
 8004eba:	a807      	add	r0, sp, #28
 8004ebc:	f7ff fa36 	bl	800432c <GetID>
				if(id == myID){
 8004ec0:	4b92      	ldr	r3, [pc, #584]	; (800510c <CLI_CommandParser+0x380>)
				id =GetID(idString);
 8004ec2:	9003      	str	r0, [sp, #12]
				if(id == myID){
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	d100      	bne.n	8004ece <CLI_CommandParser+0x142>
 8004ecc:	e087      	b.n	8004fde <CLI_CommandParser+0x252>
				else if(id == BOS_ERR_WrongName){
 8004ece:	9b03      	ldr	r3, [sp, #12]
 8004ed0:	2b64      	cmp	r3, #100	; 0x64
 8004ed2:	d100      	bne.n	8004ed6 <CLI_CommandParser+0x14a>
 8004ed4:	e072      	b.n	8004fbc <CLI_CommandParser+0x230>
				else if(id == BOS_ERR_WrongID){
 8004ed6:	9b03      	ldr	r3, [sp, #12]
 8004ed8:	2b66      	cmp	r3, #102	; 0x66
 8004eda:	d100      	bne.n	8004ede <CLI_CommandParser+0x152>
 8004edc:	e087      	b.n	8004fee <CLI_CommandParser+0x262>
				else if(id == BOS_BROADCAST){
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	2bff      	cmp	r3, #255	; 0xff
 8004ee2:	d100      	bne.n	8004ee6 <CLI_CommandParser+0x15a>
 8004ee4:	e0c4      	b.n	8005070 <CLI_CommandParser+0x2e4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004ee6:	466b      	mov	r3, sp
 8004ee8:	7b1b      	ldrb	r3, [r3, #12]
 8004eea:	9305      	str	r3, [sp, #20]
 8004eec:	2bfe      	cmp	r3, #254	; 0xfe
 8004eee:	d100      	bne.n	8004ef2 <CLI_CommandParser+0x166>
 8004ef0:	e12e      	b.n	8005150 <CLI_CommandParser+0x3c4>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004ef2:	1c7b      	adds	r3, r7, #1
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	4985      	ldr	r1, [pc, #532]	; (8005110 <CLI_CommandParser+0x384>)
 8004efa:	4698      	mov	r8, r3
 8004efc:	f00e fb83 	bl	8013606 <strncmp>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d000      	beq.n	8004f06 <CLI_CommandParser+0x17a>
 8004f04:	e07a      	b.n	8004ffc <CLI_CommandParser+0x270>
						SendMessageToModule(id,CODE_UPDATE,0);
 8004f06:	9b05      	ldr	r3, [sp, #20]
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004f08:	4f82      	ldr	r7, [pc, #520]	; (8005114 <CLI_CommandParser+0x388>)
						SendMessageToModule(id,CODE_UPDATE,0);
 8004f0a:	4698      	mov	r8, r3
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2119      	movs	r1, #25
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004f10:	7038      	strb	r0, [r7, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004f12:	0018      	movs	r0, r3
 8004f14:	f003 f980 	bl	8008218 <SendMessageToModule>
						osDelay(100);
 8004f18:	2064      	movs	r0, #100	; 0x64
 8004f1a:	f008 fd7f 	bl	800da1c <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004f1e:	4b7e      	ldr	r3, [pc, #504]	; (8005118 <CLI_CommandParser+0x38c>)
 8004f20:	4641      	mov	r1, r8
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	4b79      	ldr	r3, [pc, #484]	; (800510c <CLI_CommandParser+0x380>)
 8004f26:	7818      	ldrb	r0, [r3, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f005 fab3 	bl	800a494 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004f2e:	783b      	ldrb	r3, [r7, #0]
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d100      	bne.n	8004f36 <CLI_CommandParser+0x1aa>
 8004f34:	e0cd      	b.n	80050d2 <CLI_CommandParser+0x346>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f36:	7833      	ldrb	r3, [r6, #0]
 8004f38:	e012      	b.n	8004f60 <CLI_CommandParser+0x1d4>
			recordSnippet =0;
 8004f3a:	464b      	mov	r3, r9
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f3c:	4a77      	ldr	r2, [pc, #476]	; (800511c <CLI_CommandParser+0x390>)
			recordSnippet =0;
 8004f3e:	7698      	strb	r0, [r3, #26]
			snippets[numOfRecordedSnippets - 1].state = true;
 8004f40:	7811      	ldrb	r1, [r2, #0]
 8004f42:	3901      	subs	r1, #1
 8004f44:	008b      	lsls	r3, r1, #2
 8004f46:	185b      	adds	r3, r3, r1
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	18d3      	adds	r3, r2, r3
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	751a      	strb	r2, [r3, #20]
			SaveToRO();
 8004f50:	f005 f986 	bl	800a260 <SaveToRO>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004f54:	2241      	movs	r2, #65	; 0x41
 8004f56:	0030      	movs	r0, r6
 8004f58:	4971      	ldr	r1, [pc, #452]	; (8005120 <CLI_CommandParser+0x394>)
 8004f5a:	f00e f917 	bl	801318c <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f5e:	7833      	ldrb	r3, [r6, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d000      	beq.n	8004f66 <CLI_CommandParser+0x1da>
 8004f64:	e74d      	b.n	8004e02 <CLI_CommandParser+0x76>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f66:	0030      	movs	r0, r6
 8004f68:	f7fb f8d6 	bl	8000118 <strlen>
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	0002      	movs	r2, r0
 8004f70:	0030      	movs	r0, r6
 8004f72:	f00e f914 	bl	801319e <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004f76:	2209      	movs	r2, #9
 8004f78:	2100      	movs	r1, #0
 8004f7a:	a807      	add	r0, sp, #28
 8004f7c:	f00e f90f 	bl	801319e <memset>
	if(!recordSnippet && enableOutput)
 8004f80:	464b      	mov	r3, r9
 8004f82:	7e9b      	ldrb	r3, [r3, #26]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <CLI_CommandParser+0x202>
 8004f88:	465b      	mov	r3, fp
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11d      	bne.n	8004fca <CLI_CommandParser+0x23e>
}
 8004f8e:	b00b      	add	sp, #44	; 0x2c
 8004f90:	bcf0      	pop	{r4, r5, r6, r7}
 8004f92:	46bb      	mov	fp, r7
 8004f94:	46b2      	mov	sl, r6
 8004f96:	46a9      	mov	r9, r5
 8004f98:	46a0      	mov	r8, r4
 8004f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004f9c:	2252      	movs	r2, #82	; 0x52
 8004f9e:	0030      	movs	r0, r6
 8004fa0:	4960      	ldr	r1, [pc, #384]	; (8005124 <CLI_CommandParser+0x398>)
 8004fa2:	f00e f8f3 	bl	801318c <memcpy>
				recordSnippet =0;
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	769f      	strb	r7, [r3, #26]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004faa:	7833      	ldrb	r3, [r6, #0]
 8004fac:	e7d8      	b.n	8004f60 <CLI_CommandParser+0x1d4>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004fae:	2252      	movs	r2, #82	; 0x52
 8004fb0:	0030      	movs	r0, r6
 8004fb2:	495c      	ldr	r1, [pc, #368]	; (8005124 <CLI_CommandParser+0x398>)
 8004fb4:	f00e f8ea 	bl	801318c <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fb8:	7833      	ldrb	r3, [r6, #0]
 8004fba:	e7d1      	b.n	8004f60 <CLI_CommandParser+0x1d4>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004fbc:	2227      	movs	r2, #39	; 0x27
 8004fbe:	0030      	movs	r0, r6
 8004fc0:	4959      	ldr	r1, [pc, #356]	; (8005128 <CLI_CommandParser+0x39c>)
 8004fc2:	f00e f8e3 	bl	801318c <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004fc6:	7833      	ldrb	r3, [r6, #0]
 8004fc8:	e7ca      	b.n	8004f60 <CLI_CommandParser+0x1d4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004fca:	2301      	movs	r3, #1
 8004fcc:	425b      	negs	r3, r3
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2238      	movs	r2, #56	; 0x38
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4955      	ldr	r1, [pc, #340]	; (800512c <CLI_CommandParser+0x3a0>)
 8004fd6:	3333      	adds	r3, #51	; 0x33
 8004fd8:	f008 fb40 	bl	800d65c <writePxMutex>
}
 8004fdc:	e7d7      	b.n	8004f8e <CLI_CommandParser+0x202>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004fde:	2299      	movs	r2, #153	; 0x99
 8004fe0:	0031      	movs	r1, r6
 8004fe2:	1c78      	adds	r0, r7, #1
 8004fe4:	0092      	lsls	r2, r2, #2
 8004fe6:	f008 fe3f 	bl	800dc68 <FreeRTOS_CLIProcessCommand>
 8004fea:	4680      	mov	r8, r0
 8004fec:	e73e      	b.n	8004e6c <CLI_CommandParser+0xe0>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004fee:	2225      	movs	r2, #37	; 0x25
 8004ff0:	0030      	movs	r0, r6
 8004ff2:	494f      	ldr	r1, [pc, #316]	; (8005130 <CLI_CommandParser+0x3a4>)
 8004ff4:	f00e f8ca 	bl	801318c <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ff8:	7833      	ldrb	r3, [r6, #0]
 8004ffa:	e7b1      	b.n	8004f60 <CLI_CommandParser+0x1d4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	f7fb f88b 	bl	8000118 <strlen>
 8005002:	ab07      	add	r3, sp, #28
 8005004:	9004      	str	r0, [sp, #16]
 8005006:	0018      	movs	r0, r3
 8005008:	f7fb f886 	bl	8000118 <strlen>
 800500c:	9a04      	ldr	r2, [sp, #16]
 800500e:	4641      	mov	r1, r8
 8005010:	3a01      	subs	r2, #1
 8005012:	1a12      	subs	r2, r2, r0
 8005014:	0007      	movs	r7, r0
 8005016:	4847      	ldr	r0, [pc, #284]	; (8005134 <CLI_CommandParser+0x3a8>)
 8005018:	f00e fb07 	bl	801362a <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 800501c:	0028      	movs	r0, r5
 800501e:	f7fb f87b 	bl	8000118 <strlen>
 8005022:	1e42      	subs	r2, r0, #1
 8005024:	1bd2      	subs	r2, r2, r7
 8005026:	2117      	movs	r1, #23
 8005028:	b292      	uxth	r2, r2
 800502a:	9805      	ldr	r0, [sp, #20]
 800502c:	f003 f8f4 	bl	8008218 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8005030:	0030      	movs	r0, r6
 8005032:	9a03      	ldr	r2, [sp, #12]
 8005034:	4940      	ldr	r1, [pc, #256]	; (8005138 <CLI_CommandParser+0x3ac>)
 8005036:	f00e faa3 	bl	8013580 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 800503a:	7833      	ldrb	r3, [r6, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <CLI_CommandParser+0x2d0>
 8005040:	465b      	mov	r3, fp
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <CLI_CommandParser+0x2d0>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005046:	0030      	movs	r0, r6
 8005048:	f7fb f866 	bl	8000118 <strlen>
 800504c:	2301      	movs	r3, #1
 800504e:	b282      	uxth	r2, r0
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	0031      	movs	r1, r6
 8005054:	4650      	mov	r0, sl
 8005056:	3331      	adds	r3, #49	; 0x31
 8005058:	f008 fb00 	bl	800d65c <writePxMutex>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800505c:	0030      	movs	r0, r6
 800505e:	f7fb f85b 	bl	8000118 <strlen>
 8005062:	2100      	movs	r1, #0
 8005064:	0002      	movs	r2, r0
 8005066:	0030      	movs	r0, r6
 8005068:	f00e f899 	bl	801319e <memset>
 800506c:	4f29      	ldr	r7, [pc, #164]	; (8005114 <CLI_CommandParser+0x388>)
 800506e:	e75e      	b.n	8004f2e <CLI_CommandParser+0x1a2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005070:	221a      	movs	r2, #26
 8005072:	2100      	movs	r1, #0
 8005074:	4831      	ldr	r0, [pc, #196]	; (800513c <CLI_CommandParser+0x3b0>)
 8005076:	f00e f892 	bl	801319e <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 800507a:	1c7b      	adds	r3, r7, #1
 800507c:	0028      	movs	r0, r5
 800507e:	4698      	mov	r8, r3
 8005080:	f7fb f84a 	bl	8000118 <strlen>
 8005084:	ab07      	add	r3, sp, #28
 8005086:	9003      	str	r0, [sp, #12]
 8005088:	0018      	movs	r0, r3
 800508a:	f7fb f845 	bl	8000118 <strlen>
 800508e:	9a03      	ldr	r2, [sp, #12]
 8005090:	4641      	mov	r1, r8
 8005092:	3a01      	subs	r2, #1
 8005094:	1a12      	subs	r2, r2, r0
 8005096:	0007      	movs	r7, r0
 8005098:	4826      	ldr	r0, [pc, #152]	; (8005134 <CLI_CommandParser+0x3a8>)
 800509a:	f00e fac6 	bl	801362a <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 800509e:	0028      	movs	r0, r5
 80050a0:	f7fb f83a 	bl	8000118 <strlen>
 80050a4:	1bc3      	subs	r3, r0, r7
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2217      	movs	r2, #23
 80050aa:	21ff      	movs	r1, #255	; 0xff
 80050ac:	9804      	ldr	r0, [sp, #16]
 80050ae:	f003 f863 	bl	8008178 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80050b2:	2299      	movs	r2, #153	; 0x99
 80050b4:	0031      	movs	r1, r6
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	4640      	mov	r0, r8
 80050ba:	f008 fdd5 	bl	800dc68 <FreeRTOS_CLIProcessCommand>
 80050be:	4680      	mov	r8, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 80050c0:	0030      	movs	r0, r6
 80050c2:	f7fb f829 	bl	8000118 <strlen>
 80050c6:	221d      	movs	r2, #29
 80050c8:	491d      	ldr	r1, [pc, #116]	; (8005140 <CLI_CommandParser+0x3b4>)
 80050ca:	1830      	adds	r0, r6, r0
 80050cc:	f00e f85e 	bl	801318c <memcpy>
 80050d0:	e6cc      	b.n	8004e6c <CLI_CommandParser+0xe0>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80050d2:	21fa      	movs	r1, #250	; 0xfa
 80050d4:	2001      	movs	r0, #1
 80050d6:	0089      	lsls	r1, r1, #2
 80050d8:	f009 ff8e 	bl	800eff8 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80050dc:	4b19      	ldr	r3, [pc, #100]	; (8005144 <CLI_CommandParser+0x3b8>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d100      	bne.n	80050e6 <CLI_CommandParser+0x35a>
 80050e4:	e727      	b.n	8004f36 <CLI_CommandParser+0x1aa>
							++timedoutMsg;
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <CLI_CommandParser+0x3bc>)
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80050e8:	0030      	movs	r0, r6
							++timedoutMsg;
 80050ea:	8813      	ldrh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80050ec:	4917      	ldr	r1, [pc, #92]	; (800514c <CLI_CommandParser+0x3c0>)
							++timedoutMsg;
 80050ee:	3301      	adds	r3, #1
 80050f0:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	0032      	movs	r2, r6
 80050f6:	f00e fa43 	bl	8013580 <sprintf>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 80050fa:	7833      	ldrb	r3, [r6, #0]
 80050fc:	e730      	b.n	8004f60 <CLI_CommandParser+0x1d4>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	2000182c 	.word	0x2000182c
 8005104:	0801c3d2 	.word	0x0801c3d2
 8005108:	0801a190 	.word	0x0801a190
 800510c:	20000aa8 	.word	0x20000aa8
 8005110:	0801a278 	.word	0x0801a278
 8005114:	20000b4c 	.word	0x20000b4c
 8005118:	20000c60 	.word	0x20000c60
 800511c:	200017ac 	.word	0x200017ac
 8005120:	0801a198 	.word	0x0801a198
 8005124:	0801a13c 	.word	0x0801a13c
 8005128:	0801a1dc 	.word	0x0801a1dc
 800512c:	0801a2c4 	.word	0x0801a2c4
 8005130:	0801a204 	.word	0x0801a204
 8005134:	20000b74 	.word	0x20000b74
 8005138:	0801a280 	.word	0x0801a280
 800513c:	20000e58 	.word	0x20000e58
 8005140:	0801a22c 	.word	0x0801a22c
 8005144:	20000c74 	.word	0x20000c74
 8005148:	2000219c 	.word	0x2000219c
 800514c:	0801a2a4 	.word	0x0801a2a4
					group =id >> 8;
 8005150:	464a      	mov	r2, r9
 8005152:	9b03      	ldr	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005154:	2100      	movs	r1, #0
					group =id >> 8;
 8005156:	1218      	asrs	r0, r3, #8
 8005158:	b2c3      	uxtb	r3, r0
 800515a:	76d3      	strb	r3, [r2, #27]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 800515c:	481c      	ldr	r0, [pc, #112]	; (80051d0 <CLI_CommandParser+0x444>)
 800515e:	221a      	movs	r2, #26
					group =id >> 8;
 8005160:	9303      	str	r3, [sp, #12]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8005162:	f00e f81c 	bl	801319e <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005166:	0028      	movs	r0, r5
 8005168:	f7fa ffd6 	bl	8000118 <strlen>
 800516c:	9005      	str	r0, [sp, #20]
 800516e:	a807      	add	r0, sp, #28
 8005170:	f7fa ffd2 	bl	8000118 <strlen>
 8005174:	9a05      	ldr	r2, [sp, #20]
 8005176:	3701      	adds	r7, #1
 8005178:	3a01      	subs	r2, #1
 800517a:	1a12      	subs	r2, r2, r0
 800517c:	0039      	movs	r1, r7
 800517e:	9005      	str	r0, [sp, #20]
 8005180:	4814      	ldr	r0, [pc, #80]	; (80051d4 <CLI_CommandParser+0x448>)
 8005182:	f00e fa52 	bl	801362a <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8005186:	0028      	movs	r0, r5
 8005188:	f7fa ffc6 	bl	8000118 <strlen>
 800518c:	9a05      	ldr	r2, [sp, #20]
 800518e:	9903      	ldr	r1, [sp, #12]
 8005190:	1a83      	subs	r3, r0, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	2217      	movs	r2, #23
 8005196:	9804      	ldr	r0, [sp, #16]
 8005198:	f002 ffee 	bl	8008178 <BroadcastMessage>
					if(InGroup(myID,group))
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <CLI_CommandParser+0x44c>)
 800519e:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <CLI_CommandParser+0x450>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	5a9b      	ldrh	r3, [r3, r2]
 80051a8:	464a      	mov	r2, r9
 80051aa:	7ed2      	ldrb	r2, [r2, #27]
 80051ac:	4113      	asrs	r3, r2
 80051ae:	07db      	lsls	r3, r3, #31
 80051b0:	d406      	bmi.n	80051c0 <CLI_CommandParser+0x434>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 80051b2:	0032      	movs	r2, r6
 80051b4:	0030      	movs	r0, r6
 80051b6:	490a      	ldr	r1, [pc, #40]	; (80051e0 <CLI_CommandParser+0x454>)
 80051b8:	ab07      	add	r3, sp, #28
 80051ba:	f00e f9e1 	bl	8013580 <sprintf>
 80051be:	e655      	b.n	8004e6c <CLI_CommandParser+0xe0>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80051c0:	2299      	movs	r2, #153	; 0x99
 80051c2:	0031      	movs	r1, r6
 80051c4:	0038      	movs	r0, r7
 80051c6:	0092      	lsls	r2, r2, #2
 80051c8:	f008 fd4e 	bl	800dc68 <FreeRTOS_CLIProcessCommand>
 80051cc:	4680      	mov	r8, r0
 80051ce:	e7f0      	b.n	80051b2 <CLI_CommandParser+0x426>
 80051d0:	20000e58 	.word	0x20000e58
 80051d4:	20000b74 	.word	0x20000b74
 80051d8:	20000aa8 	.word	0x20000aa8
 80051dc:	20000aac 	.word	0x20000aac
 80051e0:	0801a24c 	.word	0x0801a24c

080051e4 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	46de      	mov	lr, fp
 80051e8:	4657      	mov	r7, sl
 80051ea:	464e      	mov	r6, r9
 80051ec:	4645      	mov	r5, r8
 80051ee:	b5e0      	push	{r5, r6, r7, lr}
 80051f0:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80051f2:	ab02      	add	r3, sp, #8
 80051f4:	469c      	mov	ip, r3
 80051f6:	240f      	movs	r4, #15
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80051f8:	2101      	movs	r1, #1
	char cRxedChar ='\0';
 80051fa:	2300      	movs	r3, #0
 80051fc:	4464      	add	r4, ip
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80051fe:	4249      	negs	r1, r1
 8005200:	2001      	movs	r0, #1
	char cRxedChar ='\0';
 8005202:	7023      	strb	r3, [r4, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8005204:	f009 fef8 	bl	800eff8 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005208:	f008 fdb0 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800520c:	23e1      	movs	r3, #225	; 0xe1
 800520e:	4a57      	ldr	r2, [pc, #348]	; (800536c <prvCLITask+0x188>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005210:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	429a      	cmp	r2, r3
 8005218:	d100      	bne.n	800521c <prvCLITask+0x38>
 800521a:	e0a4      	b.n	8005366 <prvCLITask+0x182>
			if(port != PcPort)
 800521c:	4b54      	ldr	r3, [pc, #336]	; (8005370 <prvCLITask+0x18c>)
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800521e:	2501      	movs	r5, #1
			if(port != PcPort)
 8005220:	4698      	mov	r8, r3
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005222:	4646      	mov	r6, r8
			if(port != PcPort)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	429d      	cmp	r5, r3
 8005228:	d005      	beq.n	8005236 <prvCLITask+0x52>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800522a:	21e1      	movs	r1, #225	; 0xe1
 800522c:	0028      	movs	r0, r5
 800522e:	0309      	lsls	r1, r1, #12
 8005230:	f008 fa6a 	bl	800d708 <UpdateBaudrate>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005234:	7833      	ldrb	r3, [r6, #0]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005236:	3501      	adds	r5, #1
 8005238:	b2ed      	uxtb	r5, r5
 800523a:	2d06      	cmp	r5, #6
 800523c:	d1f3      	bne.n	8005226 <prvCLITask+0x42>
 800523e:	46b0      	mov	r8, r6
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8005240:	4641      	mov	r1, r8
 8005242:	4b4c      	ldr	r3, [pc, #304]	; (8005374 <prvCLITask+0x190>)
 8005244:	4d4c      	ldr	r5, [pc, #304]	; (8005378 <prvCLITask+0x194>)
 8005246:	881a      	ldrh	r2, [r3, #0]
 8005248:	469b      	mov	fp, r3
 800524a:	0053      	lsls	r3, r2, #1
 800524c:	189b      	adds	r3, r3, r2
 800524e:	4a4b      	ldr	r2, [pc, #300]	; (800537c <prvCLITask+0x198>)
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	7809      	ldrb	r1, [r1, #0]
 8005254:	189b      	adds	r3, r3, r2
 8005256:	4a4a      	ldr	r2, [pc, #296]	; (8005380 <prvCLITask+0x19c>)
 8005258:	351c      	adds	r5, #28
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	0028      	movs	r0, r5
 800525e:	9100      	str	r1, [sp, #0]
 8005260:	4948      	ldr	r1, [pc, #288]	; (8005384 <prvCLITask+0x1a0>)
 8005262:	f00e f98d 	bl	8013580 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005266:	4643      	mov	r3, r8
 8005268:	22a4      	movs	r2, #164	; 0xa4
 800526a:	4947      	ldr	r1, [pc, #284]	; (8005388 <prvCLITask+0x1a4>)
 800526c:	0092      	lsls	r2, r2, #2
 800526e:	7818      	ldrb	r0, [r3, #0]
 8005270:	230a      	movs	r3, #10
 8005272:	f008 fa29 	bl	800d6c8 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005276:	0028      	movs	r0, r5
 8005278:	f7fa ff4e 	bl	8000118 <strlen>
 800527c:	4643      	mov	r3, r8
 800527e:	b282      	uxth	r2, r0
 8005280:	0029      	movs	r1, r5
 8005282:	7818      	ldrb	r0, [r3, #0]
 8005284:	230a      	movs	r3, #10
 8005286:	f008 fa1f 	bl	800d6c8 <writePxITMutex>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800528a:	2278      	movs	r2, #120	; 0x78
 800528c:	4694      	mov	ip, r2
 800528e:	4b3f      	ldr	r3, [pc, #252]	; (800538c <prvCLITask+0x1a8>)
	int8_t cInputIndex =0, *pcOutputString;
 8005290:	2700      	movs	r7, #0
 8005292:	4699      	mov	r9, r3
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005294:	4b38      	ldr	r3, [pc, #224]	; (8005378 <prvCLITask+0x194>)
			Read_In_CLI_Task_Flag = 0;
 8005296:	2600      	movs	r6, #0
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005298:	4463      	add	r3, ip
 800529a:	469a      	mov	sl, r3
 800529c:	4d3c      	ldr	r5, [pc, #240]	; (8005390 <prvCLITask+0x1ac>)
 800529e:	e024      	b.n	80052ea <prvCLITask+0x106>
				cRxedChar = Rx_Data[PcPort - 1];
 80052a0:	4643      	mov	r3, r8
 80052a2:	464a      	mov	r2, r9
 80052a4:	7818      	ldrb	r0, [r3, #0]
 80052a6:	1e43      	subs	r3, r0, #1
 80052a8:	5cd2      	ldrb	r2, [r2, r3]
 80052aa:	7022      	strb	r2, [r4, #0]
				Rx_Data[PcPort - 1] = 0;
 80052ac:	464a      	mov	r2, r9
 80052ae:	54d6      	strb	r6, [r2, r3]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80052b0:	230a      	movs	r3, #10
 80052b2:	2201      	movs	r2, #1
 80052b4:	0021      	movs	r1, r4
			Read_In_CLI_Task_Flag = 0;
 80052b6:	702e      	strb	r6, [r5, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 80052b8:	f008 fa06 	bl	800d6c8 <writePxITMutex>
			if(cRxedChar == '\r'){
 80052bc:	7823      	ldrb	r3, [r4, #0]
 80052be:	2b0d      	cmp	r3, #13
 80052c0:	d024      	beq.n	800530c <prvCLITask+0x128>
				if(cRxedChar == '\n'){
 80052c2:	2b0a      	cmp	r3, #10
 80052c4:	d00f      	beq.n	80052e6 <prvCLITask+0x102>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d03c      	beq.n	8005344 <prvCLITask+0x160>
 80052ca:	2b7f      	cmp	r3, #127	; 0x7f
 80052cc:	d03a      	beq.n	8005344 <prvCLITask+0x160>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80052ce:	001a      	movs	r2, r3
 80052d0:	3a20      	subs	r2, #32
 80052d2:	2a5e      	cmp	r2, #94	; 0x5e
 80052d4:	d807      	bhi.n	80052e6 <prvCLITask+0x102>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80052d6:	2f31      	cmp	r7, #49	; 0x31
 80052d8:	dc05      	bgt.n	80052e6 <prvCLITask+0x102>
							cInputString[cInputIndex] =cRxedChar;
 80052da:	2178      	movs	r1, #120	; 0x78
 80052dc:	4a26      	ldr	r2, [pc, #152]	; (8005378 <prvCLITask+0x194>)
 80052de:	19d2      	adds	r2, r2, r7
							cInputIndex++;
 80052e0:	3701      	adds	r7, #1
							cInputString[cInputIndex] =cRxedChar;
 80052e2:	5453      	strb	r3, [r2, r1]
							cInputIndex++;
 80052e4:	b27f      	sxtb	r7, r7
		taskYIELD();
 80052e6:	f00a f91b 	bl	800f520 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 80052ea:	782b      	ldrb	r3, [r5, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d1fa      	bne.n	80052e6 <prvCLITask+0x102>
			if(Processor_type(myPN)=='G')
 80052f0:	465b      	mov	r3, fp
 80052f2:	7818      	ldrb	r0, [r3, #0]
 80052f4:	f7fd fd82 	bl	8002dfc <Processor_type>
 80052f8:	2847      	cmp	r0, #71	; 0x47
 80052fa:	d1d1      	bne.n	80052a0 <prvCLITask+0xbc>
				cRxedChar = CLI_Data;
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <prvCLITask+0x1b0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	7023      	strb	r3, [r4, #0]
				CLI_Data = 0;
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <prvCLITask+0x1b0>)
 8005304:	701e      	strb	r6, [r3, #0]
				cRxedChar = Rx_Data[PcPort - 1];
 8005306:	4643      	mov	r3, r8
 8005308:	7818      	ldrb	r0, [r3, #0]
 800530a:	e7d1      	b.n	80052b0 <prvCLITask+0xcc>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800530c:	4643      	mov	r3, r8
 800530e:	2202      	movs	r2, #2
 8005310:	7818      	ldrb	r0, [r3, #0]
 8005312:	4921      	ldr	r1, [pc, #132]	; (8005398 <prvCLITask+0x1b4>)
 8005314:	230a      	movs	r3, #10
 8005316:	f008 f9d7 	bl	800d6c8 <writePxITMutex>
				if(cInputIndex == 0){
 800531a:	2f00      	cmp	r7, #0
 800531c:	d01d      	beq.n	800535a <prvCLITask+0x176>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800531e:	4643      	mov	r3, r8
 8005320:	4652      	mov	r2, sl
 8005322:	7818      	ldrb	r0, [r3, #0]
 8005324:	2101      	movs	r1, #1
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	f7ff fd30 	bl	8004d8c <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 800532c:	4812      	ldr	r0, [pc, #72]	; (8005378 <prvCLITask+0x194>)
 800532e:	4651      	mov	r1, sl
 8005330:	3044      	adds	r0, #68	; 0x44
 8005332:	f00e f960 	bl	80135f6 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005336:	2232      	movs	r2, #50	; 0x32
 8005338:	2100      	movs	r1, #0
 800533a:	4650      	mov	r0, sl
 800533c:	f00d ff2f 	bl	801319e <memset>
				cInputIndex =0;
 8005340:	2700      	movs	r7, #0
 8005342:	e7d0      	b.n	80052e6 <prvCLITask+0x102>
					if(cInputIndex > 0){
 8005344:	2f00      	cmp	r7, #0
 8005346:	d0ce      	beq.n	80052e6 <prvCLITask+0x102>
						cInputString[cInputIndex] ='\0';
 8005348:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <prvCLITask+0x194>)
						cInputIndex--;
 800534a:	3f01      	subs	r7, #1
						cInputString[cInputIndex] ='\0';
 800534c:	4694      	mov	ip, r2
 800534e:	2278      	movs	r2, #120	; 0x78
						cInputIndex--;
 8005350:	b2fb      	uxtb	r3, r7
						cInputString[cInputIndex] ='\0';
 8005352:	4463      	add	r3, ip
						cInputIndex--;
 8005354:	b27f      	sxtb	r7, r7
						cInputString[cInputIndex] ='\0';
 8005356:	549e      	strb	r6, [r3, r2]
 8005358:	e7c5      	b.n	80052e6 <prvCLITask+0x102>
					strcpy((char* )cInputString,(char* )cLastInputString);
 800535a:	4907      	ldr	r1, [pc, #28]	; (8005378 <prvCLITask+0x194>)
 800535c:	4650      	mov	r0, sl
 800535e:	3144      	adds	r1, #68	; 0x44
 8005360:	f00e f949 	bl	80135f6 <strcpy>
 8005364:	e7db      	b.n	800531e <prvCLITask+0x13a>
 8005366:	4b02      	ldr	r3, [pc, #8]	; (8005370 <prvCLITask+0x18c>)
 8005368:	4698      	mov	r8, r3
 800536a:	e769      	b.n	8005240 <prvCLITask+0x5c>
 800536c:	20000b54 	.word	0x20000b54
 8005370:	20000c60 	.word	0x20000c60
 8005374:	20000030 	.word	0x20000030
 8005378:	2000182c 	.word	0x2000182c
 800537c:	0801935c 	.word	0x0801935c
 8005380:	20000aa8 	.word	0x20000aa8
 8005384:	0801a300 	.word	0x0801a300
 8005388:	0801a32c 	.word	0x0801a32c
 800538c:	20001dd0 	.word	0x20001dd0
 8005390:	200017a9 	.word	0x200017a9
 8005394:	200011f1 	.word	0x200011f1
 8005398:	0801bb10 	.word	0x0801bb10

0800539c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 800539e:	4a1a      	ldr	r2, [pc, #104]	; (8005408 <ParseSnippetCommand+0x6c>)
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80053a0:	000d      	movs	r5, r1
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80053a2:	7814      	ldrb	r4, [r2, #0]
 80053a4:	3c01      	subs	r4, #1
 80053a6:	00a3      	lsls	r3, r4, #2
 80053a8:	191b      	adds	r3, r3, r4
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	18d3      	adds	r3, r2, r3
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d026      	beq.n	8005402 <ParseSnippetCommand+0x66>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80053b4:	4f15      	ldr	r7, [pc, #84]	; (800540c <ParseSnippetCommand+0x70>)
 80053b6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80053b8:	2c00      	cmp	r4, #0
 80053ba:	d014      	beq.n	80053e6 <ParseSnippetCommand+0x4a>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80053bc:	7823      	ldrb	r3, [r4, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00e      	beq.n	80053e0 <ParseSnippetCommand+0x44>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80053c2:	2113      	movs	r1, #19
 80053c4:	0020      	movs	r0, r4
 80053c6:	f00e f908 	bl	80135da <strchr>
 80053ca:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 80053cc:	d00e      	beq.n	80053ec <ParseSnippetCommand+0x50>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80053ce:	1b02      	subs	r2, r0, r4
 80053d0:	0021      	movs	r1, r4
 80053d2:	0028      	movs	r0, r5
 80053d4:	f00e f929 	bl	801362a <strncpy>
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80053d8:	2001      	movs	r0, #1
		ptrStart =ptrEnd + 1;
 80053da:	3601      	adds	r6, #1
 80053dc:	62fe      	str	r6, [r7, #44]	; 0x2c
}
 80053de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 80053e0:	2000      	movs	r0, #0
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		return false;
 80053e4:	e7fb      	b.n	80053de <ParseSnippetCommand+0x42>
		ptrStart =snippetBuffer;
 80053e6:	0004      	movs	r4, r0
 80053e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80053ea:	e7e7      	b.n	80053bc <ParseSnippetCommand+0x20>
		strcpy((char* )cliBuffer,ptrStart);
 80053ec:	0021      	movs	r1, r4
 80053ee:	0028      	movs	r0, r5
 80053f0:	f00e f901 	bl	80135f6 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 80053f4:	0028      	movs	r0, r5
 80053f6:	f7fa fe8f 	bl	8000118 <strlen>
 80053fa:	1824      	adds	r4, r4, r0
 80053fc:	62fc      	str	r4, [r7, #44]	; 0x2c
	return true;
 80053fe:	2001      	movs	r0, #1
 8005400:	e7ed      	b.n	80053de <ParseSnippetCommand+0x42>
		return false;
 8005402:	2000      	movs	r0, #0
 8005404:	e7eb      	b.n	80053de <ParseSnippetCommand+0x42>
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	200017ac 	.word	0x200017ac
 800540c:	200018ac 	.word	0x200018ac

08005410 <CheckSnippetCondition>:
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005410:	0081      	lsls	r1, r0, #2
bool CheckSnippetCondition(uint8_t index){
 8005412:	b530      	push	{r4, r5, lr}
	switch(snippets[index].cond.conditionType){
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <CheckSnippetCondition+0xbc>)
 8005416:	1809      	adds	r1, r1, r0
 8005418:	0089      	lsls	r1, r1, #2
 800541a:	185c      	adds	r4, r3, r1
 800541c:	7922      	ldrb	r2, [r4, #4]
bool CheckSnippetCondition(uint8_t index){
 800541e:	b083      	sub	sp, #12
	switch(snippets[index].cond.conditionType){
 8005420:	2a01      	cmp	r2, #1
 8005422:	d01f      	beq.n	8005464 <CheckSnippetCondition+0x54>
 8005424:	2a03      	cmp	r2, #3
 8005426:	d11a      	bne.n	800545e <CheckSnippetCondition+0x4e>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005428:	79e0      	ldrb	r0, [r4, #7]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800542a:	1859      	adds	r1, r3, r1
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800542c:	3801      	subs	r0, #1
 800542e:	0042      	lsls	r2, r0, #1
 8005430:	1812      	adds	r2, r2, r0
 8005432:	4827      	ldr	r0, [pc, #156]	; (80054d0 <CheckSnippetCondition+0xc0>)
 8005434:	0092      	lsls	r2, r2, #2
 8005436:	5812      	ldr	r2, [r2, r0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005438:	310a      	adds	r1, #10
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 800543a:	6815      	ldr	r5, [r2, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800543c:	a801      	add	r0, sp, #4
 800543e:	2204      	movs	r2, #4
 8005440:	f00d fea4 	bl	801318c <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005444:	7963      	ldrb	r3, [r4, #5]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d809      	bhi.n	800545e <CheckSnippetCondition+0x4e>
 800544a:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <CheckSnippetCondition+0xc4>)
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	58d3      	ldr	r3, [r2, r3]
 8005450:	469f      	mov	pc, r3
				case MATH_GREATER:
					if(flt1 > flt2)
						return true;
					break;
				case MATH_SMALLER:
					if(flt1 < flt2 && flt1 != 0.0f)
 8005452:	9801      	ldr	r0, [sp, #4]
 8005454:	1c29      	adds	r1, r5, #0
 8005456:	f7fb f855 	bl	8000504 <__aeabi_fcmpgt>
 800545a:	2800      	cmp	r0, #0
 800545c:	d113      	bne.n	8005486 <CheckSnippetCondition+0x76>
			
		default:
			break;
	}
	
	return false;
 800545e:	2000      	movs	r0, #0
}
 8005460:	b003      	add	sp, #12
 8005462:	bd30      	pop	{r4, r5, pc}
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8005464:	79a2      	ldrb	r2, [r4, #6]
 8005466:	00d3      	lsls	r3, r2, #3
 8005468:	189b      	adds	r3, r3, r2
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <CheckSnippetCondition+0xc8>)
 800546c:	5c98      	ldrb	r0, [r3, r2]
 800546e:	79e3      	ldrb	r3, [r4, #7]
 8005470:	1ac0      	subs	r0, r0, r3
 8005472:	4243      	negs	r3, r0
 8005474:	4158      	adcs	r0, r3
 8005476:	b2c0      	uxtb	r0, r0
 8005478:	e7f2      	b.n	8005460 <CheckSnippetCondition+0x50>
					if(flt1 != flt2 && flt1 != 0.0f)
 800547a:	9801      	ldr	r0, [sp, #4]
 800547c:	1c29      	adds	r1, r5, #0
 800547e:	f7fb f827 	bl	80004d0 <__aeabi_fcmpeq>
 8005482:	2800      	cmp	r0, #0
 8005484:	d1eb      	bne.n	800545e <CheckSnippetCondition+0x4e>
 8005486:	2100      	movs	r1, #0
 8005488:	1c28      	adds	r0, r5, #0
 800548a:	f7fb f821 	bl	80004d0 <__aeabi_fcmpeq>
 800548e:	4243      	negs	r3, r0
 8005490:	4158      	adcs	r0, r3
 8005492:	e7e5      	b.n	8005460 <CheckSnippetCondition+0x50>
					if(flt1 == flt2)
 8005494:	9801      	ldr	r0, [sp, #4]
 8005496:	1c29      	adds	r1, r5, #0
 8005498:	f7fb f81a 	bl	80004d0 <__aeabi_fcmpeq>
 800549c:	1e43      	subs	r3, r0, #1
 800549e:	4198      	sbcs	r0, r3
 80054a0:	e7de      	b.n	8005460 <CheckSnippetCondition+0x50>
					if(flt1 > flt2)
 80054a2:	9801      	ldr	r0, [sp, #4]
 80054a4:	1c29      	adds	r1, r5, #0
 80054a6:	f7fb f819 	bl	80004dc <__aeabi_fcmplt>
 80054aa:	1e43      	subs	r3, r0, #1
 80054ac:	4198      	sbcs	r0, r3
 80054ae:	e7d7      	b.n	8005460 <CheckSnippetCondition+0x50>
					if(flt1 >= flt2)
 80054b0:	9801      	ldr	r0, [sp, #4]
 80054b2:	1c29      	adds	r1, r5, #0
 80054b4:	f7fb f81c 	bl	80004f0 <__aeabi_fcmple>
 80054b8:	1e43      	subs	r3, r0, #1
 80054ba:	4198      	sbcs	r0, r3
 80054bc:	e7d0      	b.n	8005460 <CheckSnippetCondition+0x50>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80054be:	9801      	ldr	r0, [sp, #4]
 80054c0:	1c29      	adds	r1, r5, #0
 80054c2:	f7fb f829 	bl	8000518 <__aeabi_fcmpge>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d0c9      	beq.n	800545e <CheckSnippetCondition+0x4e>
 80054ca:	e7dc      	b.n	8005486 <CheckSnippetCondition+0x76>
 80054cc:	200017ac 	.word	0x200017ac
 80054d0:	20000098 	.word	0x20000098
 80054d4:	08019440 	.word	0x08019440
 80054d8:	2000283c 	.word	0x2000283c

080054dc <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	46de      	mov	lr, fp
 80054e0:	464e      	mov	r6, r9
 80054e2:	4645      	mov	r5, r8
 80054e4:	4657      	mov	r7, sl
 80054e6:	b5e0      	push	{r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80054e8:	f008 fc40 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80054ec:	4b23      	ldr	r3, [pc, #140]	; (800557c <ExecuteSnippet+0xa0>)
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80054ee:	0006      	movs	r6, r0
	for(s =0; s < numOfRecordedSnippets; s++){
 80054f0:	4698      	mov	r8, r3
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03a      	beq.n	800556e <ExecuteSnippet+0x92>
 80054f8:	4643      	mov	r3, r8
 80054fa:	1d1d      	adds	r5, r3, #4
		if(snippets[s].state)								// Check for activated Snippets
		{
			if(CheckSnippetCondition(s))				// Process Snippet condition
			{
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <ExecuteSnippet+0xa4>)
 80054fe:	4f21      	ldr	r7, [pc, #132]	; (8005584 <ExecuteSnippet+0xa8>)
 8005500:	469b      	mov	fp, r3
 8005502:	2320      	movs	r3, #32
 8005504:	469a      	mov	sl, r3
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <ExecuteSnippet+0xac>)
	for(s =0; s < numOfRecordedSnippets; s++){
 8005508:	2400      	movs	r4, #0
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800550a:	4699      	mov	r9, r3
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800550c:	3730      	adds	r7, #48	; 0x30
 800550e:	e006      	b.n	800551e <ExecuteSnippet+0x42>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005510:	4643      	mov	r3, r8
 8005512:	3401      	adds	r4, #1
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	b2a4      	uxth	r4, r4
 8005518:	3514      	adds	r5, #20
 800551a:	42a3      	cmp	r3, r4
 800551c:	d927      	bls.n	800556e <ExecuteSnippet+0x92>
		if(snippets[s].state)								// Check for activated Snippets
 800551e:	7c2b      	ldrb	r3, [r5, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f5      	beq.n	8005510 <ExecuteSnippet+0x34>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005524:	b2e0      	uxtb	r0, r4
 8005526:	f7ff ff73 	bl	8005410 <CheckSnippetCondition>
 800552a:	2800      	cmp	r0, #0
 800552c:	d0f0      	beq.n	8005510 <ExecuteSnippet+0x34>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800552e:	465b      	mov	r3, fp
 8005530:	4652      	mov	r2, sl
 8005532:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005534:	e00e      	b.n	8005554 <ExecuteSnippet+0x78>
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005536:	464b      	mov	r3, r9
 8005538:	003a      	movs	r2, r7
 800553a:	2100      	movs	r1, #0
 800553c:	7818      	ldrb	r0, [r3, #0]
 800553e:	0033      	movs	r3, r6
 8005540:	f7ff fc24 	bl	8004d8c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005544:	0030      	movs	r0, r6
 8005546:	f7fa fde7 	bl	8000118 <strlen>
 800554a:	2100      	movs	r1, #0
 800554c:	0002      	movs	r2, r0
 800554e:	0030      	movs	r0, r6
 8005550:	f00d fe25 	bl	801319e <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005554:	0039      	movs	r1, r7
 8005556:	68e8      	ldr	r0, [r5, #12]
 8005558:	f7ff ff20 	bl	800539c <ParseSnippetCommand>
 800555c:	2800      	cmp	r0, #0
 800555e:	d1ea      	bne.n	8005536 <ExecuteSnippet+0x5a>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005560:	4643      	mov	r3, r8
 8005562:	3401      	adds	r4, #1
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	b2a4      	uxth	r4, r4
 8005568:	3514      	adds	r5, #20
 800556a:	42a3      	cmp	r3, r4
 800556c:	d8d7      	bhi.n	800551e <ExecuteSnippet+0x42>
			}
		}
	}
	
	return result;
}
 800556e:	2000      	movs	r0, #0
 8005570:	bcf0      	pop	{r4, r5, r6, r7}
 8005572:	46bb      	mov	fp, r7
 8005574:	46b2      	mov	sl, r6
 8005576:	46a9      	mov	r9, r5
 8005578:	46a0      	mov	r8, r4
 800557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800557c:	200017ac 	.word	0x200017ac
 8005580:	20000b4c 	.word	0x20000b4c
 8005584:	200018ac 	.word	0x200018ac
 8005588:	20000c60 	.word	0x20000c60

0800558c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800558c:	2000      	movs	r0, #0
 800558e:	4770      	bx	lr

08005590 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <resetCommand+0x14>)
 8005596:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <resetCommand+0x18>)
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	e7fd      	b.n	800559e <resetCommand+0xe>
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	e000ed00 	.word	0xe000ed00
 80055a8:	05fa0004 	.word	0x05fa0004

080055ac <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80055b0:	2300      	movs	r3, #0
static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b2:	b082      	sub	sp, #8
 80055b4:	0005      	movs	r5, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055b6:	466a      	mov	r2, sp
 80055b8:	2101      	movs	r1, #1
 80055ba:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0;
 80055bc:	9300      	str	r3, [sp, #0]
	portBASE_TYPE xParameterStringLength2 =0;
 80055be:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c0:	f008 fbd8 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80055c4:	2300      	movs	r3, #0
 80055c6:	56c3      	ldrsb	r3, [r0, r3]
 80055c8:	2b70      	cmp	r3, #112	; 0x70
 80055ca:	d00e      	beq.n	80055ea <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055cc:	2102      	movs	r1, #2
 80055ce:	aa01      	add	r2, sp, #4
 80055d0:	0020      	movs	r0, r4
 80055d2:	f008 fbcf 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80055d6:	f00d fb1a 	bl	8012c0e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80055da:	2213      	movs	r2, #19
 80055dc:	0028      	movs	r0, r5
 80055de:	490f      	ldr	r1, [pc, #60]	; (800561c <setBaudrateCommand+0x70>)
 80055e0:	f00d fdd4 	bl	801318c <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 80055e4:	2000      	movs	r0, #0
 80055e6:	b002      	add	sp, #8
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055ea:	3001      	adds	r0, #1
 80055ec:	f00d fb0f 	bl	8012c0e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055f0:	aa01      	add	r2, sp, #4
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055f2:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055f4:	2102      	movs	r1, #2
 80055f6:	0020      	movs	r0, r4
 80055f8:	f008 fbbc 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80055fc:	f00d fb07 	bl	8012c0e <atol>
 8005600:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 8005602:	b2f0      	uxtb	r0, r6
 8005604:	0021      	movs	r1, r4
 8005606:	f008 f87f 	bl	800d708 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800560a:	23ff      	movs	r3, #255	; 0xff
 800560c:	0022      	movs	r2, r4
 800560e:	0028      	movs	r0, r5
 8005610:	4903      	ldr	r1, [pc, #12]	; (8005620 <setBaudrateCommand+0x74>)
 8005612:	4033      	ands	r3, r6
 8005614:	f00d ffb4 	bl	8013580 <sprintf>
 8005618:	e7e4      	b.n	80055e4 <setBaudrateCommand+0x38>
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	0801a5e8 	.word	0x0801a5e8
 8005620:	0801a5c0 	.word	0x0801a5c0

08005624 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005624:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005626:	4b03      	ldr	r3, [pc, #12]	; (8005634 <flashsizeCommand+0x10>)
 8005628:	4903      	ldr	r1, [pc, #12]	; (8005638 <flashsizeCommand+0x14>)
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	f00d ffa8 	bl	8013580 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005630:	2000      	movs	r0, #0
 8005632:	bd10      	pop	{r4, pc}
 8005634:	1ffff7cc 	.word	0x1ffff7cc
 8005638:	0801a5fc 	.word	0x0801a5fc

0800563c <GetReadPrecentageCommand>:
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 800563c:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800563e:	b510      	push	{r4, lr}
 8005640:	b082      	sub	sp, #8
	portBASE_TYPE xParameterStringLength1 =0;
 8005642:	9300      	str	r3, [sp, #0]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005644:	2300      	movs	r3, #0
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005646:	0004      	movs	r4, r0
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005648:	2101      	movs	r1, #1
static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800564a:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800564c:	466a      	mov	r2, sp
	float ADC_Value_CLI =0;
 800564e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005650:	f008 fb90 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005654:	7803      	ldrb	r3, [r0, #0]
 8005656:	3b32      	subs	r3, #50	; 0x32
 8005658:	2b01      	cmp	r3, #1
 800565a:	d907      	bls.n	800566c <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800565c:	2215      	movs	r2, #21
 800565e:	0020      	movs	r0, r4
 8005660:	490a      	ldr	r1, [pc, #40]	; (800568c <GetReadPrecentageCommand+0x50>)
 8005662:	f00d fd93 	bl	801318c <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005666:	2000      	movs	r0, #0
 8005668:	b002      	add	sp, #8
 800566a:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800566c:	f00d facf 	bl	8012c0e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005670:	a901      	add	r1, sp, #4
 8005672:	b2c0      	uxtb	r0, r0
 8005674:	f006 fe94 	bl	800c3a0 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005678:	9801      	ldr	r0, [sp, #4]
 800567a:	f7fd fac5 	bl	8002c08 <__aeabi_f2d>
 800567e:	0002      	movs	r2, r0
 8005680:	000b      	movs	r3, r1
 8005682:	0020      	movs	r0, r4
 8005684:	4902      	ldr	r1, [pc, #8]	; (8005690 <GetReadPrecentageCommand+0x54>)
 8005686:	f00d ff7b 	bl	8013580 <sprintf>
 800568a:	e7ec      	b.n	8005666 <GetReadPrecentageCommand+0x2a>
 800568c:	0801a640 	.word	0x0801a640
 8005690:	0801a61c 	.word	0x0801a61c

08005694 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005694:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005696:	2300      	movs	r3, #0
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005698:	0004      	movs	r4, r0
 800569a:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800569c:	4668      	mov	r0, sp
 800569e:	a901      	add	r1, sp, #4
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056a4:	f006 fdb0 	bl	800c208 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056a8:	4669      	mov	r1, sp
 80056aa:	0020      	movs	r0, r4
 80056ac:	f00d ffa3 	bl	80135f6 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	f7fd faa9 	bl	8002c08 <__aeabi_f2d>
 80056b6:	0002      	movs	r2, r0
 80056b8:	000b      	movs	r3, r1
 80056ba:	0020      	movs	r0, r4
 80056bc:	4902      	ldr	r1, [pc, #8]	; (80056c8 <ReadVrefCommand+0x34>)
 80056be:	f00d ff5f 	bl	8013580 <sprintf>
}
 80056c2:	2000      	movs	r0, #0
 80056c4:	b002      	add	sp, #8
 80056c6:	bd10      	pop	{r4, pc}
 80056c8:	0801a658 	.word	0x0801a658

080056cc <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056cc:	b510      	push	{r4, lr}
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056ce:	2300      	movs	r3, #0
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056d0:	0004      	movs	r4, r0
 80056d2:	b082      	sub	sp, #8
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056d4:	4668      	mov	r0, sp
 80056d6:	a901      	add	r1, sp, #4
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	9301      	str	r3, [sp, #4]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056dc:	f006 fd94 	bl	800c208 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056e0:	4669      	mov	r1, sp
 80056e2:	0020      	movs	r0, r4
 80056e4:	f00d ff87 	bl	80135f6 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80056e8:	9800      	ldr	r0, [sp, #0]
 80056ea:	f7fd fa8d 	bl	8002c08 <__aeabi_f2d>
 80056ee:	0002      	movs	r2, r0
 80056f0:	000b      	movs	r3, r1
 80056f2:	0020      	movs	r0, r4
 80056f4:	4902      	ldr	r1, [pc, #8]	; (8005700 <ReadTempCommand+0x34>)
 80056f6:	f00d ff43 	bl	8013580 <sprintf>
}
 80056fa:	2000      	movs	r0, #0
 80056fc:	b002      	add	sp, #8
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	0801a680 	.word	0x0801a680

08005704 <ADCReadCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005704:	2300      	movs	r3, #0
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005708:	0014      	movs	r4, r2
 800570a:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 800570c:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800570e:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005710:	2300      	movs	r3, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005712:	2101      	movs	r1, #1
 8005714:	aa01      	add	r2, sp, #4
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005716:	0006      	movs	r6, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005718:	0020      	movs	r0, r4
	float ADC_Value_CLI =0;
 800571a:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800571c:	f008 fb2a 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 8005720:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005722:	2102      	movs	r1, #2
 8005724:	0020      	movs	r0, r4
 8005726:	aa02      	add	r2, sp, #8
 8005728:	f008 fb24 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800572c:	782b      	ldrb	r3, [r5, #0]
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800572e:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005730:	3b32      	subs	r3, #50	; 0x32
 8005732:	2b01      	cmp	r3, #1
 8005734:	d907      	bls.n	8005746 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005736:	2215      	movs	r2, #21
 8005738:	0030      	movs	r0, r6
 800573a:	4919      	ldr	r1, [pc, #100]	; (80057a0 <ADCReadCommand+0x9c>)
 800573c:	f00d fd26 	bl	801318c <memcpy>
}
 8005740:	2000      	movs	r0, #0
 8005742:	b005      	add	sp, #20
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005746:	0028      	movs	r0, r5
 8005748:	f00d fa61 	bl	8012c0e <atol>
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800574c:	4f15      	ldr	r7, [pc, #84]	; (80057a4 <ADCReadCommand+0xa0>)
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 800574e:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 8005750:	0039      	movs	r1, r7
 8005752:	0020      	movs	r0, r4
 8005754:	f7fa fcd6 	bl	8000104 <strcmp>
 8005758:	2800      	cmp	r0, #0
 800575a:	d005      	beq.n	8005768 <ADCReadCommand+0x64>
 800575c:	0020      	movs	r0, r4
 800575e:	4912      	ldr	r1, [pc, #72]	; (80057a8 <ADCReadCommand+0xa4>)
 8005760:	f7fa fcd0 	bl	8000104 <strcmp>
 8005764:	2800      	cmp	r0, #0
 8005766:	d115      	bne.n	8005794 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005768:	0039      	movs	r1, r7
 800576a:	0028      	movs	r0, r5
 800576c:	f006 ff0c 	bl	800c588 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005770:	aa03      	add	r2, sp, #12
 8005772:	0039      	movs	r1, r7
 8005774:	0028      	movs	r0, r5
 8005776:	f006 ff55 	bl	800c624 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800577a:	a903      	add	r1, sp, #12
 800577c:	0030      	movs	r0, r6
 800577e:	f00d ff3a 	bl	80135f6 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005782:	9803      	ldr	r0, [sp, #12]
 8005784:	f7fa ff20 	bl	80005c8 <__aeabi_f2uiz>
 8005788:	4908      	ldr	r1, [pc, #32]	; (80057ac <ADCReadCommand+0xa8>)
 800578a:	b282      	uxth	r2, r0
 800578c:	0030      	movs	r0, r6
 800578e:	f00d fef7 	bl	8013580 <sprintf>
 8005792:	e7d5      	b.n	8005740 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005794:	2212      	movs	r2, #18
 8005796:	0030      	movs	r0, r6
 8005798:	4905      	ldr	r1, [pc, #20]	; (80057b0 <ADCReadCommand+0xac>)
 800579a:	f00d fcf7 	bl	801318c <memcpy>
 800579e:	e7cf      	b.n	8005740 <ADCReadCommand+0x3c>
 80057a0:	0801a640 	.word	0x0801a640
 80057a4:	0801a6a4 	.word	0x0801a6a4
 80057a8:	0801a6a8 	.word	0x0801a6a8
 80057ac:	0801a6b0 	.word	0x0801a6b0
 80057b0:	0801a6c0 	.word	0x0801a6c0

080057b4 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b6:	46de      	mov	lr, fp
 80057b8:	4657      	mov	r7, sl
 80057ba:	4645      	mov	r5, r8
 80057bc:	464e      	mov	r6, r9
	portBASE_TYPE xParameterStringLength1 =0;
 80057be:	2300      	movs	r3, #0
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c0:	b5e0      	push	{r5, r6, r7, lr}
 80057c2:	b085      	sub	sp, #20
	portBASE_TYPE xParameterStringLength1 =0;
 80057c4:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80057c6:	4b5d      	ldr	r3, [pc, #372]	; (800593c <testportCommand+0x188>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057c8:	2101      	movs	r1, #1
	char WriteVaule[1] ="H";
 80057ca:	781b      	ldrb	r3, [r3, #0]
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057cc:	4680      	mov	r8, r0
	char WriteVaule[1] ="H";
 80057ce:	af02      	add	r7, sp, #8
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057d0:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057d2:	aa03      	add	r2, sp, #12
	char WriteVaule[1] ="H";
 80057d4:	703b      	strb	r3, [r7, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057d6:	f008 facd 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057da:	4959      	ldr	r1, [pc, #356]	; (8005940 <testportCommand+0x18c>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057dc:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057de:	f7fa fc91 	bl	8000104 <strcmp>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d15f      	bne.n	80058a6 <testportCommand+0xf2>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80057e6:	2401      	movs	r4, #1
 80057e8:	4d56      	ldr	r5, [pc, #344]	; (8005944 <testportCommand+0x190>)
 80057ea:	4a57      	ldr	r2, [pc, #348]	; (8005948 <testportCommand+0x194>)
 80057ec:	782b      	ldrb	r3, [r5, #0]
 80057ee:	18d2      	adds	r2, r2, r3
 80057f0:	3a01      	subs	r2, #1
 80057f2:	7816      	ldrb	r6, [r2, #0]
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80057f4:	4a55      	ldr	r2, [pc, #340]	; (800594c <testportCommand+0x198>)
 80057f6:	4691      	mov	r9, r2
 80057f8:	b2e2      	uxtb	r2, r4
 80057fa:	4692      	mov	sl, r2
			if(PcPort != ports){
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d107      	bne.n	8005810 <testportCommand+0x5c>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005800:	3401      	adds	r4, #1
 8005802:	2c06      	cmp	r4, #6
 8005804:	d047      	beq.n	8005896 <testportCommand+0xe2>
			if(PcPort != ports){
 8005806:	782b      	ldrb	r3, [r5, #0]
 8005808:	b2e2      	uxtb	r2, r4
 800580a:	4692      	mov	sl, r2
 800580c:	4293      	cmp	r3, r2
 800580e:	d0f7      	beq.n	8005800 <testportCommand+0x4c>
				WriteVaule[0] =rand();
 8005810:	f00d fcde 	bl	80131d0 <rand>
				writePxMutex(ports,WriteVaule,1,10,100);
 8005814:	2364      	movs	r3, #100	; 0x64
 8005816:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 8005818:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800581a:	0039      	movs	r1, r7
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	469b      	mov	fp, r3
 8005820:	4650      	mov	r0, sl
 8005822:	3b5a      	subs	r3, #90	; 0x5a
 8005824:	f007 ff1a 	bl	800d65c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005828:	4650      	mov	r0, sl
 800582a:	f007 ff7f 	bl	800d72c <GetUart>
 800582e:	6803      	ldr	r3, [r0, #0]
				if(WriteVaule[0] == ReadValue[0])
 8005830:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005834:	b2db      	uxtb	r3, r3
 8005836:	429a      	cmp	r2, r3
 8005838:	d03f      	beq.n	80058ba <testportCommand+0x106>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800583a:	0022      	movs	r2, r4
 800583c:	4944      	ldr	r1, [pc, #272]	; (8005950 <testportCommand+0x19c>)
 800583e:	4640      	mov	r0, r8
 8005840:	f00d fe9e 	bl	8013580 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005844:	4640      	mov	r0, r8
 8005846:	f7fa fc67 	bl	8000118 <strlen>
 800584a:	465b      	mov	r3, fp
 800584c:	b282      	uxth	r2, r0
 800584e:	4641      	mov	r1, r8
 8005850:	7828      	ldrb	r0, [r5, #0]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	230a      	movs	r3, #10
 8005856:	f007 ff01 	bl	800d65c <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800585a:	2254      	movs	r2, #84	; 0x54
 800585c:	493d      	ldr	r1, [pc, #244]	; (8005954 <testportCommand+0x1a0>)
 800585e:	4640      	mov	r0, r8
 8005860:	f00d fc94 	bl	801318c <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005864:	2364      	movs	r3, #100	; 0x64
 8005866:	7828      	ldrb	r0, [r5, #0]
 8005868:	2253      	movs	r2, #83	; 0x53
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4641      	mov	r1, r8
 800586e:	3b5a      	subs	r3, #90	; 0x5a
 8005870:	f007 fef4 	bl	800d65c <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005874:	3601      	adds	r6, #1
 8005876:	e002      	b.n	800587e <testportCommand+0xca>
					Delay_ms(1);
 8005878:	2001      	movs	r0, #1
 800587a:	f009 ffa1 	bl	800f7c0 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800587e:	782a      	ldrb	r2, [r5, #0]
 8005880:	3a01      	subs	r2, #1
 8005882:	0053      	lsls	r3, r2, #1
 8005884:	189b      	adds	r3, r3, r2
 8005886:	019b      	lsls	r3, r3, #6
 8005888:	444b      	add	r3, r9
 800588a:	5d9b      	ldrb	r3, [r3, r6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f3      	beq.n	8005878 <testportCommand+0xc4>
		for(ports =1; ports <= NumOfPorts; ports++){
 8005890:	3401      	adds	r4, #1
 8005892:	2c06      	cmp	r4, #6
 8005894:	d1b7      	bne.n	8005806 <testportCommand+0x52>
}
 8005896:	2000      	movs	r0, #0
 8005898:	b005      	add	sp, #20
 800589a:	bcf0      	pop	{r4, r5, r6, r7}
 800589c:	46bb      	mov	fp, r7
 800589e:	46b2      	mov	sl, r6
 80058a0:	46a9      	mov	r9, r5
 80058a2:	46a0      	mov	r8, r4
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(pcParameterString1[0] == 'p'){
 80058a6:	2300      	movs	r3, #0
 80058a8:	56e3      	ldrsb	r3, [r4, r3]
 80058aa:	2b70      	cmp	r3, #112	; 0x70
 80058ac:	d016      	beq.n	80058dc <testportCommand+0x128>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058ae:	220f      	movs	r2, #15
 80058b0:	4640      	mov	r0, r8
 80058b2:	4929      	ldr	r1, [pc, #164]	; (8005958 <testportCommand+0x1a4>)
 80058b4:	f00d fc6a 	bl	801318c <memcpy>
 80058b8:	e7ed      	b.n	8005896 <testportCommand+0xe2>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80058ba:	0022      	movs	r2, r4
 80058bc:	4927      	ldr	r1, [pc, #156]	; (800595c <testportCommand+0x1a8>)
 80058be:	4640      	mov	r0, r8
 80058c0:	f00d fe5e 	bl	8013580 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80058c4:	4640      	mov	r0, r8
 80058c6:	f7fa fc27 	bl	8000118 <strlen>
 80058ca:	465b      	mov	r3, fp
 80058cc:	b282      	uxth	r2, r0
 80058ce:	4641      	mov	r1, r8
 80058d0:	7828      	ldrb	r0, [r5, #0]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	3b5a      	subs	r3, #90	; 0x5a
 80058d6:	f007 fec1 	bl	800d65c <writePxMutex>
 80058da:	e7be      	b.n	800585a <testportCommand+0xa6>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058dc:	1c60      	adds	r0, r4, #1
 80058de:	f00d f996 	bl	8012c0e <atol>
 80058e2:	b2c5      	uxtb	r5, r0
		if(portt > 0 && portt <= NumOfPorts){
 80058e4:	1e6b      	subs	r3, r5, #1
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058e6:	0004      	movs	r4, r0
		if(portt > 0 && portt <= NumOfPorts){
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d905      	bls.n	80058f8 <testportCommand+0x144>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80058ec:	221b      	movs	r2, #27
 80058ee:	4640      	mov	r0, r8
 80058f0:	491b      	ldr	r1, [pc, #108]	; (8005960 <testportCommand+0x1ac>)
 80058f2:	f00d fc4b 	bl	801318c <memcpy>
 80058f6:	e7ce      	b.n	8005896 <testportCommand+0xe2>
				WriteVaule[0] =rand();
 80058f8:	f00d fc6a 	bl	80131d0 <rand>
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058fc:	2364      	movs	r3, #100	; 0x64
 80058fe:	2201      	movs	r2, #1
				WriteVaule[0] =rand();
 8005900:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005902:	0039      	movs	r1, r7
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	0028      	movs	r0, r5
 8005908:	3b32      	subs	r3, #50	; 0x32
 800590a:	f007 fea7 	bl	800d65c <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800590e:	2000      	movs	r0, #0
 8005910:	f007 ff0c 	bl	800d72c <GetUart>
 8005914:	6803      	ldr	r3, [r0, #0]
			if(WriteVaule[0] == ReadValue[0])
 8005916:	783a      	ldrb	r2, [r7, #0]
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 800591a:	b2db      	uxtb	r3, r3
 800591c:	429a      	cmp	r2, r3
 800591e:	d006      	beq.n	800592e <testportCommand+0x17a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005920:	22ff      	movs	r2, #255	; 0xff
 8005922:	4640      	mov	r0, r8
 8005924:	490a      	ldr	r1, [pc, #40]	; (8005950 <testportCommand+0x19c>)
 8005926:	4022      	ands	r2, r4
 8005928:	f00d fe2a 	bl	8013580 <sprintf>
 800592c:	e7b3      	b.n	8005896 <testportCommand+0xe2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 800592e:	22ff      	movs	r2, #255	; 0xff
 8005930:	4640      	mov	r0, r8
 8005932:	490a      	ldr	r1, [pc, #40]	; (800595c <testportCommand+0x1a8>)
 8005934:	4022      	ands	r2, r4
 8005936:	f00d fe23 	bl	8013580 <sprintf>
 800593a:	e7ac      	b.n	8005896 <testportCommand+0xe2>
 800593c:	0801a784 	.word	0x0801a784
 8005940:	08019c48 	.word	0x08019c48
 8005944:	20000c60 	.word	0x20000c60
 8005948:	200019d0 	.word	0x200019d0
 800594c:	20001a10 	.word	0x20001a10
 8005950:	0801a6f0 	.word	0x0801a6f0
 8005954:	0801a704 	.word	0x0801a704
 8005958:	0801a774 	.word	0x0801a774
 800595c:	0801a6d4 	.word	0x0801a6d4
 8005960:	0801a758 	.word	0x0801a758

08005964 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005968:	2300      	movs	r3, #0
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800596a:	b082      	sub	sp, #8
 800596c:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800596e:	466a      	mov	r2, sp
 8005970:	2101      	movs	r1, #1
 8005972:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005978:	f008 f9fc 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800597c:	2300      	movs	r3, #0
 800597e:	56c3      	ldrsb	r3, [r0, r3]
 8005980:	2b70      	cmp	r3, #112	; 0x70
 8005982:	d010      	beq.n	80059a6 <unbridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005984:	2102      	movs	r1, #2
 8005986:	0020      	movs	r0, r4
 8005988:	aa01      	add	r2, sp, #4
 800598a:	f008 f9f3 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800598e:	2300      	movs	r3, #0
 8005990:	56c3      	ldrsb	r3, [r0, r3]
 8005992:	2b70      	cmp	r3, #112	; 0x70
 8005994:	d02f      	beq.n	80059f6 <unbridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005996:	220f      	movs	r2, #15
 8005998:	0028      	movs	r0, r5
 800599a:	4919      	ldr	r1, [pc, #100]	; (8005a00 <unbridgeCommand+0x9c>)
 800599c:	f00d fbf6 	bl	801318c <memcpy>
}
 80059a0:	2000      	movs	r0, #0
 80059a2:	b002      	add	sp, #8
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059a6:	3001      	adds	r0, #1
 80059a8:	f00d f931 	bl	8012c0e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059ac:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059ae:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059b0:	aa01      	add	r2, sp, #4
 80059b2:	0020      	movs	r0, r4
 80059b4:	f008 f9de 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059b8:	2300      	movs	r3, #0
 80059ba:	56c3      	ldrsb	r3, [r0, r3]
 80059bc:	2b70      	cmp	r3, #112	; 0x70
 80059be:	d1ea      	bne.n	8005996 <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059c0:	3001      	adds	r0, #1
 80059c2:	f00d f924 	bl	8012c0e <atol>
 80059c6:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 80059c8:	b2c1      	uxtb	r1, r0
 80059ca:	b2f0      	uxtb	r0, r6
 80059cc:	f7fe ff6c 	bl	80048a8 <Unbridge>
	if(result == BOS_OK)
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d108      	bne.n	80059e6 <unbridgeCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80059d4:	22ff      	movs	r2, #255	; 0xff
 80059d6:	0023      	movs	r3, r4
 80059d8:	0028      	movs	r0, r5
 80059da:	4013      	ands	r3, r2
 80059dc:	4909      	ldr	r1, [pc, #36]	; (8005a04 <unbridgeCommand+0xa0>)
 80059de:	4032      	ands	r2, r6
 80059e0:	f00d fdce 	bl	8013580 <sprintf>
 80059e4:	e7dc      	b.n	80059a0 <unbridgeCommand+0x3c>
	else if(result == BOS_ERR_WrongParam)
 80059e6:	2867      	cmp	r0, #103	; 0x67
 80059e8:	d0d5      	beq.n	8005996 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80059ea:	2219      	movs	r2, #25
 80059ec:	0028      	movs	r0, r5
 80059ee:	4906      	ldr	r1, [pc, #24]	; (8005a08 <unbridgeCommand+0xa4>)
 80059f0:	f00d fbcc 	bl	801318c <memcpy>
	return pdFALSE;
 80059f4:	e7d4      	b.n	80059a0 <unbridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059f6:	3001      	adds	r0, #1
 80059f8:	f00d f909 	bl	8012c0e <atol>
	else if(result == BOS_ERR_WrongParam)
 80059fc:	e7cb      	b.n	8005996 <unbridgeCommand+0x32>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	0801a774 	.word	0x0801a774
 8005a04:	0801a788 	.word	0x0801a788
 8005a08:	0801a7a8 	.word	0x0801a7a8

08005a0c <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a10:	2300      	movs	r3, #0
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a12:	b082      	sub	sp, #8
 8005a14:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a16:	466a      	mov	r2, sp
 8005a18:	2101      	movs	r1, #1
 8005a1a:	0020      	movs	r0, r4
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a20:	f008 f9a8 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a24:	2300      	movs	r3, #0
 8005a26:	56c3      	ldrsb	r3, [r0, r3]
 8005a28:	2b70      	cmp	r3, #112	; 0x70
 8005a2a:	d010      	beq.n	8005a4e <bridgeCommand+0x42>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	0020      	movs	r0, r4
 8005a30:	aa01      	add	r2, sp, #4
 8005a32:	f008 f99f 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a36:	2300      	movs	r3, #0
 8005a38:	56c3      	ldrsb	r3, [r0, r3]
 8005a3a:	2b70      	cmp	r3, #112	; 0x70
 8005a3c:	d02f      	beq.n	8005a9e <bridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a3e:	220f      	movs	r2, #15
 8005a40:	0028      	movs	r0, r5
 8005a42:	4919      	ldr	r1, [pc, #100]	; (8005aa8 <bridgeCommand+0x9c>)
 8005a44:	f00d fba2 	bl	801318c <memcpy>
}
 8005a48:	2000      	movs	r0, #0
 8005a4a:	b002      	add	sp, #8
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f00d f8dd 	bl	8012c0e <atol>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a54:	2102      	movs	r1, #2
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a56:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a58:	aa01      	add	r2, sp, #4
 8005a5a:	0020      	movs	r0, r4
 8005a5c:	f008 f98a 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a60:	2300      	movs	r3, #0
 8005a62:	56c3      	ldrsb	r3, [r0, r3]
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d1ea      	bne.n	8005a3e <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f00d f8d0 	bl	8012c0e <atol>
 8005a6e:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005a70:	b2c1      	uxtb	r1, r0
 8005a72:	b2f0      	uxtb	r0, r6
 8005a74:	f7fe ff04 	bl	8004880 <Bridge>
	if(result == BOS_OK)
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d108      	bne.n	8005a8e <bridgeCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	0023      	movs	r3, r4
 8005a80:	0028      	movs	r0, r5
 8005a82:	4013      	ands	r3, r2
 8005a84:	4909      	ldr	r1, [pc, #36]	; (8005aac <bridgeCommand+0xa0>)
 8005a86:	4032      	ands	r2, r6
 8005a88:	f00d fd7a 	bl	8013580 <sprintf>
 8005a8c:	e7dc      	b.n	8005a48 <bridgeCommand+0x3c>
	else if(result == BOS_ERR_WrongParam)
 8005a8e:	2867      	cmp	r0, #103	; 0x67
 8005a90:	d0d5      	beq.n	8005a3e <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a92:	2217      	movs	r2, #23
 8005a94:	0028      	movs	r0, r5
 8005a96:	4906      	ldr	r1, [pc, #24]	; (8005ab0 <bridgeCommand+0xa4>)
 8005a98:	f00d fb78 	bl	801318c <memcpy>
	return pdFALSE;
 8005a9c:	e7d4      	b.n	8005a48 <bridgeCommand+0x3c>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f00d f8b5 	bl	8012c0e <atol>
	else if(result == BOS_ERR_WrongParam)
 8005aa4:	e7cb      	b.n	8005a3e <bridgeCommand+0x32>
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	0801a774 	.word	0x0801a774
 8005aac:	0801a7c4 	.word	0x0801a7c4
 8005ab0:	0801a7e8 	.word	0x0801a7e8

08005ab4 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab6:	46d6      	mov	lr, sl
 8005ab8:	4646      	mov	r6, r8
 8005aba:	464f      	mov	r7, r9
	portBASE_TYPE xParameterStringLength1 =0;
 8005abc:	2500      	movs	r5, #0
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005abe:	b5c0      	push	{r6, r7, lr}
 8005ac0:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ac2:	2101      	movs	r1, #1
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ac4:	0006      	movs	r6, r0
 8005ac6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ac8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005aca:	9501      	str	r5, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005acc:	f008 f952 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005ad0:	f00d f897 	bl	8012c02 <atoi>
 8005ad4:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	d003      	beq.n	8005ae2 <delSnipCommand+0x2e>
 8005ada:	4f2c      	ldr	r7, [pc, #176]	; (8005b8c <delSnipCommand+0xd8>)
 8005adc:	783b      	ldrb	r3, [r7, #0]
 8005ade:	42a3      	cmp	r3, r4
 8005ae0:	d20b      	bcs.n	8005afa <delSnipCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005ae2:	2223      	movs	r2, #35	; 0x23
 8005ae4:	0030      	movs	r0, r6
 8005ae6:	492a      	ldr	r1, [pc, #168]	; (8005b90 <delSnipCommand+0xdc>)
 8005ae8:	f00d fb50 	bl	801318c <memcpy>
}
 8005aec:	2000      	movs	r0, #0
 8005aee:	b002      	add	sp, #8
 8005af0:	bce0      	pop	{r5, r6, r7}
 8005af2:	46ba      	mov	sl, r7
 8005af4:	46b1      	mov	r9, r6
 8005af6:	46a8      	mov	r8, r5
 8005af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005afa:	23ff      	movs	r3, #255	; 0xff
 8005afc:	4003      	ands	r3, r0
 8005afe:	469a      	mov	sl, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	0098      	lsls	r0, r3, #2
 8005b04:	18c0      	adds	r0, r0, r3
 8005b06:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <delSnipCommand+0xe0>)
 8005b08:	0080      	lsls	r0, r0, #2
 8005b0a:	4699      	mov	r9, r3
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	44c8      	add	r8, r9
 8005b10:	4643      	mov	r3, r8
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b12:	3002      	adds	r0, #2
 8005b14:	2204      	movs	r2, #4
 8005b16:	2100      	movs	r1, #0
		snippets[index - 1].cond.conditionType =0;
 8005b18:	801d      	strh	r5, [r3, #0]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b1a:	4448      	add	r0, r9
 8005b1c:	f00d fb3f 	bl	801319e <memset>
		snippets[index - 1].state = false;
 8005b20:	4642      	mov	r2, r8
 8005b22:	2300      	movs	r3, #0
		free(snippets[index - 1].cmd);
 8005b24:	68d0      	ldr	r0, [r2, #12]
		snippets[index - 1].state = false;
 8005b26:	7413      	strb	r3, [r2, #16]
		free(snippets[index - 1].cmd);
 8005b28:	f00d f906 	bl	8012d38 <free>
		snippets[index - 1].cmd = NULL;
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	60dd      	str	r5, [r3, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b30:	783b      	ldrb	r3, [r7, #0]
 8005b32:	4698      	mov	r8, r3
 8005b34:	42a3      	cmp	r3, r4
 8005b36:	d91d      	bls.n	8005b74 <delSnipCommand+0xc0>
 8005b38:	4653      	mov	r3, sl
 8005b3a:	009d      	lsls	r5, r3, #2
 8005b3c:	4455      	add	r5, sl
 8005b3e:	00ad      	lsls	r5, r5, #2
 8005b40:	444d      	add	r5, r9
 8005b42:	e004      	b.n	8005b4e <delSnipCommand+0x9a>
 8005b44:	3401      	adds	r4, #1
 8005b46:	b2e4      	uxtb	r4, r4
 8005b48:	3514      	adds	r5, #20
 8005b4a:	45a0      	cmp	r8, r4
 8005b4c:	d012      	beq.n	8005b74 <delSnipCommand+0xc0>
			if(snippets[s].cond.conditionType){
 8005b4e:	782b      	ldrb	r3, [r5, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f7      	beq.n	8005b44 <delSnipCommand+0x90>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b54:	0028      	movs	r0, r5
 8005b56:	0029      	movs	r1, r5
 8005b58:	2214      	movs	r2, #20
 8005b5a:	3814      	subs	r0, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b5c:	3401      	adds	r4, #1
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b5e:	f00d fb15 	bl	801318c <memcpy>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b62:	b2e4      	uxtb	r4, r4
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b64:	0028      	movs	r0, r5
 8005b66:	2214      	movs	r2, #20
 8005b68:	2100      	movs	r1, #0
 8005b6a:	f00d fb18 	bl	801319e <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b6e:	3514      	adds	r5, #20
 8005b70:	45a0      	cmp	r8, r4
 8005b72:	d1ec      	bne.n	8005b4e <delSnipCommand+0x9a>
		--numOfRecordedSnippets;
 8005b74:	4643      	mov	r3, r8
 8005b76:	3b01      	subs	r3, #1
 8005b78:	703b      	strb	r3, [r7, #0]
		SaveToRO();
 8005b7a:	f004 fb71 	bl	800a260 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b7e:	2236      	movs	r2, #54	; 0x36
 8005b80:	0030      	movs	r0, r6
 8005b82:	4905      	ldr	r1, [pc, #20]	; (8005b98 <delSnipCommand+0xe4>)
 8005b84:	f00d fb02 	bl	801318c <memcpy>
 8005b88:	e7b0      	b.n	8005aec <delSnipCommand+0x38>
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	200017ac 	.word	0x200017ac
 8005b90:	0801a838 	.word	0x0801a838
 8005b94:	200017b0 	.word	0x200017b0
 8005b98:	0801a800 	.word	0x0801a800

08005b9c <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b9c:	b530      	push	{r4, r5, lr}
	portBASE_TYPE xParameterStringLength1 =0;
 8005b9e:	2500      	movs	r5, #0
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ba0:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ba2:	2101      	movs	r1, #1
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ba4:	0004      	movs	r4, r0
 8005ba6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ba8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005baa:	9501      	str	r5, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bac:	f008 f8e2 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bb0:	f00d f827 	bl	8012c02 <atoi>
 8005bb4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <pauseSnipCommand+0x26>
 8005bba:	4a0e      	ldr	r2, [pc, #56]	; (8005bf4 <pauseSnipCommand+0x58>)
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d207      	bcs.n	8005bd2 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bc2:	2223      	movs	r2, #35	; 0x23
 8005bc4:	0020      	movs	r0, r4
 8005bc6:	490c      	ldr	r1, [pc, #48]	; (8005bf8 <pauseSnipCommand+0x5c>)
 8005bc8:	f00d fae0 	bl	801318c <memcpy>
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	b003      	add	sp, #12
 8005bd0:	bd30      	pop	{r4, r5, pc}
		snippets[index - 1].state = false;
 8005bd2:	23ff      	movs	r3, #255	; 0xff
 8005bd4:	4018      	ands	r0, r3
 8005bd6:	3801      	subs	r0, #1
 8005bd8:	0083      	lsls	r3, r0, #2
 8005bda:	1818      	adds	r0, r3, r0
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <pauseSnipCommand+0x60>)
 8005bde:	0080      	lsls	r0, r0, #2
 8005be0:	1818      	adds	r0, r3, r0
 8005be2:	7405      	strb	r5, [r0, #16]
		SaveToRO();
 8005be4:	f004 fb3c 	bl	800a260 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005be8:	2235      	movs	r2, #53	; 0x35
 8005bea:	0020      	movs	r0, r4
 8005bec:	4904      	ldr	r1, [pc, #16]	; (8005c00 <pauseSnipCommand+0x64>)
 8005bee:	f00d facd 	bl	801318c <memcpy>
 8005bf2:	e7eb      	b.n	8005bcc <pauseSnipCommand+0x30>
 8005bf4:	200017ac 	.word	0x200017ac
 8005bf8:	0801a838 	.word	0x0801a838
 8005bfc:	200017b0 	.word	0x200017b0
 8005c00:	0801a85c 	.word	0x0801a85c

08005c04 <actSnipCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8005c04:	2300      	movs	r3, #0
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c06:	b510      	push	{r4, lr}
 8005c08:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c0a:	2101      	movs	r1, #1
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c0c:	0004      	movs	r4, r0
 8005c0e:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c10:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8005c12:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c14:	f008 f8ae 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c18:	f00c fff3 	bl	8012c02 <atoi>
 8005c1c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <actSnipCommand+0x26>
 8005c22:	4a0f      	ldr	r2, [pc, #60]	; (8005c60 <actSnipCommand+0x5c>)
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d207      	bcs.n	8005c3a <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c2a:	2223      	movs	r2, #35	; 0x23
 8005c2c:	0020      	movs	r0, r4
 8005c2e:	490d      	ldr	r1, [pc, #52]	; (8005c64 <actSnipCommand+0x60>)
 8005c30:	f00d faac 	bl	801318c <memcpy>
}
 8005c34:	2000      	movs	r0, #0
 8005c36:	b002      	add	sp, #8
 8005c38:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c3a:	23ff      	movs	r3, #255	; 0xff
 8005c3c:	4018      	ands	r0, r3
 8005c3e:	3801      	subs	r0, #1
 8005c40:	0083      	lsls	r3, r0, #2
 8005c42:	1818      	adds	r0, r3, r0
 8005c44:	4b08      	ldr	r3, [pc, #32]	; (8005c68 <actSnipCommand+0x64>)
 8005c46:	0080      	lsls	r0, r0, #2
 8005c48:	1818      	adds	r0, r3, r0
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c4e:	f004 fb07 	bl	800a260 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c52:	2238      	movs	r2, #56	; 0x38
 8005c54:	0020      	movs	r0, r4
 8005c56:	4905      	ldr	r1, [pc, #20]	; (8005c6c <actSnipCommand+0x68>)
 8005c58:	f00d fa98 	bl	801318c <memcpy>
 8005c5c:	e7ea      	b.n	8005c34 <actSnipCommand+0x30>
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	200017ac 	.word	0x200017ac
 8005c64:	0801a838 	.word	0x0801a838
 8005c68:	200017b0 	.word	0x200017b0
 8005c6c:	0801a894 	.word	0x0801a894

08005c70 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	46de      	mov	lr, fp
 8005c74:	4645      	mov	r5, r8
 8005c76:	4657      	mov	r7, sl
 8005c78:	464e      	mov	r6, r9
 8005c7a:	b5e0      	push	{r5, r6, r7, lr}
	char status[2][7] ={"Paused", "Active"};
 8005c7c:	4a72      	ldr	r2, [pc, #456]	; (8005e48 <snipCommand+0x1d8>)
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c7e:	b08b      	sub	sp, #44	; 0x2c
	char status[2][7] ={"Paused", "Active"};
 8005c80:	ab06      	add	r3, sp, #24
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c82:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 8005c84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005c86:	c313      	stmia	r3!, {r0, r1, r4}
 8005c88:	8812      	ldrh	r2, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c8a:	4970      	ldr	r1, [pc, #448]	; (8005e4c <snipCommand+0x1dc>)
	char status[2][7] ={"Paused", "Active"};
 8005c8c:	801a      	strh	r2, [r3, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005c8e:	4b70      	ldr	r3, [pc, #448]	; (8005e50 <snipCommand+0x1e0>)
 8005c90:	2237      	movs	r2, #55	; 0x37
 8005c92:	7818      	ldrb	r0, [r3, #0]
 8005c94:	2301      	movs	r3, #1
 8005c96:	425b      	negs	r3, r3
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	3333      	adds	r3, #51	; 0x33
 8005c9c:	f007 fcde 	bl	800d65c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005ca0:	4b6c      	ldr	r3, [pc, #432]	; (8005e54 <snipCommand+0x1e4>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d044      	beq.n	8005d32 <snipCommand+0xc2>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4699      	mov	r9, r3
 8005cac:	4c6a      	ldr	r4, [pc, #424]	; (8005e58 <snipCommand+0x1e8>)
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005cae:	4f6b      	ldr	r7, [pc, #428]	; (8005e5c <snipCommand+0x1ec>)
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	46ca      	mov	sl, r9
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	4699      	mov	r9, r3
		if(snippets[s].cond.conditionType)
 8005cba:	4653      	mov	r3, sl
 8005cbc:	009e      	lsls	r6, r3, #2
 8005cbe:	18f1      	adds	r1, r6, r3
 8005cc0:	008b      	lsls	r3, r1, #2
 8005cc2:	4698      	mov	r8, r3
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	4b66      	ldr	r3, [pc, #408]	; (8005e60 <snipCommand+0x1f0>)
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d13e      	bne.n	8005d4c <snipCommand+0xdc>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005cce:	4b64      	ldr	r3, [pc, #400]	; (8005e60 <snipCommand+0x1f0>)
 8005cd0:	4456      	add	r6, sl
 8005cd2:	469c      	mov	ip, r3
 8005cd4:	00b6      	lsls	r6, r6, #2
 8005cd6:	4466      	add	r6, ip
 8005cd8:	e00d      	b.n	8005cf6 <snipCommand+0x86>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005cda:	002a      	movs	r2, r5
 8005cdc:	0039      	movs	r1, r7
 8005cde:	0023      	movs	r3, r4
 8005ce0:	0028      	movs	r0, r5
 8005ce2:	f00d fc4d 	bl	8013580 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f7fa fa16 	bl	8000118 <strlen>
 8005cec:	2100      	movs	r1, #0
 8005cee:	0002      	movs	r2, r0
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	f00d fa54 	bl	801319e <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005cf6:	0021      	movs	r1, r4
 8005cf8:	68f0      	ldr	r0, [r6, #12]
 8005cfa:	f7ff fb4f 	bl	800539c <ParseSnippetCommand>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1eb      	bne.n	8005cda <snipCommand+0x6a>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005d02:	0028      	movs	r0, r5
 8005d04:	f7fa fa08 	bl	8000118 <strlen>
 8005d08:	220c      	movs	r2, #12
 8005d0a:	0006      	movs	r6, r0
 8005d0c:	4955      	ldr	r1, [pc, #340]	; (8005e64 <snipCommand+0x1f4>)
 8005d0e:	1828      	adds	r0, r5, r0
 8005d10:	f00d fa3c 	bl	801318c <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005d14:	4b4e      	ldr	r3, [pc, #312]	; (8005e50 <snipCommand+0x1e0>)
 8005d16:	360b      	adds	r6, #11
 8005d18:	7818      	ldrb	r0, [r3, #0]
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	425b      	negs	r3, r3
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	0029      	movs	r1, r5
 8005d22:	3333      	adds	r3, #51	; 0x33
 8005d24:	b2b2      	uxth	r2, r6
 8005d26:	f007 fc99 	bl	800d65c <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	; (8005e54 <snipCommand+0x1e4>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	454b      	cmp	r3, r9
 8005d30:	d8be      	bhi.n	8005cb0 <snipCommand+0x40>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005d32:	22b5      	movs	r2, #181	; 0xb5
 8005d34:	0028      	movs	r0, r5
 8005d36:	494c      	ldr	r1, [pc, #304]	; (8005e68 <snipCommand+0x1f8>)
 8005d38:	f00d fa28 	bl	801318c <memcpy>
}
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	b00b      	add	sp, #44	; 0x2c
 8005d40:	bcf0      	pop	{r4, r5, r6, r7}
 8005d42:	46bb      	mov	fp, r7
 8005d44:	46b2      	mov	sl, r6
 8005d46:	46a9      	mov	r9, r5
 8005d48:	46a0      	mov	r8, r4
 8005d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005d4c:	4b44      	ldr	r3, [pc, #272]	; (8005e60 <snipCommand+0x1f0>)
 8005d4e:	0028      	movs	r0, r5
 8005d50:	4443      	add	r3, r8
 8005d52:	7c1a      	ldrb	r2, [r3, #16]
 8005d54:	469b      	mov	fp, r3
 8005d56:	00d3      	lsls	r3, r2, #3
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	aa06      	add	r2, sp, #24
 8005d5c:	4694      	mov	ip, r2
 8005d5e:	4943      	ldr	r1, [pc, #268]	; (8005e6c <snipCommand+0x1fc>)
 8005d60:	464a      	mov	r2, r9
 8005d62:	4463      	add	r3, ip
 8005d64:	f00d fc0c 	bl	8013580 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <snipCommand+0x1f0>)
 8005d6c:	5c9b      	ldrb	r3, [r3, r2]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d114      	bne.n	8005d9c <snipCommand+0x12c>
				switch(snippets[s].cond.buffer1[1]){
 8005d72:	465b      	mov	r3, fp
 8005d74:	78db      	ldrb	r3, [r3, #3]
 8005d76:	2b0b      	cmp	r3, #11
 8005d78:	d83a      	bhi.n	8005df0 <snipCommand+0x180>
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d855      	bhi.n	8005e2a <snipCommand+0x1ba>
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d048      	beq.n	8005e14 <snipCommand+0x1a4>
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d1a3      	bne.n	8005cce <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d86:	465a      	mov	r2, fp
 8005d88:	465b      	mov	r3, fp
 8005d8a:	68d2      	ldr	r2, [r2, #12]
 8005d8c:	789b      	ldrb	r3, [r3, #2]
 8005d8e:	0028      	movs	r0, r5
 8005d90:	9200      	str	r2, [sp, #0]
 8005d92:	4937      	ldr	r1, [pc, #220]	; (8005e70 <snipCommand+0x200>)
 8005d94:	002a      	movs	r2, r5
 8005d96:	f00d fbf3 	bl	8013580 <sprintf>
						break;
 8005d9a:	e798      	b.n	8005cce <snipCommand+0x5e>
		switch(snippets[s].cond.conditionType){
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d196      	bne.n	8005cce <snipCommand+0x5e>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005da0:	4b2f      	ldr	r3, [pc, #188]	; (8005e60 <snipCommand+0x1f0>)
 8005da2:	4641      	mov	r1, r8
 8005da4:	469c      	mov	ip, r3
 8005da6:	3106      	adds	r1, #6
 8005da8:	4461      	add	r1, ip
 8005daa:	2204      	movs	r2, #4
 8005dac:	a805      	add	r0, sp, #20
 8005dae:	f00d f9ed 	bl	801318c <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005db2:	465b      	mov	r3, fp
 8005db4:	78da      	ldrb	r2, [r3, #3]
 8005db6:	9805      	ldr	r0, [sp, #20]
 8005db8:	3a01      	subs	r2, #1
 8005dba:	0053      	lsls	r3, r2, #1
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	4a2d      	ldr	r2, [pc, #180]	; (8005e74 <snipCommand+0x204>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	18d3      	adds	r3, r2, r3
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	4698      	mov	r8, r3
 8005dc8:	f7fc ff1e 	bl	8002c08 <__aeabi_f2d>
 8005dcc:	465b      	mov	r3, fp
 8005dce:	9002      	str	r0, [sp, #8]
 8005dd0:	9103      	str	r1, [sp, #12]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <snipCommand+0x1d8>)
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	0059      	lsls	r1, r3, #1
 8005dda:	3210      	adds	r2, #16
 8005ddc:	18cb      	adds	r3, r1, r3
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	002a      	movs	r2, r5
 8005de4:	4643      	mov	r3, r8
 8005de6:	0028      	movs	r0, r5
 8005de8:	4923      	ldr	r1, [pc, #140]	; (8005e78 <snipCommand+0x208>)
 8005dea:	f00d fbc9 	bl	8013580 <sprintf>
				break;
 8005dee:	e76e      	b.n	8005cce <snipCommand+0x5e>
 8005df0:	3b0c      	subs	r3, #12
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d900      	bls.n	8005df8 <snipCommand+0x188>
 8005df6:	e76a      	b.n	8005cce <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005df8:	465a      	mov	r2, fp
 8005dfa:	465b      	mov	r3, fp
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	789b      	ldrb	r3, [r3, #2]
 8005e00:	9201      	str	r2, [sp, #4]
 8005e02:	465a      	mov	r2, fp
 8005e04:	7912      	ldrb	r2, [r2, #4]
 8005e06:	0028      	movs	r0, r5
 8005e08:	9200      	str	r2, [sp, #0]
 8005e0a:	491c      	ldr	r1, [pc, #112]	; (8005e7c <snipCommand+0x20c>)
 8005e0c:	002a      	movs	r2, r5
 8005e0e:	f00d fbb7 	bl	8013580 <sprintf>
						break;
 8005e12:	e75c      	b.n	8005cce <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e14:	465a      	mov	r2, fp
 8005e16:	465b      	mov	r3, fp
 8005e18:	68d2      	ldr	r2, [r2, #12]
 8005e1a:	789b      	ldrb	r3, [r3, #2]
 8005e1c:	0028      	movs	r0, r5
 8005e1e:	9200      	str	r2, [sp, #0]
 8005e20:	4917      	ldr	r1, [pc, #92]	; (8005e80 <snipCommand+0x210>)
 8005e22:	002a      	movs	r2, r5
 8005e24:	f00d fbac 	bl	8013580 <sprintf>
						break;
 8005e28:	e751      	b.n	8005cce <snipCommand+0x5e>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e2a:	465a      	mov	r2, fp
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	68d2      	ldr	r2, [r2, #12]
 8005e30:	789b      	ldrb	r3, [r3, #2]
 8005e32:	9201      	str	r2, [sp, #4]
 8005e34:	465a      	mov	r2, fp
 8005e36:	7912      	ldrb	r2, [r2, #4]
 8005e38:	0028      	movs	r0, r5
 8005e3a:	9200      	str	r2, [sp, #0]
 8005e3c:	4911      	ldr	r1, [pc, #68]	; (8005e84 <snipCommand+0x214>)
 8005e3e:	002a      	movs	r2, r5
 8005e40:	f00d fb9e 	bl	8013580 <sprintf>
						break;
 8005e44:	e743      	b.n	8005cce <snipCommand+0x5e>
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	08019480 	.word	0x08019480
 8005e4c:	0801a8cc 	.word	0x0801a8cc
 8005e50:	20000c60 	.word	0x20000c60
 8005e54:	200017ac 	.word	0x200017ac
 8005e58:	20001910 	.word	0x20001910
 8005e5c:	0801a980 	.word	0x0801a980
 8005e60:	200017b0 	.word	0x200017b0
 8005e64:	0801a988 	.word	0x0801a988
 8005e68:	0801a994 	.word	0x0801a994
 8005e6c:	0801a904 	.word	0x0801a904
 8005e70:	0801a924 	.word	0x0801a924
 8005e74:	20000098 	.word	0x20000098
 8005e78:	0801a970 	.word	0x0801a970
 8005e7c:	0801a954 	.word	0x0801a954
 8005e80:	0801a910 	.word	0x0801a910
 8005e84:	0801a93c 	.word	0x0801a93c

08005e88 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005e8c:	f009 fcac 	bl	800f7e8 <HAL_GetDEVID>
	switch(dev){
 8005e90:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <idcodeCommand+0x78>)
 8005e92:	0403      	lsls	r3, r0, #16
 8005e94:	4694      	mov	ip, r2
 8005e96:	0c1b      	lsrs	r3, r3, #16
 8005e98:	4463      	add	r3, ip
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d803      	bhi.n	8005ea6 <idcodeCommand+0x1e>
 8005e9e:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <idcodeCommand+0x7c>)
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	58d3      	ldr	r3, [r2, r3]
 8005ea4:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005ea6:	0020      	movs	r0, r4
 8005ea8:	4a17      	ldr	r2, [pc, #92]	; (8005f08 <idcodeCommand+0x80>)
 8005eaa:	4918      	ldr	r1, [pc, #96]	; (8005f0c <idcodeCommand+0x84>)
 8005eac:	f00d fb68 	bl	8013580 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005eb0:	f009 fc94 	bl	800f7dc <HAL_GetREVID>
 8005eb4:	0022      	movs	r2, r4
 8005eb6:	0b03      	lsrs	r3, r0, #12
 8005eb8:	4915      	ldr	r1, [pc, #84]	; (8005f10 <idcodeCommand+0x88>)
 8005eba:	0020      	movs	r0, r4
 8005ebc:	f00d fb60 	bl	8013580 <sprintf>
}
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ec4:	0020      	movs	r0, r4
 8005ec6:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <idcodeCommand+0x8c>)
 8005ec8:	4910      	ldr	r1, [pc, #64]	; (8005f0c <idcodeCommand+0x84>)
 8005eca:	f00d fb59 	bl	8013580 <sprintf>
			break;
 8005ece:	e7ef      	b.n	8005eb0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ed0:	0020      	movs	r0, r4
 8005ed2:	4a11      	ldr	r2, [pc, #68]	; (8005f18 <idcodeCommand+0x90>)
 8005ed4:	490d      	ldr	r1, [pc, #52]	; (8005f0c <idcodeCommand+0x84>)
 8005ed6:	f00d fb53 	bl	8013580 <sprintf>
			break;
 8005eda:	e7e9      	b.n	8005eb0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005edc:	0020      	movs	r0, r4
 8005ede:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <idcodeCommand+0x94>)
 8005ee0:	490a      	ldr	r1, [pc, #40]	; (8005f0c <idcodeCommand+0x84>)
 8005ee2:	f00d fb4d 	bl	8013580 <sprintf>
			break;
 8005ee6:	e7e3      	b.n	8005eb0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ee8:	0020      	movs	r0, r4
 8005eea:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <idcodeCommand+0x98>)
 8005eec:	4907      	ldr	r1, [pc, #28]	; (8005f0c <idcodeCommand+0x84>)
 8005eee:	f00d fb47 	bl	8013580 <sprintf>
			break;
 8005ef2:	e7dd      	b.n	8005eb0 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005ef4:	0020      	movs	r0, r4
 8005ef6:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <idcodeCommand+0x9c>)
 8005ef8:	4904      	ldr	r1, [pc, #16]	; (8005f0c <idcodeCommand+0x84>)
 8005efa:	f00d fb41 	bl	8013580 <sprintf>
			break;
 8005efe:	e7d7      	b.n	8005eb0 <idcodeCommand+0x28>
 8005f00:	fffffbc0 	.word	0xfffffbc0
 8005f04:	0801945c 	.word	0x0801945c
 8005f08:	0801aa9c 	.word	0x0801aa9c
 8005f0c:	0801aa58 	.word	0x0801aa58
 8005f10:	0801aaa4 	.word	0x0801aaa4
 8005f14:	0801aa78 	.word	0x0801aa78
 8005f18:	0801aa90 	.word	0x0801aa90
 8005f1c:	0801aa4c 	.word	0x0801aa4c
 8005f20:	0801aa6c 	.word	0x0801aa6c
 8005f24:	0801aa84 	.word	0x0801aa84

08005f28 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f2c:	220e      	movs	r2, #14
 8005f2e:	4911      	ldr	r1, [pc, #68]	; (8005f74 <uuidCommand+0x4c>)
 8005f30:	f00d f92c 	bl	801318c <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f34:	4d10      	ldr	r5, [pc, #64]	; (8005f78 <uuidCommand+0x50>)
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <uuidCommand+0x54>)
 8005f38:	0029      	movs	r1, r5
 8005f3a:	0022      	movs	r2, r4
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f00d fb1e 	bl	8013580 <sprintf>
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <uuidCommand+0x58>)
 8005f46:	0029      	movs	r1, r5
 8005f48:	0022      	movs	r2, r4
 8005f4a:	0020      	movs	r0, r4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f00d fb17 	bl	8013580 <sprintf>
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <uuidCommand+0x5c>)
 8005f54:	0029      	movs	r1, r5
 8005f56:	0022      	movs	r2, r4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0020      	movs	r0, r4
 8005f5c:	f00d fb10 	bl	8013580 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005f60:	0020      	movs	r0, r4
 8005f62:	f7fa f8d9 	bl	8000118 <strlen>
 8005f66:	2203      	movs	r2, #3
 8005f68:	4907      	ldr	r1, [pc, #28]	; (8005f88 <uuidCommand+0x60>)
 8005f6a:	1820      	adds	r0, r4, r0
 8005f6c:	f00d f90e 	bl	801318c <memcpy>
}
 8005f70:	2000      	movs	r0, #0
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	0801aabc 	.word	0x0801aabc
 8005f78:	0801aacc 	.word	0x0801aacc
 8005f7c:	1ffff7ac 	.word	0x1ffff7ac
 8005f80:	1ffff7b0 	.word	0x1ffff7b0
 8005f84:	1ffff7b4 	.word	0x1ffff7b4
 8005f88:	0801bb10 	.word	0x0801bb10

08005f8c <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	0004      	movs	r4, r0
	GetTimeDate();
 8005f90:	f007 f940 	bl	800d214 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005f94:	f7fe fc52 	bl	800483c <GetDateString>
 8005f98:	4903      	ldr	r1, [pc, #12]	; (8005fa8 <dateCommand+0x1c>)
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	0020      	movs	r0, r4
 8005f9e:	f00d faef 	bl	8013580 <sprintf>
}
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	0801aad4 	.word	0x0801aad4

08005fac <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	46ce      	mov	lr, r9
 8005fb0:	4647      	mov	r7, r8
 8005fb2:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005fb4:	2300      	movs	r3, #0
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b083      	sub	sp, #12
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fba:	466a      	mov	r2, sp
 8005fbc:	2101      	movs	r1, #1
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fbe:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fc0:	0030      	movs	r0, r6
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fc6:	f007 fed5 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 8005fca:	4b6c      	ldr	r3, [pc, #432]	; (800617c <getCommand+0x1d0>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005fcc:	2204      	movs	r2, #4
 8005fce:	496c      	ldr	r1, [pc, #432]	; (8006180 <getCommand+0x1d4>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005fd0:	0004      	movs	r4, r0
 8005fd2:	6358      	str	r0, [r3, #52]	; 0x34
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005fd4:	f00d fb17 	bl	8013606 <strncmp>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d14d      	bne.n	8006078 <getCommand+0xcc>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	1d27      	adds	r7, r4, #4
 8005fe0:	1f1e      	subs	r6, r3, #4
 8005fe2:	0032      	movs	r2, r6
 8005fe4:	0038      	movs	r0, r7
 8005fe6:	4967      	ldr	r1, [pc, #412]	; (8006184 <getCommand+0x1d8>)
 8005fe8:	f00d fb0d 	bl	8013606 <strncmp>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d10e      	bne.n	800600e <getCommand+0x62>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005ff0:	4b65      	ldr	r3, [pc, #404]	; (8006188 <getCommand+0x1dc>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b60      	cmp	r3, #96	; 0x60
 8005ff6:	d05d      	beq.n	80060b4 <getCommand+0x108>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d055      	beq.n	80060a8 <getCommand+0xfc>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d100      	bne.n	8006002 <getCommand+0x56>
 8006000:	e099      	b.n	8006136 <getCommand+0x18a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006002:	0022      	movs	r2, r4
 8006004:	0028      	movs	r0, r5
 8006006:	4961      	ldr	r1, [pc, #388]	; (800618c <getCommand+0x1e0>)
 8006008:	f00d faba 	bl	8013580 <sprintf>
 800600c:	e040      	b.n	8006090 <getCommand+0xe4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800600e:	0032      	movs	r2, r6
 8006010:	0038      	movs	r0, r7
 8006012:	495f      	ldr	r1, [pc, #380]	; (8006190 <getCommand+0x1e4>)
 8006014:	f00d faf7 	bl	8013606 <strncmp>
 8006018:	2800      	cmp	r0, #0
 800601a:	d03f      	beq.n	800609c <getCommand+0xf0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800601c:	0032      	movs	r2, r6
 800601e:	0038      	movs	r0, r7
 8006020:	495c      	ldr	r1, [pc, #368]	; (8006194 <getCommand+0x1e8>)
 8006022:	f00d faf0 	bl	8013606 <strncmp>
 8006026:	2800      	cmp	r0, #0
 8006028:	d100      	bne.n	800602c <getCommand+0x80>
 800602a:	e091      	b.n	8006150 <getCommand+0x1a4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800602c:	0032      	movs	r2, r6
 800602e:	0038      	movs	r0, r7
 8006030:	4959      	ldr	r1, [pc, #356]	; (8006198 <getCommand+0x1ec>)
 8006032:	f00d fae8 	bl	8013606 <strncmp>
 8006036:	2800      	cmp	r0, #0
 8006038:	d100      	bne.n	800603c <getCommand+0x90>
 800603a:	e090      	b.n	800615e <getCommand+0x1b2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800603c:	0032      	movs	r2, r6
 800603e:	0038      	movs	r0, r7
 8006040:	4956      	ldr	r1, [pc, #344]	; (800619c <getCommand+0x1f0>)
 8006042:	f00d fae0 	bl	8013606 <strncmp>
 8006046:	2800      	cmp	r0, #0
 8006048:	d100      	bne.n	800604c <getCommand+0xa0>
 800604a:	e07a      	b.n	8006142 <getCommand+0x196>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800604c:	0032      	movs	r2, r6
 800604e:	0038      	movs	r0, r7
 8006050:	4953      	ldr	r1, [pc, #332]	; (80061a0 <getCommand+0x1f4>)
 8006052:	f00d fad8 	bl	8013606 <strncmp>
 8006056:	2800      	cmp	r0, #0
 8006058:	d100      	bne.n	800605c <getCommand+0xb0>
 800605a:	e087      	b.n	800616c <getCommand+0x1c0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800605c:	0032      	movs	r2, r6
 800605e:	0038      	movs	r0, r7
 8006060:	4950      	ldr	r1, [pc, #320]	; (80061a4 <getCommand+0x1f8>)
 8006062:	f00d fad0 	bl	8013606 <strncmp>
 8006066:	2800      	cmp	r0, #0
 8006068:	d10d      	bne.n	8006086 <getCommand+0xda>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800606a:	4b4f      	ldr	r3, [pc, #316]	; (80061a8 <getCommand+0x1fc>)
 800606c:	0028      	movs	r0, r5
 800606e:	795a      	ldrb	r2, [r3, #5]
 8006070:	494e      	ldr	r1, [pc, #312]	; (80061ac <getCommand+0x200>)
 8006072:	f00d fa85 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006076:	e00b      	b.n	8006090 <getCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006078:	2205      	movs	r2, #5
 800607a:	0020      	movs	r0, r4
 800607c:	494c      	ldr	r1, [pc, #304]	; (80061b0 <getCommand+0x204>)
 800607e:	f00d fac2 	bl	8013606 <strncmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	d01c      	beq.n	80060c0 <getCommand+0x114>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006086:	2213      	movs	r2, #19
 8006088:	0028      	movs	r0, r5
 800608a:	494a      	ldr	r1, [pc, #296]	; (80061b4 <getCommand+0x208>)
 800608c:	f00d f87e 	bl	801318c <memcpy>
}
 8006090:	2000      	movs	r0, #0
 8006092:	b003      	add	sp, #12
 8006094:	bcc0      	pop	{r6, r7}
 8006096:	46b9      	mov	r9, r7
 8006098:	46b0      	mov	r8, r6
 800609a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(BOSMessaging.trace == TRACE_BOTH)
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <getCommand+0x1dc>)
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d007      	beq.n	80060b4 <getCommand+0x108>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d1a9      	bne.n	8005ffc <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 80060a8:	0028      	movs	r0, r5
 80060aa:	4a43      	ldr	r2, [pc, #268]	; (80061b8 <getCommand+0x20c>)
 80060ac:	4943      	ldr	r1, [pc, #268]	; (80061bc <getCommand+0x210>)
 80060ae:	f00d fa67 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80060b2:	e7ed      	b.n	8006090 <getCommand+0xe4>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060b4:	0028      	movs	r0, r5
 80060b6:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <getCommand+0x214>)
 80060b8:	4940      	ldr	r1, [pc, #256]	; (80061bc <getCommand+0x210>)
 80060ba:	f00d fa61 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 80060be:	e7e7      	b.n	8006090 <getCommand+0xe4>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060c0:	0030      	movs	r0, r6
 80060c2:	2102      	movs	r1, #2
 80060c4:	aa01      	add	r2, sp, #4
 80060c6:	f007 fe55 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 80060ca:	2400      	movs	r4, #0
 80060cc:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 80060ce:	4e3d      	ldr	r6, [pc, #244]	; (80061c4 <getCommand+0x218>)
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80060d0:	0031      	movs	r1, r6
 80060d2:	0038      	movs	r0, r7
 80060d4:	f7fa f816 	bl	8000104 <strcmp>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d009      	beq.n	80060f0 <getCommand+0x144>
		for(i =0; i < MaxNumOfGroups; i++){
 80060dc:	3401      	adds	r4, #1
 80060de:	360a      	adds	r6, #10
 80060e0:	2c0a      	cmp	r4, #10
 80060e2:	d1f5      	bne.n	80060d0 <getCommand+0x124>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80060e4:	003a      	movs	r2, r7
 80060e6:	0028      	movs	r0, r5
 80060e8:	4937      	ldr	r1, [pc, #220]	; (80061c8 <getCommand+0x21c>)
 80060ea:	f00d fa49 	bl	8013580 <sprintf>
			return pdFALSE;
 80060ee:	e7cf      	b.n	8006090 <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 80060f0:	003a      	movs	r2, r7
 80060f2:	0028      	movs	r0, r5
 80060f4:	4935      	ldr	r1, [pc, #212]	; (80061cc <getCommand+0x220>)
 80060f6:	f00d fa43 	bl	8013580 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 80060fa:	4f35      	ldr	r7, [pc, #212]	; (80061d0 <getCommand+0x224>)
 80060fc:	783b      	ldrb	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0c6      	beq.n	8006090 <getCommand+0xe4>
 8006102:	2601      	movs	r6, #1
 8006104:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <getCommand+0x228>)
 8006106:	40a6      	lsls	r6, r4
 8006108:	4698      	mov	r8, r3
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <getCommand+0x22c>)
			for(j =1; j <= N; j++)						// N modules
 800610c:	2401      	movs	r4, #1
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800610e:	4699      	mov	r9, r3
 8006110:	e004      	b.n	800611c <getCommand+0x170>
			for(j =1; j <= N; j++)						// N modules
 8006112:	3401      	adds	r4, #1
 8006114:	783b      	ldrb	r3, [r7, #0]
 8006116:	b2e4      	uxtb	r4, r4
 8006118:	42a3      	cmp	r3, r4
 800611a:	d3b9      	bcc.n	8006090 <getCommand+0xe4>
				if(InGroup(j,i)){
 800611c:	4643      	mov	r3, r8
 800611e:	1e62      	subs	r2, r4, #1
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	5a9b      	ldrh	r3, [r3, r2]
 8006124:	421e      	tst	r6, r3
 8006126:	d0f4      	beq.n	8006112 <getCommand+0x166>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006128:	0023      	movs	r3, r4
 800612a:	002a      	movs	r2, r5
 800612c:	4649      	mov	r1, r9
 800612e:	0028      	movs	r0, r5
 8006130:	f00d fa26 	bl	8013580 <sprintf>
 8006134:	e7ed      	b.n	8006112 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006136:	0028      	movs	r0, r5
 8006138:	4a28      	ldr	r2, [pc, #160]	; (80061dc <getCommand+0x230>)
 800613a:	4920      	ldr	r1, [pc, #128]	; (80061bc <getCommand+0x210>)
 800613c:	f00d fa20 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006140:	e7a6      	b.n	8006090 <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <getCommand+0x1fc>)
 8006144:	0028      	movs	r0, r5
 8006146:	885a      	ldrh	r2, [r3, #2]
 8006148:	4918      	ldr	r1, [pc, #96]	; (80061ac <getCommand+0x200>)
 800614a:	f00d fa19 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800614e:	e79f      	b.n	8006090 <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <getCommand+0x1fc>)
 8006152:	0028      	movs	r0, r5
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	4915      	ldr	r1, [pc, #84]	; (80061ac <getCommand+0x200>)
 8006158:	f00d fa12 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800615c:	e798      	b.n	8006090 <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 800615e:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <getCommand+0x1fc>)
 8006160:	0028      	movs	r0, r5
 8006162:	881a      	ldrh	r2, [r3, #0]
 8006164:	4911      	ldr	r1, [pc, #68]	; (80061ac <getCommand+0x200>)
 8006166:	f00d fa0b 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 800616a:	e791      	b.n	8006090 <getCommand+0xe4>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <getCommand+0x1fc>)
 800616e:	0028      	movs	r0, r5
 8006170:	791a      	ldrb	r2, [r3, #4]
 8006172:	490e      	ldr	r1, [pc, #56]	; (80061ac <getCommand+0x200>)
 8006174:	f00d fa04 	bl	8013580 <sprintf>
	else if(result == BOS_ERR_WrongValue)
 8006178:	e78a      	b.n	8006090 <getCommand+0xe4>
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20001910 	.word	0x20001910
 8006180:	0801aaec 	.word	0x0801aaec
 8006184:	0801aaf4 	.word	0x0801aaf4
 8006188:	20000b4c 	.word	0x20000b4c
 800618c:	0801ab88 	.word	0x0801ab88
 8006190:	0801ab0c 	.word	0x0801ab0c
 8006194:	0801ab14 	.word	0x0801ab14
 8006198:	0801ab20 	.word	0x0801ab20
 800619c:	0801ab2c 	.word	0x0801ab2c
 80061a0:	0801ab3c 	.word	0x0801ab3c
 80061a4:	0801ab50 	.word	0x0801ab50
 80061a8:	20000b54 	.word	0x20000b54
 80061ac:	0801a29c 	.word	0x0801a29c
 80061b0:	0801ab64 	.word	0x0801ab64
 80061b4:	0801ab74 	.word	0x0801ab74
 80061b8:	0801ab00 	.word	0x0801ab00
 80061bc:	08019b28 	.word	0x08019b28
 80061c0:	08019c48 	.word	0x08019c48
 80061c4:	20000ae0 	.word	0x20000ae0
 80061c8:	0801aba8 	.word	0x0801aba8
 80061cc:	0801abc4 	.word	0x0801abc4
 80061d0:	20000008 	.word	0x20000008
 80061d4:	20000aac 	.word	0x20000aac
 80061d8:	0801ab6c 	.word	0x0801ab6c
 80061dc:	0801ab04 	.word	0x0801ab04

080061e0 <defaultCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 80061e0:	2300      	movs	r3, #0
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e2:	b570      	push	{r4, r5, r6, lr}
 80061e4:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061e6:	2101      	movs	r1, #1
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80061e8:	0005      	movs	r5, r0
 80061ea:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061ec:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 80061ee:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061f0:	f007 fdc0 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80061f4:	9e01      	ldr	r6, [sp, #4]
 80061f6:	491f      	ldr	r1, [pc, #124]	; (8006274 <defaultCommand+0x94>)
 80061f8:	0032      	movs	r2, r6
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80061fa:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 80061fc:	f00d fa03 	bl	8013606 <strncmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	d026      	beq.n	8006252 <defaultCommand+0x72>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006204:	0032      	movs	r2, r6
 8006206:	0020      	movs	r0, r4
 8006208:	491b      	ldr	r1, [pc, #108]	; (8006278 <defaultCommand+0x98>)
 800620a:	f00d f9fc 	bl	8013606 <strncmp>
 800620e:	2800      	cmp	r0, #0
 8006210:	d007      	beq.n	8006222 <defaultCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006212:	220f      	movs	r2, #15
 8006214:	0028      	movs	r0, r5
 8006216:	4919      	ldr	r1, [pc, #100]	; (800627c <defaultCommand+0x9c>)
 8006218:	f00c ffb8 	bl	801318c <memcpy>
}
 800621c:	2000      	movs	r0, #0
 800621e:	b002      	add	sp, #8
 8006220:	bd70      	pop	{r4, r5, r6, pc}
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006222:	2116      	movs	r1, #22
 8006224:	2200      	movs	r2, #0
 8006226:	20ff      	movs	r0, #255	; 0xff
 8006228:	f001 fff6 	bl	8008218 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800622c:	2202      	movs	r2, #2
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <defaultCommand+0xa0>)
		osDelay(100);
 8006230:	2064      	movs	r0, #100	; 0x64
		indMode =IND_TOPOLOGY;
 8006232:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006234:	f007 fbf2 	bl	800da1c <osDelay>
		ClearEEportsDir();
 8006238:	f7fd fa80 	bl	800373c <ClearEEportsDir>
		ClearROtopology();
 800623c:	f004 f914 	bl	800a468 <ClearROtopology>
		osDelay(100);
 8006240:	2064      	movs	r0, #100	; 0x64
 8006242:	f007 fbeb 	bl	800da1c <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	0028      	movs	r0, r5
 800624a:	490e      	ldr	r1, [pc, #56]	; (8006284 <defaultCommand+0xa4>)
 800624c:	f00c ff9e 	bl	801318c <memcpy>
	if(result == BOS_ERR_WrongValue)
 8006250:	e7e4      	b.n	800621c <defaultCommand+0x3c>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006252:	490d      	ldr	r1, [pc, #52]	; (8006288 <defaultCommand+0xa8>)
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <defaultCommand+0xac>)
 8006256:	000a      	movs	r2, r1
 8006258:	cb13      	ldmia	r3!, {r0, r1, r4}
 800625a:	c213      	stmia	r2!, {r0, r1, r4}
 800625c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800625e:	c213      	stmia	r2!, {r0, r1, r4}
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006264:	f7fd fa24 	bl	80036b0 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006268:	2227      	movs	r2, #39	; 0x27
 800626a:	0028      	movs	r0, r5
 800626c:	4908      	ldr	r1, [pc, #32]	; (8006290 <defaultCommand+0xb0>)
 800626e:	f00c ff8d 	bl	801318c <memcpy>
	if(result == BOS_ERR_WrongValue)
 8006272:	e7d3      	b.n	800621c <defaultCommand+0x3c>
 8006274:	0801abd8 	.word	0x0801abd8
 8006278:	0801ac08 	.word	0x0801ac08
 800627c:	0801ac10 	.word	0x0801ac10
 8006280:	200011ef 	.word	0x200011ef
 8006284:	0801ac20 	.word	0x0801ac20
 8006288:	20000b54 	.word	0x20000b54
 800628c:	20000014 	.word	0x20000014
 8006290:	0801abe0 	.word	0x0801abe0

08006294 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006296:	4645      	mov	r5, r8
 8006298:	46de      	mov	lr, fp
 800629a:	4657      	mov	r7, sl
 800629c:	464e      	mov	r6, r9
 800629e:	b5e0      	push	{r5, r6, r7, lr}
 80062a0:	0016      	movs	r6, r2
 80062a2:	2700      	movs	r7, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	b08f      	sub	sp, #60	; 0x3c
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062a8:	2101      	movs	r1, #1
 80062aa:	aa09      	add	r2, sp, #36	; 0x24
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062ac:	0005      	movs	r5, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062ae:	0030      	movs	r0, r6
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062b0:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80062b2:	9709      	str	r7, [sp, #36]	; 0x24
 80062b4:	970a      	str	r7, [sp, #40]	; 0x28
 80062b6:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80062b8:	970c      	str	r7, [sp, #48]	; 0x30
 80062ba:	970d      	str	r7, [sp, #52]	; 0x34
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062bc:	f007 fd5a 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 80062c0:	4cc9      	ldr	r4, [pc, #804]	; (80065e8 <setCommand+0x354>)
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80062c2:	2204      	movs	r2, #4
 80062c4:	49c9      	ldr	r1, [pc, #804]	; (80065ec <setCommand+0x358>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80062c6:	4680      	mov	r8, r0
 80062c8:	63a0      	str	r0, [r4, #56]	; 0x38
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80062ca:	f00d f99c 	bl	8013606 <strncmp>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d100      	bne.n	80062d4 <setCommand+0x40>
 80062d2:	e079      	b.n	80063c8 <setCommand+0x134>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80062d4:	2204      	movs	r2, #4
 80062d6:	4640      	mov	r0, r8
 80062d8:	49c5      	ldr	r1, [pc, #788]	; (80065f0 <setCommand+0x35c>)
 80062da:	f00d f994 	bl	8013606 <strncmp>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d014      	beq.n	800630c <setCommand+0x78>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 80062e2:	2204      	movs	r2, #4
 80062e4:	4640      	mov	r0, r8
 80062e6:	49c3      	ldr	r1, [pc, #780]	; (80065f4 <setCommand+0x360>)
 80062e8:	f00d f98d 	bl	8013606 <strncmp>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d100      	bne.n	80062f2 <setCommand+0x5e>
 80062f0:	e0d8      	b.n	80064a4 <setCommand+0x210>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80062f2:	2213      	movs	r2, #19
 80062f4:	0028      	movs	r0, r5
 80062f6:	49c0      	ldr	r1, [pc, #768]	; (80065f8 <setCommand+0x364>)
 80062f8:	f00c ff48 	bl	801318c <memcpy>
}
 80062fc:	2000      	movs	r0, #0
 80062fe:	b00f      	add	sp, #60	; 0x3c
 8006300:	bcf0      	pop	{r4, r5, r6, r7}
 8006302:	46bb      	mov	fp, r7
 8006304:	46b2      	mov	sl, r6
 8006306:	46a9      	mov	r9, r5
 8006308:	46a0      	mov	r8, r4
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800630c:	2102      	movs	r1, #2
 800630e:	0030      	movs	r0, r6
 8006310:	aa0a      	add	r2, sp, #40	; 0x28
 8006312:	f007 fd2f 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006316:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006318:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800631a:	aa0b      	add	r2, sp, #44	; 0x2c
 800631c:	0030      	movs	r0, r6
 800631e:	f007 fd29 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006322:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006324:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006326:	aa0c      	add	r2, sp, #48	; 0x30
 8006328:	0030      	movs	r0, r6
 800632a:	f007 fd23 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800632e:	2105      	movs	r1, #5
 8006330:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006332:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006334:	0030      	movs	r0, r6
 8006336:	f007 fd1d 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 800633a:	64a0      	str	r0, [r4, #72]	; 0x48
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800633c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800633e:	f00c fc60 	bl	8012c02 <atoi>
 8006342:	b2c3      	uxtb	r3, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006344:	6c20      	ldr	r0, [r4, #64]	; 0x40
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006346:	4698      	mov	r8, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006348:	f00c fc5b 	bl	8012c02 <atoi>
 800634c:	0006      	movs	r6, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800634e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006350:	f00c fc57 	bl	8012c02 <atoi>
		if(pcParameterString5 != NULL){
 8006354:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <setCommand+0xd8>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	2a61      	cmp	r2, #97	; 0x61
 800635e:	d000      	beq.n	8006362 <setCommand+0xce>
 8006360:	e138      	b.n	80065d4 <setCommand+0x340>
 8006362:	7859      	ldrb	r1, [r3, #1]
				temp84 =RTC_AM;
 8006364:	2701      	movs	r7, #1
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006366:	296d      	cmp	r1, #109	; 0x6d
 8006368:	d000      	beq.n	800636c <setCommand+0xd8>
 800636a:	e133      	b.n	80065d4 <setCommand+0x340>
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800636c:	4643      	mov	r3, r8
 800636e:	2b17      	cmp	r3, #23
 8006370:	d824      	bhi.n	80063bc <setCommand+0x128>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006372:	b2f3      	uxtb	r3, r6
 8006374:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006376:	2b3b      	cmp	r3, #59	; 0x3b
 8006378:	d820      	bhi.n	80063bc <setCommand+0x128>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800637a:	b2c6      	uxtb	r6, r0
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 800637c:	2e3b      	cmp	r6, #59	; 0x3b
 800637e:	d81d      	bhi.n	80063bc <setCommand+0x128>
				GetTimeDate();
 8006380:	f006 ff48 	bl	800d214 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006384:	4b9d      	ldr	r3, [pc, #628]	; (80065fc <setCommand+0x368>)
 8006386:	7d1a      	ldrb	r2, [r3, #20]
 8006388:	7d59      	ldrb	r1, [r3, #21]
 800638a:	7d98      	ldrb	r0, [r3, #22]
 800638c:	4694      	mov	ip, r2
 800638e:	8b1a      	ldrh	r2, [r3, #24]
 8006390:	7b1b      	ldrb	r3, [r3, #12]
 8006392:	9703      	str	r7, [sp, #12]
 8006394:	b25b      	sxtb	r3, r3
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	4643      	mov	r3, r8
 800639a:	9302      	str	r3, [sp, #8]
 800639c:	464b      	mov	r3, r9
 800639e:	9600      	str	r6, [sp, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	4663      	mov	r3, ip
 80063a4:	f006 fed8 	bl	800d158 <BOS_CalendarConfig>
 80063a8:	4682      	mov	sl, r0
	if(result == BOS_OK){
 80063aa:	4653      	mov	r3, sl
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d100      	bne.n	80063b2 <setCommand+0x11e>
 80063b0:	e1b8      	b.n	8006724 <setCommand+0x490>
	else if(result == BOS_ERR_WrongParam)
 80063b2:	2b67      	cmp	r3, #103	; 0x67
 80063b4:	d09d      	beq.n	80062f2 <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 80063b6:	4653      	mov	r3, sl
 80063b8:	2b68      	cmp	r3, #104	; 0x68
 80063ba:	d19f      	bne.n	80062fc <setCommand+0x68>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80063bc:	220f      	movs	r2, #15
 80063be:	0028      	movs	r0, r5
 80063c0:	498f      	ldr	r1, [pc, #572]	; (8006600 <setCommand+0x36c>)
 80063c2:	f00c fee3 	bl	801318c <memcpy>
 80063c6:	e799      	b.n	80062fc <setCommand+0x68>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063c8:	2102      	movs	r1, #2
 80063ca:	0030      	movs	r0, r6
 80063cc:	aa0a      	add	r2, sp, #40	; 0x28
 80063ce:	f007 fcd1 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063d4:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063d6:	1d1f      	adds	r7, r3, #4
 80063d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80063da:	63e0      	str	r0, [r4, #60]	; 0x3c
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80063dc:	3b04      	subs	r3, #4
 80063de:	4698      	mov	r8, r3
 80063e0:	4b88      	ldr	r3, [pc, #544]	; (8006604 <setCommand+0x370>)
 80063e2:	4642      	mov	r2, r8
 80063e4:	0019      	movs	r1, r3
 80063e6:	0038      	movs	r0, r7
 80063e8:	4699      	mov	r9, r3
 80063ea:	f00d f90c 	bl	8013606 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d128      	bne.n	8006444 <setCommand+0x1b0>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80063f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80063f4:	0030      	movs	r0, r6
 80063f6:	003a      	movs	r2, r7
 80063f8:	4983      	ldr	r1, [pc, #524]	; (8006608 <setCommand+0x374>)
 80063fa:	f00d f904 	bl	8013606 <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d100      	bne.n	8006404 <setCommand+0x170>
 8006402:	e184      	b.n	800670e <setCommand+0x47a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006404:	003a      	movs	r2, r7
 8006406:	0030      	movs	r0, r6
 8006408:	4980      	ldr	r1, [pc, #512]	; (800660c <setCommand+0x378>)
 800640a:	f00d f8fc 	bl	8013606 <strncmp>
 800640e:	2800      	cmp	r0, #0
 8006410:	d100      	bne.n	8006414 <setCommand+0x180>
 8006412:	e1ba      	b.n	800678a <setCommand+0x4f6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006414:	003a      	movs	r2, r7
 8006416:	0030      	movs	r0, r6
 8006418:	497d      	ldr	r1, [pc, #500]	; (8006610 <setCommand+0x37c>)
 800641a:	f00d f8f4 	bl	8013606 <strncmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	d100      	bne.n	8006424 <setCommand+0x190>
 8006422:	e18c      	b.n	800673e <setCommand+0x4aa>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006424:	003a      	movs	r2, r7
 8006426:	0030      	movs	r0, r6
 8006428:	497a      	ldr	r1, [pc, #488]	; (8006614 <setCommand+0x380>)
 800642a:	f00d f8ec 	bl	8013606 <strncmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	d1c4      	bne.n	80063bc <setCommand+0x128>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006432:	4b79      	ldr	r3, [pc, #484]	; (8006618 <setCommand+0x384>)
 8006434:	7018      	strb	r0, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006436:	208a      	movs	r0, #138	; 0x8a
 8006438:	7859      	ldrb	r1, [r3, #1]
 800643a:	0040      	lsls	r0, r0, #1
 800643c:	0209      	lsls	r1, r1, #8
 800643e:	f005 f8b9 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006442:	e16f      	b.n	8006724 <setCommand+0x490>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006444:	4642      	mov	r2, r8
 8006446:	0038      	movs	r0, r7
 8006448:	4974      	ldr	r1, [pc, #464]	; (800661c <setCommand+0x388>)
 800644a:	f00d f8dc 	bl	8013606 <strncmp>
 800644e:	2800      	cmp	r0, #0
 8006450:	d000      	beq.n	8006454 <setCommand+0x1c0>
 8006452:	e083      	b.n	800655c <setCommand+0x2c8>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006454:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006456:	0030      	movs	r0, r6
 8006458:	003a      	movs	r2, r7
 800645a:	496b      	ldr	r1, [pc, #428]	; (8006608 <setCommand+0x374>)
 800645c:	f00d f8d3 	bl	8013606 <strncmp>
 8006460:	2800      	cmp	r0, #0
 8006462:	d100      	bne.n	8006466 <setCommand+0x1d2>
 8006464:	e1cb      	b.n	80067fe <setCommand+0x56a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006466:	003a      	movs	r2, r7
 8006468:	0030      	movs	r0, r6
 800646a:	4968      	ldr	r1, [pc, #416]	; (800660c <setCommand+0x378>)
 800646c:	f00d f8cb 	bl	8013606 <strncmp>
 8006470:	2800      	cmp	r0, #0
 8006472:	d100      	bne.n	8006476 <setCommand+0x1e2>
 8006474:	e17d      	b.n	8006772 <setCommand+0x4de>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006476:	003a      	movs	r2, r7
 8006478:	4649      	mov	r1, r9
 800647a:	0030      	movs	r0, r6
 800647c:	f00d f8c3 	bl	8013606 <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d100      	bne.n	8006486 <setCommand+0x1f2>
 8006484:	e1ca      	b.n	800681c <setCommand+0x588>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006486:	003a      	movs	r2, r7
 8006488:	0030      	movs	r0, r6
 800648a:	4962      	ldr	r1, [pc, #392]	; (8006614 <setCommand+0x380>)
 800648c:	f00d f8bb 	bl	8013606 <strncmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	d193      	bne.n	80063bc <setCommand+0x128>
				BOSMessaging.trace =TRACE_NONE;
 8006494:	4b60      	ldr	r3, [pc, #384]	; (8006618 <setCommand+0x384>)
 8006496:	7058      	strb	r0, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006498:	3015      	adds	r0, #21
 800649a:	7819      	ldrb	r1, [r3, #0]
 800649c:	30ff      	adds	r0, #255	; 0xff
 800649e:	f005 f889 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 80064a2:	e13f      	b.n	8006724 <setCommand+0x490>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064a4:	2102      	movs	r1, #2
 80064a6:	0030      	movs	r0, r6
 80064a8:	aa0a      	add	r2, sp, #40	; 0x28
 80064aa:	f007 fc63 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064ae:	2103      	movs	r1, #3
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80064b0:	63e0      	str	r0, [r4, #60]	; 0x3c
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80064b4:	0030      	movs	r0, r6
 80064b6:	f007 fc5d 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ba:	2104      	movs	r1, #4
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80064bc:	6420      	str	r0, [r4, #64]	; 0x40
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064be:	aa0c      	add	r2, sp, #48	; 0x30
 80064c0:	0030      	movs	r0, r6
 80064c2:	f007 fc57 	bl	800dd74 <FreeRTOS_CLIGetParameter>
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064c6:	2105      	movs	r1, #5
 80064c8:	aa0d      	add	r2, sp, #52	; 0x34
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80064ca:	6460      	str	r0, [r4, #68]	; 0x44
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80064cc:	0030      	movs	r0, r6
 80064ce:	f007 fc51 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 80064d2:	64a0      	str	r0, [r4, #72]	; 0x48
		temp83 =atoi((const char* )pcParameterString4);		// day
 80064d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80064d6:	f00c fb94 	bl	8012c02 <atoi>
 80064da:	0006      	movs	r6, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80064de:	f00c fb90 	bl	8012c02 <atoi>
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064e2:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		temp16 =atoi((const char* )pcParameterString5);		// year
 80064e4:	4680      	mov	r8, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80064e6:	2206      	movs	r2, #6
 80064e8:	0038      	movs	r0, r7
 80064ea:	494d      	ldr	r1, [pc, #308]	; (8006620 <setCommand+0x38c>)
 80064ec:	f00d f88b 	bl	8013606 <strncmp>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d100      	bne.n	80064f6 <setCommand+0x262>
 80064f4:	e0ac      	b.n	8006650 <setCommand+0x3bc>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80064f6:	2207      	movs	r2, #7
 80064f8:	0038      	movs	r0, r7
 80064fa:	494a      	ldr	r1, [pc, #296]	; (8006624 <setCommand+0x390>)
 80064fc:	f00d f883 	bl	8013606 <strncmp>
 8006500:	2800      	cmp	r0, #0
 8006502:	d100      	bne.n	8006506 <setCommand+0x272>
 8006504:	e118      	b.n	8006738 <setCommand+0x4a4>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006506:	2209      	movs	r2, #9
 8006508:	0038      	movs	r0, r7
 800650a:	4947      	ldr	r1, [pc, #284]	; (8006628 <setCommand+0x394>)
 800650c:	f00d f87b 	bl	8013606 <strncmp>
 8006510:	2800      	cmp	r0, #0
 8006512:	d100      	bne.n	8006516 <setCommand+0x282>
 8006514:	e17f      	b.n	8006816 <setCommand+0x582>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006516:	2208      	movs	r2, #8
 8006518:	0038      	movs	r0, r7
 800651a:	4944      	ldr	r1, [pc, #272]	; (800662c <setCommand+0x398>)
 800651c:	f00d f873 	bl	8013606 <strncmp>
 8006520:	2800      	cmp	r0, #0
 8006522:	d100      	bne.n	8006526 <setCommand+0x292>
 8006524:	e18e      	b.n	8006844 <setCommand+0x5b0>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006526:	2206      	movs	r2, #6
 8006528:	0038      	movs	r0, r7
 800652a:	4941      	ldr	r1, [pc, #260]	; (8006630 <setCommand+0x39c>)
 800652c:	f00d f86b 	bl	8013606 <strncmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	d100      	bne.n	8006536 <setCommand+0x2a2>
 8006534:	e19f      	b.n	8006876 <setCommand+0x5e2>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006536:	2208      	movs	r2, #8
 8006538:	0038      	movs	r0, r7
 800653a:	493e      	ldr	r1, [pc, #248]	; (8006634 <setCommand+0x3a0>)
 800653c:	f00d f863 	bl	8013606 <strncmp>
 8006540:	2800      	cmp	r0, #0
 8006542:	d100      	bne.n	8006546 <setCommand+0x2b2>
 8006544:	e22c      	b.n	80069a0 <setCommand+0x70c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006546:	2206      	movs	r2, #6
 8006548:	0038      	movs	r0, r7
 800654a:	493b      	ldr	r1, [pc, #236]	; (8006638 <setCommand+0x3a4>)
 800654c:	f00d f85b 	bl	8013606 <strncmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	d000      	beq.n	8006556 <setCommand+0x2c2>
 8006554:	e25e      	b.n	8006a14 <setCommand+0x780>
			temp81 =SUNDAY;
 8006556:	2307      	movs	r3, #7
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	e07b      	b.n	8006654 <setCommand+0x3c0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800655c:	4642      	mov	r2, r8
 800655e:	0038      	movs	r0, r7
 8006560:	4936      	ldr	r1, [pc, #216]	; (800663c <setCommand+0x3a8>)
 8006562:	f00d f850 	bl	8013606 <strncmp>
 8006566:	4681      	mov	r9, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	d100      	bne.n	800656e <setCommand+0x2da>
 800656c:	e119      	b.n	80067a2 <setCommand+0x50e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800656e:	4642      	mov	r2, r8
 8006570:	0038      	movs	r0, r7
 8006572:	4933      	ldr	r1, [pc, #204]	; (8006640 <setCommand+0x3ac>)
 8006574:	f00d f847 	bl	8013606 <strncmp>
 8006578:	2800      	cmp	r0, #0
 800657a:	d100      	bne.n	800657e <setCommand+0x2ea>
 800657c:	e0eb      	b.n	8006756 <setCommand+0x4c2>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800657e:	4642      	mov	r2, r8
 8006580:	0038      	movs	r0, r7
 8006582:	4930      	ldr	r1, [pc, #192]	; (8006644 <setCommand+0x3b0>)
 8006584:	f00d f83f 	bl	8013606 <strncmp>
 8006588:	2800      	cmp	r0, #0
 800658a:	d100      	bne.n	800658e <setCommand+0x2fa>
 800658c:	e14c      	b.n	8006828 <setCommand+0x594>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800658e:	4642      	mov	r2, r8
 8006590:	0038      	movs	r0, r7
 8006592:	492d      	ldr	r1, [pc, #180]	; (8006648 <setCommand+0x3b4>)
 8006594:	f00d f837 	bl	8013606 <strncmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	d100      	bne.n	800659e <setCommand+0x30a>
 800659c:	e155      	b.n	800684a <setCommand+0x5b6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800659e:	4642      	mov	r2, r8
 80065a0:	0038      	movs	r0, r7
 80065a2:	492a      	ldr	r1, [pc, #168]	; (800664c <setCommand+0x3b8>)
 80065a4:	f00d f82f 	bl	8013606 <strncmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d000      	beq.n	80065ae <setCommand+0x31a>
 80065ac:	e6a1      	b.n	80062f2 <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 80065ae:	0030      	movs	r0, r6
 80065b0:	f00c fb27 	bl	8012c02 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80065b4:	1e43      	subs	r3, r0, #1
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2bfe      	cmp	r3, #254	; 0xfe
 80065ba:	d900      	bls.n	80065be <setCommand+0x32a>
 80065bc:	e6fe      	b.n	80063bc <setCommand+0x128>
				BOS.buttons.maxInterClickTime =temp16;
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <setCommand+0x368>)
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80065c0:	7919      	ldrb	r1, [r3, #4]
				BOS.buttons.maxInterClickTime =temp16;
 80065c2:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80065c4:	0200      	lsls	r0, r0, #8
 80065c6:	4301      	orrs	r1, r0
 80065c8:	2018      	movs	r0, #24
 80065ca:	b289      	uxth	r1, r1
 80065cc:	30ff      	adds	r0, #255	; 0xff
 80065ce:	f004 fff1 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 80065d2:	e0a7      	b.n	8006724 <setCommand+0x490>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80065d4:	2a70      	cmp	r2, #112	; 0x70
 80065d6:	d000      	beq.n	80065da <setCommand+0x346>
 80065d8:	e6f0      	b.n	80063bc <setCommand+0x128>
 80065da:	785b      	ldrb	r3, [r3, #1]
				temp84 =RTC_PM;
 80065dc:	2702      	movs	r7, #2
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80065de:	2b6d      	cmp	r3, #109	; 0x6d
 80065e0:	d100      	bne.n	80065e4 <setCommand+0x350>
 80065e2:	e6c3      	b.n	800636c <setCommand+0xd8>
 80065e4:	e6ea      	b.n	80063bc <setCommand+0x128>
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	20001910 	.word	0x20001910
 80065ec:	0801aaec 	.word	0x0801aaec
 80065f0:	0801ad64 	.word	0x0801ad64
 80065f4:	0801ad6c 	.word	0x0801ad6c
 80065f8:	0801ab74 	.word	0x0801ab74
 80065fc:	20000b54 	.word	0x20000b54
 8006600:	0801ac10 	.word	0x0801ac10
 8006604:	0801aaf4 	.word	0x0801aaf4
 8006608:	08019c48 	.word	0x08019c48
 800660c:	0801ac60 	.word	0x0801ac60
 8006610:	0801ac68 	.word	0x0801ac68
 8006614:	0801ab04 	.word	0x0801ab04
 8006618:	20000b4c 	.word	0x20000b4c
 800661c:	0801ab0c 	.word	0x0801ab0c
 8006620:	0801ad74 	.word	0x0801ad74
 8006624:	0801ad7c 	.word	0x0801ad7c
 8006628:	0801ad84 	.word	0x0801ad84
 800662c:	0801ad90 	.word	0x0801ad90
 8006630:	0801ad9c 	.word	0x0801ad9c
 8006634:	0801ada4 	.word	0x0801ada4
 8006638:	0801adb0 	.word	0x0801adb0
 800663c:	0801ab14 	.word	0x0801ab14
 8006640:	0801ab20 	.word	0x0801ab20
 8006644:	0801ab2c 	.word	0x0801ab2c
 8006648:	0801ab3c 	.word	0x0801ab3c
 800664c:	0801ab50 	.word	0x0801ab50
			temp81 =MONDAY;
 8006650:	2301      	movs	r3, #1
 8006652:	9307      	str	r3, [sp, #28]
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006654:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8006656:	2207      	movs	r2, #7
 8006658:	0038      	movs	r0, r7
 800665a:	49d4      	ldr	r1, [pc, #848]	; (80069ac <setCommand+0x718>)
 800665c:	f00c ffd3 	bl	8013606 <strncmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	d02f      	beq.n	80066c4 <setCommand+0x430>
 8006664:	783b      	ldrb	r3, [r7, #0]
 8006666:	469a      	mov	sl, r3
 8006668:	2b31      	cmp	r3, #49	; 0x31
 800666a:	d028      	beq.n	80066be <setCommand+0x42a>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800666c:	2208      	movs	r2, #8
 800666e:	0038      	movs	r0, r7
 8006670:	49cf      	ldr	r1, [pc, #828]	; (80069b0 <setCommand+0x71c>)
 8006672:	f00c ffc8 	bl	8013606 <strncmp>
 8006676:	2800      	cmp	r0, #0
 8006678:	d100      	bne.n	800667c <setCommand+0x3e8>
 800667a:	e1fe      	b.n	8006a7a <setCommand+0x7e6>
 800667c:	4653      	mov	r3, sl
 800667e:	2b32      	cmp	r3, #50	; 0x32
 8006680:	d103      	bne.n	800668a <setCommand+0x3f6>
 8006682:	787b      	ldrb	r3, [r7, #1]
 8006684:	2b20      	cmp	r3, #32
 8006686:	d100      	bne.n	800668a <setCommand+0x3f6>
 8006688:	e1f7      	b.n	8006a7a <setCommand+0x7e6>
 800668a:	2300      	movs	r3, #0
 800668c:	469a      	mov	sl, r3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800668e:	2205      	movs	r2, #5
 8006690:	0038      	movs	r0, r7
 8006692:	49c8      	ldr	r1, [pc, #800]	; (80069b4 <setCommand+0x720>)
 8006694:	f00c ffb7 	bl	8013606 <strncmp>
 8006698:	2800      	cmp	r0, #0
 800669a:	d100      	bne.n	800669e <setCommand+0x40a>
 800669c:	e0e8      	b.n	8006870 <setCommand+0x5dc>
 800669e:	783b      	ldrb	r3, [r7, #0]
 80066a0:	469b      	mov	fp, r3
 80066a2:	2b33      	cmp	r3, #51	; 0x33
 80066a4:	d000      	beq.n	80066a8 <setCommand+0x414>
 80066a6:	e0e9      	b.n	800687c <setCommand+0x5e8>
			temp82 =MARCH;
 80066a8:	2203      	movs	r2, #3
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80066aa:	787b      	ldrb	r3, [r7, #1]
			temp82 =MARCH;
 80066ac:	4691      	mov	r9, r2
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d000      	beq.n	80066b4 <setCommand+0x420>
 80066b2:	e0e3      	b.n	800687c <setCommand+0x5e8>
		if(result == BOS_OK){
 80066b4:	4653      	mov	r3, sl
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d000      	beq.n	80066bc <setCommand+0x428>
 80066ba:	e67c      	b.n	80063b6 <setCommand+0x122>
 80066bc:	e004      	b.n	80066c8 <setCommand+0x434>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066be:	787b      	ldrb	r3, [r7, #1]
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d1d3      	bne.n	800666c <setCommand+0x3d8>
			temp82 =JANUARY;
 80066c4:	2301      	movs	r3, #1
 80066c6:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066c8:	b2f7      	uxtb	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066ca:	1e7b      	subs	r3, r7, #1
 80066cc:	2b1e      	cmp	r3, #30
 80066ce:	d900      	bls.n	80066d2 <setCommand+0x43e>
 80066d0:	e674      	b.n	80063bc <setCommand+0x128>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066d2:	4643      	mov	r3, r8
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4698      	mov	r8, r3
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066d8:	4bb7      	ldr	r3, [pc, #732]	; (80069b8 <setCommand+0x724>)
 80066da:	4443      	add	r3, r8
 80066dc:	2b64      	cmp	r3, #100	; 0x64
 80066de:	d900      	bls.n	80066e2 <setCommand+0x44e>
 80066e0:	e66c      	b.n	80063bc <setCommand+0x128>
				GetTimeDate();
 80066e2:	f006 fd97 	bl	800d214 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066e6:	220c      	movs	r2, #12
 80066e8:	4bb4      	ldr	r3, [pc, #720]	; (80069bc <setCommand+0x728>)
 80066ea:	0039      	movs	r1, r7
 80066ec:	569a      	ldrsb	r2, [r3, r2]
 80066ee:	4648      	mov	r0, r9
 80066f0:	9204      	str	r2, [sp, #16]
 80066f2:	7cda      	ldrb	r2, [r3, #19]
 80066f4:	9203      	str	r2, [sp, #12]
 80066f6:	7c9a      	ldrb	r2, [r3, #18]
 80066f8:	9202      	str	r2, [sp, #8]
 80066fa:	7c5a      	ldrb	r2, [r3, #17]
 80066fc:	9201      	str	r2, [sp, #4]
 80066fe:	7c1b      	ldrb	r3, [r3, #16]
 8006700:	4642      	mov	r2, r8
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	9b07      	ldr	r3, [sp, #28]
 8006706:	f006 fd27 	bl	800d158 <BOS_CalendarConfig>
 800670a:	4682      	mov	sl, r0
 800670c:	e64d      	b.n	80063aa <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800670e:	2260      	movs	r2, #96	; 0x60
 8006710:	4bab      	ldr	r3, [pc, #684]	; (80069c0 <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006712:	3015      	adds	r0, #21
 8006714:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006716:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006718:	2360      	movs	r3, #96	; 0x60
 800671a:	0209      	lsls	r1, r1, #8
 800671c:	4319      	orrs	r1, r3
 800671e:	30ff      	adds	r0, #255	; 0xff
 8006720:	f004 ff48 	bl	800b5b4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006724:	2300      	movs	r3, #0
 8006726:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006728:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800672a:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800672c:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800672e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006730:	49a4      	ldr	r1, [pc, #656]	; (80069c4 <setCommand+0x730>)
 8006732:	f00c ff25 	bl	8013580 <sprintf>
	return pdFALSE;
 8006736:	e5e1      	b.n	80062fc <setCommand+0x68>
			temp81 =TUESDAY;
 8006738:	2302      	movs	r3, #2
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	e78a      	b.n	8006654 <setCommand+0x3c0>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	4b9f      	ldr	r3, [pc, #636]	; (80069c0 <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006742:	3015      	adds	r0, #21
 8006744:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006746:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	0209      	lsls	r1, r1, #8
 800674c:	4319      	orrs	r1, r3
 800674e:	30ff      	adds	r0, #255	; 0xff
 8006750:	f004 ff30 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006754:	e7e6      	b.n	8006724 <setCommand+0x490>
			temp16 =atoi((const char* )pcParameterString2);
 8006756:	0030      	movs	r0, r6
 8006758:	f00c fa53 	bl	8012c02 <atoi>
 800675c:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800675e:	2900      	cmp	r1, #0
 8006760:	d100      	bne.n	8006764 <setCommand+0x4d0>
 8006762:	e62b      	b.n	80063bc <setCommand+0x128>
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006764:	2016      	movs	r0, #22
				BOS.buttons.debounce =temp16;
 8006766:	4b95      	ldr	r3, [pc, #596]	; (80069bc <setCommand+0x728>)
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006768:	30ff      	adds	r0, #255	; 0xff
				BOS.buttons.debounce =temp16;
 800676a:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 800676c:	f004 ff22 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006770:	e7d8      	b.n	8006724 <setCommand+0x490>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006772:	2201      	movs	r2, #1
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006774:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_MESSAGE;
 8006776:	4b92      	ldr	r3, [pc, #584]	; (80069c0 <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006778:	0049      	lsls	r1, r1, #1
				BOSMessaging.trace =TRACE_MESSAGE;
 800677a:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	3015      	adds	r0, #21
 8006780:	4319      	orrs	r1, r3
 8006782:	30ff      	adds	r0, #255	; 0xff
 8006784:	f004 ff16 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006788:	e7cc      	b.n	8006724 <setCommand+0x490>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800678a:	2220      	movs	r2, #32
 800678c:	4b8c      	ldr	r3, [pc, #560]	; (80069c0 <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800678e:	3015      	adds	r0, #21
 8006790:	7859      	ldrb	r1, [r3, #1]
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006792:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006794:	2320      	movs	r3, #32
 8006796:	0209      	lsls	r1, r1, #8
 8006798:	4319      	orrs	r1, r3
 800679a:	30ff      	adds	r0, #255	; 0xff
 800679c:	f004 ff0a 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 80067a0:	e7c0      	b.n	8006724 <setCommand+0x490>
			temp2 =atoi((const char* )pcParameterString2);
 80067a2:	0030      	movs	r0, r6
 80067a4:	f00c fa2d 	bl	8012c02 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80067a8:	23e1      	movs	r3, #225	; 0xe1
 80067aa:	031b      	lsls	r3, r3, #12
 80067ac:	4298      	cmp	r0, r3
 80067ae:	d900      	bls.n	80067b2 <setCommand+0x51e>
 80067b0:	e604      	b.n	80063bc <setCommand+0x128>
				BOS.clibaudrate =temp2;
 80067b2:	4e82      	ldr	r6, [pc, #520]	; (80069bc <setCommand+0x728>)
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80067b4:	b281      	uxth	r1, r0
				BOS.clibaudrate =temp2;
 80067b6:	60b0      	str	r0, [r6, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80067b8:	208c      	movs	r0, #140	; 0x8c
 80067ba:	0040      	lsls	r0, r0, #1
 80067bc:	f004 fefa 	bl	800b5b4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80067c0:	201a      	movs	r0, #26
 80067c2:	8971      	ldrh	r1, [r6, #10]
 80067c4:	30ff      	adds	r0, #255	; 0xff
 80067c6:	f004 fef5 	bl	800b5b4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80067ca:	4649      	mov	r1, r9
 80067cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80067d0:	0028      	movs	r0, r5
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80067d2:	54d1      	strb	r1, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80067d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067d6:	497b      	ldr	r1, [pc, #492]	; (80069c4 <setCommand+0x730>)
 80067d8:	f00c fed2 	bl	8013580 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80067dc:	0028      	movs	r0, r5
 80067de:	f7f9 fc9b 	bl	8000118 <strlen>
 80067e2:	0004      	movs	r4, r0
 80067e4:	2230      	movs	r2, #48	; 0x30
 80067e6:	4978      	ldr	r1, [pc, #480]	; (80069c8 <setCommand+0x734>)
 80067e8:	1828      	adds	r0, r5, r0
 80067ea:	f00c fccf 	bl	801318c <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80067ee:	0020      	movs	r0, r4
 80067f0:	302f      	adds	r0, #47	; 0x2f
 80067f2:	22b2      	movs	r2, #178	; 0xb2
 80067f4:	4975      	ldr	r1, [pc, #468]	; (80069cc <setCommand+0x738>)
 80067f6:	1828      	adds	r0, r5, r0
 80067f8:	f00c fcc8 	bl	801318c <memcpy>
 80067fc:	e57e      	b.n	80062fc <setCommand+0x68>
				BOSMessaging.trace =TRACE_BOTH;
 80067fe:	2203      	movs	r2, #3
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006800:	21c0      	movs	r1, #192	; 0xc0
				BOSMessaging.trace =TRACE_BOTH;
 8006802:	4b6f      	ldr	r3, [pc, #444]	; (80069c0 <setCommand+0x72c>)
 8006804:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006806:	781b      	ldrb	r3, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006808:	0089      	lsls	r1, r1, #2
 800680a:	3015      	adds	r0, #21
 800680c:	4319      	orrs	r1, r3
 800680e:	30ff      	adds	r0, #255	; 0xff
 8006810:	f004 fed0 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006814:	e786      	b.n	8006724 <setCommand+0x490>
			temp81 =WEDNESDAY;
 8006816:	2303      	movs	r3, #3
 8006818:	9307      	str	r3, [sp, #28]
 800681a:	e71b      	b.n	8006654 <setCommand+0x3c0>
				BOSMessaging.trace =TRACE_RESPONSE;
 800681c:	2202      	movs	r2, #2
 800681e:	4b68      	ldr	r3, [pc, #416]	; (80069c0 <setCommand+0x72c>)
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006820:	2180      	movs	r1, #128	; 0x80
				BOSMessaging.trace =TRACE_RESPONSE;
 8006822:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	e7ef      	b.n	8006808 <setCommand+0x574>
			temp16 =atoi((const char* )pcParameterString2);
 8006828:	0030      	movs	r0, r6
 800682a:	f00c f9ea 	bl	8012c02 <atoi>
 800682e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006830:	2900      	cmp	r1, #0
 8006832:	d100      	bne.n	8006836 <setCommand+0x5a2>
 8006834:	e5c2      	b.n	80063bc <setCommand+0x128>
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006836:	208b      	movs	r0, #139	; 0x8b
				BOS.buttons.singleClickTime =temp16;
 8006838:	4b60      	ldr	r3, [pc, #384]	; (80069bc <setCommand+0x728>)
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800683a:	0040      	lsls	r0, r0, #1
				BOS.buttons.singleClickTime =temp16;
 800683c:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800683e:	f004 feb9 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006842:	e76f      	b.n	8006724 <setCommand+0x490>
			temp81 =THURSDAY;
 8006844:	2304      	movs	r3, #4
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	e704      	b.n	8006654 <setCommand+0x3c0>
			temp16 =atoi((const char* )pcParameterString2);
 800684a:	0030      	movs	r0, r6
 800684c:	f00c f9d9 	bl	8012c02 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006850:	1e43      	subs	r3, r0, #1
 8006852:	b29b      	uxth	r3, r3
 8006854:	2bfe      	cmp	r3, #254	; 0xfe
 8006856:	d900      	bls.n	800685a <setCommand+0x5c6>
 8006858:	e5b0      	b.n	80063bc <setCommand+0x128>
				BOS.buttons.minInterClickTime =temp16;
 800685a:	4b58      	ldr	r3, [pc, #352]	; (80069bc <setCommand+0x728>)
 800685c:	b2c0      	uxtb	r0, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800685e:	7959      	ldrb	r1, [r3, #5]
				BOS.buttons.minInterClickTime =temp16;
 8006860:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006862:	0209      	lsls	r1, r1, #8
 8006864:	4301      	orrs	r1, r0
 8006866:	2018      	movs	r0, #24
 8006868:	30ff      	adds	r0, #255	; 0xff
 800686a:	f004 fea3 	bl	800b5b4 <EE_WriteVariable>
	if(result == BOS_OK){
 800686e:	e759      	b.n	8006724 <setCommand+0x490>
			temp82 =MARCH;
 8006870:	2303      	movs	r3, #3
 8006872:	4699      	mov	r9, r3
 8006874:	e71e      	b.n	80066b4 <setCommand+0x420>
			temp81 =FRIDAY;
 8006876:	2305      	movs	r3, #5
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	e6eb      	b.n	8006654 <setCommand+0x3c0>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800687c:	2205      	movs	r2, #5
 800687e:	0038      	movs	r0, r7
 8006880:	4953      	ldr	r1, [pc, #332]	; (80069d0 <setCommand+0x73c>)
 8006882:	f00c fec0 	bl	8013606 <strncmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	d100      	bne.n	800688c <setCommand+0x5f8>
 800688a:	e08c      	b.n	80069a6 <setCommand+0x712>
 800688c:	465b      	mov	r3, fp
 800688e:	2b34      	cmp	r3, #52	; 0x34
 8006890:	d105      	bne.n	800689e <setCommand+0x60a>
			temp82 =APRIL;
 8006892:	2204      	movs	r2, #4
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006894:	787b      	ldrb	r3, [r7, #1]
			temp82 =APRIL;
 8006896:	4691      	mov	r9, r2
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006898:	2b20      	cmp	r3, #32
 800689a:	d100      	bne.n	800689e <setCommand+0x60a>
 800689c:	e70a      	b.n	80066b4 <setCommand+0x420>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800689e:	2203      	movs	r2, #3
 80068a0:	0038      	movs	r0, r7
 80068a2:	494c      	ldr	r1, [pc, #304]	; (80069d4 <setCommand+0x740>)
 80068a4:	f00c feaf 	bl	8013606 <strncmp>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d100      	bne.n	80068ae <setCommand+0x61a>
 80068ac:	e0d6      	b.n	8006a5c <setCommand+0x7c8>
 80068ae:	2202      	movs	r2, #2
 80068b0:	0038      	movs	r0, r7
 80068b2:	4949      	ldr	r1, [pc, #292]	; (80069d8 <setCommand+0x744>)
 80068b4:	f00c fea7 	bl	8013606 <strncmp>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d100      	bne.n	80068be <setCommand+0x62a>
 80068bc:	e0ce      	b.n	8006a5c <setCommand+0x7c8>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068be:	2204      	movs	r2, #4
 80068c0:	0038      	movs	r0, r7
 80068c2:	4946      	ldr	r1, [pc, #280]	; (80069dc <setCommand+0x748>)
 80068c4:	f00c fe9f 	bl	8013606 <strncmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d100      	bne.n	80068ce <setCommand+0x63a>
 80068cc:	e0c9      	b.n	8006a62 <setCommand+0x7ce>
 80068ce:	2202      	movs	r2, #2
 80068d0:	0038      	movs	r0, r7
 80068d2:	4943      	ldr	r1, [pc, #268]	; (80069e0 <setCommand+0x74c>)
 80068d4:	f00c fe97 	bl	8013606 <strncmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d100      	bne.n	80068de <setCommand+0x64a>
 80068dc:	e0c1      	b.n	8006a62 <setCommand+0x7ce>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80068de:	2204      	movs	r2, #4
 80068e0:	0038      	movs	r0, r7
 80068e2:	4940      	ldr	r1, [pc, #256]	; (80069e4 <setCommand+0x750>)
 80068e4:	f00c fe8f 	bl	8013606 <strncmp>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d100      	bne.n	80068ee <setCommand+0x65a>
 80068ec:	e0bf      	b.n	8006a6e <setCommand+0x7da>
 80068ee:	2202      	movs	r2, #2
 80068f0:	0038      	movs	r0, r7
 80068f2:	493d      	ldr	r1, [pc, #244]	; (80069e8 <setCommand+0x754>)
 80068f4:	f00c fe87 	bl	8013606 <strncmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d100      	bne.n	80068fe <setCommand+0x66a>
 80068fc:	e0b7      	b.n	8006a6e <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80068fe:	2205      	movs	r2, #5
 8006900:	0038      	movs	r0, r7
 8006902:	493a      	ldr	r1, [pc, #232]	; (80069ec <setCommand+0x758>)
 8006904:	f00c fe7f 	bl	8013606 <strncmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	d100      	bne.n	800690e <setCommand+0x67a>
 800690c:	e0ac      	b.n	8006a68 <setCommand+0x7d4>
 800690e:	2202      	movs	r2, #2
 8006910:	0038      	movs	r0, r7
 8006912:	4937      	ldr	r1, [pc, #220]	; (80069f0 <setCommand+0x75c>)
 8006914:	f00c fe77 	bl	8013606 <strncmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	d100      	bne.n	800691e <setCommand+0x68a>
 800691c:	e0a4      	b.n	8006a68 <setCommand+0x7d4>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 800691e:	2209      	movs	r2, #9
 8006920:	0038      	movs	r0, r7
 8006922:	4934      	ldr	r1, [pc, #208]	; (80069f4 <setCommand+0x760>)
 8006924:	f00c fe6f 	bl	8013606 <strncmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d100      	bne.n	800692e <setCommand+0x69a>
 800692c:	e0ab      	b.n	8006a86 <setCommand+0x7f2>
 800692e:	2202      	movs	r2, #2
 8006930:	0038      	movs	r0, r7
 8006932:	4931      	ldr	r1, [pc, #196]	; (80069f8 <setCommand+0x764>)
 8006934:	f00c fe67 	bl	8013606 <strncmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	d100      	bne.n	800693e <setCommand+0x6aa>
 800693c:	e0a3      	b.n	8006a86 <setCommand+0x7f2>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 800693e:	2207      	movs	r2, #7
 8006940:	0038      	movs	r0, r7
 8006942:	492e      	ldr	r1, [pc, #184]	; (80069fc <setCommand+0x768>)
 8006944:	f00c fe5f 	bl	8013606 <strncmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	d100      	bne.n	800694e <setCommand+0x6ba>
 800694c:	e098      	b.n	8006a80 <setCommand+0x7ec>
 800694e:	2202      	movs	r2, #2
 8006950:	0038      	movs	r0, r7
 8006952:	492b      	ldr	r1, [pc, #172]	; (8006a00 <setCommand+0x76c>)
 8006954:	f00c fe57 	bl	8013606 <strncmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	d100      	bne.n	800695e <setCommand+0x6ca>
 800695c:	e090      	b.n	8006a80 <setCommand+0x7ec>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 800695e:	2208      	movs	r2, #8
 8006960:	0038      	movs	r0, r7
 8006962:	4928      	ldr	r1, [pc, #160]	; (8006a04 <setCommand+0x770>)
 8006964:	f00c fe4f 	bl	8013606 <strncmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d100      	bne.n	800696e <setCommand+0x6da>
 800696c:	e082      	b.n	8006a74 <setCommand+0x7e0>
 800696e:	2202      	movs	r2, #2
 8006970:	0038      	movs	r0, r7
 8006972:	4925      	ldr	r1, [pc, #148]	; (8006a08 <setCommand+0x774>)
 8006974:	f00c fe47 	bl	8013606 <strncmp>
 8006978:	2800      	cmp	r0, #0
 800697a:	d07b      	beq.n	8006a74 <setCommand+0x7e0>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 800697c:	2208      	movs	r2, #8
 800697e:	0038      	movs	r0, r7
 8006980:	4922      	ldr	r1, [pc, #136]	; (8006a0c <setCommand+0x778>)
 8006982:	f00c fe40 	bl	8013606 <strncmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	d007      	beq.n	800699a <setCommand+0x706>
 800698a:	2202      	movs	r2, #2
 800698c:	0038      	movs	r0, r7
 800698e:	4920      	ldr	r1, [pc, #128]	; (8006a10 <setCommand+0x77c>)
 8006990:	f00c fe39 	bl	8013606 <strncmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	d000      	beq.n	800699a <setCommand+0x706>
 8006998:	e510      	b.n	80063bc <setCommand+0x128>
			temp82 =DECEMBER;
 800699a:	230c      	movs	r3, #12
 800699c:	4699      	mov	r9, r3
 800699e:	e689      	b.n	80066b4 <setCommand+0x420>
			temp81 =SATURDAY;
 80069a0:	2306      	movs	r3, #6
 80069a2:	9307      	str	r3, [sp, #28]
 80069a4:	e656      	b.n	8006654 <setCommand+0x3c0>
			temp82 =APRIL;
 80069a6:	2304      	movs	r3, #4
 80069a8:	4699      	mov	r9, r3
 80069aa:	e683      	b.n	80066b4 <setCommand+0x420>
 80069ac:	0801ae34 	.word	0x0801ae34
 80069b0:	0801ae3c 	.word	0x0801ae3c
 80069b4:	0801adbc 	.word	0x0801adbc
 80069b8:	fffff830 	.word	0xfffff830
 80069bc:	20000b54 	.word	0x20000b54
 80069c0:	20000b4c 	.word	0x20000b4c
 80069c4:	0801ac6c 	.word	0x0801ac6c
 80069c8:	0801ac80 	.word	0x0801ac80
 80069cc:	0801acb0 	.word	0x0801acb0
 80069d0:	0801adc4 	.word	0x0801adc4
 80069d4:	0801adcc 	.word	0x0801adcc
 80069d8:	0801add0 	.word	0x0801add0
 80069dc:	0801add4 	.word	0x0801add4
 80069e0:	0801addc 	.word	0x0801addc
 80069e4:	0801ade0 	.word	0x0801ade0
 80069e8:	0801ade8 	.word	0x0801ade8
 80069ec:	0801adec 	.word	0x0801adec
 80069f0:	0801adf4 	.word	0x0801adf4
 80069f4:	0801adf8 	.word	0x0801adf8
 80069f8:	0801ae04 	.word	0x0801ae04
 80069fc:	0801ae08 	.word	0x0801ae08
 8006a00:	0801ae10 	.word	0x0801ae10
 8006a04:	0801ae14 	.word	0x0801ae14
 8006a08:	0801ae20 	.word	0x0801ae20
 8006a0c:	0801ae24 	.word	0x0801ae24
 8006a10:	0801ae30 	.word	0x0801ae30
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006a14:	6c27      	ldr	r7, [r4, #64]	; 0x40
 8006a16:	2207      	movs	r2, #7
 8006a18:	0038      	movs	r0, r7
 8006a1a:	491c      	ldr	r1, [pc, #112]	; (8006a8c <setCommand+0x7f8>)
 8006a1c:	f00c fdf3 	bl	8013606 <strncmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d100      	bne.n	8006a26 <setCommand+0x792>
 8006a24:	e4ca      	b.n	80063bc <setCommand+0x128>
 8006a26:	2202      	movs	r2, #2
 8006a28:	0038      	movs	r0, r7
 8006a2a:	4919      	ldr	r1, [pc, #100]	; (8006a90 <setCommand+0x7fc>)
 8006a2c:	f00c fdeb 	bl	8013606 <strncmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d100      	bne.n	8006a36 <setCommand+0x7a2>
 8006a34:	e4c2      	b.n	80063bc <setCommand+0x128>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006a36:	2208      	movs	r2, #8
 8006a38:	0038      	movs	r0, r7
 8006a3a:	4916      	ldr	r1, [pc, #88]	; (8006a94 <setCommand+0x800>)
 8006a3c:	f00c fde3 	bl	8013606 <strncmp>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d100      	bne.n	8006a46 <setCommand+0x7b2>
 8006a44:	e4ba      	b.n	80063bc <setCommand+0x128>
 8006a46:	2202      	movs	r2, #2
 8006a48:	0038      	movs	r0, r7
 8006a4a:	4913      	ldr	r1, [pc, #76]	; (8006a98 <setCommand+0x804>)
 8006a4c:	f00c fddb 	bl	8013606 <strncmp>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d100      	bne.n	8006a56 <setCommand+0x7c2>
 8006a54:	e4b2      	b.n	80063bc <setCommand+0x128>
			result =BOS_ERR_WrongValue;
 8006a56:	2368      	movs	r3, #104	; 0x68
 8006a58:	469a      	mov	sl, r3
 8006a5a:	e618      	b.n	800668e <setCommand+0x3fa>
			temp82 =MAY;
 8006a5c:	2305      	movs	r3, #5
 8006a5e:	4699      	mov	r9, r3
 8006a60:	e628      	b.n	80066b4 <setCommand+0x420>
			temp82 =JUNE;
 8006a62:	2306      	movs	r3, #6
 8006a64:	4699      	mov	r9, r3
 8006a66:	e625      	b.n	80066b4 <setCommand+0x420>
			temp82 =AUGUST;
 8006a68:	2308      	movs	r3, #8
 8006a6a:	4699      	mov	r9, r3
 8006a6c:	e622      	b.n	80066b4 <setCommand+0x420>
			temp82 =JULY;
 8006a6e:	2307      	movs	r3, #7
 8006a70:	4699      	mov	r9, r3
 8006a72:	e61f      	b.n	80066b4 <setCommand+0x420>
			temp82 =NOVEMBER;
 8006a74:	230b      	movs	r3, #11
 8006a76:	4699      	mov	r9, r3
 8006a78:	e61c      	b.n	80066b4 <setCommand+0x420>
			temp82 =FEBRUARY;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	4699      	mov	r9, r3
 8006a7e:	e623      	b.n	80066c8 <setCommand+0x434>
			temp82 =OCTOBER;
 8006a80:	230a      	movs	r3, #10
 8006a82:	4699      	mov	r9, r3
 8006a84:	e616      	b.n	80066b4 <setCommand+0x420>
			temp82 =SEPTEMBER;
 8006a86:	2309      	movs	r3, #9
 8006a88:	4699      	mov	r9, r3
 8006a8a:	e613      	b.n	80066b4 <setCommand+0x420>
 8006a8c:	0801ae34 	.word	0x0801ae34
 8006a90:	0801adb8 	.word	0x0801adb8
 8006a94:	0801ae3c 	.word	0x0801ae3c
 8006a98:	0801ae48 	.word	0x0801ae48

08006a9c <removebuttonCommand>:
	portBASE_TYPE xParameterStringLength1 =0;
 8006a9c:	2300      	movs	r3, #0
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a9e:	b530      	push	{r4, r5, lr}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	0004      	movs	r4, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006aa4:	2101      	movs	r1, #1
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006aa6:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006aa8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 =0;
 8006aaa:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006aac:	f007 f962 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006ab4:	2500      	movs	r5, #0
	if(pcParameterString1[0] == 'p'){
 8006ab6:	2b70      	cmp	r3, #112	; 0x70
 8006ab8:	d00e      	beq.n	8006ad8 <removebuttonCommand+0x3c>
	result =RemovePortButton(port);
 8006aba:	0028      	movs	r0, r5
 8006abc:	f005 f9ce 	bl	800be5c <RemovePortButton>
	if(result == BOS_OK){
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d002      	beq.n	8006aca <removebuttonCommand+0x2e>
}
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	b003      	add	sp, #12
 8006ac8:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006aca:	002b      	movs	r3, r5
 8006acc:	002a      	movs	r2, r5
 8006ace:	0020      	movs	r0, r4
 8006ad0:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <removebuttonCommand+0x48>)
 8006ad2:	f00c fd55 	bl	8013580 <sprintf>
 8006ad6:	e7f5      	b.n	8006ac4 <removebuttonCommand+0x28>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f00c f898 	bl	8012c0e <atol>
 8006ade:	b2c5      	uxtb	r5, r0
 8006ae0:	e7eb      	b.n	8006aba <removebuttonCommand+0x1e>
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	0801ae4c 	.word	0x0801ae4c

08006ae8 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aea:	46ce      	mov	lr, r9
 8006aec:	4647      	mov	r7, r8
 8006aee:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006af0:	2300      	movs	r3, #0
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b085      	sub	sp, #20
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006af6:	2101      	movs	r1, #1
 8006af8:	aa02      	add	r2, sp, #8
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006afa:	4680      	mov	r8, r0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006afc:	0028      	movs	r0, r5
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006afe:	9302      	str	r3, [sp, #8]
 8006b00:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b02:	f007 f937 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b06:	9b02      	ldr	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b08:	4e24      	ldr	r6, [pc, #144]	; (8006b9c <addbuttonCommand+0xb4>)
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b0a:	001a      	movs	r2, r3
 8006b0c:	4924      	ldr	r1, [pc, #144]	; (8006ba0 <addbuttonCommand+0xb8>)
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b0e:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b10:	4699      	mov	r9, r3
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b12:	64f0      	str	r0, [r6, #76]	; 0x4c
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b14:	f00c fd77 	bl	8013606 <strncmp>
		type =MOMENTARY_NO;
 8006b18:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d007      	beq.n	8006b2e <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b1e:	464a      	mov	r2, r9
 8006b20:	0020      	movs	r0, r4
 8006b22:	4920      	ldr	r1, [pc, #128]	; (8006ba4 <addbuttonCommand+0xbc>)
 8006b24:	f00c fd6f 	bl	8013606 <strncmp>
		type =MOMENTARY_NC;
 8006b28:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d115      	bne.n	8006b5a <addbuttonCommand+0x72>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006b2e:	aa03      	add	r2, sp, #12
 8006b30:	2102      	movs	r1, #2
 8006b32:	0028      	movs	r0, r5
 8006b34:	f007 f91e 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006b38:	2200      	movs	r2, #0
 8006b3a:	5682      	ldrsb	r2, [r0, r2]
	uint8_t port =0, type =0;
 8006b3c:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006b3e:	2a70      	cmp	r2, #112	; 0x70
 8006b40:	d026      	beq.n	8006b90 <addbuttonCommand+0xa8>
	result =AddPortButton(type,port);
 8006b42:	0021      	movs	r1, r4
 8006b44:	0038      	movs	r0, r7
 8006b46:	f005 f90f 	bl	800bd68 <AddPortButton>
	if(result == BOS_OK){
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d016      	beq.n	8006b7c <addbuttonCommand+0x94>
}
 8006b4e:	2000      	movs	r0, #0
 8006b50:	b005      	add	sp, #20
 8006b52:	bcc0      	pop	{r6, r7}
 8006b54:	46b9      	mov	r9, r7
 8006b56:	46b0      	mov	r8, r6
 8006b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006b5a:	464a      	mov	r2, r9
 8006b5c:	0020      	movs	r0, r4
 8006b5e:	4912      	ldr	r1, [pc, #72]	; (8006ba8 <addbuttonCommand+0xc0>)
 8006b60:	f00c fd51 	bl	8013606 <strncmp>
		type =ONOFF_NO;
 8006b64:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d0e1      	beq.n	8006b2e <addbuttonCommand+0x46>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006b6a:	464a      	mov	r2, r9
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	490f      	ldr	r1, [pc, #60]	; (8006bac <addbuttonCommand+0xc4>)
 8006b70:	f00c fd49 	bl	8013606 <strncmp>
		type =ONOFF_NC;
 8006b74:	4243      	negs	r3, r0
 8006b76:	4158      	adcs	r0, r3
 8006b78:	0087      	lsls	r7, r0, #2
 8006b7a:	e7d8      	b.n	8006b2e <addbuttonCommand+0x46>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006b7c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8006b7e:	9b02      	ldr	r3, [sp, #8]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006b80:	490b      	ldr	r1, [pc, #44]	; (8006bb0 <addbuttonCommand+0xc8>)
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006b82:	54d0      	strb	r0, [r2, r3]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006b84:	0023      	movs	r3, r4
 8006b86:	4640      	mov	r0, r8
 8006b88:	9400      	str	r4, [sp, #0]
 8006b8a:	f00c fcf9 	bl	8013580 <sprintf>
 8006b8e:	e7de      	b.n	8006b4e <addbuttonCommand+0x66>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006b90:	3001      	adds	r0, #1
 8006b92:	f00c f83c 	bl	8012c0e <atol>
 8006b96:	b2c4      	uxtb	r4, r0
 8006b98:	e7d3      	b.n	8006b42 <addbuttonCommand+0x5a>
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	20001910 	.word	0x20001910
 8006ba0:	0801ae74 	.word	0x0801ae74
 8006ba4:	0801ae84 	.word	0x0801ae84
 8006ba8:	0801ae94 	.word	0x0801ae94
 8006bac:	0801aea0 	.word	0x0801aea0
 8006bb0:	0801aeac 	.word	0x0801aeac

08006bb4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb6:	46de      	mov	lr, fp
 8006bb8:	4657      	mov	r7, sl
 8006bba:	4645      	mov	r5, r8
 8006bbc:	464e      	mov	r6, r9
 8006bbe:	b5e0      	push	{r5, r6, r7, lr}
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006bc0:	2500      	movs	r5, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bc2:	0014      	movs	r4, r2
 8006bc4:	b099      	sub	sp, #100	; 0x64
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006bc6:	2206      	movs	r2, #6
 8006bc8:	2100      	movs	r1, #0
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bca:	9007      	str	r0, [sp, #28]
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006bcc:	a810      	add	r0, sp, #64	; 0x40
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006bce:	9508      	str	r5, [sp, #32]
 8006bd0:	9509      	str	r5, [sp, #36]	; 0x24
 8006bd2:	950a      	str	r5, [sp, #40]	; 0x28
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006bd4:	950b      	str	r5, [sp, #44]	; 0x2c
 8006bd6:	950c      	str	r5, [sp, #48]	; 0x30
 8006bd8:	950d      	str	r5, [sp, #52]	; 0x34
	portBASE_TYPE xParameterStringLength7 =0;
 8006bda:	950e      	str	r5, [sp, #56]	; 0x38
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006bdc:	950f      	str	r5, [sp, #60]	; 0x3c
 8006bde:	f00c fade 	bl	801319e <memset>
 8006be2:	2206      	movs	r2, #6
 8006be4:	2100      	movs	r1, #0
 8006be6:	a813      	add	r0, sp, #76	; 0x4c
 8006be8:	9512      	str	r5, [sp, #72]	; 0x48
 8006bea:	f00c fad8 	bl	801319e <memset>
 8006bee:	2206      	movs	r2, #6
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	a816      	add	r0, sp, #88	; 0x58
 8006bf4:	9515      	str	r5, [sp, #84]	; 0x54
 8006bf6:	f00c fad2 	bl	801319e <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bfa:	aa08      	add	r2, sp, #32
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f007 f8b8 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006c04:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c06:	2200      	movs	r2, #0
	if(pcParameterString1[0] == 'P'){
 8006c08:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c0a:	4692      	mov	sl, r2
	if(pcParameterString1[0] == 'P'){
 8006c0c:	2b50      	cmp	r3, #80	; 0x50
 8006c0e:	d100      	bne.n	8006c12 <scastCommand+0x5e>
 8006c10:	e089      	b.n	8006d26 <scastCommand+0x172>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c12:	2102      	movs	r1, #2
 8006c14:	aa09      	add	r2, sp, #36	; 0x24
 8006c16:	0020      	movs	r0, r4
 8006c18:	f007 f8ac 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c1e:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006c20:	a80f      	add	r0, sp, #60	; 0x3c
 8006c22:	f00c fd02 	bl	801362a <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006c26:	a80f      	add	r0, sp, #60	; 0x3c
 8006c28:	f7fd fb80 	bl	800432c <GetID>
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c2c:	aa0a      	add	r2, sp, #40	; 0x28
 8006c2e:	2103      	movs	r1, #3
	srcM =(uint8_t )GetID(par1);
 8006c30:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006c32:	0020      	movs	r0, r4
 8006c34:	f007 f89e 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006c38:	2300      	movs	r3, #0
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c3a:	2200      	movs	r2, #0
	if(pcParameterString3[0] == 'p'){
 8006c3c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006c3e:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006c40:	2b70      	cmp	r3, #112	; 0x70
 8006c42:	d06a      	beq.n	8006d1a <scastCommand+0x166>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006c44:	2104      	movs	r1, #4
 8006c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f007 f893 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006c4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006c50:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006c52:	a812      	add	r0, sp, #72	; 0x48
 8006c54:	f00c fce9 	bl	801362a <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006c58:	a812      	add	r0, sp, #72	; 0x48
 8006c5a:	f7fd fb67 	bl	800432c <GetID>
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c5e:	2105      	movs	r1, #5
 8006c60:	aa0c      	add	r2, sp, #48	; 0x30
	dstM =(uint8_t )GetID(par2);
 8006c62:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c64:	0020      	movs	r0, r4
 8006c66:	f007 f885 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	4931      	ldr	r1, [pc, #196]	; (8006d34 <scastCommand+0x180>)
 8006c6e:	001a      	movs	r2, r3
 8006c70:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c72:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006c74:	f00c fcc7 	bl	8013606 <strncmp>
		direction =FORWARD;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4698      	mov	r8, r3
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d008      	beq.n	8006c92 <scastCommand+0xde>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006c80:	464a      	mov	r2, r9
 8006c82:	0028      	movs	r0, r5
 8006c84:	492c      	ldr	r1, [pc, #176]	; (8006d38 <scastCommand+0x184>)
 8006c86:	f00c fcbe 	bl	8013606 <strncmp>
		direction =BACKWARD;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4698      	mov	r8, r3
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d12a      	bne.n	8006ce8 <scastCommand+0x134>
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006c92:	0029      	movs	r1, r5
 8006c94:	464a      	mov	r2, r9
 8006c96:	a815      	add	r0, sp, #84	; 0x54
 8006c98:	f00c fcc7 	bl	801362a <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006c9c:	2106      	movs	r1, #6
 8006c9e:	aa0d      	add	r2, sp, #52	; 0x34
 8006ca0:	0020      	movs	r0, r4
 8006ca2:	f007 f867 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006ca6:	f00b ffb2 	bl	8012c0e <atol>
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006caa:	2107      	movs	r1, #7
 8006cac:	aa0e      	add	r2, sp, #56	; 0x38
	count =(uint32_t )atol((char* )pcParameterString6);
 8006cae:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006cb0:	0020      	movs	r0, r4
 8006cb2:	f007 f85f 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006cb6:	f00b ffaa 	bl	8012c0e <atol>
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006cba:	2300      	movs	r3, #0
 8006cbc:	9303      	str	r3, [sp, #12]
 8006cbe:	4643      	mov	r3, r8
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006cc0:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006cc2:	9002      	str	r0, [sp, #8]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	465a      	mov	r2, fp
 8006cc8:	003b      	movs	r3, r7
 8006cca:	0031      	movs	r1, r6
 8006ccc:	4650      	mov	r0, sl
 8006cce:	9501      	str	r5, [sp, #4]
 8006cd0:	f001 fad8 	bl	8008284 <StartScastDMAStream>
	if(result == BOS_OK){
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d011      	beq.n	8006cfc <scastCommand+0x148>
}
 8006cd8:	2000      	movs	r0, #0
 8006cda:	b019      	add	sp, #100	; 0x64
 8006cdc:	bcf0      	pop	{r4, r5, r6, r7}
 8006cde:	46bb      	mov	fp, r7
 8006ce0:	46b2      	mov	sl, r6
 8006ce2:	46a9      	mov	r9, r5
 8006ce4:	46a0      	mov	r8, r4
 8006ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006ce8:	464a      	mov	r2, r9
 8006cea:	0028      	movs	r0, r5
 8006cec:	4913      	ldr	r1, [pc, #76]	; (8006d3c <scastCommand+0x188>)
 8006cee:	f00c fc8a 	bl	8013606 <strncmp>
		direction =BIDIRECTIONAL;
 8006cf2:	4243      	negs	r3, r0
 8006cf4:	4158      	adcs	r0, r3
 8006cf6:	0043      	lsls	r3, r0, #1
 8006cf8:	4698      	mov	r8, r3
 8006cfa:	e7ca      	b.n	8006c92 <scastCommand+0xde>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006cfc:	ab12      	add	r3, sp, #72	; 0x48
 8006cfe:	9302      	str	r3, [sp, #8]
 8006d00:	465b      	mov	r3, fp
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	ab0f      	add	r3, sp, #60	; 0x3c
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	490d      	ldr	r1, [pc, #52]	; (8006d40 <scastCommand+0x18c>)
 8006d0a:	4653      	mov	r3, sl
 8006d0c:	9807      	ldr	r0, [sp, #28]
 8006d0e:	9404      	str	r4, [sp, #16]
 8006d10:	9503      	str	r5, [sp, #12]
 8006d12:	aa15      	add	r2, sp, #84	; 0x54
 8006d14:	f00c fc34 	bl	8013580 <sprintf>
 8006d18:	e7de      	b.n	8006cd8 <scastCommand+0x124>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f00b ff77 	bl	8012c0e <atol>
 8006d20:	b2c3      	uxtb	r3, r0
 8006d22:	469b      	mov	fp, r3
 8006d24:	e78e      	b.n	8006c44 <scastCommand+0x90>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006d26:	3001      	adds	r0, #1
 8006d28:	f00b ff71 	bl	8012c0e <atol>
 8006d2c:	b2c3      	uxtb	r3, r0
 8006d2e:	469a      	mov	sl, r3
 8006d30:	e76f      	b.n	8006c12 <scastCommand+0x5e>
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	0801aee0 	.word	0x0801aee0
 8006d38:	0801aee8 	.word	0x0801aee8
 8006d3c:	0801aef4 	.word	0x0801aef4
 8006d40:	0801af04 	.word	0x0801af04

08006d44 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d44:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(N > 1)
 8006d46:	4d37      	ldr	r5, [pc, #220]	; (8006e24 <infoCommand+0xe0>)
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d48:	0004      	movs	r4, r0
	if(N > 1)
 8006d4a:	782a      	ldrb	r2, [r5, #0]
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d4c:	b083      	sub	sp, #12
	if(N > 1)
 8006d4e:	2a01      	cmp	r2, #1
 8006d50:	d82c      	bhi.n	8006dac <infoCommand+0x68>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006d52:	4935      	ldr	r1, [pc, #212]	; (8006e28 <infoCommand+0xe4>)
 8006d54:	f00c fc14 	bl	8013580 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006d58:	2601      	movs	r6, #1
 8006d5a:	0020      	movs	r0, r4
 8006d5c:	f7f9 f9dc 	bl	8000118 <strlen>
 8006d60:	4d32      	ldr	r5, [pc, #200]	; (8006e2c <infoCommand+0xe8>)
 8006d62:	4276      	negs	r6, r6
 8006d64:	2332      	movs	r3, #50	; 0x32
 8006d66:	b282      	uxth	r2, r0
 8006d68:	0021      	movs	r1, r4
 8006d6a:	7828      	ldrb	r0, [r5, #0]
 8006d6c:	9600      	str	r6, [sp, #0]
 8006d6e:	f006 fc75 	bl	800d65c <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006d72:	2213      	movs	r2, #19
 8006d74:	492e      	ldr	r1, [pc, #184]	; (8006e30 <infoCommand+0xec>)
 8006d76:	0020      	movs	r0, r4
 8006d78:	f00c fa08 	bl	801318c <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006d7c:	0020      	movs	r0, r4
 8006d7e:	f7f9 f9cb 	bl	8000118 <strlen>
 8006d82:	2332      	movs	r3, #50	; 0x32
 8006d84:	b282      	uxth	r2, r0
 8006d86:	0021      	movs	r1, r4
 8006d88:	7828      	ldrb	r0, [r5, #0]
 8006d8a:	9600      	str	r6, [sp, #0]
 8006d8c:	f006 fc66 	bl	800d65c <writePxMutex>
	DisplayTopology(PcPort);
 8006d90:	7828      	ldrb	r0, [r5, #0]
 8006d92:	f7fc fffd 	bl	8003d90 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006d96:	7828      	ldrb	r0, [r5, #0]
 8006d98:	f7fd f8ce 	bl	8003f38 <DisplayPortsDir>
	sprintf((char* )pcWriteBuffer," ");
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	0020      	movs	r0, r4
 8006da0:	4924      	ldr	r1, [pc, #144]	; (8006e34 <infoCommand+0xf0>)
 8006da2:	f00c f9f3 	bl	801318c <memcpy>
}
 8006da6:	2000      	movs	r0, #0
 8006da8:	b003      	add	sp, #12
 8006daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006dac:	f006 fd04 	bl	800d7b8 <ReadPortsDir>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006db0:	782a      	ldrb	r2, [r5, #0]
 8006db2:	491d      	ldr	r1, [pc, #116]	; (8006e28 <infoCommand+0xe4>)
		result =ReadPortsDir();
 8006db4:	0006      	movs	r6, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006db6:	0020      	movs	r0, r4
 8006db8:	f00c fbe2 	bl	8013580 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006dbc:	2701      	movs	r7, #1
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	f7f9 f9aa 	bl	8000118 <strlen>
 8006dc4:	4d19      	ldr	r5, [pc, #100]	; (8006e2c <infoCommand+0xe8>)
 8006dc6:	427f      	negs	r7, r7
 8006dc8:	2332      	movs	r3, #50	; 0x32
 8006dca:	b282      	uxth	r2, r0
 8006dcc:	0021      	movs	r1, r4
 8006dce:	7828      	ldrb	r0, [r5, #0]
 8006dd0:	9700      	str	r7, [sp, #0]
 8006dd2:	f006 fc43 	bl	800d65c <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006dd6:	2213      	movs	r2, #19
 8006dd8:	4915      	ldr	r1, [pc, #84]	; (8006e30 <infoCommand+0xec>)
 8006dda:	0020      	movs	r0, r4
 8006ddc:	f00c f9d6 	bl	801318c <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006de0:	0020      	movs	r0, r4
 8006de2:	f7f9 f999 	bl	8000118 <strlen>
 8006de6:	2332      	movs	r3, #50	; 0x32
 8006de8:	b282      	uxth	r2, r0
 8006dea:	0021      	movs	r1, r4
 8006dec:	7828      	ldrb	r0, [r5, #0]
 8006dee:	9700      	str	r7, [sp, #0]
 8006df0:	f006 fc34 	bl	800d65c <writePxMutex>
	DisplayTopology(PcPort);
 8006df4:	7828      	ldrb	r0, [r5, #0]
 8006df6:	f7fc ffcb 	bl	8003d90 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006dfa:	7828      	ldrb	r0, [r5, #0]
 8006dfc:	f7fd f89c 	bl	8003f38 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006e00:	2e02      	cmp	r6, #2
 8006e02:	d1cb      	bne.n	8006d9c <infoCommand+0x58>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006e04:	2244      	movs	r2, #68	; 0x44
 8006e06:	490c      	ldr	r1, [pc, #48]	; (8006e38 <infoCommand+0xf4>)
 8006e08:	0020      	movs	r0, r4
 8006e0a:	f00c f9bf 	bl	801318c <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006e0e:	0020      	movs	r0, r4
 8006e10:	f7f9 f982 	bl	8000118 <strlen>
 8006e14:	2332      	movs	r3, #50	; 0x32
 8006e16:	b282      	uxth	r2, r0
 8006e18:	0021      	movs	r1, r4
 8006e1a:	7828      	ldrb	r0, [r5, #0]
 8006e1c:	9700      	str	r7, [sp, #0]
 8006e1e:	f006 fc1d 	bl	800d65c <writePxMutex>
 8006e22:	e7bb      	b.n	8006d9c <infoCommand+0x58>
 8006e24:	20000008 	.word	0x20000008
 8006e28:	0801af8c 	.word	0x0801af8c
 8006e2c:	20000c60 	.word	0x20000c60
 8006e30:	0801afa8 	.word	0x0801afa8
 8006e34:	08019b48 	.word	0x08019b48
 8006e38:	0801afbc 	.word	0x0801afbc

08006e3c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e3c:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7fd f8fa 	bl	8004038 <DisplayModuleStatus>
}
 8006e44:	2000      	movs	r0, #0
 8006e46:	bd10      	pop	{r4, pc}

08006e48 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	46de      	mov	lr, fp
 8006e4c:	464e      	mov	r6, r9
 8006e4e:	4657      	mov	r7, sl
 8006e50:	4645      	mov	r5, r8
	char module[MaxLengthOfAlias + 30] ={0};
 8006e52:	2400      	movs	r4, #0
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e54:	b5e0      	push	{r5, r6, r7, lr}
 8006e56:	b091      	sub	sp, #68	; 0x44
 8006e58:	4691      	mov	r9, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	2223      	movs	r2, #35	; 0x23
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e5e:	0007      	movs	r7, r0
	char module[MaxLengthOfAlias + 30] ={0};
 8006e60:	a807      	add	r0, sp, #28
 8006e62:	9406      	str	r4, [sp, #24]
 8006e64:	f00c f99b 	bl	801319e <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006e68:	2206      	movs	r2, #6
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	a804      	add	r0, sp, #16
 8006e6e:	9403      	str	r4, [sp, #12]
 8006e70:	f00c f995 	bl	801319e <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e74:	4d56      	ldr	r5, [pc, #344]	; (8006fd0 <groupCommand+0x188>)
 8006e76:	2101      	movs	r1, #1
 8006e78:	002a      	movs	r2, r5
 8006e7a:	4648      	mov	r0, r9
 8006e7c:	3250      	adds	r2, #80	; 0x50
 8006e7e:	f006 ff79 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e82:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e84:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006e86:	a803      	add	r0, sp, #12
 8006e88:	f00c fbcf 	bl	801362a <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e8c:	4c51      	ldr	r4, [pc, #324]	; (8006fd4 <groupCommand+0x18c>)
 8006e8e:	0026      	movs	r6, r4
 8006e90:	3664      	adds	r6, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006e92:	0021      	movs	r1, r4
 8006e94:	a803      	add	r0, sp, #12
 8006e96:	f7f9 f935 	bl	8000104 <strcmp>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d04d      	beq.n	8006f3a <groupCommand+0xf2>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006e9e:	340a      	adds	r4, #10
 8006ea0:	42a6      	cmp	r6, r4
 8006ea2:	d1f6      	bne.n	8006e92 <groupCommand+0x4a>
	type =1;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	9301      	str	r3, [sp, #4]
	count =2;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2454      	movs	r4, #84	; 0x54
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006eac:	220a      	movs	r2, #10
 8006eae:	494a      	ldr	r1, [pc, #296]	; (8006fd8 <groupCommand+0x190>)
 8006eb0:	0038      	movs	r0, r7
	count =2;
 8006eb2:	552b      	strb	r3, [r5, r4]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006eb4:	f00c f96a 	bl	801318c <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006eb8:	002a      	movs	r2, r5
 8006eba:	2102      	movs	r1, #2
 8006ebc:	4648      	mov	r0, r9
 8006ebe:	3258      	adds	r2, #88	; 0x58
 8006ec0:	f006 ff58 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 8006ec4:	1e01      	subs	r1, r0, #0
 8006ec6:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006ec8:	d100      	bne.n	8006ecc <groupCommand+0x84>
 8006eca:	e07c      	b.n	8006fc6 <groupCommand+0x17e>
		module[xParameterStringLength] ='\0';
 8006ecc:	2300      	movs	r3, #0
 8006ece:	469a      	mov	sl, r3
		if(count > 2)
 8006ed0:	3354      	adds	r3, #84	; 0x54
 8006ed2:	4698      	mov	r8, r3
			strcat((char* )pcWriteBuffer,", ");
 8006ed4:	4b41      	ldr	r3, [pc, #260]	; (8006fdc <groupCommand+0x194>)
 8006ed6:	ae06      	add	r6, sp, #24
 8006ed8:	469b      	mov	fp, r3
 8006eda:	e00f      	b.n	8006efc <groupCommand+0xb4>
		strcat((char* )pcWriteBuffer,module);
 8006edc:	0031      	movs	r1, r6
 8006ede:	0038      	movs	r0, r7
 8006ee0:	f00c fb6e 	bl	80135c0 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006ee4:	002a      	movs	r2, r5
 8006ee6:	4643      	mov	r3, r8
 8006ee8:	3401      	adds	r4, #1
 8006eea:	b261      	sxtb	r1, r4
 8006eec:	4648      	mov	r0, r9
 8006eee:	3258      	adds	r2, #88	; 0x58
 8006ef0:	54e9      	strb	r1, [r5, r3]
 8006ef2:	f006 ff3f 	bl	800dd74 <FreeRTOS_CLIGetParameter>
 8006ef6:	1e01      	subs	r1, r0, #0
 8006ef8:	65e8      	str	r0, [r5, #92]	; 0x5c
	while(pcParameterString != NULL){
 8006efa:	d033      	beq.n	8006f64 <groupCommand+0x11c>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006efc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006efe:	0030      	movs	r0, r6
 8006f00:	0022      	movs	r2, r4
 8006f02:	f00c fb92 	bl	801362a <strncpy>
		module[xParameterStringLength] ='\0';
 8006f06:	4653      	mov	r3, sl
		modID =GetID(module);
 8006f08:	0030      	movs	r0, r6
		module[xParameterStringLength] ='\0';
 8006f0a:	5533      	strb	r3, [r6, r4]
		modID =GetID(module);
 8006f0c:	f7fd fa0e 	bl	800432c <GetID>
		if(modID < 0)
 8006f10:	2800      	cmp	r0, #0
 8006f12:	db38      	blt.n	8006f86 <groupCommand+0x13e>
		result =AddModuleToGroup(modID,alias);
 8006f14:	b2c0      	uxtb	r0, r0
 8006f16:	a903      	add	r1, sp, #12
 8006f18:	f7fd fad0 	bl	80044bc <AddModuleToGroup>
		if(result != BOS_OK)
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d10f      	bne.n	8006f40 <groupCommand+0xf8>
		if(count > 2)
 8006f20:	4643      	mov	r3, r8
 8006f22:	56ec      	ldrsb	r4, [r5, r3]
 8006f24:	2c02      	cmp	r4, #2
 8006f26:	ddd9      	ble.n	8006edc <groupCommand+0x94>
			strcat((char* )pcWriteBuffer,", ");
 8006f28:	0038      	movs	r0, r7
 8006f2a:	f7f9 f8f5 	bl	8000118 <strlen>
 8006f2e:	2203      	movs	r2, #3
 8006f30:	4659      	mov	r1, fp
 8006f32:	1838      	adds	r0, r7, r0
 8006f34:	f00c f92a 	bl	801318c <memcpy>
 8006f38:	e7d0      	b.n	8006edc <groupCommand+0x94>
			type =0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	e7b3      	b.n	8006ea8 <groupCommand+0x60>
	else if(count == 2)
 8006f40:	2354      	movs	r3, #84	; 0x54
 8006f42:	56eb      	ldrsb	r3, [r5, r3]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d02c      	beq.n	8006fa2 <groupCommand+0x15a>
	else if(result == BOS_ERR_Keyword)
 8006f48:	2806      	cmp	r0, #6
 8006f4a:	d024      	beq.n	8006f96 <groupCommand+0x14e>
	else if(result == BOS_ERR_ExistingAlias)
 8006f4c:	2807      	cmp	r0, #7
 8006f4e:	d02e      	beq.n	8006fae <groupCommand+0x166>
	else if(result == BOS_ERR_ExistingCmd)
 8006f50:	2808      	cmp	r0, #8
 8006f52:	d032      	beq.n	8006fba <groupCommand+0x172>
}
 8006f54:	2000      	movs	r0, #0
 8006f56:	b011      	add	sp, #68	; 0x44
 8006f58:	bcf0      	pop	{r4, r5, r6, r7}
 8006f5a:	46bb      	mov	fp, r7
 8006f5c:	46b2      	mov	sl, r6
 8006f5e:	46a9      	mov	r9, r5
 8006f60:	46a0      	mov	r8, r4
 8006f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006f64:	4643      	mov	r3, r8
 8006f66:	56eb      	ldrsb	r3, [r5, r3]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d01a      	beq.n	8006fa2 <groupCommand+0x15a>
	else if(result == BOS_OK && type){
 8006f6c:	9b01      	ldr	r3, [sp, #4]
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006f6e:	aa03      	add	r2, sp, #12
	else if(result == BOS_OK && type){
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10e      	bne.n	8006f92 <groupCommand+0x14a>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006f74:	491a      	ldr	r1, [pc, #104]	; (8006fe0 <groupCommand+0x198>)
 8006f76:	0030      	movs	r0, r6
 8006f78:	f00c fb02 	bl	8013580 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006f7c:	0031      	movs	r1, r6
 8006f7e:	0038      	movs	r0, r7
 8006f80:	f00c fb1e 	bl	80135c0 <strcat>
 8006f84:	e7e6      	b.n	8006f54 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006f86:	0032      	movs	r2, r6
 8006f88:	0038      	movs	r0, r7
 8006f8a:	4916      	ldr	r1, [pc, #88]	; (8006fe4 <groupCommand+0x19c>)
 8006f8c:	f00c faf8 	bl	8013580 <sprintf>
	return pdFALSE;
 8006f90:	e7e0      	b.n	8006f54 <groupCommand+0x10c>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006f92:	4915      	ldr	r1, [pc, #84]	; (8006fe8 <groupCommand+0x1a0>)
 8006f94:	e7ef      	b.n	8006f76 <groupCommand+0x12e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006f96:	0038      	movs	r0, r7
 8006f98:	4914      	ldr	r1, [pc, #80]	; (8006fec <groupCommand+0x1a4>)
 8006f9a:	aa03      	add	r2, sp, #12
 8006f9c:	f00c faf0 	bl	8013580 <sprintf>
 8006fa0:	e7d8      	b.n	8006f54 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006fa2:	0038      	movs	r0, r7
 8006fa4:	4912      	ldr	r1, [pc, #72]	; (8006ff0 <groupCommand+0x1a8>)
 8006fa6:	aa03      	add	r2, sp, #12
 8006fa8:	f00c faea 	bl	8013580 <sprintf>
 8006fac:	e7d2      	b.n	8006f54 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006fae:	0038      	movs	r0, r7
 8006fb0:	4910      	ldr	r1, [pc, #64]	; (8006ff4 <groupCommand+0x1ac>)
 8006fb2:	aa03      	add	r2, sp, #12
 8006fb4:	f00c fae4 	bl	8013580 <sprintf>
 8006fb8:	e7cc      	b.n	8006f54 <groupCommand+0x10c>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006fba:	0038      	movs	r0, r7
 8006fbc:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <groupCommand+0x1b0>)
 8006fbe:	aa03      	add	r2, sp, #12
 8006fc0:	f00c fade 	bl	8013580 <sprintf>
 8006fc4:	e7c6      	b.n	8006f54 <groupCommand+0x10c>
	else if(count == 2)
 8006fc6:	572b      	ldrsb	r3, [r5, r4]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d0ea      	beq.n	8006fa2 <groupCommand+0x15a>
 8006fcc:	ae06      	add	r6, sp, #24
 8006fce:	e7cd      	b.n	8006f6c <groupCommand+0x124>
 8006fd0:	20001910 	.word	0x20001910
 8006fd4:	20000ae0 	.word	0x20000ae0
 8006fd8:	0801b000 	.word	0x0801b000
 8006fdc:	0801b00c 	.word	0x0801b00c
 8006fe0:	0801b058 	.word	0x0801b058
 8006fe4:	0801b12c 	.word	0x0801b12c
 8006fe8:	0801b03c 	.word	0x0801b03c
 8006fec:	0801b078 	.word	0x0801b078
 8006ff0:	0801b010 	.word	0x0801b010
 8006ff4:	0801b0b8 	.word	0x0801b0b8
 8006ff8:	0801b0ec 	.word	0x0801b0ec

08006ffc <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ffc:	b570      	push	{r4, r5, r6, lr}
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ffe:	4c1b      	ldr	r4, [pc, #108]	; (800706c <nameCommand+0x70>)
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007000:	0005      	movs	r5, r0
 8007002:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007004:	0022      	movs	r2, r4
 8007006:	2101      	movs	r1, #1
 8007008:	3260      	adds	r2, #96	; 0x60
 800700a:	f006 feb3 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(xParameterStringLength1 > MaxLengthOfAlias){
 800700e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007010:	0001      	movs	r1, r0
 8007012:	6660      	str	r0, [r4, #100]	; 0x64
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007014:	2b09      	cmp	r3, #9
 8007016:	dd01      	ble.n	800701c <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007018:	2300      	movs	r3, #0
 800701a:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 800701c:	4e14      	ldr	r6, [pc, #80]	; (8007070 <nameCommand+0x74>)
 800701e:	7830      	ldrb	r0, [r6, #0]
 8007020:	f7fd f9e6 	bl	80043f0 <NameModule>
	if(result == BOS_OK)
 8007024:	2800      	cmp	r0, #0
 8007026:	d007      	beq.n	8007038 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8007028:	2806      	cmp	r0, #6
 800702a:	d012      	beq.n	8007052 <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 800702c:	2807      	cmp	r0, #7
 800702e:	d00a      	beq.n	8007046 <nameCommand+0x4a>
	else if(result == BOS_ERR_ExistingCmd)
 8007030:	2808      	cmp	r0, #8
 8007032:	d014      	beq.n	800705e <nameCommand+0x62>
}
 8007034:	2000      	movs	r0, #0
 8007036:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007038:	0028      	movs	r0, r5
 800703a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800703c:	7832      	ldrb	r2, [r6, #0]
 800703e:	490d      	ldr	r1, [pc, #52]	; (8007074 <nameCommand+0x78>)
 8007040:	f00c fa9e 	bl	8013580 <sprintf>
 8007044:	e7f6      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007046:	0028      	movs	r0, r5
 8007048:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800704a:	490b      	ldr	r1, [pc, #44]	; (8007078 <nameCommand+0x7c>)
 800704c:	f00c fa98 	bl	8013580 <sprintf>
 8007050:	e7f0      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8007052:	0028      	movs	r0, r5
 8007054:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007056:	4909      	ldr	r1, [pc, #36]	; (800707c <nameCommand+0x80>)
 8007058:	f00c fa92 	bl	8013580 <sprintf>
 800705c:	e7ea      	b.n	8007034 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 800705e:	0028      	movs	r0, r5
 8007060:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007062:	4907      	ldr	r1, [pc, #28]	; (8007080 <nameCommand+0x84>)
 8007064:	f00c fa8c 	bl	8013580 <sprintf>
 8007068:	e7e4      	b.n	8007034 <nameCommand+0x38>
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	20001910 	.word	0x20001910
 8007070:	20000aa8 	.word	0x20000aa8
 8007074:	0801b150 	.word	0x0801b150
 8007078:	0801b0b8 	.word	0x0801b0b8
 800707c:	0801b078 	.word	0x0801b078
 8007080:	0801b0ec 	.word	0x0801b0ec

08007084 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007084:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 8007086:	4b12      	ldr	r3, [pc, #72]	; (80070d0 <pingCommand+0x4c>)
 8007088:	4912      	ldr	r1, [pc, #72]	; (80070d4 <pingCommand+0x50>)
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	0093      	lsls	r3, r2, #2
 800708e:	189b      	adds	r3, r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	5c5c      	ldrb	r4, [r3, r1]
 8007094:	2c00      	cmp	r4, #0
 8007096:	d115      	bne.n	80070c4 <pingCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007098:	490f      	ldr	r1, [pc, #60]	; (80070d8 <pingCommand+0x54>)
 800709a:	f00c fa71 	bl	8013580 <sprintf>
	RTOS_IND_blink(200);
 800709e:	2180      	movs	r1, #128	; 0x80
 80070a0:	2090      	movs	r0, #144	; 0x90
 80070a2:	2201      	movs	r2, #1
 80070a4:	0109      	lsls	r1, r1, #4
 80070a6:	05c0      	lsls	r0, r0, #23
 80070a8:	f00a f8ee 	bl	8011288 <HAL_GPIO_WritePin>
 80070ac:	20c8      	movs	r0, #200	; 0xc8
 80070ae:	f006 fcb5 	bl	800da1c <osDelay>
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	2090      	movs	r0, #144	; 0x90
 80070b6:	2200      	movs	r2, #0
 80070b8:	0109      	lsls	r1, r1, #4
 80070ba:	05c0      	lsls	r0, r0, #23
 80070bc:	f00a f8e4 	bl	8011288 <HAL_GPIO_WritePin>
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80070c4:	185b      	adds	r3, r3, r1
 80070c6:	4905      	ldr	r1, [pc, #20]	; (80070dc <pingCommand+0x58>)
 80070c8:	f00c fa5a 	bl	8013580 <sprintf>
 80070cc:	e7e7      	b.n	800709e <pingCommand+0x1a>
 80070ce:	46c0      	nop			; (mov r8, r8)
 80070d0:	20000aa8 	.word	0x20000aa8
 80070d4:	20000e74 	.word	0x20000e74
 80070d8:	0801b168 	.word	0x0801b168
 80070dc:	0801b17c 	.word	0x0801b17c

080070e0 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070e0:	b510      	push	{r4, lr}
 80070e2:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80070e4:	2241      	movs	r2, #65	; 0x41
 80070e6:	4904      	ldr	r1, [pc, #16]	; (80070f8 <prvRunTimeStatsCommand+0x18>)
 80070e8:	f00c f850 	bl	801318c <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80070ec:	0020      	movs	r0, r4
 80070ee:	3040      	adds	r0, #64	; 0x40
 80070f0:	f007 fef8 	bl	800eee4 <vTaskGetRunTimeStats>
}
 80070f4:	2000      	movs	r0, #0
 80070f6:	bd10      	pop	{r4, pc}
 80070f8:	0801b198 	.word	0x0801b198

080070fc <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070fc:	b510      	push	{r4, lr}
 80070fe:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8007100:	2250      	movs	r2, #80	; 0x50
 8007102:	4904      	ldr	r1, [pc, #16]	; (8007114 <prvTaskStatsCommand+0x18>)
 8007104:	f00c f842 	bl	801318c <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007108:	0020      	movs	r0, r4
 800710a:	304f      	adds	r0, #79	; 0x4f
 800710c:	f007 fe7a 	bl	800ee04 <vTaskList>
}
 8007110:	2000      	movs	r0, #0
 8007112:	bd10      	pop	{r4, pc}
 8007114:	0801b1dc 	.word	0x0801b1dc

08007118 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007118:	b510      	push	{r4, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	0004      	movs	r4, r0
	GetTimeDate();
 800711e:	f006 f879 	bl	800d214 <GetTimeDate>
	if(BOS.hourformat == 24)
 8007122:	4915      	ldr	r1, [pc, #84]	; (8007178 <timeCommand+0x60>)
 8007124:	7b4b      	ldrb	r3, [r1, #13]
 8007126:	2b18      	cmp	r3, #24
 8007128:	d00d      	beq.n	8007146 <timeCommand+0x2e>
	else if(BOS.hourformat == 12){
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d002      	beq.n	8007134 <timeCommand+0x1c>
}
 800712e:	2000      	movs	r0, #0
 8007130:	b004      	add	sp, #16
 8007132:	bd10      	pop	{r4, pc}
		if(BOS.time.ampm == RTC_AM)
 8007134:	7ccb      	ldrb	r3, [r1, #19]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d010      	beq.n	800715c <timeCommand+0x44>
		else if(BOS.time.ampm == RTC_PM)
 800713a:	2b02      	cmp	r3, #2
 800713c:	d1f7      	bne.n	800712e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 800713e:	7c4b      	ldrb	r3, [r1, #17]
 8007140:	7c8a      	ldrb	r2, [r1, #18]
 8007142:	480e      	ldr	r0, [pc, #56]	; (800717c <timeCommand+0x64>)
 8007144:	e00d      	b.n	8007162 <timeCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8007146:	89c8      	ldrh	r0, [r1, #14]
 8007148:	7c4b      	ldrb	r3, [r1, #17]
 800714a:	7c8a      	ldrb	r2, [r1, #18]
 800714c:	9001      	str	r0, [sp, #4]
 800714e:	7c09      	ldrb	r1, [r1, #16]
 8007150:	0020      	movs	r0, r4
 8007152:	9100      	str	r1, [sp, #0]
 8007154:	490a      	ldr	r1, [pc, #40]	; (8007180 <timeCommand+0x68>)
 8007156:	f00c fa13 	bl	8013580 <sprintf>
 800715a:	e7e8      	b.n	800712e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 800715c:	7c4b      	ldrb	r3, [r1, #17]
 800715e:	7c8a      	ldrb	r2, [r1, #18]
 8007160:	4808      	ldr	r0, [pc, #32]	; (8007184 <timeCommand+0x6c>)
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8007162:	9002      	str	r0, [sp, #8]
 8007164:	89c8      	ldrh	r0, [r1, #14]
 8007166:	9001      	str	r0, [sp, #4]
 8007168:	7c09      	ldrb	r1, [r1, #16]
 800716a:	0020      	movs	r0, r4
 800716c:	9100      	str	r1, [sp, #0]
 800716e:	4906      	ldr	r1, [pc, #24]	; (8007188 <timeCommand+0x70>)
 8007170:	f00c fa06 	bl	8013580 <sprintf>
 8007174:	e7db      	b.n	800712e <timeCommand+0x16>
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	20000b54 	.word	0x20000b54
 800717c:	0801b284 	.word	0x0801b284
 8007180:	0801b22c 	.word	0x0801b22c
 8007184:	0801b280 	.word	0x0801b280
 8007188:	0801b254 	.word	0x0801b254

0800718c <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800718c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800718e:	46c6      	mov	lr, r8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007190:	4c4e      	ldr	r4, [pc, #312]	; (80072cc <bootloaderUpdateCommand+0x140>)
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007192:	0015      	movs	r5, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007194:	0022      	movs	r2, r4
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007196:	2300      	movs	r3, #0
 8007198:	b500      	push	{lr}
 800719a:	0006      	movs	r6, r0
 800719c:	b082      	sub	sp, #8
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800719e:	2101      	movs	r1, #1
 80071a0:	0028      	movs	r0, r5
 80071a2:	3268      	adds	r2, #104	; 0x68
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071a4:	2700      	movs	r7, #0
 80071a6:	4698      	mov	r8, r3
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80071a8:	f006 fde4 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d063      	beq.n	8007278 <bootloaderUpdateCommand+0xec>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80071b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80071b2:	4947      	ldr	r1, [pc, #284]	; (80072d0 <bootloaderUpdateCommand+0x144>)
 80071b4:	f00c fa27 	bl	8013606 <strncmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d133      	bne.n	8007224 <bootloaderUpdateCommand+0x98>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80071bc:	0022      	movs	r2, r4
 80071be:	2102      	movs	r1, #2
 80071c0:	0028      	movs	r0, r5
 80071c2:	326c      	adds	r2, #108	; 0x6c
 80071c4:	f006 fdd6 	bl	800dd74 <FreeRTOS_CLIGetParameter>
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071c8:	0022      	movs	r2, r4
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80071ca:	6720      	str	r0, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071cc:	3274      	adds	r2, #116	; 0x74
 80071ce:	0028      	movs	r0, r5
 80071d0:	2103      	movs	r1, #3
 80071d2:	f006 fdcf 	bl	800dd74 <FreeRTOS_CLIGetParameter>
			if(pcParameterString2[0] == '#'){
 80071d6:	2200      	movs	r2, #0
 80071d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071da:	67a0      	str	r0, [r4, #120]	; 0x78
			if(pcParameterString2[0] == '#'){
 80071dc:	569a      	ldrsb	r2, [r3, r2]
				result =BOS_ERR_WrongValue;
 80071de:	2568      	movs	r5, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071e0:	2a23      	cmp	r2, #35	; 0x23
 80071e2:	d042      	beq.n	800726a <bootloaderUpdateCommand+0xde>
			if(pcParameterString3[0] == 'p'){
 80071e4:	2300      	movs	r3, #0
 80071e6:	56c3      	ldrsb	r3, [r0, r3]
 80071e8:	2b70      	cmp	r3, #112	; 0x70
 80071ea:	d038      	beq.n	800725e <bootloaderUpdateCommand+0xd2>
				result =BOS_ERR_WrongValue;
 80071ec:	2568      	movs	r5, #104	; 0x68
			if(module != myID){
 80071ee:	4c39      	ldr	r4, [pc, #228]	; (80072d4 <bootloaderUpdateCommand+0x148>)
 80071f0:	7823      	ldrb	r3, [r4, #0]
 80071f2:	42bb      	cmp	r3, r7
 80071f4:	d020      	beq.n	8007238 <bootloaderUpdateCommand+0xac>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071f6:	2200      	movs	r2, #0
 80071f8:	4b37      	ldr	r3, [pc, #220]	; (80072d8 <bootloaderUpdateCommand+0x14c>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071fa:	211a      	movs	r1, #26
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071fc:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071fe:	4642      	mov	r2, r8
 8007200:	4b36      	ldr	r3, [pc, #216]	; (80072dc <bootloaderUpdateCommand+0x150>)
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007202:	0038      	movs	r0, r7
				messageParams[0] =port;
 8007204:	701a      	strb	r2, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007206:	2201      	movs	r2, #1
 8007208:	f001 f806 	bl	8008218 <SendMessageToModule>
				osDelay(100);
 800720c:	2064      	movs	r0, #100	; 0x64
 800720e:	f006 fc05 	bl	800da1c <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007212:	4b33      	ldr	r3, [pc, #204]	; (80072e0 <bootloaderUpdateCommand+0x154>)
 8007214:	0039      	movs	r1, r7
 8007216:	781a      	ldrb	r2, [r3, #0]
 8007218:	7820      	ldrb	r0, [r4, #0]
 800721a:	4643      	mov	r3, r8
 800721c:	f003 f93a 	bl	800a494 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007220:	2d68      	cmp	r5, #104	; 0x68
 8007222:	d104      	bne.n	800722e <bootloaderUpdateCommand+0xa2>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007224:	220f      	movs	r2, #15
 8007226:	0030      	movs	r0, r6
 8007228:	492e      	ldr	r1, [pc, #184]	; (80072e4 <bootloaderUpdateCommand+0x158>)
 800722a:	f00b ffaf 	bl	801318c <memcpy>
}
 800722e:	2000      	movs	r0, #0
 8007230:	b002      	add	sp, #8
 8007232:	bc80      	pop	{r7}
 8007234:	46b8      	mov	r8, r7
 8007236:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4640      	mov	r0, r8
 8007242:	3319      	adds	r3, #25
 8007244:	f000 fd78 	bl	8007d38 <SendMessageFromPort>
				osDelay(100);
 8007248:	2064      	movs	r0, #100	; 0x64
 800724a:	f006 fbe7 	bl	800da1c <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800724e:	7820      	ldrb	r0, [r4, #0]
 8007250:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <bootloaderUpdateCommand+0x154>)
 8007252:	0001      	movs	r1, r0
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	4643      	mov	r3, r8
 8007258:	f003 f91c 	bl	800a494 <remoteBootloaderUpdate>
 800725c:	e7e0      	b.n	8007220 <bootloaderUpdateCommand+0x94>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800725e:	3001      	adds	r0, #1
 8007260:	f00b fcd5 	bl	8012c0e <atol>
 8007264:	b2c3      	uxtb	r3, r0
 8007266:	4698      	mov	r8, r3
 8007268:	e7c1      	b.n	80071ee <bootloaderUpdateCommand+0x62>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 800726a:	1c58      	adds	r0, r3, #1
 800726c:	f00b fccf 	bl	8012c0e <atol>
	BOS_Status result =BOS_OK;
 8007270:	2500      	movs	r5, #0
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007272:	b2c7      	uxtb	r7, r0
			if(pcParameterString3[0] == 'p'){
 8007274:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007276:	e7b5      	b.n	80071e4 <bootloaderUpdateCommand+0x58>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007278:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <bootloaderUpdateCommand+0x148>)
 800727a:	0030      	movs	r0, r6
 800727c:	781a      	ldrb	r2, [r3, #0]
 800727e:	491a      	ldr	r1, [pc, #104]	; (80072e8 <bootloaderUpdateCommand+0x15c>)
 8007280:	f00c f97e 	bl	8013580 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007284:	4b19      	ldr	r3, [pc, #100]	; (80072ec <bootloaderUpdateCommand+0x160>)
 8007286:	0030      	movs	r0, r6
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	f00c f999 	bl	80135c0 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800728e:	0030      	movs	r0, r6
 8007290:	f7f8 ff42 	bl	8000118 <strlen>
 8007294:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <bootloaderUpdateCommand+0x154>)
 8007296:	b282      	uxth	r2, r0
 8007298:	7818      	ldrb	r0, [r3, #0]
 800729a:	2301      	movs	r3, #1
 800729c:	425b      	negs	r3, r3
 800729e:	0031      	movs	r1, r6
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	3333      	adds	r3, #51	; 0x33
 80072a4:	f006 f9da 	bl	800d65c <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <bootloaderUpdateCommand+0x164>)
 80072aa:	4a12      	ldr	r2, [pc, #72]	; (80072f4 <bootloaderUpdateCommand+0x168>)
		osDelay(10);
 80072ac:	200a      	movs	r0, #10
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80072ae:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80072b0:	2201      	movs	r2, #1
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <bootloaderUpdateCommand+0x16c>)
 80072b4:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80072b6:	f006 fbb1 	bl	800da1c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <bootloaderUpdateCommand+0x170>)
 80072c0:	4a0f      	ldr	r2, [pc, #60]	; (8007300 <bootloaderUpdateCommand+0x174>)
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	e7fd      	b.n	80072c8 <bootloaderUpdateCommand+0x13c>
 80072cc:	20001910 	.word	0x20001910
 80072d0:	0801b2a8 	.word	0x0801b2a8
 80072d4:	20000aa8 	.word	0x20000aa8
 80072d8:	20000b4c 	.word	0x20000b4c
 80072dc:	20000b74 	.word	0x20000b74
 80072e0:	20000c60 	.word	0x20000c60
 80072e4:	0801ac10 	.word	0x0801ac10
 80072e8:	0801b288 	.word	0x0801b288
 80072ec:	20000060 	.word	0x20000060
 80072f0:	20007ff0 	.word	0x20007ff0
 80072f4:	deadbeef 	.word	0xdeadbeef
 80072f8:	200011ef 	.word	0x200011ef
 80072fc:	e000ed00 	.word	0xe000ed00
 8007300:	05fa0004 	.word	0x05fa0004

08007304 <RegisterUserCLICommands>:
}
 8007304:	4770      	bx	lr
 8007306:	46c0      	nop			; (mov r8, r8)

08007308 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007308:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800730a:	4c46      	ldr	r4, [pc, #280]	; (8007424 <vRegisterCLICommands+0x11c>)
 800730c:	0020      	movs	r0, r4
 800730e:	3024      	adds	r0, #36	; 0x24
 8007310:	f006 fc92 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007314:	0020      	movs	r0, r4
 8007316:	3034      	adds	r0, #52	; 0x34
 8007318:	f006 fc8e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800731c:	0020      	movs	r0, r4
 800731e:	3044      	adds	r0, #68	; 0x44
 8007320:	f006 fc8a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007324:	0020      	movs	r0, r4
 8007326:	3054      	adds	r0, #84	; 0x54
 8007328:	f006 fc86 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 800732c:	0020      	movs	r0, r4
 800732e:	3064      	adds	r0, #100	; 0x64
 8007330:	f006 fc82 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007334:	0020      	movs	r0, r4
 8007336:	3074      	adds	r0, #116	; 0x74
 8007338:	f006 fc7e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 800733c:	4c3a      	ldr	r4, [pc, #232]	; (8007428 <vRegisterCLICommands+0x120>)
 800733e:	1d20      	adds	r0, r4, #4
 8007340:	f006 fc7a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007344:	0020      	movs	r0, r4
 8007346:	3014      	adds	r0, #20
 8007348:	f006 fc76 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800734c:	0020      	movs	r0, r4
 800734e:	3024      	adds	r0, #36	; 0x24
 8007350:	f006 fc72 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007354:	0020      	movs	r0, r4
 8007356:	3034      	adds	r0, #52	; 0x34
 8007358:	f006 fc6e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800735c:	0020      	movs	r0, r4
 800735e:	3044      	adds	r0, #68	; 0x44
 8007360:	f006 fc6a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007364:	0020      	movs	r0, r4
 8007366:	3054      	adds	r0, #84	; 0x54
 8007368:	f006 fc66 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800736c:	0020      	movs	r0, r4
 800736e:	3064      	adds	r0, #100	; 0x64
 8007370:	f006 fc62 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007374:	0020      	movs	r0, r4
 8007376:	3074      	adds	r0, #116	; 0x74
 8007378:	f006 fc5e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 800737c:	4c2b      	ldr	r4, [pc, #172]	; (800742c <vRegisterCLICommands+0x124>)
 800737e:	1d20      	adds	r0, r4, #4
 8007380:	f006 fc5a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007384:	0020      	movs	r0, r4
 8007386:	3014      	adds	r0, #20
 8007388:	f006 fc56 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800738c:	0020      	movs	r0, r4
 800738e:	3024      	adds	r0, #36	; 0x24
 8007390:	f006 fc52 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007394:	0020      	movs	r0, r4
 8007396:	3034      	adds	r0, #52	; 0x34
 8007398:	f006 fc4e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800739c:	0020      	movs	r0, r4
 800739e:	3044      	adds	r0, #68	; 0x44
 80073a0:	f006 fc4a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 80073a4:	0020      	movs	r0, r4
 80073a6:	3054      	adds	r0, #84	; 0x54
 80073a8:	f006 fc46 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 80073ac:	0020      	movs	r0, r4
 80073ae:	3064      	adds	r0, #100	; 0x64
 80073b0:	f006 fc42 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 80073b4:	0020      	movs	r0, r4
 80073b6:	3074      	adds	r0, #116	; 0x74
 80073b8:	f006 fc3e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80073bc:	4c1c      	ldr	r4, [pc, #112]	; (8007430 <vRegisterCLICommands+0x128>)
 80073be:	1d20      	adds	r0, r4, #4
 80073c0:	f006 fc3a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80073c4:	0020      	movs	r0, r4
 80073c6:	3014      	adds	r0, #20
 80073c8:	f006 fc36 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80073cc:	0020      	movs	r0, r4
 80073ce:	3024      	adds	r0, #36	; 0x24
 80073d0:	f006 fc32 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80073d4:	0020      	movs	r0, r4
 80073d6:	3034      	adds	r0, #52	; 0x34
 80073d8:	f006 fc2e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80073dc:	0020      	movs	r0, r4
 80073de:	3044      	adds	r0, #68	; 0x44
 80073e0:	f006 fc2a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80073e4:	0020      	movs	r0, r4
 80073e6:	3054      	adds	r0, #84	; 0x54
 80073e8:	f006 fc26 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80073ec:	0020      	movs	r0, r4
 80073ee:	3064      	adds	r0, #100	; 0x64
 80073f0:	f006 fc22 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80073f4:	0020      	movs	r0, r4
 80073f6:	3074      	adds	r0, #116	; 0x74
 80073f8:	f006 fc1e 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80073fc:	4c0d      	ldr	r4, [pc, #52]	; (8007434 <vRegisterCLICommands+0x12c>)
 80073fe:	1d20      	adds	r0, r4, #4
 8007400:	f006 fc1a 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007404:	0020      	movs	r0, r4
 8007406:	3014      	adds	r0, #20
 8007408:	f006 fc16 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800740c:	0020      	movs	r0, r4
 800740e:	3024      	adds	r0, #36	; 0x24
 8007410:	f006 fc12 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007414:	2223      	movs	r2, #35	; 0x23
 8007416:	4b08      	ldr	r3, [pc, #32]	; (8007438 <vRegisterCLICommands+0x130>)
 8007418:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800741a:	f003 f8e5 	bl	800a5e8 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800741e:	f7ff ff71 	bl	8007304 <RegisterUserCLICommands>
}
 8007422:	bd10      	pop	{r4, pc}
 8007424:	08019480 	.word	0x08019480
 8007428:	08019500 	.word	0x08019500
 800742c:	08019580 	.word	0x08019580
 8007430:	08019600 	.word	0x08019600
 8007434:	08019680 	.word	0x08019680
 8007438:	200011ec 	.word	0x200011ec

0800743c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800743c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743e:	46c6      	mov	lr, r8
 8007440:	b500      	push	{lr}
 8007442:	0005      	movs	r5, r0
 8007444:	000e      	movs	r6, r1
 8007446:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007448:	f003 f8e2 	bl	800a610 <GetPort>
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <StartDMAstream+0x50>)
	uint8_t srcPort =GetPort(huartSrc);
 800744e:	0004      	movs	r4, r0
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007450:	4698      	mov	r8, r3
 8007452:	5c1b      	ldrb	r3, [r3, r0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d905      	bls.n	8007464 <StartDMAstream+0x28>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007458:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800745a:	2b03      	cmp	r3, #3
 800745c:	d002      	beq.n	8007464 <StartDMAstream+0x28>
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
	
	return BOS_OK;
}
 800745e:	bc80      	pop	{r7}
 8007460:	46b8      	mov	r8, r7
 8007462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SwitchMsgDMAToStream(srcPort);
 8007464:	0020      	movs	r0, r4
 8007466:	f003 fac7 	bl	800a9f8 <SwitchMsgDMAToStream>
	dmaStreamDst[srcPort - 1] =huartDst;
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <StartDMAstream+0x54>)
 800746c:	1e62      	subs	r2, r4, #1
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	50d6      	str	r6, [r2, r3]
	portStatus[srcPort] =STREAM;
 8007472:	2102      	movs	r1, #2
	dmaStreamCount[srcPort - 1] =0;
 8007474:	189b      	adds	r3, r3, r2
	portStatus[srcPort] =STREAM;
 8007476:	4640      	mov	r0, r8
	dmaStreamCount[srcPort - 1] =0;
 8007478:	2200      	movs	r2, #0
	portStatus[srcPort] =STREAM;
 800747a:	5501      	strb	r1, [r0, r4]
	dmaStreamCount[srcPort - 1] =0;
 800747c:	615a      	str	r2, [r3, #20]
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 800747e:	0028      	movs	r0, r5
 8007480:	003a      	movs	r2, r7
 8007482:	0031      	movs	r1, r6
 8007484:	f003 fe8a 	bl	800b19c <DMA_STREAM_Setup>
	return BOS_OK;
 8007488:	2000      	movs	r0, #0
 800748a:	e7e8      	b.n	800745e <StartDMAstream+0x22>
 800748c:	20000c64 	.word	0x20000c64
 8007490:	2000198c 	.word	0x2000198c

08007494 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007494:	b570      	push	{r4, r5, r6, lr}
	if(portStatus[port] != STREAM){
 8007496:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <DMA_IRQHandler+0x4c>)
void DMA_IRQHandler(uint8_t port){
 8007498:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 800749a:	5c1b      	ldrb	r3, [r3, r0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d008      	beq.n	80074b2 <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80074a0:	3c01      	subs	r4, #1
 80074a2:	00e0      	lsls	r0, r4, #3
 80074a4:	1b00      	subs	r0, r0, r4
 80074a6:	4c0f      	ldr	r4, [pc, #60]	; (80074e4 <DMA_IRQHandler+0x50>)
 80074a8:	00c0      	lsls	r0, r0, #3
 80074aa:	1900      	adds	r0, r0, r4
 80074ac:	f008 fec0 	bl	8010230 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80074b2:	1e45      	subs	r5, r0, #1
 80074b4:	00e8      	lsls	r0, r5, #3
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <DMA_IRQHandler+0x54>)
 80074b8:	1b40      	subs	r0, r0, r5
 80074ba:	00c0      	lsls	r0, r0, #3
 80074bc:	18c0      	adds	r0, r0, r3
 80074be:	f008 feb7 	bl	8010230 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <DMA_IRQHandler+0x58>)
 80074c4:	00ad      	lsls	r5, r5, #2
 80074c6:	195d      	adds	r5, r3, r5
 80074c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	d004      	beq.n	80074d8 <DMA_IRQHandler+0x44>
			++dmaStreamCount[port - 1];
 80074ce:	696b      	ldr	r3, [r5, #20]
 80074d0:	3301      	adds	r3, #1
 80074d2:	616b      	str	r3, [r5, #20]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d8eb      	bhi.n	80074b0 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80074d8:	0020      	movs	r0, r4
 80074da:	f003 fa75 	bl	800a9c8 <StopStreamDMA>
 80074de:	e7e7      	b.n	80074b0 <DMA_IRQHandler+0x1c>
 80074e0:	20000c64 	.word	0x20000c64
 80074e4:	200026e8 	.word	0x200026e8
 80074e8:	200024f0 	.word	0x200024f0
 80074ec:	2000198c 	.word	0x2000198c

080074f0 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <ResetUartORE+0x24>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	2308      	movs	r3, #8
 80074f6:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80074f8:	4a07      	ldr	r2, [pc, #28]	; (8007518 <ResetUartORE+0x28>)
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80074fe:	4a07      	ldr	r2, [pc, #28]	; (800751c <ResetUartORE+0x2c>)
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 8007504:	4a06      	ldr	r2, [pc, #24]	; (8007520 <ResetUartORE+0x30>)
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800750a:	4a06      	ldr	r2, [pc, #24]	; (8007524 <ResetUartORE+0x34>)
 800750c:	6812      	ldr	r2, [r2, #0]
 800750e:	6213      	str	r3, [r2, #32]
#endif
}
 8007510:	4770      	bx	lr
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	200023b4 	.word	0x200023b4
 8007518:	20002344 	.word	0x20002344
 800751c:	200022d4 	.word	0x200022d4
 8007520:	20002264 	.word	0x20002264
 8007524:	200021f4 	.word	0x200021f4

08007528 <ExecuteMonitor.part.0>:
	
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 800752a:	2300      	movs	r3, #0
void ExecuteMonitor(void)
 800752c:	46de      	mov	lr, fp
 800752e:	4645      	mov	r5, r8
 8007530:	4657      	mov	r7, sl
 8007532:	464e      	mov	r6, r9
	Monitor_time =0;
 8007534:	4acf      	ldr	r2, [pc, #828]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
void ExecuteMonitor(void)
 8007536:	b5e0      	push	{r5, r6, r7, lr}
	Monitor_time =0;
 8007538:	6013      	str	r3, [r2, #0]
	flag=0;
 800753a:	7113      	strb	r3, [r2, #4]
	currentCharacter=SPACE;
 800753c:	3320      	adds	r3, #32
 800753e:	7153      	strb	r3, [r2, #5]
 8007540:	4bcd      	ldr	r3, [pc, #820]	; (8007878 <ExecuteMonitor.part.0+0x350>)
 8007542:	4dce      	ldr	r5, [pc, #824]	; (800787c <ExecuteMonitor.part.0+0x354>)
 8007544:	469b      	mov	fp, r3
 8007546:	4cce      	ldr	r4, [pc, #824]	; (8007880 <ExecuteMonitor.part.0+0x358>)
	for (;;)
	{
		//giving initial value to currentCharacter and perviousCharacter to avoid writing in the nonProcessingParameter matrix  in case of non-transmission from STM32CubeMonitorIDE
		                    nonProcessingParameterIndex=0;
 8007548:	2300      	movs	r3, #0
 800754a:	702b      	strb	r3, [r5, #0]
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
								perviousCharacter=currentCharacter;
								currentCharacter= INTIAL_VALUE;
							}
				            }
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800754c:	3320      	adds	r3, #32
		            	    perviousCharacter= INTIAL_VALUE;
 800754e:	2703      	movs	r7, #3
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007550:	4698      	mov	r8, r3
 8007552:	e006      	b.n	8007562 <ExecuteMonitor.part.0+0x3a>
 8007554:	4bc7      	ldr	r3, [pc, #796]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 8007556:	791b      	ldrb	r3, [r3, #4]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d040      	beq.n	80075de <ExecuteMonitor.part.0+0xb6>
 800755c:	2b02      	cmp	r3, #2
 800755e:	d100      	bne.n	8007562 <ExecuteMonitor.part.0+0x3a>
 8007560:	e0a5      	b.n	80076ae <ExecuteMonitor.part.0+0x186>
		            	    Delay_us(100);
 8007562:	2064      	movs	r0, #100	; 0x64
		            	    perviousCharacter= INTIAL_VALUE;
 8007564:	706f      	strb	r7, [r5, #1]
		            	    Delay_us(100);
 8007566:	f005 feeb 	bl	800d340 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 800756a:	4bc2      	ldr	r3, [pc, #776]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 800756c:	786a      	ldrb	r2, [r5, #1]
 800756e:	795b      	ldrb	r3, [r3, #5]
 8007570:	429a      	cmp	r2, r3
 8007572:	d007      	beq.n	8007584 <ExecuteMonitor.part.0+0x5c>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007574:	782a      	ldrb	r2, [r5, #0]
								perviousCharacter=currentCharacter;
 8007576:	706b      	strb	r3, [r5, #1]
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007578:	1c51      	adds	r1, r2, #1
 800757a:	18aa      	adds	r2, r5, r2
 800757c:	7113      	strb	r3, [r2, #4]
								currentCharacter= INTIAL_VALUE;
 800757e:	4abd      	ldr	r2, [pc, #756]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007580:	7029      	strb	r1, [r5, #0]
								currentCharacter= INTIAL_VALUE;
 8007582:	7157      	strb	r7, [r2, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8007584:	4642      	mov	r2, r8
 8007586:	4393      	bics	r3, r2
 8007588:	d1e4      	bne.n	8007554 <ExecuteMonitor.part.0+0x2c>


                   if(flag == NonActive)
 800758a:	4bba      	ldr	r3, [pc, #744]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d123      	bne.n	80075da <ExecuteMonitor.part.0+0xb2>
                   {
                	   nonProcessingParameterIndex=0;
 8007592:	702b      	strb	r3, [r5, #0]
 		              //first parameter:It's the parameter that has no specific location in the commands.
 		            if(FirstCharacterInParameter == '[')
 8007594:	792b      	ldrb	r3, [r5, #4]
 8007596:	2b5b      	cmp	r3, #91	; 0x5b
 8007598:	d100      	bne.n	800759c <ExecuteMonitor.part.0+0x74>
 800759a:	e10c      	b.n	80077b6 <ExecuteMonitor.part.0+0x28e>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //second parameter:It's the parameter that has specific location in the commands.
 		            else if(FirstCharacterInParameter == '#')
 800759c:	2b23      	cmp	r3, #35	; 0x23
 800759e:	d100      	bne.n	80075a2 <ExecuteMonitor.part.0+0x7a>
 80075a0:	e0f9      	b.n	8007796 <ExecuteMonitor.part.0+0x26e>
 		            	processingParameterIndex=1;
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 		            }

 		           //third parameter:It's the first parameter in the command
 		            else if(FirstCharacterInParameter == '=')
 80075a2:	2b3d      	cmp	r3, #61	; 0x3d
 80075a4:	d100      	bne.n	80075a8 <ExecuteMonitor.part.0+0x80>
 80075a6:	e142      	b.n	800782e <ExecuteMonitor.part.0+0x306>
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 80075a8:	7f2f      	ldrb	r7, [r5, #28]
 80075aa:	2332      	movs	r3, #50	; 0x32
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80075ac:	0028      	movs	r0, r5
 80075ae:	0139      	lsls	r1, r7, #4
               	   desiredArray=ParameterLocationIn2dArray;
 80075b0:	54ef      	strb	r7, [r5, r3]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80075b2:	3034      	adds	r0, #52	; 0x34
 80075b4:	1bcf      	subs	r7, r1, r7
 80075b6:	19c0      	adds	r0, r0, r7
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80075b8:	002f      	movs	r7, r5
 80075ba:	371c      	adds	r7, #28
 80075bc:	0039      	movs	r1, r7
 80075be:	220f      	movs	r2, #15
 80075c0:	f00b fde4 	bl	801318c <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80075c4:	2214      	movs	r2, #20
 80075c6:	2100      	movs	r1, #0
 80075c8:	1d28      	adds	r0, r5, #4
 80075ca:	f00b fde8 	bl	801319e <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80075ce:	2214      	movs	r2, #20
 80075d0:	2100      	movs	r1, #0
 80075d2:	0038      	movs	r0, r7
 80075d4:	f00b fde3 	bl	801319e <memset>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 80075d8:	e7b6      	b.n	8007548 <ExecuteMonitor.part.0+0x20>
                   if(flag == RUN_FOR_ONCE)
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d164      	bne.n	80076a8 <ExecuteMonitor.part.0+0x180>
                	finalMatrixIndex=0;
 80075de:	2200      	movs	r2, #0
 80075e0:	232c      	movs	r3, #44	; 0x2c
                	twoDMatrixIndex=1;
 80075e2:	2101      	movs	r1, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80075e4:	202d      	movs	r0, #45	; 0x2d
                	finalMatrixIndex=0;
 80075e6:	54e2      	strb	r2, [r4, r3]
                	twoDMatrixIndex=1;
 80075e8:	3301      	adds	r3, #1
 80075ea:	54e1      	strb	r1, [r4, r3]
		          	counter=0;
 80075ec:	3301      	adds	r3, #1
 80075ee:	54e2      	strb	r2, [r4, r3]
		           while(counter != numCommandParameters)
 80075f0:	3303      	adds	r3, #3
 80075f2:	5cea      	ldrb	r2, [r5, r3]
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80075f4:	4680      	mov	r8, r0
 80075f6:	3001      	adds	r0, #1
		           while(counter != numCommandParameters)
 80075f8:	2100      	movs	r1, #0
 80075fa:	2300      	movs	r3, #0
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80075fc:	4681      	mov	r9, r0
		           while(counter != numCommandParameters)
 80075fe:	2a00      	cmp	r2, #0
 8007600:	d02e      	beq.n	8007660 <ExecuteMonitor.part.0+0x138>
 8007602:	2201      	movs	r2, #1
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007604:	2030      	movs	r0, #48	; 0x30
 8007606:	4682      	mov	sl, r0
 8007608:	0010      	movs	r0, r2
 800760a:	272c      	movs	r7, #44	; 0x2c
 800760c:	001a      	movs	r2, r3
 800760e:	0003      	movs	r3, r0
 8007610:	e002      	b.n	8007618 <ExecuteMonitor.part.0+0xf0>
 8007612:	464b      	mov	r3, r9
 8007614:	5ce2      	ldrb	r2, [r4, r3]
 8007616:	5da3      	ldrb	r3, [r4, r6]
 8007618:	4646      	mov	r6, r8
 800761a:	1c58      	adds	r0, r3, #1
 800761c:	55a0      	strb	r0, [r4, r6]
 800761e:	1c48      	adds	r0, r1, #1
 8007620:	55e0      	strb	r0, [r4, r7]
 8007622:	0110      	lsls	r0, r2, #4
 8007624:	1a82      	subs	r2, r0, r2
 8007626:	18aa      	adds	r2, r5, r2
 8007628:	18d2      	adds	r2, r2, r3
 800762a:	2334      	movs	r3, #52	; 0x34
 800762c:	5cd3      	ldrb	r3, [r2, r3]
 800762e:	4652      	mov	r2, sl
 8007630:	1861      	adds	r1, r4, r1
 8007632:	548b      	strb	r3, [r1, r2]
		            	Delay_ms(1);
 8007634:	2001      	movs	r0, #1
 8007636:	f008 f8c3 	bl	800f7c0 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800763a:	2220      	movs	r2, #32
 800763c:	5de1      	ldrb	r1, [r4, r7]
 800763e:	1863      	adds	r3, r4, r1
 8007640:	332f      	adds	r3, #47	; 0x2f
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	4393      	bics	r3, r2
 8007646:	d1e4      	bne.n	8007612 <ExecuteMonitor.part.0+0xea>
		                   counter++;
 8007648:	464b      	mov	r3, r9
 800764a:	464a      	mov	r2, r9
 800764c:	5ce3      	ldrb	r3, [r4, r3]
		                   twoDMatrixIndex=1;
 800764e:	2001      	movs	r0, #1
		                   counter++;
 8007650:	3301      	adds	r3, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	54a3      	strb	r3, [r4, r2]
		           while(counter != numCommandParameters)
 8007656:	2231      	movs	r2, #49	; 0x31
 8007658:	5caa      	ldrb	r2, [r5, r2]
		                   twoDMatrixIndex=1;
 800765a:	55a0      	strb	r0, [r4, r6]
		           while(counter != numCommandParameters)
 800765c:	429a      	cmp	r2, r3
 800765e:	d1d0      	bne.n	8007602 <ExecuteMonitor.part.0+0xda>
		          		   flag=0;
 8007660:	2200      	movs	r2, #0
		          		   counter=0;
 8007662:	232e      	movs	r3, #46	; 0x2e
		          		   flag=0;
 8007664:	4983      	ldr	r1, [pc, #524]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
		          		   counter=0;
 8007666:	54e2      	strb	r2, [r4, r3]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007668:	3301      	adds	r3, #1
 800766a:	54e2      	strb	r2, [r4, r3]
		          		   flag=0;
 800766c:	710a      	strb	r2, [r1, #4]
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800766e:	3230      	adds	r2, #48	; 0x30
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007670:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007672:	4690      	mov	r8, r2
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007674:	272f      	movs	r7, #47	; 0x2f
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007676:	465a      	mov	r2, fp
 8007678:	4641      	mov	r1, r8
 800767a:	18d2      	adds	r2, r2, r3
 800767c:	18e3      	adds	r3, r4, r3
 800767e:	5c5b      	ldrb	r3, [r3, r1]
 8007680:	3281      	adds	r2, #129	; 0x81
 8007682:	32ff      	adds	r2, #255	; 0xff
 8007684:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007686:	2001      	movs	r0, #1
 8007688:	f008 f89a 	bl	800f7c0 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800768c:	5de3      	ldrb	r3, [r4, r7]
 800768e:	3301      	adds	r3, #1
 8007690:	b2db      	uxtb	r3, r3
 8007692:	55e3      	strb	r3, [r4, r7]
 8007694:	2b3f      	cmp	r3, #63	; 0x3f
 8007696:	d9ee      	bls.n	8007676 <ExecuteMonitor.part.0+0x14e>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007698:	0020      	movs	r0, r4
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	2100      	movs	r1, #0
 800769e:	3030      	adds	r0, #48	; 0x30
 80076a0:	f00b fd7d 	bl	801319e <memset>
                   if(flag == CONTINUOUS_RUN)
 80076a4:	4b73      	ldr	r3, [pc, #460]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d000      	beq.n	80076ae <ExecuteMonitor.part.0+0x186>
 80076ac:	e74c      	b.n	8007548 <ExecuteMonitor.part.0+0x20>
		           {
                	finalMatrixIndex=0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	222c      	movs	r2, #44	; 0x2c
                	twoDMatrixIndex=1;
 80076b2:	2101      	movs	r1, #1
                	finalMatrixIndex=0;
 80076b4:	54a3      	strb	r3, [r4, r2]
                	twoDMatrixIndex=1;
 80076b6:	3201      	adds	r2, #1
 80076b8:	54a1      	strb	r1, [r4, r2]
   		          	counter=0;
 80076ba:	3201      	adds	r2, #1
 80076bc:	54a3      	strb	r3, [r4, r2]
   		           while(counter != numCommandParameters)
 80076be:	3331      	adds	r3, #49	; 0x31
 80076c0:	5ceb      	ldrb	r3, [r5, r3]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d03a      	beq.n	800773c <ExecuteMonitor.part.0+0x214>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076c6:	3a01      	subs	r2, #1
 80076c8:	4690      	mov	r8, r2
 80076ca:	3201      	adds	r2, #1
   		           while(counter != numCommandParameters)
 80076cc:	2100      	movs	r1, #0
 80076ce:	2300      	movs	r3, #0
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076d0:	4691      	mov	r9, r2
   		           while(counter != numCommandParameters)
 80076d2:	2201      	movs	r2, #1
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80076d4:	2030      	movs	r0, #48	; 0x30
 80076d6:	4682      	mov	sl, r0
 80076d8:	0010      	movs	r0, r2
 80076da:	272c      	movs	r7, #44	; 0x2c
 80076dc:	001a      	movs	r2, r3
 80076de:	0003      	movs	r3, r0
 80076e0:	e001      	b.n	80076e6 <ExecuteMonitor.part.0+0x1be>
 80076e2:	5ce2      	ldrb	r2, [r4, r3]
 80076e4:	5da3      	ldrb	r3, [r4, r6]
 80076e6:	4646      	mov	r6, r8
 80076e8:	1c58      	adds	r0, r3, #1
 80076ea:	55a0      	strb	r0, [r4, r6]
 80076ec:	1c48      	adds	r0, r1, #1
 80076ee:	55e0      	strb	r0, [r4, r7]
 80076f0:	0110      	lsls	r0, r2, #4
 80076f2:	1a82      	subs	r2, r0, r2
 80076f4:	18aa      	adds	r2, r5, r2
 80076f6:	18d2      	adds	r2, r2, r3
 80076f8:	2334      	movs	r3, #52	; 0x34
 80076fa:	5cd3      	ldrb	r3, [r2, r3]
 80076fc:	4652      	mov	r2, sl
 80076fe:	1861      	adds	r1, r4, r1
 8007700:	548b      	strb	r3, [r1, r2]
   		            	Delay_ms(1);
 8007702:	2001      	movs	r0, #1
 8007704:	f008 f85c 	bl	800f7c0 <HAL_Delay>
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007708:	5de1      	ldrb	r1, [r4, r7]
 800770a:	1863      	adds	r3, r4, r1
 800770c:	332f      	adds	r3, #47	; 0x2f
 800770e:	781a      	ldrb	r2, [r3, #0]
 8007710:	2320      	movs	r3, #32
 8007712:	439a      	bics	r2, r3
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007714:	464b      	mov	r3, r9
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007716:	d1e4      	bne.n	80076e2 <ExecuteMonitor.part.0+0x1ba>

   		             counter++;
 8007718:	4648      	mov	r0, r9
 800771a:	5ce3      	ldrb	r3, [r4, r3]
   		             twoDMatrixIndex=1;
 800771c:	2601      	movs	r6, #1
   		             counter++;
 800771e:	3301      	adds	r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	5423      	strb	r3, [r4, r0]
   		             twoDMatrixIndex=1;
 8007724:	4640      	mov	r0, r8
 8007726:	5426      	strb	r6, [r4, r0]
   		           while(counter != numCommandParameters)
 8007728:	2031      	movs	r0, #49	; 0x31
 800772a:	5c28      	ldrb	r0, [r5, r0]
 800772c:	4298      	cmp	r0, r3
 800772e:	d1d0      	bne.n	80076d2 <ExecuteMonitor.part.0+0x1aa>
   		          }
		            counter=0;
 8007730:	4649      	mov	r1, r9
                  while(flag != NonActive)
 8007732:	4b50      	ldr	r3, [pc, #320]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
		            counter=0;
 8007734:	5462      	strb	r2, [r4, r1]
                  while(flag != NonActive)
 8007736:	791b      	ldrb	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d020      	beq.n	800777e <ExecuteMonitor.part.0+0x256>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800773c:	2300      	movs	r3, #0
 800773e:	4699      	mov	r9, r3
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007740:	2330      	movs	r3, #48	; 0x30
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007742:	272f      	movs	r7, #47	; 0x2f
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007744:	4698      	mov	r8, r3
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007746:	464b      	mov	r3, r9
 8007748:	55e3      	strb	r3, [r4, r7]
 800774a:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800774c:	465a      	mov	r2, fp
 800774e:	4641      	mov	r1, r8
 8007750:	18d2      	adds	r2, r2, r3
 8007752:	18e3      	adds	r3, r4, r3
 8007754:	5c5b      	ldrb	r3, [r3, r1]
 8007756:	3281      	adds	r2, #129	; 0x81
 8007758:	32ff      	adds	r2, #255	; 0xff
 800775a:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 800775c:	20c8      	movs	r0, #200	; 0xc8
 800775e:	f005 fdef 	bl	800d340 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007762:	5de3      	ldrb	r3, [r4, r7]
 8007764:	3301      	adds	r3, #1
 8007766:	b2db      	uxtb	r3, r3
 8007768:	55e3      	strb	r3, [r4, r7]
 800776a:	2b3f      	cmp	r3, #63	; 0x3f
 800776c:	d9ee      	bls.n	800774c <ExecuteMonitor.part.0+0x224>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 800776e:	4b41      	ldr	r3, [pc, #260]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f008 f825 	bl	800f7c0 <HAL_Delay>
                  while(flag != NonActive)
 8007776:	4b3f      	ldr	r3, [pc, #252]	; (8007874 <ExecuteMonitor.part.0+0x34c>)
 8007778:	791b      	ldrb	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e3      	bne.n	8007746 <ExecuteMonitor.part.0+0x21e>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 800777e:	0020      	movs	r0, r4
 8007780:	2240      	movs	r2, #64	; 0x40
 8007782:	2100      	movs	r1, #0
 8007784:	3030      	adds	r0, #48	; 0x30
 8007786:	f00b fd0a 	bl	801319e <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800778a:	22c0      	movs	r2, #192	; 0xc0
 800778c:	2100      	movs	r1, #0
 800778e:	483d      	ldr	r0, [pc, #244]	; (8007884 <ExecuteMonitor.part.0+0x35c>)
 8007790:	f00b fd05 	bl	801319e <memset>
 8007794:	e6d8      	b.n	8007548 <ExecuteMonitor.part.0+0x20>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007796:	7968      	ldrb	r0, [r5, #5]
 8007798:	210a      	movs	r1, #10
 800779a:	f7f8 fd5f 	bl	800025c <__aeabi_uidivmod>
 		            	processingParameterIndex=1;
 800779e:	2330      	movs	r3, #48	; 0x30
 80077a0:	2201      	movs	r2, #1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80077a2:	0028      	movs	r0, r5
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80077a4:	b2cf      	uxtb	r7, r1
 		            	processingParameterIndex=1;
 80077a6:	54ea      	strb	r2, [r5, r3]
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80077a8:	772f      	strb	r7, [r5, #28]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80077aa:	1da9      	adds	r1, r5, #6
 80077ac:	3211      	adds	r2, #17
 80077ae:	301d      	adds	r0, #29
 80077b0:	f00b fcec 	bl	801318c <memcpy>
 80077b4:	e6f9      	b.n	80075aa <ExecuteMonitor.part.0+0x82>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80077b6:	7e2b      	ldrb	r3, [r5, #24]
 80077b8:	210a      	movs	r1, #10
 80077ba:	7968      	ldrb	r0, [r5, #5]
 80077bc:	4698      	mov	r8, r3
 80077be:	f7f8 fd4d 	bl	800025c <__aeabi_uidivmod>
 80077c2:	b2c9      	uxtb	r1, r1
 80077c4:	2703      	movs	r7, #3
 80077c6:	4541      	cmp	r1, r8
 80077c8:	d04d      	beq.n	8007866 <ExecuteMonitor.part.0+0x33e>
 80077ca:	19eb      	adds	r3, r5, r7
 80077cc:	210a      	movs	r1, #10
 80077ce:	7918      	ldrb	r0, [r3, #4]
 80077d0:	f7f8 fd44 	bl	800025c <__aeabi_uidivmod>
 80077d4:	003a      	movs	r2, r7
 80077d6:	b2c9      	uxtb	r1, r1
 80077d8:	3702      	adds	r7, #2
 80077da:	b2ff      	uxtb	r7, r7
 80077dc:	4541      	cmp	r1, r8
 80077de:	d1f4      	bne.n	80077ca <ExecuteMonitor.part.0+0x2a2>
 		            			nonProcessingParameterIndex++;
 80077e0:	3201      	adds	r2, #1
 80077e2:	b2d3      	uxtb	r3, r2
 80077e4:	4698      	mov	r8, r3
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80077e6:	46b9      	mov	r9, r7
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80077e8:	18eb      	adds	r3, r5, r3
 80077ea:	791b      	ldrb	r3, [r3, #4]
 80077ec:	210a      	movs	r1, #10
 80077ee:	469a      	mov	sl, r3
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7f8 fd33 	bl	800025c <__aeabi_uidivmod>
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80077f6:	4653      	mov	r3, sl
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80077f8:	b2cf      	uxtb	r7, r1
 80077fa:	772f      	strb	r7, [r5, #28]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80077fc:	2b5d      	cmp	r3, #93	; 0x5d
 80077fe:	d009      	beq.n	8007814 <ExecuteMonitor.part.0+0x2ec>
 8007800:	4643      	mov	r3, r8
 8007802:	3301      	adds	r3, #1
 8007804:	b2db      	uxtb	r3, r3
 8007806:	18ea      	adds	r2, r5, r3
 8007808:	7912      	ldrb	r2, [r2, #4]
 800780a:	3301      	adds	r3, #1
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2a5d      	cmp	r2, #93	; 0x5d
 8007810:	d1f9      	bne.n	8007806 <ExecuteMonitor.part.0+0x2de>
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007812:	4699      	mov	r9, r3
 		            	processingParameterIndex=1;
 8007814:	2330      	movs	r3, #48	; 0x30
 8007816:	2201      	movs	r2, #1
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007818:	0028      	movs	r0, r5
 		            	processingParameterIndex=1;
 800781a:	54ea      	strb	r2, [r5, r3]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800781c:	464b      	mov	r3, r9
 800781e:	1d29      	adds	r1, r5, #4
 8007820:	3213      	adds	r2, #19
 8007822:	1ad2      	subs	r2, r2, r3
 8007824:	4449      	add	r1, r9
 8007826:	301d      	adds	r0, #29
 8007828:	f00b fcb0 	bl	801318c <memcpy>
 800782c:	e6bd      	b.n	80075aa <ExecuteMonitor.part.0+0x82>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800782e:	7968      	ldrb	r0, [r5, #5]
 8007830:	210a      	movs	r1, #10
 8007832:	f7f8 fd13 	bl	800025c <__aeabi_uidivmod>
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007836:	79a8      	ldrb	r0, [r5, #6]
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007838:	7629      	strb	r1, [r5, #24]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800783a:	210a      	movs	r1, #10
 800783c:	f7f8 fd0e 	bl	800025c <__aeabi_uidivmod>
 8007840:	2331      	movs	r3, #49	; 0x31
 8007842:	54e9      	strb	r1, [r5, r3]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007844:	79e8      	ldrb	r0, [r5, #7]
 8007846:	210a      	movs	r1, #10
 8007848:	f7f8 fd08 	bl	800025c <__aeabi_uidivmod>
                	    processingParameterIndex=1;
 800784c:	2330      	movs	r3, #48	; 0x30
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 800784e:	b2cf      	uxtb	r7, r1
                	    processingParameterIndex=1;
 8007850:	2201      	movs	r2, #1
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007852:	0028      	movs	r0, r5
 8007854:	0029      	movs	r1, r5
                	    processingParameterIndex=1;
 8007856:	54ea      	strb	r2, [r5, r3]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007858:	772f      	strb	r7, [r5, #28]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800785a:	3108      	adds	r1, #8
 800785c:	320f      	adds	r2, #15
 800785e:	301d      	adds	r0, #29
 8007860:	f00b fc94 	bl	801318c <memcpy>
 8007864:	e6a1      	b.n	80075aa <ExecuteMonitor.part.0+0x82>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007866:	2303      	movs	r3, #3
 8007868:	2202      	movs	r2, #2
 800786a:	4699      	mov	r9, r3
 800786c:	4690      	mov	r8, r2
 800786e:	3b01      	subs	r3, #1
 8007870:	e7ba      	b.n	80077e8 <ExecuteMonitor.part.0+0x2c0>
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	20000000 	.word	0x20000000
 8007878:	20001a10 	.word	0x20001a10
 800787c:	20001dd8 	.word	0x20001dd8
 8007880:	20001e58 	.word	0x20001e58
 8007884:	20001b90 	.word	0x20001b90

08007888 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4c24      	ldr	r4, [pc, #144]	; (800791c <StartDefaultTask+0x94>)
 800788c:	4d24      	ldr	r5, [pc, #144]	; (8007920 <StartDefaultTask+0x98>)
		switch(indMode){
 800788e:	7823      	ldrb	r3, [r4, #0]
		if(needToDelayButtonStateReset != true)
 8007890:	4e24      	ldr	r6, [pc, #144]	; (8007924 <StartDefaultTask+0x9c>)
		switch(indMode){
 8007892:	2b02      	cmp	r3, #2
 8007894:	d014      	beq.n	80078c0 <StartDefaultTask+0x38>
 8007896:	2b03      	cmp	r3, #3
 8007898:	d02e      	beq.n	80078f8 <StartDefaultTask+0x70>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d035      	beq.n	800790a <StartDefaultTask+0x82>
		CheckAttachedButtons();
 800789e:	f004 ff5b 	bl	800c758 <CheckAttachedButtons>
		ExecuteSnippet();
 80078a2:	f7fd fe1b 	bl	80054dc <ExecuteSnippet>
    if(Monitor_time == INTIAL_VALUE)
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d023      	beq.n	80078f4 <StartDefaultTask+0x6c>
		if(needToDelayButtonStateReset != true)
 80078ac:	7833      	ldrb	r3, [r6, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <StartDefaultTask+0x2e>
			delayButtonStateReset = false;
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <StartDefaultTask+0xa0>)
 80078b4:	7013      	strb	r3, [r2, #0]
		taskYIELD();
 80078b6:	f007 fe33 	bl	800f520 <vPortYield>
		switch(indMode){
 80078ba:	7823      	ldrb	r3, [r4, #0]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d1ea      	bne.n	8007896 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 80078c0:	2180      	movs	r1, #128	; 0x80
 80078c2:	2090      	movs	r0, #144	; 0x90
 80078c4:	2201      	movs	r2, #1
 80078c6:	05c0      	lsls	r0, r0, #23
 80078c8:	0109      	lsls	r1, r1, #4
 80078ca:	f009 fcdd 	bl	8011288 <HAL_GPIO_WritePin>
 80078ce:	2064      	movs	r0, #100	; 0x64
				RTOS_IND_blink(30);
 80078d0:	f006 f8a4 	bl	800da1c <osDelay>
 80078d4:	2180      	movs	r1, #128	; 0x80
 80078d6:	2090      	movs	r0, #144	; 0x90
 80078d8:	2200      	movs	r2, #0
 80078da:	0109      	lsls	r1, r1, #4
 80078dc:	05c0      	lsls	r0, r0, #23
 80078de:	f009 fcd3 	bl	8011288 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80078e2:	2300      	movs	r3, #0
 80078e4:	7023      	strb	r3, [r4, #0]
		CheckAttachedButtons();
 80078e6:	f004 ff37 	bl	800c758 <CheckAttachedButtons>
		ExecuteSnippet();
 80078ea:	f7fd fdf7 	bl	80054dc <ExecuteSnippet>
    if(Monitor_time == INTIAL_VALUE)
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d1db      	bne.n	80078ac <StartDefaultTask+0x24>
 80078f4:	f7ff fe18 	bl	8007528 <ExecuteMonitor.part.0>
				RTOS_IND_blink(30);
 80078f8:	2180      	movs	r1, #128	; 0x80
 80078fa:	2090      	movs	r0, #144	; 0x90
 80078fc:	2201      	movs	r2, #1
 80078fe:	05c0      	lsls	r0, r0, #23
 8007900:	0109      	lsls	r1, r1, #4
 8007902:	f009 fcc1 	bl	8011288 <HAL_GPIO_WritePin>
 8007906:	201e      	movs	r0, #30
 8007908:	e7e2      	b.n	80078d0 <StartDefaultTask+0x48>
				RTOS_IND_blink(200);
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	2090      	movs	r0, #144	; 0x90
 800790e:	2201      	movs	r2, #1
 8007910:	05c0      	lsls	r0, r0, #23
 8007912:	0109      	lsls	r1, r1, #4
 8007914:	f009 fcb8 	bl	8011288 <HAL_GPIO_WritePin>
 8007918:	20c8      	movs	r0, #200	; 0xc8
 800791a:	e7d9      	b.n	80078d0 <StartDefaultTask+0x48>
 800791c:	200011ef 	.word	0x200011ef
 8007920:	20000000 	.word	0x20000000
 8007924:	20002924 	.word	0x20002924
 8007928:	20002922 	.word	0x20002922

0800792c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void){
 800792c:	b5f0      	push	{r4, r5, r6, r7, lr}
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 800792e:	4d58      	ldr	r5, [pc, #352]	; (8007a90 <MX_FREERTOS_Init+0x164>)
 8007930:	2400      	movs	r4, #0
 8007932:	002b      	movs	r3, r5
 8007934:	2603      	movs	r6, #3
void MX_FREERTOS_Init(void){
 8007936:	b08f      	sub	sp, #60	; 0x3c
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007938:	3370      	adds	r3, #112	; 0x70
 800793a:	9301      	str	r3, [sp, #4]
 800793c:	9600      	str	r6, [sp, #0]
 800793e:	2300      	movs	r3, #0
 8007940:	22f0      	movs	r2, #240	; 0xf0
 8007942:	4954      	ldr	r1, [pc, #336]	; (8007a94 <MX_FREERTOS_Init+0x168>)
 8007944:	9403      	str	r4, [sp, #12]
 8007946:	9402      	str	r4, [sp, #8]
 8007948:	4853      	ldr	r0, [pc, #332]	; (8007a98 <MX_FREERTOS_Init+0x16c>)
 800794a:	f006 fe2d 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800794e:	002b      	movs	r3, r5
 8007950:	3374      	adds	r3, #116	; 0x74
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	9600      	str	r6, [sp, #0]
 8007956:	2300      	movs	r3, #0
 8007958:	22f0      	movs	r2, #240	; 0xf0
 800795a:	4950      	ldr	r1, [pc, #320]	; (8007a9c <MX_FREERTOS_Init+0x170>)
 800795c:	9403      	str	r4, [sp, #12]
 800795e:	9402      	str	r4, [sp, #8]
 8007960:	484f      	ldr	r0, [pc, #316]	; (8007aa0 <MX_FREERTOS_Init+0x174>)
 8007962:	f006 fe21 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007966:	002b      	movs	r3, r5
 8007968:	3378      	adds	r3, #120	; 0x78
 800796a:	22f0      	movs	r2, #240	; 0xf0
 800796c:	494d      	ldr	r1, [pc, #308]	; (8007aa4 <MX_FREERTOS_Init+0x178>)
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	9600      	str	r6, [sp, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	9403      	str	r4, [sp, #12]
 8007976:	9402      	str	r4, [sp, #8]
 8007978:	484b      	ldr	r0, [pc, #300]	; (8007aa8 <MX_FREERTOS_Init+0x17c>)
 800797a:	f006 fe15 	bl	800e5a8 <xTaskGenericCreate>
	vRegisterCLICommands();
 800797e:	f7ff fcc3 	bl	8007308 <vRegisterCLICommands>
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007982:	228c      	movs	r2, #140	; 0x8c
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007984:	2704      	movs	r7, #4
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007986:	357c      	adds	r5, #124	; 0x7c
 8007988:	9501      	str	r5, [sp, #4]
 800798a:	9600      	str	r6, [sp, #0]
 800798c:	2300      	movs	r3, #0
 800798e:	4947      	ldr	r1, [pc, #284]	; (8007aac <MX_FREERTOS_Init+0x180>)
 8007990:	9403      	str	r4, [sp, #12]
 8007992:	9402      	str	r4, [sp, #8]
 8007994:	0052      	lsls	r2, r2, #1
 8007996:	4846      	ldr	r0, [pc, #280]	; (8007ab0 <MX_FREERTOS_Init+0x184>)
 8007998:	f006 fe06 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 800799c:	4d45      	ldr	r5, [pc, #276]	; (8007ab4 <MX_FREERTOS_Init+0x188>)
 800799e:	4e46      	ldr	r6, [pc, #280]	; (8007ab8 <MX_FREERTOS_Init+0x18c>)
 80079a0:	2301      	movs	r3, #1
 80079a2:	22f0      	movs	r2, #240	; 0xf0
 80079a4:	0030      	movs	r0, r6
 80079a6:	4945      	ldr	r1, [pc, #276]	; (8007abc <MX_FREERTOS_Init+0x190>)
 80079a8:	9403      	str	r4, [sp, #12]
 80079aa:	9402      	str	r4, [sp, #8]
 80079ac:	9501      	str	r5, [sp, #4]
 80079ae:	9700      	str	r7, [sp, #0]
 80079b0:	f006 fdfa 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80079b4:	1d2b      	adds	r3, r5, #4
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	22f0      	movs	r2, #240	; 0xf0
 80079ba:	2302      	movs	r3, #2
 80079bc:	0030      	movs	r0, r6
 80079be:	4940      	ldr	r1, [pc, #256]	; (8007ac0 <MX_FREERTOS_Init+0x194>)
 80079c0:	9403      	str	r4, [sp, #12]
 80079c2:	9402      	str	r4, [sp, #8]
 80079c4:	9700      	str	r7, [sp, #0]
 80079c6:	f006 fdef 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80079ca:	002b      	movs	r3, r5
 80079cc:	3308      	adds	r3, #8
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	22f0      	movs	r2, #240	; 0xf0
 80079d2:	2303      	movs	r3, #3
 80079d4:	0030      	movs	r0, r6
 80079d6:	493b      	ldr	r1, [pc, #236]	; (8007ac4 <MX_FREERTOS_Init+0x198>)
 80079d8:	9403      	str	r4, [sp, #12]
 80079da:	9402      	str	r4, [sp, #8]
 80079dc:	9700      	str	r7, [sp, #0]
 80079de:	f006 fde3 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80079e2:	002b      	movs	r3, r5
 80079e4:	330c      	adds	r3, #12
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	22f0      	movs	r2, #240	; 0xf0
 80079ea:	2304      	movs	r3, #4
 80079ec:	0030      	movs	r0, r6
 80079ee:	4936      	ldr	r1, [pc, #216]	; (8007ac8 <MX_FREERTOS_Init+0x19c>)
 80079f0:	9403      	str	r4, [sp, #12]
 80079f2:	9402      	str	r4, [sp, #8]
 80079f4:	9700      	str	r7, [sp, #0]
 80079f6:	f006 fdd7 	bl	800e5a8 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 80079fa:	002b      	movs	r3, r5
 80079fc:	3310      	adds	r3, #16
 80079fe:	22f0      	movs	r2, #240	; 0xf0
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	0030      	movs	r0, r6
 8007a04:	2305      	movs	r3, #5
 8007a06:	4931      	ldr	r1, [pc, #196]	; (8007acc <MX_FREERTOS_Init+0x1a0>)
 8007a08:	9403      	str	r4, [sp, #12]
 8007a0a:	9402      	str	r4, [sp, #8]
 8007a0c:	9700      	str	r7, [sp, #0]
 8007a0e:	f006 fdcb 	bl	800e5a8 <xTaskGenericCreate>
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007a12:	2101      	movs	r1, #1
 8007a14:	a804      	add	r0, sp, #16
	osSemaphoreDef(SemaphoreP1);
 8007a16:	9404      	str	r4, [sp, #16]
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007a18:	f006 f808 	bl	800da2c <osSemaphoreCreate>
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007a1c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007a1e:	61a8      	str	r0, [r5, #24]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007a20:	a805      	add	r0, sp, #20
	osSemaphoreDef(SemaphoreP2);
 8007a22:	9405      	str	r4, [sp, #20]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007a24:	f006 f802 	bl	800da2c <osSemaphoreCreate>
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007a28:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007a2a:	6368      	str	r0, [r5, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007a2c:	a806      	add	r0, sp, #24
	osSemaphoreDef(SemaphoreP3);
 8007a2e:	9406      	str	r4, [sp, #24]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007a30:	f005 fffc 	bl	800da2c <osSemaphoreCreate>
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007a34:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007a36:	61e8      	str	r0, [r5, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007a38:	a807      	add	r0, sp, #28
	osSemaphoreDef(SemaphoreP4);
 8007a3a:	9407      	str	r4, [sp, #28]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007a3c:	f005 fff6 	bl	800da2c <osSemaphoreCreate>
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007a40:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007a42:	63a8      	str	r0, [r5, #56]	; 0x38
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007a44:	a808      	add	r0, sp, #32
	osSemaphoreDef(SemaphoreP5);
 8007a46:	9408      	str	r4, [sp, #32]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007a48:	f005 fff0 	bl	800da2c <osSemaphoreCreate>
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007a4c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007a4e:	6228      	str	r0, [r5, #32]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007a50:	a809      	add	r0, sp, #36	; 0x24
	osSemaphoreDef(SemaphoreP6);
 8007a52:	9409      	str	r4, [sp, #36]	; 0x24
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007a54:	f005 ffea 	bl	800da2c <osSemaphoreCreate>
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007a58:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007a5a:	63e8      	str	r0, [r5, #60]	; 0x3c
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007a5c:	a80a      	add	r0, sp, #40	; 0x28
	osSemaphoreDef(SemaphoreP7);
 8007a5e:	940a      	str	r4, [sp, #40]	; 0x28
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007a60:	f005 ffe4 	bl	800da2c <osSemaphoreCreate>
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007a64:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007a66:	6268      	str	r0, [r5, #36]	; 0x24
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007a68:	a80b      	add	r0, sp, #44	; 0x2c
	osSemaphoreDef(SemaphoreP8);
 8007a6a:	940b      	str	r4, [sp, #44]	; 0x2c
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007a6c:	f005 ffde 	bl	800da2c <osSemaphoreCreate>
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007a70:	2101      	movs	r1, #1
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007a72:	6428      	str	r0, [r5, #64]	; 0x40
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007a74:	a80c      	add	r0, sp, #48	; 0x30
	osSemaphoreDef(SemaphoreP9);
 8007a76:	940c      	str	r4, [sp, #48]	; 0x30
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007a78:	f005 ffd8 	bl	800da2c <osSemaphoreCreate>
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007a7c:	2101      	movs	r1, #1
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007a7e:	62a8      	str	r0, [r5, #40]	; 0x28
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007a80:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(SemaphoreP10);
 8007a82:	940d      	str	r4, [sp, #52]	; 0x34
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007a84:	f005 ffd2 	bl	800da2c <osSemaphoreCreate>
 8007a88:	6468      	str	r0, [r5, #68]	; 0x44
}
 8007a8a:	b00f      	add	sp, #60	; 0x3c
 8007a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	20001e58 	.word	0x20001e58
 8007a94:	0801bf28 	.word	0x0801bf28
 8007a98:	08007889 	.word	0x08007889
 8007a9c:	0801bf34 	.word	0x0801bf34
 8007aa0:	08008411 	.word	0x08008411
 8007aa4:	0801bf40 	.word	0x0801bf40
 8007aa8:	08012bf5 	.word	0x08012bf5
 8007aac:	0801bf4c 	.word	0x0801bf4c
 8007ab0:	080051e5 	.word	0x080051e5
 8007ab4:	20001ed8 	.word	0x20001ed8
 8007ab8:	080087bd 	.word	0x080087bd
 8007abc:	0801bf54 	.word	0x0801bf54
 8007ac0:	0801bf60 	.word	0x0801bf60
 8007ac4:	0801bf6c 	.word	0x0801bf6c
 8007ac8:	0801bf78 	.word	0x0801bf78
 8007acc:	0801bf84 	.word	0x0801bf84

08007ad0 <vMainConfigureTimerForRunTimeStats>:
}


void vMainConfigureTimerForRunTimeStats(void){
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <vMainConfigureTimerForRunTimeStats+0x14>)
void vMainConfigureTimerForRunTimeStats(void){
 8007ad2:	b510      	push	{r4, lr}
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007ad4:	6818      	ldr	r0, [r3, #0]
 8007ad6:	4904      	ldr	r1, [pc, #16]	; (8007ae8 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007ad8:	f7f8 fb3a 	bl	8000150 <__udivsi3>
 8007adc:	4b03      	ldr	r3, [pc, #12]	; (8007aec <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007ade:	64d8      	str	r0, [r3, #76]	; 0x4c
}
 8007ae0:	bd10      	pop	{r4, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	200000b8 	.word	0x200000b8
 8007ae8:	00002710 	.word	0x00002710
 8007aec:	20001ed8 	.word	0x20001ed8

08007af0 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007af0:	21fa      	movs	r1, #250	; 0xfa
 8007af2:	4b0e      	ldr	r3, [pc, #56]	; (8007b2c <ulMainGetRunTimeCounterValue+0x3c>)
uint32_t ulMainGetRunTimeCounterValue(void){
 8007af4:	b570      	push	{r4, r5, r6, lr}
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	0089      	lsls	r1, r1, #2
 8007afa:	f7f8 fb29 	bl	8000150 <__udivsi3>
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007afe:	4c0c      	ldr	r4, [pc, #48]	; (8007b30 <ulMainGetRunTimeCounterValue+0x40>)
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007b00:	1e45      	subs	r5, r0, #1
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007b02:	6826      	ldr	r6, [r4, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007b04:	f006 febe 	bl	800e884 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007b08:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <ulMainGetRunTimeCounterValue+0x44>)
	ulTickCount =xTaskGetTickCountFromISR();
 8007b0a:	0003      	movs	r3, r0
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007b0c:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007b0e:	1ba8      	subs	r0, r5, r6
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007b10:	0152      	lsls	r2, r2, #5
 8007b12:	d502      	bpl.n	8007b1a <ulMainGetRunTimeCounterValue+0x2a>
		 but the tick count not yet incremented. */
		ulTickCount++;
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007b14:	6820      	ldr	r0, [r4, #0]
		ulTickCount++;
 8007b16:	3301      	adds	r3, #1
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007b18:	1a28      	subs	r0, r5, r0
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007b1a:	009c      	lsls	r4, r3, #2
 8007b1c:	18e4      	adds	r4, r4, r3
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <ulMainGetRunTimeCounterValue+0x48>)
	ulReturn =(ulTickCount * 10UL);
 8007b20:	0064      	lsls	r4, r4, #1
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007b22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007b24:	f7f8 fb14 	bl	8000150 <__udivsi3>
 8007b28:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	200000b8 	.word	0x200000b8
 8007b30:	e000e018 	.word	0xe000e018
 8007b34:	e000ed04 	.word	0xe000ed04
 8007b38:	20001ed8 	.word	0x20001ed8

08007b3c <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007b3c:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007b3e:	f007 fc97 	bl	800f470 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007b42:	b2c4      	uxtb	r4, r0
 8007b44:	0020      	movs	r0, r4
 8007b46:	f002 ff3f 	bl	800a9c8 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007b4a:	0020      	movs	r0, r4
 8007b4c:	f003 fb46 	bl	800b1dc <SwitchStreamDMAToMsg>
}
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	46c0      	nop			; (mov r8, r8)

08007b54 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b56:	46ce      	mov	lr, r9
 8007b58:	4647      	mov	r7, r8
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	0004      	movs	r4, r0
 8007b60:	0018      	movs	r0, r3
 8007b62:	466b      	mov	r3, sp
 8007b64:	73d8      	strb	r0, [r3, #15]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007b66:	ab0c      	add	r3, sp, #48	; 0x30
 8007b68:	781b      	ldrb	r3, [r3, #0]
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007b6a:	000e      	movs	r6, r1
 8007b6c:	0015      	movs	r5, r2
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007b6e:	4298      	cmp	r0, r3
 8007b70:	d100      	bne.n	8007b74 <SetupDMAStreams+0x20>
 8007b72:	e091      	b.n	8007c98 <SetupDMAStreams+0x144>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d00f      	beq.n	8007b98 <SetupDMAStreams+0x44>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00d      	beq.n	8007b98 <SetupDMAStreams+0x44>
	if(direction == FORWARD){
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	d00d      	beq.n	8007b9c <SetupDMAStreams+0x48>
	else if(direction == BACKWARD){
 8007b80:	2c01      	cmp	r4, #1
 8007b82:	d100      	bne.n	8007b86 <SetupDMAStreams+0x32>
 8007b84:	e08f      	b.n	8007ca6 <SetupDMAStreams+0x152>
		return BOS_ERR_WrongParam;
 8007b86:	2767      	movs	r7, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007b88:	2c02      	cmp	r4, #2
 8007b8a:	d03d      	beq.n	8007c08 <SetupDMAStreams+0xb4>
}
 8007b8c:	0038      	movs	r0, r7
 8007b8e:	b005      	add	sp, #20
 8007b90:	bcc0      	pop	{r6, r7}
 8007b92:	46b9      	mov	r9, r7
 8007b94:	46b0      	mov	r8, r6
 8007b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007b98:	2767      	movs	r7, #103	; 0x67
 8007b9a:	e7f7      	b.n	8007b8c <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b9c:	f005 fdc6 	bl	800d72c <GetUart>
 8007ba0:	ab0c      	add	r3, sp, #48	; 0x30
 8007ba2:	0004      	movs	r4, r0
 8007ba4:	7818      	ldrb	r0, [r3, #0]
 8007ba6:	f005 fdc1 	bl	800d72c <GetUart>
 8007baa:	2201      	movs	r2, #1
 8007bac:	0001      	movs	r1, r0
 8007bae:	0020      	movs	r0, r4
 8007bb0:	f7ff fc44 	bl	800743c <StartDMAstream>
 8007bb4:	2817      	cmp	r0, #23
 8007bb6:	d074      	beq.n	8007ca2 <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007bb8:	21fa      	movs	r1, #250	; 0xfa
 8007bba:	0168      	lsls	r0, r5, #5
 8007bbc:	1b40      	subs	r0, r0, r5
 8007bbe:	0080      	lsls	r0, r0, #2
 8007bc0:	1940      	adds	r0, r0, r5
 8007bc2:	0089      	lsls	r1, r1, #2
 8007bc4:	00c0      	lsls	r0, r0, #3
 8007bc6:	f7f8 fac3 	bl	8000150 <__udivsi3>
 8007bca:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <SetupDMAStreams+0x18c>)
 8007bcc:	0001      	movs	r1, r0
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	230f      	movs	r3, #15
 8007bd2:	446b      	add	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	4843      	ldr	r0, [pc, #268]	; (8007ce4 <SetupDMAStreams+0x190>)
 8007bd8:	f007 fade 	bl	800f198 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007bdc:	466b      	mov	r3, sp
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007bde:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007be0:	7bdb      	ldrb	r3, [r3, #15]
 8007be2:	4a41      	ldr	r2, [pc, #260]	; (8007ce8 <SetupDMAStreams+0x194>)
 8007be4:	3b01      	subs	r3, #1
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	509e      	str	r6, [r3, r2]
	return BOS_OK;
 8007bea:	2700      	movs	r7, #0
	if(xTimerStream != NULL)
 8007bec:	2c00      	cmp	r4, #0
 8007bee:	d0cd      	beq.n	8007b8c <SetupDMAStreams+0x38>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007bf0:	f006 fe42 	bl	800e878 <xTaskGetTickCount>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	425b      	negs	r3, r3
 8007bf8:	0002      	movs	r2, r0
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	2300      	movs	r3, #0
 8007c00:	0020      	movs	r0, r4
 8007c02:	f007 fae9 	bl	800f1d8 <xTimerGenericCommand>
 8007c06:	e7c1      	b.n	8007b8c <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007c08:	f005 fd90 	bl	800d72c <GetUart>
 8007c0c:	ab0c      	add	r3, sp, #48	; 0x30
 8007c0e:	0004      	movs	r4, r0
 8007c10:	7818      	ldrb	r0, [r3, #0]
 8007c12:	f005 fd8b 	bl	800d72c <GetUart>
 8007c16:	2201      	movs	r2, #1
 8007c18:	0001      	movs	r1, r0
 8007c1a:	0020      	movs	r0, r4
 8007c1c:	f7ff fc0e 	bl	800743c <StartDMAstream>
 8007c20:	2817      	cmp	r0, #23
 8007c22:	d03e      	beq.n	8007ca2 <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007c24:	21fa      	movs	r1, #250	; 0xfa
 8007c26:	0168      	lsls	r0, r5, #5
 8007c28:	1b40      	subs	r0, r0, r5
 8007c2a:	0080      	lsls	r0, r0, #2
 8007c2c:	1940      	adds	r0, r0, r5
 8007c2e:	0089      	lsls	r1, r1, #2
 8007c30:	00c0      	lsls	r0, r0, #3
 8007c32:	f7f8 fa8d 	bl	8000150 <__udivsi3>
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <SetupDMAStreams+0x18c>)
 8007c38:	4f2a      	ldr	r7, [pc, #168]	; (8007ce4 <SetupDMAStreams+0x190>)
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	4698      	mov	r8, r3
 8007c3e:	230f      	movs	r3, #15
 8007c40:	0001      	movs	r1, r0
 8007c42:	2200      	movs	r2, #0
 8007c44:	446b      	add	r3, sp
 8007c46:	0004      	movs	r4, r0
 8007c48:	0038      	movs	r0, r7
 8007c4a:	f007 faa5 	bl	800f198 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007c4e:	466b      	mov	r3, sp
 8007c50:	7bdb      	ldrb	r3, [r3, #15]
 8007c52:	4d25      	ldr	r5, [pc, #148]	; (8007ce8 <SetupDMAStreams+0x194>)
 8007c54:	3b01      	subs	r3, #1
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	515e      	str	r6, [r3, r5]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007c5a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c5c:	7818      	ldrb	r0, [r3, #0]
 8007c5e:	f005 fd65 	bl	800d72c <GetUart>
 8007c62:	466b      	mov	r3, sp
 8007c64:	4681      	mov	r9, r0
 8007c66:	7bd8      	ldrb	r0, [r3, #15]
 8007c68:	f005 fd60 	bl	800d72c <GetUart>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	0001      	movs	r1, r0
 8007c70:	4648      	mov	r0, r9
 8007c72:	f7ff fbe3 	bl	800743c <StartDMAstream>
 8007c76:	2817      	cmp	r0, #23
 8007c78:	d013      	beq.n	8007ca2 <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c7a:	4643      	mov	r3, r8
 8007c7c:	0021      	movs	r1, r4
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2200      	movs	r2, #0
 8007c82:	ab0c      	add	r3, sp, #48	; 0x30
 8007c84:	0038      	movs	r0, r7
 8007c86:	f007 fa87 	bl	800f198 <xTimerCreate>
		dmaStreamTotal[dst - 1] =count;
 8007c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c8c:	781b      	ldrb	r3, [r3, #0]
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c8e:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007c90:	3b01      	subs	r3, #1
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	515e      	str	r6, [r3, r5]
 8007c96:	e7a8      	b.n	8007bea <SetupDMAStreams+0x96>
		portStatus[src] =STREAM;
 8007c98:	2202      	movs	r2, #2
 8007c9a:	4b14      	ldr	r3, [pc, #80]	; (8007cec <SetupDMAStreams+0x198>)
		return BOS_ERR_WrongParam;
 8007c9c:	2767      	movs	r7, #103	; 0x67
		portStatus[src] =STREAM;
 8007c9e:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 8007ca0:	e774      	b.n	8007b8c <SetupDMAStreams+0x38>
			return BOS_ERR_PORT_BUSY;
 8007ca2:	2717      	movs	r7, #23
 8007ca4:	e772      	b.n	8007b8c <SetupDMAStreams+0x38>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f005 fd40 	bl	800d72c <GetUart>
 8007cac:	466b      	mov	r3, sp
 8007cae:	0004      	movs	r4, r0
 8007cb0:	7bd8      	ldrb	r0, [r3, #15]
 8007cb2:	f005 fd3b 	bl	800d72c <GetUart>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	0001      	movs	r1, r0
 8007cba:	0020      	movs	r0, r4
 8007cbc:	f7ff fbbe 	bl	800743c <StartDMAstream>
 8007cc0:	2817      	cmp	r0, #23
 8007cc2:	d0ee      	beq.n	8007ca2 <SetupDMAStreams+0x14e>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007cc4:	21fa      	movs	r1, #250	; 0xfa
 8007cc6:	0168      	lsls	r0, r5, #5
 8007cc8:	1b40      	subs	r0, r0, r5
 8007cca:	0080      	lsls	r0, r0, #2
 8007ccc:	1940      	adds	r0, r0, r5
 8007cce:	0089      	lsls	r1, r1, #2
 8007cd0:	00c0      	lsls	r0, r0, #3
 8007cd2:	f7f8 fa3d 	bl	8000150 <__udivsi3>
 8007cd6:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <SetupDMAStreams+0x18c>)
 8007cd8:	0001      	movs	r1, r0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	ab0c      	add	r3, sp, #48	; 0x30
 8007cde:	e779      	b.n	8007bd4 <SetupDMAStreams+0x80>
 8007ce0:	08007b3d 	.word	0x08007b3d
 8007ce4:	0801bf90 	.word	0x0801bf90
 8007ce8:	200019b4 	.word	0x200019b4
 8007cec:	20000c64 	.word	0x20000c64

08007cf0 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007cf0:	b510      	push	{r4, lr}
	switch(port){
 8007cf2:	2805      	cmp	r0, #5
 8007cf4:	d80a      	bhi.n	8007d0c <NotifyMessagingTask+0x1c>
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <NotifyMessagingTask+0x30>)
 8007cf8:	0080      	lsls	r0, r0, #2
 8007cfa:	581b      	ldr	r3, [r3, r0]
 8007cfc:	469f      	mov	pc, r3
			;
			break;
#endif
#ifdef _P5
		case P5:
			xTaskNotifyGive(P5MsgTaskHandle)
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <NotifyMessagingTask+0x34>)
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	2202      	movs	r2, #2
 8007d04:	2300      	movs	r3, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	f007 f9b6 	bl	800f078 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007d0c:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <NotifyMessagingTask+0x38>)
 8007d10:	e7f6      	b.n	8007d00 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <NotifyMessagingTask+0x3c>)
 8007d14:	e7f4      	b.n	8007d00 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007d16:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <NotifyMessagingTask+0x40>)
 8007d18:	e7f2      	b.n	8007d00 <NotifyMessagingTask+0x10>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007d1a:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <NotifyMessagingTask+0x44>)
 8007d1c:	e7f0      	b.n	8007d00 <NotifyMessagingTask+0x10>
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	080196b4 	.word	0x080196b4
 8007d24:	20001ee8 	.word	0x20001ee8
 8007d28:	20001ed8 	.word	0x20001ed8
 8007d2c:	20001edc 	.word	0x20001edc
 8007d30:	20001ee0 	.word	0x20001ee0
 8007d34:	20001ee4 	.word	0x20001ee4

08007d38 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007d38:	b530      	push	{r4, r5, lr}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	ac06      	add	r4, sp, #24
 8007d3e:	8825      	ldrh	r5, [r4, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007d40:	0004      	movs	r4, r0
 8007d42:	4314      	orrs	r4, r2
 8007d44:	d00c      	beq.n	8007d60 <SendMessageFromPort+0x28>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d008      	beq.n	8007d5c <SendMessageFromPort+0x24>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007d4a:	2900      	cmp	r1, #0
 8007d4c:	d001      	beq.n	8007d52 <SendMessageFromPort+0x1a>
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d006      	beq.n	8007d60 <SendMessageFromPort+0x28>
 8007d52:	9500      	str	r5, [sp, #0]
 8007d54:	f000 f806 	bl	8007d64 <SendMessageFromPort.part.0>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
	
	return result;
}
 8007d58:	b003      	add	sp, #12
 8007d5a:	bd30      	pop	{r4, r5, pc}
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007d5c:	2afd      	cmp	r2, #253	; 0xfd
 8007d5e:	d8f8      	bhi.n	8007d52 <SendMessageFromPort+0x1a>
		return BOS_ERR_WrongParam;
 8007d60:	2067      	movs	r0, #103	; 0x67
 8007d62:	e7f9      	b.n	8007d58 <SendMessageFromPort+0x20>

08007d64 <SendMessageFromPort.part.0>:
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d66:	46de      	mov	lr, fp
 8007d68:	4645      	mov	r5, r8
 8007d6a:	464e      	mov	r6, r9
 8007d6c:	4657      	mov	r7, sl
 8007d6e:	b5e0      	push	{r5, r6, r7, lr}
 8007d70:	b089      	sub	sp, #36	; 0x24
 8007d72:	0006      	movs	r6, r0
 8007d74:	9303      	str	r3, [sp, #12]
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d76:	2000      	movs	r0, #0
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007d78:	ab12      	add	r3, sp, #72	; 0x48
 8007d7a:	4688      	mov	r8, r1
 8007d7c:	881d      	ldrh	r5, [r3, #0]
 8007d7e:	4693      	mov	fp, r2
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d80:	f006 fce4 	bl	800e74c <uxTaskPriorityGet>
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d84:	2105      	movs	r1, #5
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d86:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f006 fcef 	bl	800e76c <vTaskPrioritySet>
	message[0] ='H';
 8007d8e:	2348      	movs	r3, #72	; 0x48
 8007d90:	4cd5      	ldr	r4, [pc, #852]	; (80080e8 <SendMessageFromPort.part.0+0x384>)
 8007d92:	7023      	strb	r3, [r4, #0]
	message[1] ='Z';
 8007d94:	3312      	adds	r3, #18
 8007d96:	7063      	strb	r3, [r4, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d98:	4643      	mov	r3, r8
 8007d9a:	4333      	orrs	r3, r6
 8007d9c:	d000      	beq.n	8007da0 <SendMessageFromPort.part.0+0x3c>
 8007d9e:	e07c      	b.n	8007e9a <SendMessageFromPort.part.0+0x136>
 8007da0:	465b      	mov	r3, fp
 8007da2:	2bfd      	cmp	r3, #253	; 0xfd
 8007da4:	d800      	bhi.n	8007da8 <SendMessageFromPort.part.0+0x44>
 8007da6:	e14b      	b.n	8008040 <SendMessageFromPort.part.0+0x2dc>
		length =messageLength[numberOfParams - 1];
 8007da8:	3d01      	subs	r5, #1
 8007daa:	4bd0      	ldr	r3, [pc, #832]	; (80080ec <SendMessageFromPort.part.0+0x388>)
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007dac:	00e9      	lsls	r1, r5, #3
		length =messageLength[numberOfParams - 1];
 8007dae:	5d5f      	ldrb	r7, [r3, r5]
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007db0:	1b49      	subs	r1, r1, r5
 8007db2:	4dcf      	ldr	r5, [pc, #828]	; (80080f0 <SendMessageFromPort.part.0+0x38c>)
 8007db4:	00c9      	lsls	r1, r1, #3
 8007db6:	003a      	movs	r2, r7
 8007db8:	48ce      	ldr	r0, [pc, #824]	; (80080f4 <SendMessageFromPort.part.0+0x390>)
 8007dba:	1949      	adds	r1, r1, r5
 8007dbc:	f00b f9e6 	bl	801318c <memcpy>
	memcpy(crcBuffer,&message[0],length + 3);
 8007dc0:	1cfb      	adds	r3, r7, #3
 8007dc2:	469a      	mov	sl, r3
 8007dc4:	4dcc      	ldr	r5, [pc, #816]	; (80080f8 <SendMessageFromPort.part.0+0x394>)
 8007dc6:	001a      	movs	r2, r3
 8007dc8:	0021      	movs	r1, r4
 8007dca:	0028      	movs	r0, r5
	message[2] =length;
 8007dcc:	70a7      	strb	r7, [r4, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007dce:	f00b f9dd 	bl	801318c <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007dd2:	b2bb      	uxth	r3, r7
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	0028      	movs	r0, r5
 8007dd8:	9305      	str	r3, [sp, #20]
 8007dda:	f003 fb1b 	bl	800b414 <CalculateCRC8>
 8007dde:	4653      	mov	r3, sl
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007de0:	2238      	movs	r2, #56	; 0x38
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007de2:	54e0      	strb	r0, [r4, r3]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007de4:	2100      	movs	r1, #0
 8007de6:	0028      	movs	r0, r5
 8007de8:	f00b f9d9 	bl	801319e <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007dec:	465b      	mov	r3, fp
 8007dee:	2bfd      	cmp	r3, #253	; 0xfd
 8007df0:	d900      	bls.n	8007df4 <SendMessageFromPort.part.0+0x90>
 8007df2:	e0fb      	b.n	8007fec <SendMessageFromPort.part.0+0x288>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	3b2c      	subs	r3, #44	; 0x2c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d800      	bhi.n	8007dfe <SendMessageFromPort.part.0+0x9a>
 8007dfc:	e156      	b.n	80080ac <SendMessageFromPort.part.0+0x348>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007dfe:	4bbf      	ldr	r3, [pc, #764]	; (80080fc <SendMessageFromPort.part.0+0x398>)
 8007e00:	4699      	mov	r9, r3
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d100      	bne.n	8007e0a <SendMessageFromPort.part.0+0xa6>
 8007e08:	e15a      	b.n	80080c0 <SendMessageFromPort.part.0+0x35c>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8007e0a:	9d05      	ldr	r5, [sp, #20]
 8007e0c:	4fbc      	ldr	r7, [pc, #752]	; (8008100 <SendMessageFromPort.part.0+0x39c>)
 8007e0e:	3504      	adds	r5, #4
 8007e10:	b2ab      	uxth	r3, r5
 8007e12:	4698      	mov	r8, r3
 8007e14:	4bbb      	ldr	r3, [pc, #748]	; (8008104 <SendMessageFromPort.part.0+0x3a0>)
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e16:	2500      	movs	r5, #0
 8007e18:	469a      	mov	sl, r3
 8007e1a:	003b      	movs	r3, r7
 8007e1c:	0037      	movs	r7, r6
 8007e1e:	4646      	mov	r6, r8
 8007e20:	4698      	mov	r8, r3
 8007e22:	e005      	b.n	8007e30 <SendMessageFromPort.part.0+0xcc>
 8007e24:	464a      	mov	r2, r9
 8007e26:	1c6b      	adds	r3, r5, #1
 8007e28:	88d2      	ldrh	r2, [r2, #6]
 8007e2a:	b2dd      	uxtb	r5, r3
 8007e2c:	42aa      	cmp	r2, r5
 8007e2e:	d920      	bls.n	8007e72 <SendMessageFromPort.part.0+0x10e>
				Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8007e30:	465b      	mov	r3, fp
 8007e32:	0032      	movs	r2, r6
 8007e34:	0021      	movs	r1, r4
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	0038      	movs	r0, r7
 8007e3a:	2332      	movs	r3, #50	; 0x32
 8007e3c:	f7fa ffea 	bl	8002e14 <Send_BOS_Message>
				osDelay(200);
 8007e40:	20c8      	movs	r0, #200	; 0xc8
 8007e42:	f005 fdeb 	bl	800da1c <osDelay>
				if(ACK_FLAG == true)
 8007e46:	4653      	mov	r3, sl
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d111      	bne.n	8007e72 <SendMessageFromPort.part.0+0x10e>
				if(rejected_FLAG == true)
 8007e4e:	4643      	mov	r3, r8
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0e6      	beq.n	8007e24 <SendMessageFromPort.part.0+0xc0>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 8007e56:	465b      	mov	r3, fp
 8007e58:	0032      	movs	r2, r6
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	0021      	movs	r1, r4
 8007e5e:	2332      	movs	r3, #50	; 0x32
 8007e60:	0038      	movs	r0, r7
 8007e62:	f7fa ffd7 	bl	8002e14 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007e66:	464a      	mov	r2, r9
 8007e68:	1c6b      	adds	r3, r5, #1
 8007e6a:	88d2      	ldrh	r2, [r2, #6]
 8007e6c:	b2dd      	uxtb	r5, r3
 8007e6e:	42aa      	cmp	r2, r5
 8007e70:	d8de      	bhi.n	8007e30 <SendMessageFromPort.part.0+0xcc>
 8007e72:	4647      	mov	r7, r8
		ACK_FLAG =false; rejected_FLAG=false;
 8007e74:	2300      	movs	r3, #0
 8007e76:	4652      	mov	r2, sl
 8007e78:	703b      	strb	r3, [r7, #0]
 8007e7a:	7013      	strb	r3, [r2, #0]
	vTaskPrioritySet( NULL,TaskPriority);
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	9904      	ldr	r1, [sp, #16]
 8007e80:	f006 fc74 	bl	800e76c <vTaskPrioritySet>
	responseStatus =BOS_ERR_NoResponse;
 8007e84:	2202      	movs	r2, #2
	return result;
 8007e86:	2000      	movs	r0, #0
	responseStatus =BOS_ERR_NoResponse;
 8007e88:	4b9f      	ldr	r3, [pc, #636]	; (8008108 <SendMessageFromPort.part.0+0x3a4>)
 8007e8a:	701a      	strb	r2, [r3, #0]
}
 8007e8c:	b009      	add	sp, #36	; 0x24
 8007e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8007e90:	46bb      	mov	fp, r7
 8007e92:	46b2      	mov	sl, r6
 8007e94:	46a9      	mov	r9, r5
 8007e96:	46a0      	mov	r8, r4
 8007e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d100      	bne.n	8007ea2 <SendMessageFromPort.part.0+0x13e>
 8007ea0:	e782      	b.n	8007da8 <SendMessageFromPort.part.0+0x44>
		if(src == 0)
 8007ea2:	4643      	mov	r3, r8
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d100      	bne.n	8007eaa <SendMessageFromPort.part.0+0x146>
 8007ea8:	e0ce      	b.n	8008048 <SendMessageFromPort.part.0+0x2e4>
		message[2] =length;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	70a3      	strb	r3, [r4, #2]
		message[3] =dst;
 8007eae:	465b      	mov	r3, fp
 8007eb0:	70e3      	strb	r3, [r4, #3]
		message[4] =src;
 8007eb2:	4643      	mov	r3, r8
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007eb4:	4a91      	ldr	r2, [pc, #580]	; (80080fc <SendMessageFromPort.part.0+0x398>)
		message[4] =src;
 8007eb6:	7123      	strb	r3, [r4, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007eb8:	7913      	ldrb	r3, [r2, #4]
 8007eba:	7851      	ldrb	r1, [r2, #1]
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	0089      	lsls	r1, r1, #2
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	4313      	orrs	r3, r2
		if(code > 0xFF)
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	9903      	ldr	r1, [sp, #12]
 8007eca:	428a      	cmp	r2, r1
 8007ecc:	4192      	sbcs	r2, r2
 8007ece:	4252      	negs	r2, r2
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007ed0:	0052      	lsls	r2, r2, #1
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	4692      	mov	sl, r2
 8007eda:	7163      	strb	r3, [r4, #5]
		message[6 + shift] =(uint8_t )code;
 8007edc:	71a1      	strb	r1, [r4, #6]
		if(extendCode == true){
 8007ede:	29ff      	cmp	r1, #255	; 0xff
 8007ee0:	d900      	bls.n	8007ee4 <SendMessageFromPort.part.0+0x180>
 8007ee2:	e0cb      	b.n	800807c <SendMessageFromPort.part.0+0x318>
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007ee4:	2d2e      	cmp	r5, #46	; 0x2e
 8007ee6:	d800      	bhi.n	8007eea <SendMessageFromPort.part.0+0x186>
 8007ee8:	e0cf      	b.n	800808a <SendMessageFromPort.part.0+0x326>
			message[5] |=0x80;
 8007eea:	2280      	movs	r2, #128	; 0x80
 8007eec:	4252      	negs	r2, r2
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	7163      	strb	r3, [r4, #5]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007ef2:	232e      	movs	r3, #46	; 0x2e
 8007ef4:	4699      	mov	r9, r3
			totalNumberOfParams =numberOfParams;
 8007ef6:	4f85      	ldr	r7, [pc, #532]	; (800810c <SendMessageFromPort.part.0+0x3a8>)
 8007ef8:	807d      	strh	r5, [r7, #2]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007efa:	464b      	mov	r3, r9
 8007efc:	4641      	mov	r1, r8
 8007efe:	465a      	mov	r2, fp
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	0030      	movs	r0, r6
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	f7ff ff17 	bl	8007d38 <SendMessageFromPort>
					osDelay(10);
 8007f0a:	200a      	movs	r0, #10
 8007f0c:	f005 fd86 	bl	800da1c <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007f10:	887d      	ldrh	r5, [r7, #2]
					ptrShift +=numberOfParams;
 8007f12:	8839      	ldrh	r1, [r7, #0]
					totalNumberOfParams -=numberOfParams;
 8007f14:	3d2e      	subs	r5, #46	; 0x2e
					ptrShift +=numberOfParams;
 8007f16:	312e      	adds	r1, #46	; 0x2e
					totalNumberOfParams -=numberOfParams;
 8007f18:	b2ad      	uxth	r5, r5
					ptrShift +=numberOfParams;
 8007f1a:	b289      	uxth	r1, r1
					totalNumberOfParams -=numberOfParams;
 8007f1c:	807d      	strh	r5, [r7, #2]
					ptrShift +=numberOfParams;
 8007f1e:	8039      	strh	r1, [r7, #0]
			while(totalNumberOfParams != 0){
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	d100      	bne.n	8007f26 <SendMessageFromPort.part.0+0x1c2>
 8007f24:	e107      	b.n	8008136 <SendMessageFromPort.part.0+0x3d2>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007f26:	2d2d      	cmp	r5, #45	; 0x2d
 8007f28:	d8e7      	bhi.n	8007efa <SendMessageFromPort.part.0+0x196>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007f2a:	237f      	movs	r3, #127	; 0x7f
 8007f2c:	7962      	ldrb	r2, [r4, #5]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	7163      	strb	r3, [r4, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007f32:	4653      	mov	r3, sl
 8007f34:	1dd8      	adds	r0, r3, #7
 8007f36:	4b76      	ldr	r3, [pc, #472]	; (8008110 <SendMessageFromPort.part.0+0x3ac>)
 8007f38:	002a      	movs	r2, r5
 8007f3a:	18c9      	adds	r1, r1, r3
 8007f3c:	1820      	adds	r0, r4, r0
 8007f3e:	f00b f925 	bl	801318c <memcpy>
					ptrShift =0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	803b      	strh	r3, [r7, #0]
					totalNumberOfParams =0;
 8007f46:	807b      	strh	r3, [r7, #2]
					length =numberOfParams + shift + 4;
 8007f48:	4653      	mov	r3, sl
 8007f4a:	1d1f      	adds	r7, r3, #4
 8007f4c:	197f      	adds	r7, r7, r5
 8007f4e:	b2ff      	uxtb	r7, r7
		if(AddBcastPayload == true){
 8007f50:	4b70      	ldr	r3, [pc, #448]	; (8008114 <SendMessageFromPort.part.0+0x3b0>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d100      	bne.n	8007f5a <SendMessageFromPort.part.0+0x1f6>
 8007f58:	e732      	b.n	8007dc0 <SendMessageFromPort.part.0+0x5c>
			if(dstGroupID < BOS_BROADCAST){
 8007f5a:	4b6f      	ldr	r3, [pc, #444]	; (8008118 <SendMessageFromPort.part.0+0x3b4>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2bff      	cmp	r3, #255	; 0xff
 8007f60:	d100      	bne.n	8007f64 <SendMessageFromPort.part.0+0x200>
 8007f62:	e0b3      	b.n	80080cc <SendMessageFromPort.part.0+0x368>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007f64:	4a6d      	ldr	r2, [pc, #436]	; (800811c <SendMessageFromPort.part.0+0x3b8>)
 8007f66:	7810      	ldrb	r0, [r2, #0]
 8007f68:	4681      	mov	r9, r0
 8007f6a:	2800      	cmp	r0, #0
 8007f6c:	d100      	bne.n	8007f70 <SendMessageFromPort.part.0+0x20c>
 8007f6e:	e0df      	b.n	8008130 <SendMessageFromPort.part.0+0x3cc>
 8007f70:	2201      	movs	r2, #1
 8007f72:	409a      	lsls	r2, r3
 8007f74:	4694      	mov	ip, r2
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007f76:	4652      	mov	r2, sl
 8007f78:	3207      	adds	r2, #7
 8007f7a:	9206      	str	r2, [sp, #24]
 8007f7c:	0032      	movs	r2, r6
 8007f7e:	464e      	mov	r6, r9
 8007f80:	46a9      	mov	r9, r5
 8007f82:	9707      	str	r7, [sp, #28]
			uint8_t groupMembers =0;
 8007f84:	2000      	movs	r0, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007f86:	464f      	mov	r7, r9
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007f88:	2301      	movs	r3, #1
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007f8a:	4665      	mov	r5, ip
 8007f8c:	4691      	mov	r9, r2
 8007f8e:	4964      	ldr	r1, [pc, #400]	; (8008120 <SendMessageFromPort.part.0+0x3bc>)
					if(InGroup(i,dstGroupID)){
 8007f90:	880a      	ldrh	r2, [r1, #0]
 8007f92:	4215      	tst	r5, r2
 8007f94:	d00e      	beq.n	8007fb4 <SendMessageFromPort.part.0+0x250>
						++groupMembers;							// Add this member
 8007f96:	3001      	adds	r0, #1
 8007f98:	b2c0      	uxtb	r0, r0
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007f9a:	19c2      	adds	r2, r0, r7
 8007f9c:	2a2c      	cmp	r2, #44	; 0x2c
 8007f9e:	dd00      	ble.n	8007fa2 <SendMessageFromPort.part.0+0x23e>
 8007fa0:	e092      	b.n	80080c8 <SendMessageFromPort.part.0+0x364>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007fa2:	1822      	adds	r2, r4, r0
 8007fa4:	19d2      	adds	r2, r2, r7
 8007fa6:	9205      	str	r2, [sp, #20]
 8007fa8:	9a06      	ldr	r2, [sp, #24]
 8007faa:	4694      	mov	ip, r2
 8007fac:	9a05      	ldr	r2, [sp, #20]
 8007fae:	4462      	add	r2, ip
 8007fb0:	3a01      	subs	r2, #1
 8007fb2:	7013      	strb	r3, [r2, #0]
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3102      	adds	r1, #2
 8007fba:	42b3      	cmp	r3, r6
 8007fbc:	d9e8      	bls.n	8007f90 <SendMessageFromPort.part.0+0x22c>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007fbe:	003d      	movs	r5, r7
 8007fc0:	464e      	mov	r6, r9
 8007fc2:	0001      	movs	r1, r0
 8007fc4:	9f07      	ldr	r7, [sp, #28]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007fc6:	1942      	adds	r2, r0, r5
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007fc8:	4653      	mov	r3, sl
 8007fca:	3307      	adds	r3, #7
 8007fcc:	195d      	adds	r5, r3, r5
 8007fce:	186d      	adds	r5, r5, r1
 8007fd0:	5560      	strb	r0, [r4, r5]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007fd2:	2a2b      	cmp	r2, #43	; 0x2b
 8007fd4:	dc78      	bgt.n	80080c8 <SendMessageFromPort.part.0+0x364>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007fd6:	4a53      	ldr	r2, [pc, #332]	; (8008124 <SendMessageFromPort.part.0+0x3c0>)
 8007fd8:	3702      	adds	r7, #2
 8007fda:	7813      	ldrb	r3, [r2, #0]
 8007fdc:	1965      	adds	r5, r4, r5
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b2db      	uxtb	r3, r3
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007fe2:	183f      	adds	r7, r7, r0
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007fe4:	7013      	strb	r3, [r2, #0]
 8007fe6:	706b      	strb	r3, [r5, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007fe8:	b2ff      	uxtb	r7, r7
 8007fea:	e6e9      	b.n	8007dc0 <SendMessageFromPort.part.0+0x5c>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d102      	bne.n	8007ff8 <SendMessageFromPort.part.0+0x294>
 8007ff2:	4643      	mov	r3, r8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d056      	beq.n	80080a6 <SendMessageFromPort.part.0+0x342>
		FindBroadcastRoutes(src);
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	f7fb fd35 	bl	8003a68 <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007ffe:	4b4a      	ldr	r3, [pc, #296]	; (8008128 <SendMessageFromPort.part.0+0x3c4>)
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008000:	9d05      	ldr	r5, [sp, #20]
 8008002:	4699      	mov	r9, r3
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008004:	2301      	movs	r3, #1
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008006:	3504      	adds	r5, #4
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008008:	469a      	mov	sl, r3
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 800800a:	b2ab      	uxth	r3, r5
 800800c:	4698      	mov	r8, r3
 800800e:	464b      	mov	r3, r9
		FindBroadcastRoutes(src);
 8008010:	2100      	movs	r1, #0
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008012:	46b1      	mov	r9, r6
 8008014:	001e      	movs	r6, r3
 8008016:	4f3a      	ldr	r7, [pc, #232]	; (8008100 <SendMessageFromPort.part.0+0x39c>)
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008018:	7833      	ldrb	r3, [r6, #0]
 800801a:	4a44      	ldr	r2, [pc, #272]	; (800812c <SendMessageFromPort.part.0+0x3c8>)
 800801c:	3b01      	subs	r3, #1
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	5ad3      	ldrh	r3, [r2, r3]
 8008022:	4652      	mov	r2, sl
 8008024:	410b      	asrs	r3, r1
 8008026:	1c4d      	adds	r5, r1, #1
 8008028:	b2e8      	uxtb	r0, r5
 800802a:	421a      	tst	r2, r3
 800802c:	d110      	bne.n	8008050 <SendMessageFromPort.part.0+0x2ec>
			rejected_FLAG=false;
 800802e:	2300      	movs	r3, #0
			Delay_us(10);
 8008030:	200a      	movs	r0, #10
			rejected_FLAG=false;
 8008032:	703b      	strb	r3, [r7, #0]
			Delay_us(10);
 8008034:	f005 f984 	bl	800d340 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008038:	0029      	movs	r1, r5
 800803a:	2d05      	cmp	r5, #5
 800803c:	d1ec      	bne.n	8008018 <SendMessageFromPort.part.0+0x2b4>
 800803e:	e71d      	b.n	8007e7c <SendMessageFromPort.part.0+0x118>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d100      	bne.n	8008048 <SendMessageFromPort.part.0+0x2e4>
 8008046:	e6af      	b.n	8007da8 <SendMessageFromPort.part.0+0x44>
			src =myID;
 8008048:	4b37      	ldr	r3, [pc, #220]	; (8008128 <SendMessageFromPort.part.0+0x3c4>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	4698      	mov	r8, r3
 800804e:	e72c      	b.n	8007eaa <SendMessageFromPort.part.0+0x146>
				Send_BOS_Message(p,message,length + 4,cmd50ms,dst);
 8008050:	465b      	mov	r3, fp
 8008052:	4642      	mov	r2, r8
 8008054:	0021      	movs	r1, r4
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2332      	movs	r3, #50	; 0x32
 800805a:	f7fa fedb 	bl	8002e14 <Send_BOS_Message>
				osDelay(200);
 800805e:	20c8      	movs	r0, #200	; 0xc8
 8008060:	f005 fcdc 	bl	800da1c <osDelay>
				if(rejected_FLAG == true)
 8008064:	783b      	ldrb	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0e1      	beq.n	800802e <SendMessageFromPort.part.0+0x2ca>
					Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 800806a:	465b      	mov	r3, fp
 800806c:	4642      	mov	r2, r8
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	0021      	movs	r1, r4
 8008072:	2332      	movs	r3, #50	; 0x32
 8008074:	4648      	mov	r0, r9
 8008076:	f7fa fecd 	bl	8002e14 <Send_BOS_Message>
 800807a:	e7d8      	b.n	800802e <SendMessageFromPort.part.0+0x2ca>
			message[6 + shift] =(uint8_t )(code >> 8);
 800807c:	0a0a      	lsrs	r2, r1, #8
 800807e:	71e2      	strb	r2, [r4, #7]
			++shift;
 8008080:	2201      	movs	r2, #1
 8008082:	4692      	mov	sl, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8008084:	2d2e      	cmp	r5, #46	; 0x2e
 8008086:	d900      	bls.n	800808a <SendMessageFromPort.part.0+0x326>
 8008088:	e72f      	b.n	8007eea <SendMessageFromPort.part.0+0x186>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800808a:	4653      	mov	r3, sl
 800808c:	1dd8      	adds	r0, r3, #7
 800808e:	4b1f      	ldr	r3, [pc, #124]	; (800810c <SendMessageFromPort.part.0+0x3a8>)
			length =numberOfParams + shift + 4;
 8008090:	1d2f      	adds	r7, r5, #4
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008092:	8819      	ldrh	r1, [r3, #0]
 8008094:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <SendMessageFromPort.part.0+0x3ac>)
 8008096:	002a      	movs	r2, r5
 8008098:	1820      	adds	r0, r4, r0
 800809a:	18c9      	adds	r1, r1, r3
			length =numberOfParams + shift + 4;
 800809c:	4457      	add	r7, sl
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 800809e:	f00b f875 	bl	801318c <memcpy>
			length =numberOfParams + shift + 4;
 80080a2:	b2ff      	uxtb	r7, r7
 80080a4:	e754      	b.n	8007f50 <SendMessageFromPort.part.0+0x1ec>
			src =message[4];
 80080a6:	7923      	ldrb	r3, [r4, #4]
 80080a8:	4698      	mov	r8, r3
 80080aa:	e7a5      	b.n	8007ff8 <SendMessageFromPort.part.0+0x294>
			Send_BOS_Message(port,message,length + 4,cmd50ms,dst);
 80080ac:	465b      	mov	r3, fp
 80080ae:	9d05      	ldr	r5, [sp, #20]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	3504      	adds	r5, #4
 80080b4:	2332      	movs	r3, #50	; 0x32
 80080b6:	0021      	movs	r1, r4
 80080b8:	0030      	movs	r0, r6
 80080ba:	b2aa      	uxth	r2, r5
 80080bc:	f7fa feaa 	bl	8002e14 <Send_BOS_Message>
 80080c0:	4b10      	ldr	r3, [pc, #64]	; (8008104 <SendMessageFromPort.part.0+0x3a0>)
 80080c2:	4f0f      	ldr	r7, [pc, #60]	; (8008100 <SendMessageFromPort.part.0+0x39c>)
 80080c4:	469a      	mov	sl, r3
 80080c6:	e6d5      	b.n	8007e74 <SendMessageFromPort.part.0+0x110>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80080c8:	2069      	movs	r0, #105	; 0x69
 80080ca:	e6df      	b.n	8007e8c <SendMessageFromPort.part.0+0x128>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80080cc:	2d2c      	cmp	r5, #44	; 0x2c
 80080ce:	d8fb      	bhi.n	80080c8 <SendMessageFromPort.part.0+0x364>
				message[7 + shift + numberOfParams] =++bcastID;
 80080d0:	4a14      	ldr	r2, [pc, #80]	; (8008124 <SendMessageFromPort.part.0+0x3c0>)
 80080d2:	1965      	adds	r5, r4, r5
 80080d4:	7813      	ldrb	r3, [r2, #0]
				length +=1;		// + bcastID
 80080d6:	3701      	adds	r7, #1
				message[7 + shift + numberOfParams] =++bcastID;
 80080d8:	3301      	adds	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	7013      	strb	r3, [r2, #0]
 80080de:	4652      	mov	r2, sl
 80080e0:	3207      	adds	r2, #7
 80080e2:	54ab      	strb	r3, [r5, r2]
				length +=1;		// + bcastID
 80080e4:	b2ff      	uxtb	r7, r7
 80080e6:	e66b      	b.n	8007dc0 <SendMessageFromPort.part.0+0x5c>
 80080e8:	20000d08 	.word	0x20000d08
 80080ec:	20000d00 	.word	0x20000d00
 80080f0:	20000d40 	.word	0x20000d40
 80080f4:	20000d0b 	.word	0x20000d0b
 80080f8:	200019d8 	.word	0x200019d8
 80080fc:	20000b4c 	.word	0x20000b4c
 8008100:	200011ed 	.word	0x200011ed
 8008104:	200011ee 	.word	0x200011ee
 8008108:	20000c74 	.word	0x20000c74
 800810c:	20001f28 	.word	0x20001f28
 8008110:	20000b74 	.word	0x20000b74
 8008114:	200011c0 	.word	0x200011c0
 8008118:	20000050 	.word	0x20000050
 800811c:	20000008 	.word	0x20000008
 8008120:	20000aac 	.word	0x20000aac
 8008124:	20000cf8 	.word	0x20000cf8
 8008128:	20000aa8 	.word	0x20000aa8
 800812c:	20000ba4 	.word	0x20000ba4
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8008130:	002a      	movs	r2, r5
 8008132:	2100      	movs	r1, #0
 8008134:	e748      	b.n	8007fc8 <SendMessageFromPort.part.0+0x264>
 8008136:	2700      	movs	r7, #0
 8008138:	352e      	adds	r5, #46	; 0x2e
 800813a:	e709      	b.n	8007f50 <SendMessageFromPort.part.0+0x1ec>

0800813c <BroadcastReceivedMessage>:
	AddBcastPayload = false;
 800813c:	2200      	movs	r2, #0
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 800813e:	b500      	push	{lr}
	AddBcastPayload = false;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <BroadcastReceivedMessage+0x34>)
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008142:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8008144:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008146:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <BroadcastReceivedMessage+0x38>)
 8008148:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 800814a:	2300      	movs	r3, #0
 800814c:	9100      	str	r1, [sp, #0]
 800814e:	28ff      	cmp	r0, #255	; 0xff
 8008150:	d007      	beq.n	8008162 <BroadcastReceivedMessage+0x26>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008152:	22fe      	movs	r2, #254	; 0xfe
 8008154:	2100      	movs	r1, #0
 8008156:	2000      	movs	r0, #0
 8008158:	f7ff fe04 	bl	8007d64 <SendMessageFromPort.part.0>
}
 800815c:	2000      	movs	r0, #0
 800815e:	b003      	add	sp, #12
 8008160:	bd00      	pop	{pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008162:	2100      	movs	r1, #0
 8008164:	32ff      	adds	r2, #255	; 0xff
 8008166:	2000      	movs	r0, #0
 8008168:	f7ff fdfc 	bl	8007d64 <SendMessageFromPort.part.0>
 800816c:	e7f6      	b.n	800815c <BroadcastReceivedMessage+0x20>
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	200011c0 	.word	0x200011c0
 8008174:	20000050 	.word	0x20000050

08008178 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008178:	b530      	push	{r4, r5, lr}
	AddBcastPayload = true;
 800817a:	2501      	movs	r5, #1
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 800817c:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800817e:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <BroadcastMessage+0x40>)
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008180:	b083      	sub	sp, #12
	AddBcastPayload = true;
 8008182:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <BroadcastMessage+0x44>)
 8008186:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008188:	0013      	movs	r3, r2
 800818a:	9400      	str	r4, [sp, #0]
 800818c:	29ff      	cmp	r1, #255	; 0xff
 800818e:	d00c      	beq.n	80081aa <BroadcastMessage+0x32>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8008190:	0001      	movs	r1, r0
 8008192:	22fe      	movs	r2, #254	; 0xfe
 8008194:	2000      	movs	r0, #0
 8008196:	f7ff fde5 	bl	8007d64 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 800819a:	0022      	movs	r2, r4
 800819c:	2100      	movs	r1, #0
 800819e:	4808      	ldr	r0, [pc, #32]	; (80081c0 <BroadcastMessage+0x48>)
 80081a0:	f00a fffd 	bl	801319e <memset>
}
 80081a4:	2000      	movs	r0, #0
 80081a6:	b003      	add	sp, #12
 80081a8:	bd30      	pop	{r4, r5, pc}
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80081aa:	0001      	movs	r1, r0
 80081ac:	22ff      	movs	r2, #255	; 0xff
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7ff fdd8 	bl	8007d64 <SendMessageFromPort.part.0>
 80081b4:	e7f1      	b.n	800819a <BroadcastMessage+0x22>
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	200011c0 	.word	0x200011c0
 80081bc:	20000050 	.word	0x20000050
 80081c0:	20000b74 	.word	0x20000b74

080081c4 <ForwardReceivedMessage>:
	AddBcastPayload = false;
 80081c4:	2200      	movs	r2, #0
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <ForwardReceivedMessage+0x48>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80081c8:	b530      	push	{r4, r5, lr}
	AddBcastPayload = false;
 80081ca:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80081cc:	1e42      	subs	r2, r0, #1
 80081ce:	00d3      	lsls	r3, r2, #3
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <ForwardReceivedMessage+0x4c>)
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	5c9d      	ldrb	r5, [r3, r2]
		port =FindRoute(myID,dst);
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <ForwardReceivedMessage+0x50>)
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80081da:	0004      	movs	r4, r0
		port =FindRoute(myID,dst);
 80081dc:	0029      	movs	r1, r5
 80081de:	7818      	ldrb	r0, [r3, #0]
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80081e0:	b083      	sub	sp, #12
		port =FindRoute(myID,dst);
 80081e2:	f7fb fce5 	bl	8003bb0 <FindRoute>
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80081e6:	002b      	movs	r3, r5
 80081e8:	4303      	orrs	r3, r0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d007      	beq.n	8008200 <ForwardReceivedMessage+0x3c>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d008      	beq.n	8008206 <ForwardReceivedMessage+0x42>
 80081f4:	2300      	movs	r3, #0
 80081f6:	002a      	movs	r2, r5
 80081f8:	2100      	movs	r1, #0
 80081fa:	9400      	str	r4, [sp, #0]
 80081fc:	f7ff fdb2 	bl	8007d64 <SendMessageFromPort.part.0>
}
 8008200:	2000      	movs	r0, #0
 8008202:	b003      	add	sp, #12
 8008204:	bd30      	pop	{r4, r5, pc}
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8008206:	2dfd      	cmp	r5, #253	; 0xfd
 8008208:	d8f4      	bhi.n	80081f4 <ForwardReceivedMessage+0x30>
 800820a:	e7f9      	b.n	8008200 <ForwardReceivedMessage+0x3c>
 800820c:	200011c0 	.word	0x200011c0
 8008210:	20000d40 	.word	0x20000d40
 8008214:	20000aa8 	.word	0x20000aa8

08008218 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821a:	0004      	movs	r4, r0
 800821c:	000e      	movs	r6, r1
 800821e:	0015      	movs	r5, r2
 8008220:	b083      	sub	sp, #12
	if(dst != BOS_BROADCAST){
 8008222:	28ff      	cmp	r0, #255	; 0xff
 8008224:	d012      	beq.n	800824c <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 8008226:	4f13      	ldr	r7, [pc, #76]	; (8008274 <SendMessageToModule+0x5c>)
 8008228:	0021      	movs	r1, r4
 800822a:	7838      	ldrb	r0, [r7, #0]
 800822c:	f7fb fcc0 	bl	8003bb0 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008230:	7839      	ldrb	r1, [r7, #0]
 8008232:	0022      	movs	r2, r4
 8008234:	0033      	movs	r3, r6
 8008236:	9500      	str	r5, [sp, #0]
 8008238:	f7ff fd7e 	bl	8007d38 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 800823c:	002a      	movs	r2, r5
 800823e:	2100      	movs	r1, #0
 8008240:	480d      	ldr	r0, [pc, #52]	; (8008278 <SendMessageToModule+0x60>)
 8008242:	f00a ffac 	bl	801319e <memset>
}
 8008246:	2000      	movs	r0, #0
 8008248:	b003      	add	sp, #12
 800824a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	AddBcastPayload = true;
 800824c:	2201      	movs	r2, #1
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <SendMessageToModule+0x5c>)
 8008250:	7819      	ldrb	r1, [r3, #0]
	AddBcastPayload = true;
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <SendMessageToModule+0x64>)
 8008254:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <SendMessageToModule+0x68>)
 8008258:	32fe      	adds	r2, #254	; 0xfe
 800825a:	7018      	strb	r0, [r3, #0]
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 800825c:	0033      	movs	r3, r6
 800825e:	9500      	str	r5, [sp, #0]
 8008260:	2000      	movs	r0, #0
 8008262:	f7ff fd7f 	bl	8007d64 <SendMessageFromPort.part.0>
	memset(messageParams,0,numberOfParams);
 8008266:	002a      	movs	r2, r5
 8008268:	2100      	movs	r1, #0
 800826a:	4803      	ldr	r0, [pc, #12]	; (8008278 <SendMessageToModule+0x60>)
 800826c:	f00a ff97 	bl	801319e <memset>
	return BOS_OK;
 8008270:	e7e9      	b.n	8008246 <SendMessageToModule+0x2e>
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	20000aa8 	.word	0x20000aa8
 8008278:	20000b74 	.word	0x20000b74
 800827c:	200011c0 	.word	0x200011c0
 8008280:	20000050 	.word	0x20000050

08008284 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008286:	4657      	mov	r7, sl
 8008288:	46de      	mov	lr, fp
 800828a:	464e      	mov	r6, r9
 800828c:	4645      	mov	r5, r8
 800828e:	b5e0      	push	{r5, r6, r7, lr}
 8008290:	b08f      	sub	sp, #60	; 0x3c
 8008292:	001e      	movs	r6, r3
 8008294:	ab18      	add	r3, sp, #96	; 0x60
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	000f      	movs	r7, r1
 800829a:	469b      	mov	fp, r3
 800829c:	ab1b      	add	r3, sp, #108	; 0x6c
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4692      	mov	sl, r2
 80082a2:	9306      	str	r3, [sp, #24]
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80082a4:	4b57      	ldr	r3, [pc, #348]	; (8008404 <StartScastDMAStream+0x180>)
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80082a6:	900d      	str	r0, [sp, #52]	; 0x34
	if(srcM != myID){
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	428b      	cmp	r3, r1
 80082ac:	d000      	beq.n	80082b0 <StartScastDMAStream+0x2c>
 80082ae:	e084      	b.n	80083ba <StartScastDMAStream+0x136>
 80082b0:	221d      	movs	r2, #29
 80082b2:	4691      	mov	r9, r2
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082b6:	4c54      	ldr	r4, [pc, #336]	; (8008408 <StartScastDMAStream+0x184>)
 80082b8:	0e1b      	lsrs	r3, r3, #24
 80082ba:	9307      	str	r3, [sp, #28]
			messageParams[1] =(uint8_t )(count >> 16);
 80082bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	9308      	str	r3, [sp, #32]
			messageParams[2] =(uint8_t )(count >> 8);
 80082c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082ce:	0e1b      	lsrs	r3, r3, #24
 80082d0:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[5] =(uint8_t )(timeout >> 16);
 80082d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082d4:	0c1b      	lsrs	r3, r3, #16
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[6] =(uint8_t )(timeout >> 8);
 80082da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80082dc:	0a1b      	lsrs	r3, r3, #8
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	930c      	str	r3, [sp, #48]	; 0x30
 80082e2:	4b4a      	ldr	r3, [pc, #296]	; (800840c <StartScastDMAStream+0x188>)
 80082e4:	1cdd      	adds	r5, r3, #3
 80082e6:	4499      	add	r9, r3
		FindRoute(srcM,dstM);
 80082e8:	0031      	movs	r1, r6
 80082ea:	0038      	movs	r0, r7
 80082ec:	f7fb fc60 	bl	8003bb0 <FindRoute>
		if(route[i]){
 80082f0:	7868      	ldrb	r0, [r5, #1]
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d035      	beq.n	8008362 <StartScastDMAStream+0xde>
			if(route[i + 1]){
 80082f6:	78a9      	ldrb	r1, [r5, #2]
 80082f8:	2900      	cmp	r1, #0
 80082fa:	d100      	bne.n	80082fe <StartScastDMAStream+0x7a>
				temp1 =FindRoute(route[i],srcM);
 80082fc:	0039      	movs	r1, r7
 80082fe:	f7fb fc57 	bl	8003bb0 <FindRoute>
			FindRoute(srcM,dstM);
 8008302:	0031      	movs	r1, r6
				temp1 =FindRoute(route[i],srcM);
 8008304:	4680      	mov	r8, r0
			FindRoute(srcM,dstM);
 8008306:	0038      	movs	r0, r7
 8008308:	f7fb fc52 	bl	8003bb0 <FindRoute>
			if(route[i] == dstM){
 800830c:	7868      	ldrb	r0, [r5, #1]
				temp2 =dstP;
 800830e:	4653      	mov	r3, sl
			if(route[i] == dstM){
 8008310:	42b0      	cmp	r0, r6
 8008312:	d003      	beq.n	800831c <StartScastDMAStream+0x98>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008314:	7829      	ldrb	r1, [r5, #0]
 8008316:	f7fb fc4b 	bl	8003bb0 <FindRoute>
 800831a:	0003      	movs	r3, r0
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800831c:	9a07      	ldr	r2, [sp, #28]
			messageParams[7] =(uint8_t )timeout;
			messageParams[8] =direction; /* Stream direction */
			messageParams[9] =temp1; /* Source port */
			messageParams[10] =temp2; /* destination port */
 800831e:	72a3      	strb	r3, [r4, #10]
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008320:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008322:	9a08      	ldr	r2, [sp, #32]
			messageParams[11] =stored; /* EEPROM storage */
 8008324:	9b06      	ldr	r3, [sp, #24]
			messageParams[1] =(uint8_t )(count >> 16);
 8008326:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8008328:	9a09      	ldr	r2, [sp, #36]	; 0x24
			FindRoute(srcM,dstM);
 800832a:	0031      	movs	r1, r6
			messageParams[2] =(uint8_t )(count >> 8);
 800832c:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 800832e:	9a19      	ldr	r2, [sp, #100]	; 0x64
			messageParams[11] =stored; /* EEPROM storage */
 8008330:	72e3      	strb	r3, [r4, #11]
			messageParams[3] =(uint8_t )count;
 8008332:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			FindRoute(srcM,dstM);
 8008336:	0038      	movs	r0, r7
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008338:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 800833a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800833c:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800833e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008340:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8008342:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008344:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8008346:	465a      	mov	r2, fp
 8008348:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 800834a:	4642      	mov	r2, r8
 800834c:	7262      	strb	r2, [r4, #9]
			FindRoute(srcM,dstM);
 800834e:	f7fb fc2f 	bl	8003bb0 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008352:	220c      	movs	r2, #12
 8008354:	211b      	movs	r1, #27
 8008356:	7868      	ldrb	r0, [r5, #1]
 8008358:	f7ff ff5e 	bl	8008218 <SendMessageToModule>
			osDelay(10);
 800835c:	200a      	movs	r0, #10
 800835e:	f005 fb5d 	bl	800da1c <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8008362:	3501      	adds	r5, #1
 8008364:	454d      	cmp	r5, r9
 8008366:	d1bf      	bne.n	80082e8 <StartScastDMAStream+0x64>
		}
	}
	
	if(srcM == dstM)
 8008368:	42b7      	cmp	r7, r6
 800836a:	d112      	bne.n	8008392 <StartScastDMAStream+0x10e>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800836c:	4653      	mov	r3, sl
 800836e:	4658      	mov	r0, fp
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008376:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008378:	f7ff fbec 	bl	8007b54 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800837c:	9b06      	ldr	r3, [sp, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10d      	bne.n	800839e <StartScastDMAStream+0x11a>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008382:	2000      	movs	r0, #0
 8008384:	b00f      	add	sp, #60	; 0x3c
 8008386:	bcf0      	pop	{r4, r5, r6, r7}
 8008388:	46bb      	mov	fp, r7
 800838a:	46b2      	mov	sl, r6
 800838c:	46a9      	mov	r9, r5
 800838e:	46a0      	mov	r8, r4
 8008390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8008392:	0031      	movs	r1, r6
 8008394:	0038      	movs	r0, r7
 8008396:	f7fb fc0b 	bl	8003bb0 <FindRoute>
 800839a:	4682      	mov	sl, r0
 800839c:	e7e6      	b.n	800836c <StartScastDMAStream+0xe8>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800839e:	2300      	movs	r3, #0
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	9302      	str	r3, [sp, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	4653      	mov	r3, sl
 80083aa:	4658      	mov	r0, fp
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80083b4:	f7fb f932 	bl	800361c <SaveEEstreams>
 80083b8:	e7e3      	b.n	8008382 <StartScastDMAStream+0xfe>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80083ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083bc:	4b12      	ldr	r3, [pc, #72]	; (8008408 <StartScastDMAStream+0x184>)
 80083be:	0e12      	lsrs	r2, r2, #24
 80083c0:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 80083c2:	9a19      	ldr	r2, [sp, #100]	; 0x64
		messageParams[9] =srcP; /* Source port */
 80083c4:	7258      	strb	r0, [r3, #9]
		messageParams[1] =(uint8_t )(count >> 16);
 80083c6:	0c12      	lsrs	r2, r2, #16
 80083c8:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 80083ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80083cc:	211c      	movs	r1, #28
		messageParams[2] =(uint8_t )(count >> 8);
 80083ce:	0a12      	lsrs	r2, r2, #8
 80083d0:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 80083d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80083d4:	0038      	movs	r0, r7
		messageParams[3] =(uint8_t )count;
 80083d6:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80083d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		messageParams[10] =dstM; /* destination module */
 80083da:	729e      	strb	r6, [r3, #10]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80083dc:	0e12      	lsrs	r2, r2, #24
 80083de:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 80083e0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083e2:	0c12      	lsrs	r2, r2, #16
 80083e4:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 80083e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083e8:	0a12      	lsrs	r2, r2, #8
 80083ea:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 80083ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083ee:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 80083f0:	465a      	mov	r2, fp
 80083f2:	721a      	strb	r2, [r3, #8]
		messageParams[11] =dstP; /* destination port */
 80083f4:	4652      	mov	r2, sl
 80083f6:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80083f8:	9a06      	ldr	r2, [sp, #24]
 80083fa:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80083fc:	220d      	movs	r2, #13
 80083fe:	f7ff ff0b 	bl	8008218 <SendMessageToModule>
		return result;
 8008402:	e7be      	b.n	8008382 <StartScastDMAStream+0xfe>
 8008404:	20000aa8 	.word	0x20000aa8
 8008408:	20000b74 	.word	0x20000b74
 800840c:	20001f28 	.word	0x20001f28

08008410 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008412:	464e      	mov	r6, r9
 8008414:	4645      	mov	r5, r8
 8008416:	46de      	mov	lr, fp
 8008418:	4657      	mov	r7, sl

	uint8_t calculated_crc,port_number,length,port_index;

			uint8_t temp_length[NumOfPorts] = {0};
 800841a:	2300      	movs	r3, #0
void BackEndTask(void *argument){
 800841c:	b5e0      	push	{r5, r6, r7, lr}
 800841e:	b087      	sub	sp, #28
			uint8_t temp_length[NumOfPorts] = {0};
 8008420:	aa02      	add	r2, sp, #8
 8008422:	9302      	str	r3, [sp, #8]
 8008424:	7113      	strb	r3, [r2, #4]
			uint8_t temp_index[NumOfPorts] = {0};
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	7313      	strb	r3, [r2, #12]
 800842a:	4bcd      	ldr	r3, [pc, #820]	; (8008760 <BackEndTask+0x350>)
 800842c:	4ecd      	ldr	r6, [pc, #820]	; (8008764 <BackEndTask+0x354>)
 800842e:	4699      	mov	r9, r3
 8008430:	4bcd      	ldr	r3, [pc, #820]	; (8008768 <BackEndTask+0x358>)
 8008432:	4dce      	ldr	r5, [pc, #824]	; (800876c <BackEndTask+0x35c>)
 8008434:	4698      	mov	r8, r3
 8008436:	4bce      	ldr	r3, [pc, #824]	; (8008770 <BackEndTask+0x360>)
 8008438:	469b      	mov	fp, r3
 800843a:	4bce      	ldr	r3, [pc, #824]	; (8008774 <BackEndTask+0x364>)
 800843c:	469a      	mov	sl, r3

	for(;;)
	{
       for(port_DMA=0;port_DMA<NumOfPorts;)
 800843e:	2300      	movs	r3, #0
 8008440:	2700      	movs	r7, #0
 8008442:	7033      	strb	r3, [r6, #0]
       {port_index=port_DMA;
		index_input[port_DMA]=MSG_RX_BUF_SIZE-(*index_dma[port_DMA]);
 8008444:	464b      	mov	r3, r9
 8008446:	2140      	movs	r1, #64	; 0x40
 8008448:	00ba      	lsls	r2, r7, #2
 800844a:	589b      	ldr	r3, [r3, r2]
 800844c:	4249      	negs	r1, r1
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	1acb      	subs	r3, r1, r3
 8008452:	49c9      	ldr	r1, [pc, #804]	; (8008778 <BackEndTask+0x368>)
 8008454:	b2db      	uxtb	r3, r3
 8008456:	55cb      	strb	r3, [r1, r7]

		if(index_input[port_DMA] !=index_process[port_DMA])
 8008458:	4641      	mov	r1, r8
 800845a:	5dc8      	ldrb	r0, [r1, r7]
 800845c:	4283      	cmp	r3, r0
 800845e:	d100      	bne.n	8008462 <BackEndTask+0x52>
 8008460:	e081      	b.n	8008566 <BackEndTask+0x156>
		{ port_number =port_DMA+1;
 8008462:	1c7b      	adds	r3, r7, #1
 8008464:	b2db      	uxtb	r3, r3
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 8008466:	1e5c      	subs	r4, r3, #1
 8008468:	0061      	lsls	r1, r4, #1
 800846a:	1909      	adds	r1, r1, r4
 800846c:	4cc3      	ldr	r4, [pc, #780]	; (800877c <BackEndTask+0x36c>)
 800846e:	0189      	lsls	r1, r1, #6
 8008470:	46a4      	mov	ip, r4
 8008472:	4461      	add	r1, ip
 8008474:	5c09      	ldrb	r1, [r1, r0]
 8008476:	48c2      	ldr	r0, [pc, #776]	; (8008780 <BackEndTask+0x370>)
 8008478:	5cc0      	ldrb	r0, [r0, r3]
 800847a:	290d      	cmp	r1, #13
 800847c:	d07c      	beq.n	8008578 <BackEndTask+0x168>

				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
				Activate_CLI_For_First_Time_Flag = 1;

			}
			else if(portStatus[port_number] == CLI)
 800847e:	2803      	cmp	r0, #3
 8008480:	d100      	bne.n	8008484 <BackEndTask+0x74>
 8008482:	e085      	b.n	8008590 <BackEndTask+0x180>
			{
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
				Read_In_CLI_Task_Flag = 1;
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 8008484:	2948      	cmp	r1, #72	; 0x48
 8008486:	d100      	bne.n	800848a <BackEndTask+0x7a>
 8008488:	e097      	b.n	80085ba <BackEndTask+0x1aa>
			{
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
			}

			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'Z' && portStatus[port_number] == H_Status)
 800848a:	295a      	cmp	r1, #90	; 0x5a
 800848c:	d178      	bne.n	8008580 <BackEndTask+0x170>
 800848e:	2807      	cmp	r0, #7
 8008490:	d100      	bne.n	8008494 <BackEndTask+0x84>
 8008492:	e11e      	b.n	80086d2 <BackEndTask+0x2c2>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
			{
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
			}

			else if(portStatus[port_number] == Z_Status)
 8008494:	2808      	cmp	r0, #8
 8008496:	d100      	bne.n	800849a <BackEndTask+0x8a>
 8008498:	e0b8      	b.n	800860c <BackEndTask+0x1fc>
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
				temp_index[port_index] = 3;
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
			}

			else if(portStatus[port_number] == MSG)
 800849a:	2801      	cmp	r0, #1
 800849c:	d100      	bne.n	80084a0 <BackEndTask+0x90>
 800849e:	e0fa      	b.n	8008696 <BackEndTask+0x286>
		else if(index_input[port_DMA] ==index_process[port_DMA])
		   {
			port_DMA++;
			}

		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80084a0:	4bb8      	ldr	r3, [pc, #736]	; (8008784 <BackEndTask+0x374>)
 80084a2:	781a      	ldrb	r2, [r3, #0]
			index_process[port_DMA]++;
 80084a4:	4643      	mov	r3, r8
 80084a6:	7831      	ldrb	r1, [r6, #0]
 80084a8:	5c5b      	ldrb	r3, [r3, r1]
 80084aa:	3301      	adds	r3, #1
 80084ac:	b2db      	uxtb	r3, r3
			if(index_process[port_DMA]==MSG_RX_BUF_SIZE)
 80084ae:	2bc0      	cmp	r3, #192	; 0xc0
 80084b0:	d05e      	beq.n	8008570 <BackEndTask+0x160>
			index_process[port_DMA]++;
 80084b2:	4640      	mov	r0, r8
 80084b4:	5443      	strb	r3, [r0, r1]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80084b6:	4653      	mov	r3, sl
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d105      	bne.n	80084ca <BackEndTask+0xba>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
		}

		taskYIELD();
 80084be:	f007 f82f 	bl	800f520 <vPortYield>
       for(port_DMA=0;port_DMA<NumOfPorts;)
 80084c2:	7837      	ldrb	r7, [r6, #0]
 80084c4:	2f04      	cmp	r7, #4
 80084c6:	d9bd      	bls.n	8008444 <BackEndTask+0x34>
 80084c8:	e7b9      	b.n	800843e <BackEndTask+0x2e>
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80084ca:	2048      	movs	r0, #72	; 0x48
 80084cc:	465f      	mov	r7, fp
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 80084ce:	4aae      	ldr	r2, [pc, #696]	; (8008788 <BackEndTask+0x378>)
 80084d0:	5cd3      	ldrb	r3, [r2, r3]
			port_index = port_number - 1;
 80084d2:	1e5c      	subs	r4, r3, #1
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 80084d4:	9301      	str	r3, [sp, #4]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80084d6:	4bad      	ldr	r3, [pc, #692]	; (800878c <BackEndTask+0x37c>)
			port_index = port_number - 1;
 80084d8:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80084da:	5d1b      	ldrb	r3, [r3, r4]
 80084dc:	00a2      	lsls	r2, r4, #2
 80084de:	00d9      	lsls	r1, r3, #3
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	1912      	adds	r2, r2, r4
 80084e4:	1acb      	subs	r3, r1, r3
 80084e6:	00d1      	lsls	r1, r2, #3
 80084e8:	1a89      	subs	r1, r1, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	00c9      	lsls	r1, r1, #3
 80084ee:	185a      	adds	r2, r3, r1
 80084f0:	54b8      	strb	r0, [r7, r2]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 80084f2:	445a      	add	r2, fp
 80084f4:	3012      	adds	r0, #18
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80084f6:	7897      	ldrb	r7, [r2, #2]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 80084f8:	7050      	strb	r0, [r2, #1]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 80084fa:	4aa5      	ldr	r2, [pc, #660]	; (8008790 <BackEndTask+0x380>)
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80084fc:	70af      	strb	r7, [r5, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 80084fe:	802a      	strh	r2, [r5, #0]
			for(int i=0;i<length;i++)
 8008500:	2f00      	cmp	r7, #0
 8008502:	d006      	beq.n	8008512 <BackEndTask+0x102>
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008504:	3103      	adds	r1, #3
 8008506:	18c9      	adds	r1, r1, r3
 8008508:	003a      	movs	r2, r7
 800850a:	1ce8      	adds	r0, r5, #3
 800850c:	4459      	add	r1, fp
 800850e:	f00a fe3d 	bl	801318c <memcpy>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,length + 3);
 8008512:	1cf9      	adds	r1, r7, #3
 8008514:	0028      	movs	r0, r5
 8008516:	f002 ff7d 	bl	800b414 <CalculateCRC8>
 800851a:	4684      	mov	ip, r0
			Message_counter++;
 800851c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800851e:	9900      	ldr	r1, [sp, #0]
			Message_counter++;
 8008520:	3301      	adds	r3, #1
 8008522:	872b      	strh	r3, [r5, #56]	; 0x38
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 8008524:	4b99      	ldr	r3, [pc, #612]	; (800878c <BackEndTask+0x37c>)
 8008526:	1908      	adds	r0, r1, r4
 8008528:	5d1b      	ldrb	r3, [r3, r4]
 800852a:	00c1      	lsls	r1, r0, #3
 800852c:	00da      	lsls	r2, r3, #3
 800852e:	1a09      	subs	r1, r1, r0
 8008530:	1ad2      	subs	r2, r2, r3
 8008532:	00d2      	lsls	r2, r2, #3
 8008534:	00c9      	lsls	r1, r1, #3
 8008536:	1850      	adds	r0, r2, r1
 8008538:	4458      	add	r0, fp
 800853a:	19c0      	adds	r0, r0, r7
 800853c:	78c0      	ldrb	r0, [r0, #3]
 800853e:	4560      	cmp	r0, ip
 8008540:	d043      	beq.n	80085ca <BackEndTask+0x1ba>
				Rejected_Messages++;
 8008542:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
 8008544:	3201      	adds	r2, #1
 8008546:	87aa      	strh	r2, [r5, #60]	; 0x3c
			MSG_Buffer_Index_Start[port_index]++;
 8008548:	3301      	adds	r3, #1
 800854a:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 800854c:	2b05      	cmp	r3, #5
 800854e:	d027      	beq.n	80085a0 <BackEndTask+0x190>
			MSG_Buffer_Index_Start[port_index]++;
 8008550:	4a8e      	ldr	r2, [pc, #568]	; (800878c <BackEndTask+0x37c>)
 8008552:	5513      	strb	r3, [r2, r4]
			Process_Message_Buffer_Index_Start++;
 8008554:	4653      	mov	r3, sl
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 800855c:	2b05      	cmp	r3, #5
 800855e:	d028      	beq.n	80085b2 <BackEndTask+0x1a2>
			Process_Message_Buffer_Index_Start++;
 8008560:	4652      	mov	r2, sl
 8008562:	7013      	strb	r3, [r2, #0]
 8008564:	e7ab      	b.n	80084be <BackEndTask+0xae>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008566:	4b87      	ldr	r3, [pc, #540]	; (8008784 <BackEndTask+0x374>)
			port_DMA++;
 8008568:	3701      	adds	r7, #1
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800856a:	781a      	ldrb	r2, [r3, #0]
			port_DMA++;
 800856c:	7037      	strb	r7, [r6, #0]
 800856e:	e7a2      	b.n	80084b6 <BackEndTask+0xa6>
				{index_process[port_DMA]=0;}
 8008570:	4643      	mov	r3, r8
 8008572:	2000      	movs	r0, #0
 8008574:	5458      	strb	r0, [r3, r1]
 8008576:	e79e      	b.n	80084b6 <BackEndTask+0xa6>
			if(UARTRxBuf[port_number-1][index_process[port_DMA]] == 0x0D && portStatus[port_number] == FREE)
 8008578:	2800      	cmp	r0, #0
 800857a:	d065      	beq.n	8008648 <BackEndTask+0x238>
			else if(portStatus[port_number] == CLI)
 800857c:	2803      	cmp	r0, #3
 800857e:	d007      	beq.n	8008590 <BackEndTask+0x180>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  != 'Z' && portStatus[port_number] == H_Status)
 8008580:	2807      	cmp	r0, #7
 8008582:	d187      	bne.n	8008494 <BackEndTask+0x84>
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 8008584:	2100      	movs	r1, #0
 8008586:	4a7e      	ldr	r2, [pc, #504]	; (8008780 <BackEndTask+0x370>)
 8008588:	54d1      	strb	r1, [r2, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800858a:	4b7e      	ldr	r3, [pc, #504]	; (8008784 <BackEndTask+0x374>)
 800858c:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800858e:	e789      	b.n	80084a4 <BackEndTask+0x94>
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008590:	4b80      	ldr	r3, [pc, #512]	; (8008794 <BackEndTask+0x384>)
				Read_In_CLI_Task_Flag = 1;
 8008592:	4a81      	ldr	r2, [pc, #516]	; (8008798 <BackEndTask+0x388>)
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008594:	7019      	strb	r1, [r3, #0]
				Read_In_CLI_Task_Flag = 1;
 8008596:	2301      	movs	r3, #1
 8008598:	7013      	strb	r3, [r2, #0]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800859a:	4b7a      	ldr	r3, [pc, #488]	; (8008784 <BackEndTask+0x374>)
 800859c:	781a      	ldrb	r2, [r3, #0]
 800859e:	e781      	b.n	80084a4 <BackEndTask+0x94>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80085a0:	2200      	movs	r2, #0
 80085a2:	4b7a      	ldr	r3, [pc, #488]	; (800878c <BackEndTask+0x37c>)
 80085a4:	551a      	strb	r2, [r3, r4]
			Process_Message_Buffer_Index_Start++;
 80085a6:	4653      	mov	r3, sl
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	d1d6      	bne.n	8008560 <BackEndTask+0x150>
 80085b2:	4653      	mov	r3, sl
 80085b4:	2200      	movs	r2, #0
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	e781      	b.n	80084be <BackEndTask+0xae>
			else if(UARTRxBuf[port_number-1][index_process[port_DMA]]  == 'H' && portStatus[port_number] == FREE)
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1e0      	bne.n	8008580 <BackEndTask+0x170>
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 80085be:	2207      	movs	r2, #7
 80085c0:	496f      	ldr	r1, [pc, #444]	; (8008780 <BackEndTask+0x370>)
 80085c2:	54ca      	strb	r2, [r1, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80085c4:	4b6f      	ldr	r3, [pc, #444]	; (8008784 <BackEndTask+0x374>)
 80085c6:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 80085c8:	e76c      	b.n	80084a4 <BackEndTask+0x94>
				Accepted_Messages++;
 80085ca:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80085cc:	4873      	ldr	r0, [pc, #460]	; (800879c <BackEndTask+0x38c>)
				Accepted_Messages++;
 80085ce:	3301      	adds	r3, #1
 80085d0:	876b      	strh	r3, [r5, #58]	; 0x3a
				messageLength[port_index] =length;
 80085d2:	4b73      	ldr	r3, [pc, #460]	; (80087a0 <BackEndTask+0x390>)
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80085d4:	3103      	adds	r1, #3
				messageLength[port_index] =length;
 80085d6:	551f      	strb	r7, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80085d8:	00e3      	lsls	r3, r4, #3
 80085da:	1b1b      	subs	r3, r3, r4
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	469c      	mov	ip, r3
 80085e0:	1889      	adds	r1, r1, r2
 80085e2:	4460      	add	r0, ip
 80085e4:	003a      	movs	r2, r7
 80085e6:	4459      	add	r1, fp
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	f00a fdcf 	bl	801318c <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80085ee:	4a6b      	ldr	r2, [pc, #428]	; (800879c <BackEndTask+0x38c>)
 80085f0:	9b00      	ldr	r3, [sp, #0]
					NotifyMessagingTask(port_number);
 80085f2:	9801      	ldr	r0, [sp, #4]
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80085f4:	5cd3      	ldrb	r3, [r2, r3]
 80085f6:	4a6b      	ldr	r2, [pc, #428]	; (80087a4 <BackEndTask+0x394>)
 80085f8:	7812      	ldrb	r2, [r2, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d01f      	beq.n	800863e <BackEndTask+0x22e>
 80085fe:	2bfd      	cmp	r3, #253	; 0xfd
 8008600:	d81d      	bhi.n	800863e <BackEndTask+0x22e>
					ForwardReceivedMessage(port_number);
 8008602:	f7ff fddf 	bl	80081c4 <ForwardReceivedMessage>
			MSG_Buffer_Index_Start[port_index]++;
 8008606:	4b61      	ldr	r3, [pc, #388]	; (800878c <BackEndTask+0x37c>)
 8008608:	5d1b      	ldrb	r3, [r3, r4]
 800860a:	e79d      	b.n	8008548 <BackEndTask+0x138>
				portStatus[port_number] =MSG; // Receive length byte.
 800860c:	4c5c      	ldr	r4, [pc, #368]	; (8008780 <BackEndTask+0x370>)
 800860e:	3807      	subs	r0, #7
 8008610:	54e0      	strb	r0, [r4, r3]
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 8008612:	4b65      	ldr	r3, [pc, #404]	; (80087a8 <BackEndTask+0x398>)
 8008614:	19d2      	adds	r2, r2, r7
 8008616:	5ddc      	ldrb	r4, [r3, r7]
				temp_index[port_index] = 3;
 8008618:	3007      	adds	r0, #7
				MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 800861a:	00e3      	lsls	r3, r4, #3
 800861c:	1b1c      	subs	r4, r3, r4
 800861e:	00d3      	lsls	r3, r2, #3
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	191b      	adds	r3, r3, r4
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	445b      	add	r3, fp
 8008628:	7099      	strb	r1, [r3, #2]
				temp_index[port_index] = 3;
 800862a:	2303      	movs	r3, #3
 800862c:	aa02      	add	r2, sp, #8
 800862e:	1812      	adds	r2, r2, r0
 8008630:	55d3      	strb	r3, [r2, r7]
				temp_length[port_index] =UARTRxBuf[port_number-1][index_process[port_DMA]]  + 1;
 8008632:	3101      	adds	r1, #1
 8008634:	ab02      	add	r3, sp, #8
 8008636:	55d9      	strb	r1, [r3, r7]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008638:	4b52      	ldr	r3, [pc, #328]	; (8008784 <BackEndTask+0x374>)
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	e732      	b.n	80084a4 <BackEndTask+0x94>
					NotifyMessagingTask(port_number);
 800863e:	f7ff fb57 	bl	8007cf0 <NotifyMessagingTask>
			MSG_Buffer_Index_Start[port_index]++;
 8008642:	4b52      	ldr	r3, [pc, #328]	; (800878c <BackEndTask+0x37c>)
 8008644:	5d1b      	ldrb	r3, [r3, r4]
					NotifyMessagingTask(port_number);
 8008646:	e77f      	b.n	8008548 <BackEndTask+0x138>
 8008648:	4a4d      	ldr	r2, [pc, #308]	; (8008780 <BackEndTask+0x370>)
 800864a:	1d90      	adds	r0, r2, #6
					if(portStatus[i] == CLI)
 800864c:	7811      	ldrb	r1, [r2, #0]
 800864e:	2903      	cmp	r1, #3
 8008650:	d101      	bne.n	8008656 <BackEndTask+0x246>
						portStatus[i] = FREE;
 8008652:	2100      	movs	r1, #0
 8008654:	7011      	strb	r1, [r2, #0]
				for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 8008656:	3201      	adds	r2, #1
 8008658:	4290      	cmp	r0, r2
 800865a:	d1f7      	bne.n	800864c <BackEndTask+0x23c>
				portStatus[port_number] =CLI; // Continue the CLI session on this port
 800865c:	2203      	movs	r2, #3
 800865e:	4948      	ldr	r1, [pc, #288]	; (8008780 <BackEndTask+0x370>)
 8008660:	54ca      	strb	r2, [r1, r3]
				PcPort = port_number;
 8008662:	4a52      	ldr	r2, [pc, #328]	; (80087ac <BackEndTask+0x39c>)
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008664:	2100      	movs	r1, #0
				PcPort = port_number;
 8008666:	7013      	strb	r3, [r2, #0]
				CLI_Data = UARTRxBuf[port_number-1][index_process[port_DMA]];
 8008668:	230d      	movs	r3, #13
 800866a:	4a4a      	ldr	r2, [pc, #296]	; (8008794 <BackEndTask+0x384>)
 800866c:	7013      	strb	r3, [r2, #0]
				xTaskNotifyGive(xCommandConsoleTaskHandle);
 800866e:	4b50      	ldr	r3, [pc, #320]	; (80087b0 <BackEndTask+0x3a0>)
 8008670:	2202      	movs	r2, #2
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	9800      	ldr	r0, [sp, #0]
 8008678:	2300      	movs	r3, #0
 800867a:	f006 fcfd 	bl	800f078 <xTaskGenericNotify>
				if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800867e:	4b4d      	ldr	r3, [pc, #308]	; (80087b4 <BackEndTask+0x3a4>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <BackEndTask+0x27a>
 8008686:	4a44      	ldr	r2, [pc, #272]	; (8008798 <BackEndTask+0x388>)
 8008688:	7013      	strb	r3, [r2, #0]
				Activate_CLI_For_First_Time_Flag = 1;
 800868a:	2301      	movs	r3, #1
 800868c:	4a49      	ldr	r2, [pc, #292]	; (80087b4 <BackEndTask+0x3a4>)
 800868e:	7013      	strb	r3, [r2, #0]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008690:	4b3c      	ldr	r3, [pc, #240]	; (8008784 <BackEndTask+0x374>)
 8008692:	781a      	ldrb	r2, [r3, #0]
				Activate_CLI_For_First_Time_Flag = 1;
 8008694:	e706      	b.n	80084a4 <BackEndTask+0x94>
				if(temp_length[port_index] > 1)
 8008696:	a802      	add	r0, sp, #8
 8008698:	5dc0      	ldrb	r0, [r0, r7]
 800869a:	9000      	str	r0, [sp, #0]
 800869c:	2801      	cmp	r0, #1
 800869e:	d91e      	bls.n	80086de <BackEndTask+0x2ce>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80086a0:	2308      	movs	r3, #8
 80086a2:	ac02      	add	r4, sp, #8
 80086a4:	18e4      	adds	r4, r4, r3
 80086a6:	4b40      	ldr	r3, [pc, #256]	; (80087a8 <BackEndTask+0x398>)
 80086a8:	19d2      	adds	r2, r2, r7
 80086aa:	5ddb      	ldrb	r3, [r3, r7]
 80086ac:	5de4      	ldrb	r4, [r4, r7]
 80086ae:	00d8      	lsls	r0, r3, #3
 80086b0:	1ac0      	subs	r0, r0, r3
 80086b2:	4684      	mov	ip, r0
 80086b4:	00d3      	lsls	r3, r2, #3
 80086b6:	1a9b      	subs	r3, r3, r2
 80086b8:	4463      	add	r3, ip
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	445b      	add	r3, fp
 80086be:	5519      	strb	r1, [r3, r4]
					temp_index[port_index]++;
 80086c0:	2308      	movs	r3, #8
					temp_length[port_index]--;
 80086c2:	9800      	ldr	r0, [sp, #0]
					temp_index[port_index]++;
 80086c4:	aa02      	add	r2, sp, #8
 80086c6:	3401      	adds	r4, #1
 80086c8:	18d3      	adds	r3, r2, r3
					temp_length[port_index]--;
 80086ca:	3801      	subs	r0, #1
					temp_index[port_index]++;
 80086cc:	55dc      	strb	r4, [r3, r7]
					temp_length[port_index]--;
 80086ce:	55d0      	strb	r0, [r2, r7]
 80086d0:	e6e6      	b.n	80084a0 <BackEndTask+0x90>
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 80086d2:	2208      	movs	r2, #8
 80086d4:	492a      	ldr	r1, [pc, #168]	; (8008780 <BackEndTask+0x370>)
 80086d6:	54ca      	strb	r2, [r1, r3]
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80086d8:	4b2a      	ldr	r3, [pc, #168]	; (8008784 <BackEndTask+0x374>)
 80086da:	781a      	ldrb	r2, [r3, #0]
				portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 80086dc:	e6e2      	b.n	80084a4 <BackEndTask+0x94>
					MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] =UARTRxBuf[port_number-1][index_process[port_DMA]] ;
 80086de:	4832      	ldr	r0, [pc, #200]	; (80087a8 <BackEndTask+0x398>)
 80086e0:	2408      	movs	r4, #8
 80086e2:	5dc0      	ldrb	r0, [r0, r7]
 80086e4:	19d2      	adds	r2, r2, r7
 80086e6:	4684      	mov	ip, r0
 80086e8:	a802      	add	r0, sp, #8
 80086ea:	1900      	adds	r0, r0, r4
 80086ec:	5dc4      	ldrb	r4, [r0, r7]
 80086ee:	4660      	mov	r0, ip
 80086f0:	9401      	str	r4, [sp, #4]
 80086f2:	00c4      	lsls	r4, r0, #3
 80086f4:	1a24      	subs	r4, r4, r0
 80086f6:	00d0      	lsls	r0, r2, #3
 80086f8:	1a82      	subs	r2, r0, r2
 80086fa:	1912      	adds	r2, r2, r4
 80086fc:	00d2      	lsls	r2, r2, #3
 80086fe:	9c01      	ldr	r4, [sp, #4]
 8008700:	445a      	add	r2, fp
 8008702:	5511      	strb	r1, [r2, r4]
					temp_index[port_index]++;
 8008704:	1c62      	adds	r2, r4, #1
 8008706:	2408      	movs	r4, #8
					temp_length[port_index]--;
 8008708:	9800      	ldr	r0, [sp, #0]
					temp_index[port_index]++;
 800870a:	a902      	add	r1, sp, #8
 800870c:	1909      	adds	r1, r1, r4
 800870e:	55ca      	strb	r2, [r1, r7]
					temp_length[port_index]--;
 8008710:	3801      	subs	r0, #1
 8008712:	aa02      	add	r2, sp, #8
 8008714:	55d0      	strb	r0, [r2, r7]
					MSG_Buffer_Index_End[port_index]++;
 8008716:	4662      	mov	r2, ip
 8008718:	3201      	adds	r2, #1
 800871a:	b2d2      	uxtb	r2, r2
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800871c:	2a05      	cmp	r2, #5
 800871e:	d00f      	beq.n	8008740 <BackEndTask+0x330>
					MSG_Buffer_Index_End[port_index]++;
 8008720:	4921      	ldr	r1, [pc, #132]	; (80087a8 <BackEndTask+0x398>)
 8008722:	55ca      	strb	r2, [r1, r7]
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 8008724:	4a17      	ldr	r2, [pc, #92]	; (8008784 <BackEndTask+0x374>)
 8008726:	4918      	ldr	r1, [pc, #96]	; (8008788 <BackEndTask+0x378>)
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	548b      	strb	r3, [r1, r2]
					Process_Message_Buffer_Index_End++;
 800872c:	3201      	adds	r2, #1
 800872e:	b2d2      	uxtb	r2, r2
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008730:	2a05      	cmp	r2, #5
 8008732:	d010      	beq.n	8008756 <BackEndTask+0x346>
					Process_Message_Buffer_Index_End++;
 8008734:	4913      	ldr	r1, [pc, #76]	; (8008784 <BackEndTask+0x374>)
 8008736:	700a      	strb	r2, [r1, #0]
					portStatus[port_number] =FREE; // End of receiving message.
 8008738:	2000      	movs	r0, #0
 800873a:	4911      	ldr	r1, [pc, #68]	; (8008780 <BackEndTask+0x370>)
 800873c:	54c8      	strb	r0, [r1, r3]
 800873e:	e6b1      	b.n	80084a4 <BackEndTask+0x94>
					if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 8008740:	2100      	movs	r1, #0
 8008742:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <BackEndTask+0x398>)
 8008744:	55d1      	strb	r1, [r2, r7]
					Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <BackEndTask+0x374>)
 8008748:	490f      	ldr	r1, [pc, #60]	; (8008788 <BackEndTask+0x378>)
 800874a:	7812      	ldrb	r2, [r2, #0]
 800874c:	548b      	strb	r3, [r1, r2]
					Process_Message_Buffer_Index_End++;
 800874e:	3201      	adds	r2, #1
 8008750:	b2d2      	uxtb	r2, r2
					if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 8008752:	2a05      	cmp	r2, #5
 8008754:	d1ee      	bne.n	8008734 <BackEndTask+0x324>
 8008756:	2100      	movs	r1, #0
 8008758:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <BackEndTask+0x374>)
 800875a:	7011      	strb	r1, [r2, #0]
 800875c:	2200      	movs	r2, #0
 800875e:	e7eb      	b.n	8008738 <BackEndTask+0x328>
 8008760:	200011f4 	.word	0x200011f4
 8008764:	200011f0 	.word	0x200011f0
 8008768:	2000120c 	.word	0x2000120c
 800876c:	20001f4c 	.word	0x20001f4c
 8008770:	20001224 	.word	0x20001224
 8008774:	2000121b 	.word	0x2000121b
 8008778:	20001214 	.word	0x20001214
 800877c:	20001a10 	.word	0x20001a10
 8008780:	20000c64 	.word	0x20000c64
 8008784:	2000121a 	.word	0x2000121a
 8008788:	2000121c 	.word	0x2000121c
 800878c:	200017a4 	.word	0x200017a4
 8008790:	00005a48 	.word	0x00005a48
 8008794:	200011f1 	.word	0x200011f1
 8008798:	200017a9 	.word	0x200017a9
 800879c:	20000d40 	.word	0x20000d40
 80087a0:	20000d00 	.word	0x20000d00
 80087a4:	20000aa8 	.word	0x20000aa8
 80087a8:	2000179c 	.word	0x2000179c
 80087ac:	20000c60 	.word	0x20000c60
 80087b0:	20001ed4 	.word	0x20001ed4
 80087b4:	200017aa 	.word	0x200017aa

080087b8 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 80087b8:	2001      	movs	r0, #1
 80087ba:	4770      	bx	lr

080087bc <PxMessagingTask>:
void PxMessagingTask(void *argument){
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	4657      	mov	r7, sl
 80087c0:	46de      	mov	lr, fp
 80087c2:	464e      	mov	r6, r9
 80087c4:	4645      	mov	r5, r8
 80087c6:	2300      	movs	r3, #0
 80087c8:	b5e0      	push	{r5, r6, r7, lr}
 80087ca:	b095      	sub	sp, #84	; 0x54
 80087cc:	930c      	str	r3, [sp, #48]	; 0x30
	port =(int8_t )(unsigned )argument;
 80087ce:	b2c3      	uxtb	r3, r0
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	23ff      	movs	r3, #255	; 0xff
 80087d4:	4003      	ands	r3, r0
		if(messageLength[port - 1]){
 80087d6:	1e5f      	subs	r7, r3, #1
 80087d8:	9306      	str	r3, [sp, #24]
 80087da:	00fb      	lsls	r3, r7, #3
 80087dc:	9307      	str	r3, [sp, #28]
 80087de:	1bdb      	subs	r3, r3, r7
 80087e0:	00db      	lsls	r3, r3, #3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087e2:	469c      	mov	ip, r3
 80087e4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_StatusTypeDef status =HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	9312      	str	r3, [sp, #72]	; 0x48
	BOS_Status result =BOS_OK;
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	4bc6      	ldr	r3, [pc, #792]	; (8008b08 <PxMessagingTask+0x34c>)
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087ee:	4ac7      	ldr	r2, [pc, #796]	; (8008b0c <PxMessagingTask+0x350>)
 80087f0:	469a      	mov	sl, r3
 80087f2:	4bc7      	ldr	r3, [pc, #796]	; (8008b10 <PxMessagingTask+0x354>)
 80087f4:	4462      	add	r2, ip
 80087f6:	4699      	mov	r9, r3
 80087f8:	00bb      	lsls	r3, r7, #2
 80087fa:	9311      	str	r3, [sp, #68]	; 0x44
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 80087fc:	2338      	movs	r3, #56	; 0x38
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087fe:	4693      	mov	fp, r2
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008800:	4ac2      	ldr	r2, [pc, #776]	; (8008b0c <PxMessagingTask+0x350>)
 8008802:	437b      	muls	r3, r7
 8008804:	4694      	mov	ip, r2
 8008806:	4463      	add	r3, ip
 8008808:	930b      	str	r3, [sp, #44]	; 0x2c
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800880a:	2101      	movs	r1, #1
 800880c:	2001      	movs	r0, #1
 800880e:	4249      	negs	r1, r1
 8008810:	f006 fbf2 	bl	800eff8 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008814:	4653      	mov	r3, sl
 8008816:	5dda      	ldrb	r2, [r3, r7]
 8008818:	2a00      	cmp	r2, #0
 800881a:	d100      	bne.n	800881e <PxMessagingTask+0x62>
 800881c:	e0c7      	b.n	80089ae <PxMessagingTask+0x1f2>
			if(cMessage[port - 1][2] >> 7){
 800881e:	9b07      	ldr	r3, [sp, #28]
 8008820:	4aba      	ldr	r2, [pc, #744]	; (8008b0c <PxMessagingTask+0x350>)
 8008822:	1bdb      	subs	r3, r3, r7
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	18d1      	adds	r1, r2, r3
 8008828:	788a      	ldrb	r2, [r1, #2]
 800882a:	4cba      	ldr	r4, [pc, #744]	; (8008b14 <PxMessagingTask+0x358>)
 800882c:	09d0      	lsrs	r0, r2, #7
 800882e:	7020      	strb	r0, [r4, #0]
			dst =cMessage[port - 1][0];
 8008830:	48b6      	ldr	r0, [pc, #728]	; (8008b0c <PxMessagingTask+0x350>)
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008832:	464d      	mov	r5, r9
			dst =cMessage[port - 1][0];
 8008834:	5cc6      	ldrb	r6, [r0, r3]
			src =cMessage[port - 1][1];
 8008836:	784b      	ldrb	r3, [r1, #1]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008838:	0710      	lsls	r0, r2, #28
			src =cMessage[port - 1][1];
 800883a:	4698      	mov	r8, r3
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800883c:	2301      	movs	r3, #1
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800883e:	0f80      	lsrs	r0, r0, #30
 8008840:	7068      	strb	r0, [r5, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008842:	0910      	lsrs	r0, r2, #4
 8008844:	001c      	movs	r4, r3
 8008846:	4003      	ands	r3, r0
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008848:	2060      	movs	r0, #96	; 0x60
 800884a:	4010      	ands	r0, r2
 800884c:	4014      	ands	r4, r2
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800884e:	70eb      	strb	r3, [r5, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008850:	7028      	strb	r0, [r5, #0]
			if(extendCode == true){
 8008852:	0792      	lsls	r2, r2, #30
 8008854:	d400      	bmi.n	8008858 <PxMessagingTask+0x9c>
 8008856:	e12b      	b.n	8008ab0 <PxMessagingTask+0x2f4>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008858:	1d22      	adds	r2, r4, #4
 800885a:	1ce0      	adds	r0, r4, #3
 800885c:	5c8a      	ldrb	r2, [r1, r2]
 800885e:	5c0d      	ldrb	r5, [r1, r0]
 8008860:	0212      	lsls	r2, r2, #8
 8008862:	18ad      	adds	r5, r5, r2
 8008864:	b2ad      	uxth	r5, r5
				++shift;
 8008866:	3401      	adds	r4, #1
			if(true == BOSMessaging.received_Acknowledgment){
 8008868:	2b00      	cmp	r3, #0
 800886a:	d000      	beq.n	800886e <PxMessagingTask+0xb2>
 800886c:	e125      	b.n	8008aba <PxMessagingTask+0x2fe>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800886e:	1e73      	subs	r3, r6, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2bfc      	cmp	r3, #252	; 0xfc
 8008874:	d800      	bhi.n	8008878 <PxMessagingTask+0xbc>
 8008876:	e12d      	b.n	8008ad4 <PxMessagingTask+0x318>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008878:	2eff      	cmp	r6, #255	; 0xff
 800887a:	d000      	beq.n	800887e <PxMessagingTask+0xc2>
 800887c:	e1fd      	b.n	8008c7a <PxMessagingTask+0x4be>
 800887e:	4653      	mov	r3, sl
 8008880:	49a2      	ldr	r1, [pc, #648]	; (8008b0c <PxMessagingTask+0x350>)
 8008882:	5dda      	ldrb	r2, [r3, r7]
 8008884:	468c      	mov	ip, r1
 8008886:	213e      	movs	r1, #62	; 0x3e
 8008888:	9b07      	ldr	r3, [sp, #28]
 800888a:	48a3      	ldr	r0, [pc, #652]	; (8008b18 <PxMessagingTask+0x35c>)
 800888c:	1bdb      	subs	r3, r3, r7
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4463      	add	r3, ip
 8008892:	9309      	str	r3, [sp, #36]	; 0x24
 8008894:	189b      	adds	r3, r3, r2
 8008896:	3b01      	subs	r3, #1
 8008898:	5c40      	ldrb	r0, [r0, r1]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	468c      	mov	ip, r1
					result =BOS_ERR_MSG_Reflection;
 800889e:	393b      	subs	r1, #59	; 0x3b
 80088a0:	9104      	str	r1, [sp, #16]
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80088a2:	4298      	cmp	r0, r3
 80088a4:	d100      	bne.n	80088a8 <PxMessagingTask+0xec>
 80088a6:	e082      	b.n	80089ae <PxMessagingTask+0x1f2>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80088a8:	4661      	mov	r1, ip
 80088aa:	4a9b      	ldr	r2, [pc, #620]	; (8008b18 <PxMessagingTask+0x35c>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80088ac:	20ff      	movs	r0, #255	; 0xff
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80088ae:	5453      	strb	r3, [r2, r1]
 80088b0:	4a9a      	ldr	r2, [pc, #616]	; (8008b1c <PxMessagingTask+0x360>)
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80088b2:	9908      	ldr	r1, [sp, #32]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80088b4:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 80088b6:	f7ff fc41 	bl	800813c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80088ba:	4652      	mov	r2, sl
 80088bc:	2100      	movs	r1, #0
 80088be:	5dd2      	ldrb	r2, [r2, r7]
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	189b      	adds	r3, r3, r2
 80088c4:	3b01      	subs	r3, #1
 80088c6:	7019      	strb	r1, [r3, #0]
				shift +=4;
 80088c8:	1d23      	adds	r3, r4, #4
 80088ca:	9309      	str	r3, [sp, #36]	; 0x24
				numOfParams =messageLength[port - 1] - shift;
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	930a      	str	r3, [sp, #40]	; 0x28
					switch(code){
 80088d2:	2d2d      	cmp	r5, #45	; 0x2d
 80088d4:	d900      	bls.n	80088d8 <PxMessagingTask+0x11c>
 80088d6:	e143      	b.n	8008b60 <PxMessagingTask+0x3a4>
 80088d8:	4991      	ldr	r1, [pc, #580]	; (8008b20 <PxMessagingTask+0x364>)
 80088da:	00ab      	lsls	r3, r5, #2
 80088dc:	58cb      	ldr	r3, [r1, r3]
 80088de:	469f      	mov	pc, r3
 80088e0:	2309      	movs	r3, #9
 80088e2:	469c      	mov	ip, r3
 80088e4:	44a4      	add	ip, r4
 80088e6:	4663      	mov	r3, ip
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	230a      	movs	r3, #10
 80088ec:	469c      	mov	ip, r3
 80088ee:	44a4      	add	ip, r4
 80088f0:	4663      	mov	r3, ip
 80088f2:	930a      	str	r3, [sp, #40]	; 0x28
 80088f4:	230c      	movs	r3, #12
 80088f6:	4698      	mov	r8, r3
 80088f8:	3301      	adds	r3, #1
 80088fa:	469c      	mov	ip, r3
 80088fc:	44a4      	add	ip, r4
 80088fe:	4663      	mov	r3, ip
 8008900:	930e      	str	r3, [sp, #56]	; 0x38
 8008902:	230e      	movs	r3, #14
 8008904:	469c      	mov	ip, r3
 8008906:	44a4      	add	ip, r4
 8008908:	4663      	mov	r3, ip
 800890a:	930f      	str	r3, [sp, #60]	; 0x3c
 800890c:	230f      	movs	r3, #15
 800890e:	469c      	mov	ip, r3
 8008910:	44a4      	add	ip, r4
 8008912:	0026      	movs	r6, r4
 8008914:	4663      	mov	r3, ip
 8008916:	44a0      	add	r8, r4
 8008918:	360b      	adds	r6, #11
 800891a:	9310      	str	r3, [sp, #64]	; 0x40
 800891c:	3410      	adds	r4, #16
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800891e:	4981      	ldr	r1, [pc, #516]	; (8008b24 <PxMessagingTask+0x368>)
 8008920:	4880      	ldr	r0, [pc, #512]	; (8008b24 <PxMessagingTask+0x368>)
 8008922:	3110      	adds	r1, #16
 8008924:	3014      	adds	r0, #20
 8008926:	f003 fc6f 	bl	800c208 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 800892a:	9b07      	ldr	r3, [sp, #28]
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800892c:	b2f6      	uxtb	r6, r6
							ADCPort =cMessage[port - 1][shift];
 800892e:	1bdd      	subs	r5, r3, r7
 8008930:	4b76      	ldr	r3, [pc, #472]	; (8008b0c <PxMessagingTask+0x350>)
 8008932:	00ed      	lsls	r5, r5, #3
 8008934:	469c      	mov	ip, r3
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	4465      	add	r5, ip
 800893a:	5ce8      	ldrb	r0, [r5, r3]
 800893c:	4b79      	ldr	r3, [pc, #484]	; (8008b24 <PxMessagingTask+0x368>)
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800893e:	b2e4      	uxtb	r4, r4
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008940:	0019      	movs	r1, r3
 8008942:	3118      	adds	r1, #24
							ADCPort =cMessage[port - 1][shift];
 8008944:	8118      	strh	r0, [r3, #8]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8008946:	f003 fd2b 	bl	800c3a0 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800894a:	2228      	movs	r2, #40	; 0x28
 800894c:	466b      	mov	r3, sp
 800894e:	189b      	adds	r3, r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	5daa      	ldrb	r2, [r5, r6]
 8008954:	5ceb      	ldrb	r3, [r5, r3]
 8008956:	0412      	lsls	r2, r2, #16
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	189b      	adds	r3, r3, r2
 800895c:	466a      	mov	r2, sp
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	4971      	ldr	r1, [pc, #452]	; (8008b28 <PxMessagingTask+0x36c>)
 8008962:	5caa      	ldrb	r2, [r5, r2]
 8008964:	189b      	adds	r3, r3, r2
 8008966:	4642      	mov	r2, r8
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	5caa      	ldrb	r2, [r5, r2]
 800896c:	0612      	lsls	r2, r2, #24
 800896e:	189b      	adds	r3, r3, r2
 8008970:	2280      	movs	r2, #128	; 0x80
 8008972:	508b      	str	r3, [r1, r2]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8008974:	466b      	mov	r3, sp
 8008976:	3a44      	subs	r2, #68	; 0x44
 8008978:	2140      	movs	r1, #64	; 0x40
 800897a:	189b      	adds	r3, r3, r2
 800897c:	466a      	mov	r2, sp
 800897e:	1852      	adds	r2, r2, r1
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	5ceb      	ldrb	r3, [r5, r3]
 8008986:	5caa      	ldrb	r2, [r5, r2]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	0412      	lsls	r2, r2, #16
 800898c:	189b      	adds	r3, r3, r2
 800898e:	466a      	mov	r2, sp
 8008990:	3908      	subs	r1, #8
 8008992:	1852      	adds	r2, r2, r1
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	4964      	ldr	r1, [pc, #400]	; (8008b28 <PxMessagingTask+0x36c>)
 8008998:	5caa      	ldrb	r2, [r5, r2]
 800899a:	189b      	adds	r3, r3, r2
 800899c:	5d2a      	ldrb	r2, [r5, r4]
 800899e:	0612      	lsls	r2, r2, #24
 80089a0:	189b      	adds	r3, r3, r2
 80089a2:	2284      	movs	r2, #132	; 0x84
 80089a4:	508b      	str	r3, [r1, r2]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80089a6:	4653      	mov	r3, sl
 80089a8:	5dda      	ldrb	r2, [r3, r7]
 80089aa:	2300      	movs	r3, #0
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	2100      	movs	r1, #0
 80089b0:	4658      	mov	r0, fp
 80089b2:	f00a fbf4 	bl	801319e <memset>
		messageLength[port - 1] =0;
 80089b6:	4653      	mov	r3, sl
 80089b8:	2200      	movs	r2, #0
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80089ba:	9906      	ldr	r1, [sp, #24]
		messageLength[port - 1] =0;
 80089bc:	55da      	strb	r2, [r3, r7]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80089be:	4b5b      	ldr	r3, [pc, #364]	; (8008b2c <PxMessagingTask+0x370>)
 80089c0:	5c5b      	ldrb	r3, [r3, r1]
 80089c2:	3b02      	subs	r3, #2
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <PxMessagingTask+0x210>
			portStatus[port] =FREE;
 80089c8:	4b58      	ldr	r3, [pc, #352]	; (8008b2c <PxMessagingTask+0x370>)
 80089ca:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80089cc:	f006 fda8 	bl	800f520 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80089d0:	e71b      	b.n	800880a <PxMessagingTask+0x4e>
							ExploreNeighbors(port);
 80089d2:	9808      	ldr	r0, [sp, #32]
 80089d4:	f7fb f81c 	bl	8003a10 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 80089d8:	2302      	movs	r3, #2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80089da:	2401      	movs	r4, #1
							temp =0;
 80089dc:	2600      	movs	r6, #0
							indMode =IND_TOPOLOGY;
 80089de:	4a54      	ldr	r2, [pc, #336]	; (8008b30 <PxMessagingTask+0x374>)
							osDelay(10);
 80089e0:	200a      	movs	r0, #10
							indMode =IND_TOPOLOGY;
 80089e2:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 80089e4:	f005 f81a 	bl	800da1c <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80089e8:	4d52      	ldr	r5, [pc, #328]	; (8008b34 <PxMessagingTask+0x378>)
								if(neighbors[p - 1][0]){
 80089ea:	882b      	ldrh	r3, [r5, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <PxMessagingTask+0x238>
 80089f0:	f000 fd6e 	bl	80094d0 <PxMessagingTask+0xd14>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80089f4:	3401      	adds	r4, #1
 80089f6:	b2e4      	uxtb	r4, r4
 80089f8:	3504      	adds	r5, #4
 80089fa:	2c06      	cmp	r4, #6
 80089fc:	d1f5      	bne.n	80089ea <PxMessagingTask+0x22e>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 80089fe:	210d      	movs	r1, #13
 8008a00:	960c      	str	r6, [sp, #48]	; 0x30
 8008a02:	b2b2      	uxth	r2, r6
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008a04:	4640      	mov	r0, r8
 8008a06:	f7ff fc07 	bl	8008218 <SendMessageToModule>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008a0a:	4653      	mov	r3, sl
 8008a0c:	5dda      	ldrb	r2, [r3, r7]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	e7cc      	b.n	80089ae <PxMessagingTask+0x1f2>
							switch(cMessage[port - 1][0 + shift]){
 8008a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a18:	5c9b      	ldrb	r3, [r3, r2]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <PxMessagingTask+0x266>
 8008a1e:	f000 ff42 	bl	80098a6 <PxMessagingTask+0x10ea>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d101      	bne.n	8008a2a <PxMessagingTask+0x26e>
 8008a26:	f000 ffd1 	bl	80099cc <PxMessagingTask+0x1210>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <PxMessagingTask+0x276>
 8008a2e:	f000 fe32 	bl	8009696 <PxMessagingTask+0xeda>
 8008a32:	1d62      	adds	r2, r4, #5
 8008a34:	2309      	movs	r3, #9
 8008a36:	469c      	mov	ip, r3
 8008a38:	44a4      	add	ip, r4
 8008a3a:	4663      	mov	r3, ip
 8008a3c:	9304      	str	r3, [sp, #16]
 8008a3e:	230a      	movs	r3, #10
 8008a40:	469c      	mov	ip, r3
 8008a42:	44a4      	add	ip, r4
 8008a44:	4663      	mov	r3, ip
 8008a46:	930a      	str	r3, [sp, #40]	; 0x28
 8008a48:	230c      	movs	r3, #12
 8008a4a:	4698      	mov	r8, r3
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	469c      	mov	ip, r3
 8008a50:	44a4      	add	ip, r4
 8008a52:	4663      	mov	r3, ip
 8008a54:	930e      	str	r3, [sp, #56]	; 0x38
 8008a56:	230e      	movs	r3, #14
 8008a58:	469c      	mov	ip, r3
 8008a5a:	44a4      	add	ip, r4
 8008a5c:	4663      	mov	r3, ip
 8008a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a60:	230f      	movs	r3, #15
 8008a62:	469c      	mov	ip, r3
 8008a64:	44a4      	add	ip, r4
 8008a66:	0026      	movs	r6, r4
 8008a68:	4663      	mov	r3, ip
 8008a6a:	44a0      	add	r8, r4
 8008a6c:	360b      	adds	r6, #11
 8008a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008a70:	3410      	adds	r4, #16
							ADCPort =cMessage[port - 1][shift];
 8008a72:	4926      	ldr	r1, [pc, #152]	; (8008b0c <PxMessagingTask+0x350>)
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	468c      	mov	ip, r1
 8008a78:	1bdb      	subs	r3, r3, r7
 8008a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4463      	add	r3, ip
							ADCSide =cMessage[port - 1][shift + 1];
 8008a80:	b2d2      	uxtb	r2, r2
							ADCPort =cMessage[port - 1][shift];
 8008a82:	5c58      	ldrb	r0, [r3, r1]
 8008a84:	4927      	ldr	r1, [pc, #156]	; (8008b24 <PxMessagingTask+0x368>)
							ADCSide =cMessage[port - 1][shift + 1];
 8008a86:	5c9b      	ldrb	r3, [r3, r2]
							ADCPort =cMessage[port - 1][shift];
 8008a88:	8108      	strh	r0, [r1, #8]
							ADCSide =cMessage[port - 1][shift + 1];
 8008a8a:	814b      	strh	r3, [r1, #10]
							if(0 == ADCSide){
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d101      	bne.n	8008a94 <PxMessagingTask+0x2d8>
 8008a90:	f000 fd2b 	bl	80094ea <PxMessagingTask+0xd2e>
							else if(1 == ADCSide){
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d000      	beq.n	8008a9a <PxMessagingTask+0x2de>
 8008a98:	e741      	b.n	800891e <PxMessagingTask+0x162>
								ADCSelectChannel(ADCPort,"bottom");
 8008a9a:	4927      	ldr	r1, [pc, #156]	; (8008b38 <PxMessagingTask+0x37c>)
 8008a9c:	f003 fd74 	bl	800c588 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <PxMessagingTask+0x368>)
 8008aa2:	4a20      	ldr	r2, [pc, #128]	; (8008b24 <PxMessagingTask+0x368>)
 8008aa4:	7a18      	ldrb	r0, [r3, #8]
 8008aa6:	4924      	ldr	r1, [pc, #144]	; (8008b38 <PxMessagingTask+0x37c>)
 8008aa8:	320c      	adds	r2, #12
 8008aaa:	f003 fdbb 	bl	800c624 <ReadADCChannel>
 8008aae:	e736      	b.n	800891e <PxMessagingTask+0x162>
				code =cMessage[port - 1][3 + shift];
 8008ab0:	1ce2      	adds	r2, r4, #3
 8008ab2:	5c8d      	ldrb	r5, [r1, r2]
			if(true == BOSMessaging.received_Acknowledgment){
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d100      	bne.n	8008aba <PxMessagingTask+0x2fe>
 8008ab8:	e6d9      	b.n	800886e <PxMessagingTask+0xb2>
				BOSMessaging.Acknowledgment =false;
 8008aba:	2300      	movs	r3, #0
 8008abc:	464a      	mov	r2, r9
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008abe:	212c      	movs	r1, #44	; 0x2c
				BOSMessaging.Acknowledgment =false;
 8008ac0:	7113      	strb	r3, [r2, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7ff fba7 	bl	8008218 <SendMessageToModule>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008aca:	1e73      	subs	r3, r6, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2bfc      	cmp	r3, #252	; 0xfc
 8008ad0:	d900      	bls.n	8008ad4 <PxMessagingTask+0x318>
 8008ad2:	e6d1      	b.n	8008878 <PxMessagingTask+0xbc>
 8008ad4:	4b19      	ldr	r3, [pc, #100]	; (8008b3c <PxMessagingTask+0x380>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	42b3      	cmp	r3, r6
 8008ada:	d033      	beq.n	8008b44 <PxMessagingTask+0x388>
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d02f      	beq.n	8008b40 <PxMessagingTask+0x384>
				ForwardReceivedMessage(port);
 8008ae0:	9808      	ldr	r0, [sp, #32]
 8008ae2:	f7ff fb6f 	bl	80081c4 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <PxMessagingTask+0x338>
					indMode =IND_SHORT_BLINK;
 8008aee:	2303      	movs	r3, #3
 8008af0:	4a0f      	ldr	r2, [pc, #60]	; (8008b30 <PxMessagingTask+0x374>)
 8008af2:	7013      	strb	r3, [r2, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008af4:	2d19      	cmp	r5, #25
 8008af6:	d100      	bne.n	8008afa <PxMessagingTask+0x33e>
 8008af8:	e109      	b.n	8008d0e <PxMessagingTask+0x552>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008afa:	2d1a      	cmp	r5, #26
 8008afc:	d100      	bne.n	8008b00 <PxMessagingTask+0x344>
 8008afe:	e110      	b.n	8008d22 <PxMessagingTask+0x566>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008b00:	4653      	mov	r3, sl
 8008b02:	5dda      	ldrb	r2, [r3, r7]
 8008b04:	e753      	b.n	80089ae <PxMessagingTask+0x1f2>
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	20000d00 	.word	0x20000d00
 8008b0c:	20000d40 	.word	0x20000d40
 8008b10:	20000b4c 	.word	0x20000b4c
 8008b14:	20000cfc 	.word	0x20000cfc
 8008b18:	20001f4c 	.word	0x20001f4c
 8008b1c:	20000cf8 	.word	0x20000cf8
 8008b20:	080196cc 	.word	0x080196cc
 8008b24:	2000204c 	.word	0x2000204c
 8008b28:	20001fcc 	.word	0x20001fcc
 8008b2c:	20000c64 	.word	0x20000c64
 8008b30:	200011ef 	.word	0x200011ef
 8008b34:	200011d8 	.word	0x200011d8
 8008b38:	0801a6a8 	.word	0x0801a6a8
 8008b3c:	20000aa8 	.word	0x20000aa8
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008b40:	2d10      	cmp	r5, #16
 8008b42:	d1cd      	bne.n	8008ae0 <PxMessagingTask+0x324>
				numOfParams =messageLength[port - 1] - shift;
 8008b44:	4653      	mov	r3, sl
 8008b46:	5dda      	ldrb	r2, [r3, r7]
				if(result == BOS_OK){
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d000      	beq.n	8008b50 <PxMessagingTask+0x394>
 8008b4e:	e72e      	b.n	80089ae <PxMessagingTask+0x1f2>
				shift +=4;
 8008b50:	1d23      	adds	r3, r4, #4
 8008b52:	9309      	str	r3, [sp, #36]	; 0x24
				numOfParams =messageLength[port - 1] - shift;
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	930a      	str	r3, [sp, #40]	; 0x28
					switch(code){
 8008b5a:	2d2d      	cmp	r5, #45	; 0x2d
 8008b5c:	d800      	bhi.n	8008b60 <PxMessagingTask+0x3a4>
 8008b5e:	e6bb      	b.n	80088d8 <PxMessagingTask+0x11c>
 8008b60:	4bca      	ldr	r3, [pc, #808]	; (8008e8c <PxMessagingTask+0x6d0>)
 8008b62:	429d      	cmp	r5, r3
 8008b64:	d000      	beq.n	8008b68 <PxMessagingTask+0x3ac>
 8008b66:	e0ea      	b.n	8008d3e <PxMessagingTask+0x582>
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6c:	4ac8      	ldr	r2, [pc, #800]	; (8008e90 <PxMessagingTask+0x6d4>)
 8008b6e:	5ccb      	ldrb	r3, [r1, r3]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008b70:	2020      	movs	r0, #32
							defalt_data.Local_mac_addr[0]= cMessage[port - 1][0 + shift];
 8008b72:	7413      	strb	r3, [r2, #16]
							defalt_data.Local_mac_addr[1]= cMessage[port - 1][1 + shift];
 8008b74:	1d63      	adds	r3, r4, #5
 8008b76:	5ccb      	ldrb	r3, [r1, r3]
 8008b78:	7453      	strb	r3, [r2, #17]
							defalt_data.Local_mac_addr[2]= cMessage[port - 1][2 + shift];
 8008b7a:	1da3      	adds	r3, r4, #6
 8008b7c:	5ccb      	ldrb	r3, [r1, r3]
 8008b7e:	7493      	strb	r3, [r2, #18]
							defalt_data.Local_mac_addr[3]= cMessage[port - 1][3 + shift];
 8008b80:	1de3      	adds	r3, r4, #7
 8008b82:	5ccb      	ldrb	r3, [r1, r3]
 8008b84:	74d3      	strb	r3, [r2, #19]
							defalt_data.Local_mac_addr[4]= cMessage[port - 1][4 + shift];
 8008b86:	0023      	movs	r3, r4
 8008b88:	3308      	adds	r3, #8
 8008b8a:	5ccb      	ldrb	r3, [r1, r3]
 8008b8c:	7513      	strb	r3, [r2, #20]
							defalt_data.Local_mac_addr[5]= cMessage[port - 1][5 + shift];
 8008b8e:	0023      	movs	r3, r4
 8008b90:	3309      	adds	r3, #9
 8008b92:	5ccb      	ldrb	r3, [r1, r3]
 8008b94:	7553      	strb	r3, [r2, #21]
							defalt_data.Remote_mac_addr[0]= cMessage[port - 1][6 + shift];
 8008b96:	0023      	movs	r3, r4
 8008b98:	330a      	adds	r3, #10
 8008b9a:	5ccb      	ldrb	r3, [r1, r3]
 8008b9c:	7593      	strb	r3, [r2, #22]
							defalt_data.Remote_mac_addr[1]= cMessage[port - 1][7 + shift];
 8008b9e:	0023      	movs	r3, r4
 8008ba0:	330b      	adds	r3, #11
 8008ba2:	5ccb      	ldrb	r3, [r1, r3]
 8008ba4:	75d3      	strb	r3, [r2, #23]
							defalt_data.Remote_mac_addr[2]= cMessage[port - 1][8 + shift];
 8008ba6:	0023      	movs	r3, r4
 8008ba8:	330c      	adds	r3, #12
 8008baa:	5ccb      	ldrb	r3, [r1, r3]
 8008bac:	7613      	strb	r3, [r2, #24]
							defalt_data.Remote_mac_addr[3]= cMessage[port - 1][9 + shift];
 8008bae:	0023      	movs	r3, r4
 8008bb0:	330d      	adds	r3, #13
 8008bb2:	5ccb      	ldrb	r3, [r1, r3]
 8008bb4:	7653      	strb	r3, [r2, #25]
							defalt_data.Remote_mac_addr[4]= cMessage[port - 1][10 + shift];
 8008bb6:	0023      	movs	r3, r4
 8008bb8:	330e      	adds	r3, #14
 8008bba:	5ccb      	ldrb	r3, [r1, r3]
 8008bbc:	7693      	strb	r3, [r2, #26]
							defalt_data.Remote_mac_addr[5]= cMessage[port - 1][11 + shift];
 8008bbe:	0023      	movs	r3, r4
 8008bc0:	330f      	adds	r3, #15
 8008bc2:	5ccb      	ldrb	r3, [r1, r3]
 8008bc4:	76d3      	strb	r3, [r2, #27]
							defalt_data.Local_IP[0]= cMessage[port - 1][12 + shift];
 8008bc6:	0023      	movs	r3, r4
 8008bc8:	3310      	adds	r3, #16
 8008bca:	5ccb      	ldrb	r3, [r1, r3]
 8008bcc:	7713      	strb	r3, [r2, #28]
							defalt_data.Local_IP[1]= cMessage[port - 1][13 + shift];
 8008bce:	0023      	movs	r3, r4
 8008bd0:	3311      	adds	r3, #17
 8008bd2:	5ccb      	ldrb	r3, [r1, r3]
 8008bd4:	7753      	strb	r3, [r2, #29]
							defalt_data.Local_IP[2]= cMessage[port - 1][14 + shift];
 8008bd6:	0023      	movs	r3, r4
 8008bd8:	3312      	adds	r3, #18
 8008bda:	5ccb      	ldrb	r3, [r1, r3]
 8008bdc:	7793      	strb	r3, [r2, #30]
							defalt_data.Local_IP[3]= cMessage[port - 1][15 + shift];
 8008bde:	0023      	movs	r3, r4
 8008be0:	3313      	adds	r3, #19
 8008be2:	5ccb      	ldrb	r3, [r1, r3]
 8008be4:	77d3      	strb	r3, [r2, #31]
							defalt_data.Remote_IP[0]= cMessage[port - 1][16 + shift];
 8008be6:	0023      	movs	r3, r4
 8008be8:	3314      	adds	r3, #20
 8008bea:	5ccb      	ldrb	r3, [r1, r3]
 8008bec:	5413      	strb	r3, [r2, r0]
							defalt_data.Remote_IP[1]= cMessage[port - 1][17 + shift];
 8008bee:	0023      	movs	r3, r4
 8008bf0:	3315      	adds	r3, #21
 8008bf2:	5cca      	ldrb	r2, [r1, r3]
 8008bf4:	2321      	movs	r3, #33	; 0x21
 8008bf6:	48a6      	ldr	r0, [pc, #664]	; (8008e90 <PxMessagingTask+0x6d4>)
 8008bf8:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_IP[2]= cMessage[port - 1][18 + shift];
 8008bfa:	0023      	movs	r3, r4
 8008bfc:	3316      	adds	r3, #22
 8008bfe:	5cca      	ldrb	r2, [r1, r3]
 8008c00:	2322      	movs	r3, #34	; 0x22
 8008c02:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_IP[3]= cMessage[port - 1][19 + shift];
 8008c04:	0023      	movs	r3, r4
 8008c06:	3317      	adds	r3, #23
 8008c08:	5cca      	ldrb	r2, [r1, r3]
 8008c0a:	2323      	movs	r3, #35	; 0x23
 8008c0c:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[0]= cMessage[port - 1][20 + shift];
 8008c0e:	0023      	movs	r3, r4
 8008c10:	3318      	adds	r3, #24
 8008c12:	5cca      	ldrb	r2, [r1, r3]
 8008c14:	2324      	movs	r3, #36	; 0x24
 8008c16:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[1]= cMessage[port - 1][21 + shift];
 8008c18:	0023      	movs	r3, r4
 8008c1a:	3319      	adds	r3, #25
 8008c1c:	5cca      	ldrb	r2, [r1, r3]
 8008c1e:	2325      	movs	r3, #37	; 0x25
 8008c20:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[2]= cMessage[port - 1][22 + shift];
 8008c22:	0023      	movs	r3, r4
 8008c24:	331a      	adds	r3, #26
 8008c26:	5cca      	ldrb	r2, [r1, r3]
 8008c28:	2326      	movs	r3, #38	; 0x26
 8008c2a:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_mask[3]= cMessage[port - 1][23 + shift];
 8008c2c:	0023      	movs	r3, r4
 8008c2e:	331b      	adds	r3, #27
 8008c30:	5cca      	ldrb	r2, [r1, r3]
 8008c32:	2327      	movs	r3, #39	; 0x27
 8008c34:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[0]= cMessage[port - 1][24 + shift];
 8008c36:	0023      	movs	r3, r4
 8008c38:	331c      	adds	r3, #28
 8008c3a:	5cca      	ldrb	r2, [r1, r3]
 8008c3c:	2328      	movs	r3, #40	; 0x28
 8008c3e:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[1]= cMessage[port - 1][25 + shift];
 8008c40:	0023      	movs	r3, r4
 8008c42:	331d      	adds	r3, #29
 8008c44:	5cca      	ldrb	r2, [r1, r3]
 8008c46:	2329      	movs	r3, #41	; 0x29
 8008c48:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[2]= cMessage[port - 1][26 + shift];
 8008c4a:	0023      	movs	r3, r4
 8008c4c:	331e      	adds	r3, #30
 8008c4e:	5cca      	ldrb	r2, [r1, r3]
 8008c50:	232a      	movs	r3, #42	; 0x2a
 8008c52:	54c2      	strb	r2, [r0, r3]
							defalt_data.ip_dest[3]= cMessage[port - 1][27 + shift];
 8008c54:	0023      	movs	r3, r4
 8008c56:	331f      	adds	r3, #31
 8008c58:	5cca      	ldrb	r2, [r1, r3]
 8008c5a:	232b      	movs	r3, #43	; 0x2b
 8008c5c:	54c2      	strb	r2, [r0, r3]
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008c5e:	0023      	movs	r3, r4
 8008c60:	3320      	adds	r3, #32
 8008c62:	5cca      	ldrb	r2, [r1, r3]
 8008c64:	232c      	movs	r3, #44	; 0x2c
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008c66:	3421      	adds	r4, #33	; 0x21
							defalt_data.Local_PORT= cMessage[port - 1][28 + shift];
 8008c68:	54c2      	strb	r2, [r0, r3]
							defalt_data.Remote_PORT= cMessage[port - 1][29 + shift];
 8008c6a:	5d0a      	ldrb	r2, [r1, r4]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	54c2      	strb	r2, [r0, r3]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008c70:	4653      	mov	r3, sl
 8008c72:	5dda      	ldrb	r2, [r3, r7]
 8008c74:	2300      	movs	r3, #0
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	e699      	b.n	80089ae <PxMessagingTask+0x1f2>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008c7a:	2efe      	cmp	r6, #254	; 0xfe
 8008c7c:	d000      	beq.n	8008c80 <PxMessagingTask+0x4c4>
 8008c7e:	e761      	b.n	8008b44 <PxMessagingTask+0x388>
 8008c80:	4653      	mov	r3, sl
 8008c82:	4984      	ldr	r1, [pc, #528]	; (8008e94 <PxMessagingTask+0x6d8>)
 8008c84:	5dda      	ldrb	r2, [r3, r7]
 8008c86:	468c      	mov	ip, r1
 8008c88:	213e      	movs	r1, #62	; 0x3e
 8008c8a:	9b07      	ldr	r3, [sp, #28]
 8008c8c:	4882      	ldr	r0, [pc, #520]	; (8008e98 <PxMessagingTask+0x6dc>)
 8008c8e:	1bdb      	subs	r3, r3, r7
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	4463      	add	r3, ip
 8008c94:	9309      	str	r3, [sp, #36]	; 0x24
 8008c96:	189b      	adds	r3, r3, r2
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	5c40      	ldrb	r0, [r0, r1]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	468c      	mov	ip, r1
					result =BOS_ERR_MSG_Reflection;
 8008ca0:	393b      	subs	r1, #59	; 0x3b
 8008ca2:	9104      	str	r1, [sp, #16]
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ca4:	4298      	cmp	r0, r3
 8008ca6:	d100      	bne.n	8008caa <PxMessagingTask+0x4ee>
 8008ca8:	e681      	b.n	80089ae <PxMessagingTask+0x1f2>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008caa:	4661      	mov	r1, ip
 8008cac:	4a7a      	ldr	r2, [pc, #488]	; (8008e98 <PxMessagingTask+0x6dc>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008cae:	20fe      	movs	r0, #254	; 0xfe
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008cb0:	5453      	strb	r3, [r2, r1]
 8008cb2:	4a7a      	ldr	r2, [pc, #488]	; (8008e9c <PxMessagingTask+0x6e0>)
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008cb4:	9908      	ldr	r1, [sp, #32]
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008cb6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008cb8:	f7ff fa40 	bl	800813c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008cbc:	4653      	mov	r3, sl
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	5dda      	ldrb	r2, [r3, r7]
 8008cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008cc4:	1e90      	subs	r0, r2, #2
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008cc6:	189b      	adds	r3, r3, r2
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	7019      	strb	r1, [r3, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cce:	5c19      	ldrb	r1, [r3, r0]
 8008cd0:	910c      	str	r1, [sp, #48]	; 0x30
					for(i =0; i < temp; i++){
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	d030      	beq.n	8008d38 <PxMessagingTask+0x57c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008cd6:	4b72      	ldr	r3, [pc, #456]	; (8008ea0 <PxMessagingTask+0x6e4>)
 8008cd8:	1a40      	subs	r0, r0, r1
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	9509      	str	r5, [sp, #36]	; 0x24
 8008cde:	9304      	str	r3, [sp, #16]
 8008ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ce2:	000d      	movs	r5, r1
 8008ce4:	469c      	mov	ip, r3
 8008ce6:	4b6b      	ldr	r3, [pc, #428]	; (8008e94 <PxMessagingTask+0x6d8>)
 8008ce8:	4460      	add	r0, ip
 8008cea:	469c      	mov	ip, r3
 8008cec:	4460      	add	r0, ip
 8008cee:	0001      	movs	r1, r0
 8008cf0:	46a4      	mov	ip, r4
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	000c      	movs	r4, r1
 8008cf6:	9804      	ldr	r0, [sp, #16]
 8008cf8:	e003      	b.n	8008d02 <PxMessagingTask+0x546>
					for(i =0; i < temp; i++){
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	b2d9      	uxtb	r1, r3
 8008cfe:	428d      	cmp	r5, r1
 8008d00:	d91a      	bls.n	8008d38 <PxMessagingTask+0x57c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008d02:	5ce1      	ldrb	r1, [r4, r3]
 8008d04:	4281      	cmp	r1, r0
 8008d06:	d1f8      	bne.n	8008cfa <PxMessagingTask+0x53e>
				shift +=4;
 8008d08:	4664      	mov	r4, ip
 8008d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008d0c:	e5dc      	b.n	80088c8 <PxMessagingTask+0x10c>
					Delay_ms(100);
 8008d0e:	2064      	movs	r0, #100	; 0x64
 8008d10:	f006 fd56 	bl	800f7c0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008d14:	2300      	movs	r3, #0
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008d16:	0031      	movs	r1, r6
 8008d18:	4640      	mov	r0, r8
 8008d1a:	9a08      	ldr	r2, [sp, #32]
 8008d1c:	f001 fbba 	bl	800a494 <remoteBootloaderUpdate>
 8008d20:	e6ee      	b.n	8008b00 <PxMessagingTask+0x344>
					Delay_ms(100);
 8008d22:	2064      	movs	r0, #100	; 0x64
 8008d24:	f006 fd4c 	bl	800f7c0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008d28:	4a5a      	ldr	r2, [pc, #360]	; (8008e94 <PxMessagingTask+0x6d8>)
 8008d2a:	9b07      	ldr	r3, [sp, #28]
 8008d2c:	4694      	mov	ip, r2
 8008d2e:	1bdb      	subs	r3, r3, r7
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4463      	add	r3, ip
 8008d34:	5d1b      	ldrb	r3, [r3, r4]
 8008d36:	e7ee      	b.n	8008d16 <PxMessagingTask+0x55a>
					result =BOS_ERR_WrongID;
 8008d38:	2366      	movs	r3, #102	; 0x66
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	e637      	b.n	80089ae <PxMessagingTask+0x1f2>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	4642      	mov	r2, r8
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	0028      	movs	r0, r5
 8008d46:	0033      	movs	r3, r6
 8008d48:	9908      	ldr	r1, [sp, #32]
 8008d4a:	f7ff fd35 	bl	80087b8 <User_MessagingParser>
 8008d4e:	9004      	str	r0, [sp, #16]
							if(result == BOS_ERR_UnknownMessage){
 8008d50:	2801      	cmp	r0, #1
 8008d52:	d000      	beq.n	8008d56 <PxMessagingTask+0x59a>
 8008d54:	e6d4      	b.n	8008b00 <PxMessagingTask+0x344>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d58:	4642      	mov	r2, r8
 8008d5a:	9908      	ldr	r1, [sp, #32]
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	0028      	movs	r0, r5
 8008d60:	0033      	movs	r3, r6
 8008d62:	f001 fcff 	bl	800a764 <Module_MessagingTask>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8008d66:	2200      	movs	r2, #0
 8008d68:	2100      	movs	r1, #0
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8008d6a:	9004      	str	r0, [sp, #16]
		if(result == BOS_ERR_UnknownMessage){
 8008d6c:	2801      	cmp	r0, #1
 8008d6e:	d100      	bne.n	8008d72 <PxMessagingTask+0x5b6>
 8008d70:	e648      	b.n	8008a04 <PxMessagingTask+0x248>
 8008d72:	e6c5      	b.n	8008b00 <PxMessagingTask+0x344>
							responseStatus =BOS_OK; // Initialize response
 8008d74:	2300      	movs	r3, #0
 8008d76:	4a4b      	ldr	r2, [pc, #300]	; (8008ea4 <PxMessagingTask+0x6e8>)
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
							responseStatus =BOS_OK; // Initialize response
 8008d7a:	7013      	strb	r3, [r2, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8008d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7e:	5ccb      	ldrb	r3, [r1, r3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <PxMessagingTask+0x5cc>
 8008d84:	f000 fc2e 	bl	80095e4 <PxMessagingTask+0xe28>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8008d88:	2b1e      	cmp	r3, #30
 8008d8a:	d801      	bhi.n	8008d90 <PxMessagingTask+0x5d4>
 8008d8c:	f000 fd02 	bl	8009794 <PxMessagingTask+0xfd8>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8008d90:	2313      	movs	r3, #19
 8008d92:	4a44      	ldr	r2, [pc, #272]	; (8008ea4 <PxMessagingTask+0x6e8>)
 8008d94:	7013      	strb	r3, [r2, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8008d96:	464b      	mov	r3, r9
 8008d98:	2240      	movs	r2, #64	; 0x40
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	4393      	bics	r3, r2
 8008d9e:	2b20      	cmp	r3, #32
 8008da0:	d000      	beq.n	8008da4 <PxMessagingTask+0x5e8>
 8008da2:	e632      	b.n	8008a0a <PxMessagingTask+0x24e>
								messageParams[0] =responseStatus;
 8008da4:	4b3f      	ldr	r3, [pc, #252]	; (8008ea4 <PxMessagingTask+0x6e8>)
 8008da6:	4a40      	ldr	r2, [pc, #256]	; (8008ea8 <PxMessagingTask+0x6ec>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008daa:	2121      	movs	r1, #33	; 0x21
								messageParams[0] =responseStatus;
 8008dac:	7013      	strb	r3, [r2, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8008dae:	2201      	movs	r2, #1
 8008db0:	e628      	b.n	8008a04 <PxMessagingTask+0x248>
							SaveToRO();
 8008db2:	f001 fa55 	bl	800a260 <SaveToRO>
							SaveEEportsDir();
 8008db6:	f7fa fbc5 	bl	8003544 <SaveEEportsDir>
							indMode =IND_PING;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4a3b      	ldr	r2, [pc, #236]	; (8008eac <PxMessagingTask+0x6f0>)
							ACK_FLAG =1;
 8008dbe:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008dc0:	4653      	mov	r3, sl
 8008dc2:	5dda      	ldrb	r2, [r3, r7]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9304      	str	r3, [sp, #16]
 8008dc8:	e5f1      	b.n	80089ae <PxMessagingTask+0x1f2>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dce:	5ccb      	ldrb	r3, [r1, r3]
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d000      	beq.n	8008dd8 <PxMessagingTask+0x61c>
 8008dd6:	e394      	b.n	8009502 <PxMessagingTask+0xd46>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008dd8:	1da3      	adds	r3, r4, #6
 8008dda:	1de2      	adds	r2, r4, #7
 8008ddc:	5ccb      	ldrb	r3, [r1, r3]
 8008dde:	5c8a      	ldrb	r2, [r1, r2]
 8008de0:	061b      	lsls	r3, r3, #24
 8008de2:	0412      	lsls	r2, r2, #16
 8008de4:	189b      	adds	r3, r3, r2
 8008de6:	0022      	movs	r2, r4
 8008de8:	3209      	adds	r2, #9
 8008dea:	5c8a      	ldrb	r2, [r1, r2]
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	0022      	movs	r2, r4
 8008df0:	3208      	adds	r2, #8
 8008df2:	5c8a      	ldrb	r2, [r1, r2]
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008df4:	3405      	adds	r4, #5
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008df6:	0212      	lsls	r2, r2, #8
 8008df8:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008dfa:	5d0a      	ldrb	r2, [r1, r4]
 8008dfc:	3a01      	subs	r2, #1
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	2a07      	cmp	r2, #7
 8008e02:	d900      	bls.n	8008e06 <PxMessagingTask+0x64a>
 8008e04:	e67c      	b.n	8008b00 <PxMessagingTask+0x344>
 8008e06:	492a      	ldr	r1, [pc, #168]	; (8008eb0 <PxMessagingTask+0x6f4>)
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	588a      	ldr	r2, [r1, r2]
 8008e0c:	4697      	mov	pc, r2
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008e0e:	0023      	movs	r3, r4
 8008e10:	0020      	movs	r0, r4
 8008e12:	0022      	movs	r2, r4
 8008e14:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008e16:	330e      	adds	r3, #14
 8008e18:	5ceb      	ldrb	r3, [r5, r3]
 8008e1a:	300d      	adds	r0, #13
 8008e1c:	5c2e      	ldrb	r6, [r5, r0]
 8008e1e:	3003      	adds	r0, #3
 8008e20:	5c28      	ldrb	r0, [r5, r0]
 8008e22:	469c      	mov	ip, r3
 8008e24:	4b1e      	ldr	r3, [pc, #120]	; (8008ea0 <PxMessagingTask+0x6e4>)
 8008e26:	320f      	adds	r2, #15
 8008e28:	5caa      	ldrb	r2, [r5, r2]
 8008e2a:	7819      	ldrb	r1, [r3, #0]
 8008e2c:	002b      	movs	r3, r5
 8008e2e:	1e45      	subs	r5, r0, #1
 8008e30:	41a8      	sbcs	r0, r5
 8008e32:	9003      	str	r0, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008e34:	0020      	movs	r0, r4
 8008e36:	3008      	adds	r0, #8
 8008e38:	5c1d      	ldrb	r5, [r3, r0]
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	5c18      	ldrb	r0, [r3, r0]
 8008e3e:	062d      	lsls	r5, r5, #24
 8008e40:	0400      	lsls	r0, r0, #16
 8008e42:	1828      	adds	r0, r5, r0
 8008e44:	0025      	movs	r5, r4
 8008e46:	350b      	adds	r5, #11
 8008e48:	5d5d      	ldrb	r5, [r3, r5]
 8008e4a:	1940      	adds	r0, r0, r5
 8008e4c:	0025      	movs	r5, r4
 8008e4e:	350a      	adds	r5, #10
 8008e50:	5d5d      	ldrb	r5, [r3, r5]
 8008e52:	022d      	lsls	r5, r5, #8
 8008e54:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008e56:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e58:	1d60      	adds	r0, r4, #5
 8008e5a:	5c1d      	ldrb	r5, [r3, r0]
 8008e5c:	1da0      	adds	r0, r4, #6
 8008e5e:	5c18      	ldrb	r0, [r3, r0]
 8008e60:	042d      	lsls	r5, r5, #16
 8008e62:	0200      	lsls	r0, r0, #8
 8008e64:	1828      	adds	r0, r5, r0
 8008e66:	1de5      	adds	r5, r4, #7
 8008e68:	5d5d      	ldrb	r5, [r3, r5]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008e6a:	340c      	adds	r4, #12
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e6c:	1940      	adds	r0, r0, r5
 8008e6e:	001d      	movs	r5, r3
 8008e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e72:	5ced      	ldrb	r5, [r5, r3]
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008e76:	062d      	lsls	r5, r5, #24
 8008e78:	1940      	adds	r0, r0, r5
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008e7a:	9001      	str	r0, [sp, #4]
 8008e7c:	5d18      	ldrb	r0, [r3, r4]
 8008e7e:	4663      	mov	r3, ip
 8008e80:	9000      	str	r0, [sp, #0]
 8008e82:	0030      	movs	r0, r6
 8008e84:	f7ff f9fe 	bl	8008284 <StartScastDMAStream>
		if(result == BOS_ERR_UnknownMessage){
 8008e88:	e5bf      	b.n	8008a0a <PxMessagingTask+0x24e>
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	000005b3 	.word	0x000005b3
 8008e90:	20001fcc 	.word	0x20001fcc
 8008e94:	20000d40 	.word	0x20000d40
 8008e98:	20001f4c 	.word	0x20001f4c
 8008e9c:	20000cf8 	.word	0x20000cf8
 8008ea0:	20000aa8 	.word	0x20000aa8
 8008ea4:	20000c74 	.word	0x20000c74
 8008ea8:	20000b74 	.word	0x20000b74
 8008eac:	200011ef 	.word	0x200011ef
 8008eb0:	08019784 	.word	0x08019784
							temp =cMessage[port - 1][11 + shift];
 8008eb4:	230f      	movs	r3, #15
 8008eb6:	4698      	mov	r8, r3
							if(numOfParams == 15)
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
							temp =cMessage[port - 1][11 + shift];
 8008eba:	44a0      	add	r8, r4
							if(numOfParams == 15)
 8008ebc:	2b0f      	cmp	r3, #15
 8008ebe:	d101      	bne.n	8008ec4 <PxMessagingTask+0x708>
 8008ec0:	f000 fcd9 	bl	8009876 <PxMessagingTask+0x10ba>
 8008ec4:	2111      	movs	r1, #17
 8008ec6:	468c      	mov	ip, r1
 8008ec8:	44a4      	add	ip, r4
 8008eca:	4661      	mov	r1, ip
							temp =cMessage[port - 1][11 + shift];
 8008ecc:	4643      	mov	r3, r8
 8008ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ed0:	9104      	str	r1, [sp, #16]
							if(numOfParams == 17)
 8008ed2:	990a      	ldr	r1, [sp, #40]	; 0x28
							temp =cMessage[port - 1][11 + shift];
 8008ed4:	5cd3      	ldrb	r3, [r2, r3]
							if(numOfParams == 17)
 8008ed6:	2911      	cmp	r1, #17
 8008ed8:	d102      	bne.n	8008ee0 <PxMessagingTask+0x724>
								temp =cMessage[port - 1][15 + shift];
 8008eda:	0023      	movs	r3, r4
 8008edc:	3313      	adds	r3, #19
 8008ede:	5cd3      	ldrb	r3, [r2, r3]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008ee0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ee2:	1da1      	adds	r1, r4, #6
 8008ee4:	1d62      	adds	r2, r4, #5
 8008ee6:	5c46      	ldrb	r6, [r0, r1]
 8008ee8:	920c      	str	r2, [sp, #48]	; 0x30
 8008eea:	5c82      	ldrb	r2, [r0, r2]
 8008eec:	1de5      	adds	r5, r4, #7
 8008eee:	0412      	lsls	r2, r2, #16
 8008ef0:	0236      	lsls	r6, r6, #8
 8008ef2:	1996      	adds	r6, r2, r6
 8008ef4:	5d42      	ldrb	r2, [r0, r5]
 8008ef6:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ef8:	18b6      	adds	r6, r6, r2
 8008efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008efc:	2109      	movs	r1, #9
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008efe:	5c82      	ldrb	r2, [r0, r2]
 8008f00:	9510      	str	r5, [sp, #64]	; 0x40
 8008f02:	0612      	lsls	r2, r2, #24
 8008f04:	18b2      	adds	r2, r6, r2
 8008f06:	920e      	str	r2, [sp, #56]	; 0x38
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008f08:	2208      	movs	r2, #8
 8008f0a:	4694      	mov	ip, r2
 8008f0c:	44a4      	add	ip, r4
 8008f0e:	4662      	mov	r2, ip
 8008f10:	4666      	mov	r6, ip
 8008f12:	468c      	mov	ip, r1
 8008f14:	44a4      	add	ip, r4
 8008f16:	0005      	movs	r5, r0
 8008f18:	5d80      	ldrb	r0, [r0, r6]
 8008f1a:	4666      	mov	r6, ip
 8008f1c:	0021      	movs	r1, r4
 8008f1e:	5dad      	ldrb	r5, [r5, r6]
 8008f20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008f22:	0600      	lsls	r0, r0, #24
 8008f24:	310b      	adds	r1, #11
 8008f26:	042d      	lsls	r5, r5, #16
 8008f28:	1945      	adds	r5, r0, r5
 8008f2a:	5c70      	ldrb	r0, [r6, r1]
 8008f2c:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f2e:	3202      	adds	r2, #2
 8008f30:	182d      	adds	r5, r5, r0
 8008f32:	5cb0      	ldrb	r0, [r6, r2]
 8008f34:	0200      	lsls	r0, r0, #8
 8008f36:	182d      	adds	r5, r5, r0
							if(temp == false){
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <PxMessagingTask+0x784>
 8008f3c:	f000 ff50 	bl	8009de0 <PxMessagingTask+0x1624>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008f40:	0023      	movs	r3, r4
 8008f42:	330d      	adds	r3, #13
 8008f44:	5cf3      	ldrb	r3, [r6, r3]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d005      	beq.n	8008f56 <PxMessagingTask+0x79a>
 8008f4a:	3204      	adds	r2, #4
 8008f4c:	5cb2      	ldrb	r2, [r6, r2]
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d001      	beq.n	8008f56 <PxMessagingTask+0x79a>
 8008f52:	f000 fc55 	bl	8009800 <PxMessagingTask+0x1044>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008f56:	4643      	mov	r3, r8
 8008f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f5a:	5ccb      	ldrb	r3, [r1, r3]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <PxMessagingTask+0x7b2>
 8008f60:	0022      	movs	r2, r4
 8008f62:	3210      	adds	r2, #16
 8008f64:	5c8a      	ldrb	r2, [r1, r2]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d001      	beq.n	8008f6e <PxMessagingTask+0x7b2>
 8008f6a:	f000 fc3e 	bl	80097ea <PxMessagingTask+0x102e>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008f6e:	466b      	mov	r3, sp
 8008f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f72:	7c1b      	ldrb	r3, [r3, #16]
 8008f74:	5cd3      	ldrb	r3, [r2, r3]
 8008f76:	9304      	str	r3, [sp, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d000      	beq.n	8008f7e <PxMessagingTask+0x7c2>
 8008f7c:	e372      	b.n	8009664 <PxMessagingTask+0xea8>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008f7e:	4652      	mov	r2, sl
 8008f80:	930c      	str	r3, [sp, #48]	; 0x30
 8008f82:	5dd2      	ldrb	r2, [r2, r7]
 8008f84:	e513      	b.n	80089ae <PxMessagingTask+0x1f2>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008f86:	2400      	movs	r4, #0
 8008f88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f8c:	2319      	movs	r3, #25
 8008f8e:	0022      	movs	r2, r4
 8008f90:	0021      	movs	r1, r4
 8008f92:	5da8      	ldrb	r0, [r5, r6]
 8008f94:	9400      	str	r4, [sp, #0]
 8008f96:	f7fe fecf 	bl	8007d38 <SendMessageFromPort>
							osDelay(100);
 8008f9a:	2064      	movs	r0, #100	; 0x64
 8008f9c:	f004 fd3e 	bl	800da1c <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008fa0:	4ade      	ldr	r2, [pc, #888]	; (800931c <PxMessagingTask+0xb60>)
 8008fa2:	5dab      	ldrb	r3, [r5, r6]
 8008fa4:	7811      	ldrb	r1, [r2, #0]
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	9a08      	ldr	r2, [sp, #32]
 8008faa:	f001 fa73 	bl	800a494 <remoteBootloaderUpdate>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008fae:	4653      	mov	r3, sl
 8008fb0:	9404      	str	r4, [sp, #16]
 8008fb2:	5dda      	ldrb	r2, [r3, r7]
 8008fb4:	e4fb      	b.n	80089ae <PxMessagingTask+0x1f2>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fba:	1da3      	adds	r3, r4, #6
 8008fbc:	5ccb      	ldrb	r3, [r1, r3]
 8008fbe:	0212      	lsls	r2, r2, #8
 8008fc0:	189b      	adds	r3, r3, r2
 8008fc2:	48d7      	ldr	r0, [pc, #860]	; (8009320 <PxMessagingTask+0xb64>)
 8008fc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008fc6:	3405      	adds	r4, #5
 8008fc8:	4694      	mov	ip, r2
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008fca:	5213      	strh	r3, [r2, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008fcc:	000a      	movs	r2, r1
 8008fce:	0003      	movs	r3, r0
 8008fd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fd2:	4463      	add	r3, ip
 8008fd4:	5c51      	ldrb	r1, [r2, r1]
 8008fd6:	5d12      	ldrb	r2, [r2, r4]
 8008fd8:	0209      	lsls	r1, r1, #8
 8008fda:	1852      	adds	r2, r2, r1
 8008fdc:	805a      	strh	r2, [r3, #2]
								responseStatus =BOS_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4ad0      	ldr	r2, [pc, #832]	; (8009324 <PxMessagingTask+0xb68>)
 8008fe2:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	5dd2      	ldrb	r2, [r2, r7]
 8008fea:	e4e0      	b.n	80089ae <PxMessagingTask+0x1f2>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008fec:	4642      	mov	r2, r8
 8008fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ff0:	1da3      	adds	r3, r4, #6
 8008ff2:	5ccb      	ldrb	r3, [r1, r3]
 8008ff4:	0212      	lsls	r2, r2, #8
 8008ff6:	48ca      	ldr	r0, [pc, #808]	; (8009320 <PxMessagingTask+0xb64>)
 8008ff8:	189b      	adds	r3, r3, r2
 8008ffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008ffc:	3405      	adds	r4, #5
 8008ffe:	4694      	mov	ip, r2
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009000:	5213      	strh	r3, [r2, r0]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009002:	000a      	movs	r2, r1
 8009004:	0003      	movs	r3, r0
 8009006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009008:	4463      	add	r3, ip
 800900a:	5c51      	ldrb	r1, [r2, r1]
 800900c:	5d12      	ldrb	r2, [r2, r4]
 800900e:	0209      	lsls	r1, r1, #8
 8009010:	1852      	adds	r2, r2, r1
 8009012:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8009014:	4bc4      	ldr	r3, [pc, #784]	; (8009328 <PxMessagingTask+0xb6c>)
 8009016:	4ac5      	ldr	r2, [pc, #788]	; (800932c <PxMessagingTask+0xb70>)
 8009018:	881b      	ldrh	r3, [r3, #0]
							messageParams[2] =port;
 800901a:	9c08      	ldr	r4, [sp, #32]
							messageParams[1] =(uint8_t )myPN;
 800901c:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8009022:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8009024:	2002      	movs	r0, #2
 8009026:	f004 fcf9 	bl	800da1c <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800902a:	2200      	movs	r2, #0
 800902c:	2303      	movs	r3, #3
 800902e:	0011      	movs	r1, r2
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	0020      	movs	r0, r4
 8009034:	3308      	adds	r3, #8
 8009036:	f7fe fe7f 	bl	8007d38 <SendMessageFromPort>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800903a:	4653      	mov	r3, sl
 800903c:	5dda      	ldrb	r2, [r3, r7]
 800903e:	2300      	movs	r3, #0
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	e4b4      	b.n	80089ae <PxMessagingTask+0x1f2>
							IND_toggle();
 8009044:	2180      	movs	r1, #128	; 0x80
 8009046:	2090      	movs	r0, #144	; 0x90
 8009048:	0109      	lsls	r1, r1, #4
 800904a:	05c0      	lsls	r0, r0, #23
 800904c:	f008 f922 	bl	8011294 <HAL_GPIO_TogglePin>
		if(result == BOS_ERR_UnknownMessage){
 8009050:	e4db      	b.n	8008a0a <PxMessagingTask+0x24e>
							IND_OFF();
 8009052:	2200      	movs	r2, #0
 8009054:	2180      	movs	r1, #128	; 0x80
 8009056:	2090      	movs	r0, #144	; 0x90
 8009058:	0109      	lsls	r1, r1, #4
 800905a:	05c0      	lsls	r0, r0, #23
 800905c:	f008 f914 	bl	8011288 <HAL_GPIO_WritePin>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009060:	4653      	mov	r3, sl
 8009062:	5dda      	ldrb	r2, [r3, r7]
 8009064:	2300      	movs	r3, #0
 8009066:	9304      	str	r3, [sp, #16]
 8009068:	e4a1      	b.n	80089ae <PxMessagingTask+0x1f2>
							IND_ON();
 800906a:	2201      	movs	r2, #1
 800906c:	e7f2      	b.n	8009054 <PxMessagingTask+0x898>
							if(!moduleAlias[myID][0])
 800906e:	4bab      	ldr	r3, [pc, #684]	; (800931c <PxMessagingTask+0xb60>)
 8009070:	49af      	ldr	r1, [pc, #700]	; (8009330 <PxMessagingTask+0xb74>)
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	230a      	movs	r3, #10
 8009076:	435a      	muls	r2, r3
 8009078:	5c8a      	ldrb	r2, [r1, r2]
 800907a:	2a00      	cmp	r2, #0
 800907c:	d000      	beq.n	8009080 <PxMessagingTask+0x8c4>
 800907e:	e2a5      	b.n	80095cc <PxMessagingTask+0xe10>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8009080:	48ac      	ldr	r0, [pc, #688]	; (8009334 <PxMessagingTask+0xb78>)
 8009082:	4642      	mov	r2, r8
 8009084:	49ac      	ldr	r1, [pc, #688]	; (8009338 <PxMessagingTask+0xb7c>)
 8009086:	3040      	adds	r0, #64	; 0x40
 8009088:	f00a fa7a 	bl	8013580 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800908c:	4ca9      	ldr	r4, [pc, #676]	; (8009334 <PxMessagingTask+0xb78>)
 800908e:	3440      	adds	r4, #64	; 0x40
 8009090:	0020      	movs	r0, r4
 8009092:	f7f7 f841 	bl	8000118 <strlen>
 8009096:	4ba9      	ldr	r3, [pc, #676]	; (800933c <PxMessagingTask+0xb80>)
 8009098:	b282      	uxth	r2, r0
 800909a:	7818      	ldrb	r0, [r3, #0]
 800909c:	2301      	movs	r3, #1
 800909e:	425b      	negs	r3, r3
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	0021      	movs	r1, r4
 80090a4:	3333      	adds	r3, #51	; 0x33
 80090a6:	f004 fad9 	bl	800d65c <writePxMutex>
							responseStatus =BOS_OK;
 80090aa:	e798      	b.n	8008fde <PxMessagingTask+0x822>
							indMode =IND_PING;
 80090ac:	2301      	movs	r3, #1
 80090ae:	4aa4      	ldr	r2, [pc, #656]	; (8009340 <PxMessagingTask+0xb84>)
							osDelay(10);
 80090b0:	200a      	movs	r0, #10
							indMode =IND_PING;
 80090b2:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 80090b4:	f004 fcb2 	bl	800da1c <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 80090b8:	464b      	mov	r3, r9
 80090ba:	2240      	movs	r2, #64	; 0x40
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	4393      	bics	r3, r2
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d000      	beq.n	80090c6 <PxMessagingTask+0x90a>
 80090c4:	e4a1      	b.n	8008a0a <PxMessagingTask+0x24e>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2102      	movs	r1, #2
 80090ca:	e49b      	b.n	8008a04 <PxMessagingTask+0x248>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 80090cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d0:	5cd3      	ldrb	r3, [r2, r3]
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d000      	beq.n	80090da <PxMessagingTask+0x91e>
 80090d8:	e2a9      	b.n	800962e <PxMessagingTask+0xe72>
								myID =cMessage[port - 1][1 + shift];
 80090da:	3405      	adds	r4, #5
 80090dc:	5d13      	ldrb	r3, [r2, r4]
 80090de:	4a8f      	ldr	r2, [pc, #572]	; (800931c <PxMessagingTask+0xb60>)
 80090e0:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80090e2:	4653      	mov	r3, sl
 80090e4:	5dda      	ldrb	r2, [r3, r7]
 80090e6:	e462      	b.n	80089ae <PxMessagingTask+0x1f2>
							ReadPortsDirMSG(src);
 80090e8:	4640      	mov	r0, r8
 80090ea:	f004 fb91 	bl	800d810 <ReadPortsDirMSG>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80090ee:	4653      	mov	r3, sl
 80090f0:	5dda      	ldrb	r2, [r3, r7]
 80090f2:	2300      	movs	r3, #0
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	e45a      	b.n	80089ae <PxMessagingTask+0x1f2>
 80090f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80090fc:	469c      	mov	ip, r3
 80090fe:	4b91      	ldr	r3, [pc, #580]	; (8009344 <PxMessagingTask+0xb88>)
 8009100:	4466      	add	r6, ip
 8009102:	469c      	mov	ip, r3
					switch(code){
 8009104:	2501      	movs	r5, #1
 8009106:	3e01      	subs	r6, #1
 8009108:	4466      	add	r6, ip
 800910a:	46a0      	mov	r8, r4
 800910c:	0034      	movs	r4, r6
 800910e:	9e08      	ldr	r6, [sp, #32]
 8009110:	b2e8      	uxtb	r0, r5
								if(p != port)
 8009112:	4286      	cmp	r6, r0
 8009114:	d004      	beq.n	8009120 <PxMessagingTask+0x964>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8009116:	f004 fb09 	bl	800d72c <GetUart>
 800911a:	5d61      	ldrb	r1, [r4, r5]
 800911c:	f004 fb12 	bl	800d744 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8009120:	3501      	adds	r5, #1
 8009122:	2d06      	cmp	r5, #6
 8009124:	d1f4      	bne.n	8009110 <PxMessagingTask+0x954>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8009126:	4644      	mov	r4, r8
 8009128:	9808      	ldr	r0, [sp, #32]
 800912a:	f004 faff 	bl	800d72c <GetUart>
 800912e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009130:	340e      	adds	r4, #14
 8009132:	5d19      	ldrb	r1, [r3, r4]
 8009134:	f004 fb06 	bl	800d744 <SwapUartPins>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009138:	4653      	mov	r3, sl
 800913a:	5dda      	ldrb	r2, [r3, r7]
 800913c:	2300      	movs	r3, #0
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	e435      	b.n	80089ae <PxMessagingTask+0x1f2>
							temp =numOfParams / 5;
 8009142:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009144:	2105      	movs	r1, #5
 8009146:	0028      	movs	r0, r5
 8009148:	f7f7 f802 	bl	8000150 <__udivsi3>
 800914c:	b2c3      	uxtb	r3, r0
 800914e:	930c      	str	r3, [sp, #48]	; 0x30
							for(uint8_t k =0; k < temp; k++){
 8009150:	2d04      	cmp	r5, #4
 8009152:	d800      	bhi.n	8009156 <PxMessagingTask+0x99a>
 8009154:	e743      	b.n	8008fde <PxMessagingTask+0x822>
 8009156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009158:	4a7a      	ldr	r2, [pc, #488]	; (8009344 <PxMessagingTask+0xb88>)
 800915a:	469c      	mov	ip, r3
 800915c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800915e:	3405      	adds	r4, #5
 8009160:	4466      	add	r6, ip
 8009162:	4694      	mov	ip, r2
 8009164:	4466      	add	r6, ip
 8009166:	469c      	mov	ip, r3
 8009168:	4464      	add	r4, ip
 800916a:	4694      	mov	ip, r2
 800916c:	2500      	movs	r5, #0
 800916e:	46b8      	mov	r8, r7
 8009170:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009172:	4464      	add	r4, ip
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8009174:	4b74      	ldr	r3, [pc, #464]	; (8009348 <PxMessagingTask+0xb8c>)
 8009176:	7830      	ldrb	r0, [r6, #0]
 8009178:	469c      	mov	ip, r3
 800917a:	3801      	subs	r0, #1
 800917c:	0080      	lsls	r0, r0, #2
							for(uint8_t k =0; k < temp; k++){
 800917e:	3501      	adds	r5, #1
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8009180:	0021      	movs	r1, r4
 8009182:	2204      	movs	r2, #4
 8009184:	4460      	add	r0, ip
							for(uint8_t k =0; k < temp; k++){
 8009186:	b2ed      	uxtb	r5, r5
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8009188:	f00a f800 	bl	801318c <memcpy>
							for(uint8_t k =0; k < temp; k++){
 800918c:	3605      	adds	r6, #5
 800918e:	3405      	adds	r4, #5
 8009190:	42af      	cmp	r7, r5
 8009192:	d8ef      	bhi.n	8009174 <PxMessagingTask+0x9b8>
 8009194:	4647      	mov	r7, r8
 8009196:	e722      	b.n	8008fde <PxMessagingTask+0x822>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800919a:	1d63      	adds	r3, r4, #5
 800919c:	5cd5      	ldrb	r5, [r2, r3]
 800919e:	1da3      	adds	r3, r4, #6
 80091a0:	5cd3      	ldrb	r3, [r2, r3]
 80091a2:	042d      	lsls	r5, r5, #16
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	18ed      	adds	r5, r5, r3
 80091a8:	1de3      	adds	r3, r4, #7
 80091aa:	5cd3      	ldrb	r3, [r2, r3]
 80091ac:	3408      	adds	r4, #8
 80091ae:	18ed      	adds	r5, r5, r3
 80091b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b2:	5cd3      	ldrb	r3, [r2, r3]
 80091b4:	061b      	lsls	r3, r3, #24
 80091b6:	18ed      	adds	r5, r5, r3
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 80091b8:	5d13      	ldrb	r3, [r2, r4]
 80091ba:	2bff      	cmp	r3, #255	; 0xff
 80091bc:	d100      	bne.n	80091c0 <PxMessagingTask+0xa04>
 80091be:	e350      	b.n	8009862 <PxMessagingTask+0x10a6>
								for(p =0; p < numOfParams; p++){
 80091c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <PxMessagingTask+0xa0e>
 80091c6:	f000 fdc0 	bl	8009d4a <PxMessagingTask+0x158e>
 80091ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091cc:	46b8      	mov	r8, r7
 80091ce:	469c      	mov	ip, r3
 80091d0:	4b5c      	ldr	r3, [pc, #368]	; (8009344 <PxMessagingTask+0xb88>)
 80091d2:	4464      	add	r4, ip
 80091d4:	191e      	adds	r6, r3, r4
 80091d6:	002f      	movs	r7, r5
 80091d8:	2400      	movs	r4, #0
 80091da:	e004      	b.n	80091e6 <PxMessagingTask+0xa2a>
 80091dc:	3401      	adds	r4, #1
 80091de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e0:	b2e3      	uxtb	r3, r4
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d20c      	bcs.n	8009200 <PxMessagingTask+0xa44>
									temp =cMessage[port - 1][4 + shift + p];
 80091e6:	5d35      	ldrb	r5, [r6, r4]
									if(temp > 0 && temp <= NumOfPorts){
 80091e8:	1e6b      	subs	r3, r5, #1
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d8f6      	bhi.n	80091dc <PxMessagingTask+0xa20>
										UpdateBaudrate(temp,temp32);
 80091ee:	0039      	movs	r1, r7
 80091f0:	0028      	movs	r0, r5
 80091f2:	f004 fa89 	bl	800d708 <UpdateBaudrate>
								for(p =0; p < numOfParams; p++){
 80091f6:	3401      	adds	r4, #1
 80091f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091fa:	b2e3      	uxtb	r3, r4
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d3f2      	bcc.n	80091e6 <PxMessagingTask+0xa2a>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009200:	4653      	mov	r3, sl
 8009202:	4647      	mov	r7, r8
 8009204:	5dda      	ldrb	r2, [r3, r7]
 8009206:	2300      	movs	r3, #0
 8009208:	950c      	str	r5, [sp, #48]	; 0x30
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	f7ff fbcf 	bl	80089ae <PxMessagingTask+0x1f2>
							for(p =0; p < numOfParams; p++){
 8009210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d100      	bne.n	8009218 <PxMessagingTask+0xa5c>
 8009216:	e6e2      	b.n	8008fde <PxMessagingTask+0x822>
 8009218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800921a:	4644      	mov	r4, r8
 800921c:	4694      	mov	ip, r2
 800921e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009220:	4a48      	ldr	r2, [pc, #288]	; (8009344 <PxMessagingTask+0xb88>)
 8009222:	4460      	add	r0, ip
 8009224:	4694      	mov	ip, r2
 8009226:	4b49      	ldr	r3, [pc, #292]	; (800934c <PxMessagingTask+0xb90>)
 8009228:	3c01      	subs	r4, #1
 800922a:	0064      	lsls	r4, r4, #1
 800922c:	5b1b      	ldrh	r3, [r3, r4]
 800922e:	2580      	movs	r5, #128	; 0x80
 8009230:	4460      	add	r0, ip
 8009232:	2200      	movs	r2, #0
 8009234:	46a4      	mov	ip, r4
 8009236:	001c      	movs	r4, r3
 8009238:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800923a:	022d      	lsls	r5, r5, #8
 800923c:	002b      	movs	r3, r5
 800923e:	5c81      	ldrb	r1, [r0, r2]
							for(p =0; p < numOfParams; p++){
 8009240:	3201      	adds	r2, #1
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8009242:	3901      	subs	r1, #1
 8009244:	410b      	asrs	r3, r1
 8009246:	431c      	orrs	r4, r3
							for(p =0; p < numOfParams; p++){
 8009248:	b2d3      	uxtb	r3, r2
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800924a:	b2a4      	uxth	r4, r4
							for(p =0; p < numOfParams; p++){
 800924c:	42b3      	cmp	r3, r6
 800924e:	d3f5      	bcc.n	800923c <PxMessagingTask+0xa80>
 8009250:	0023      	movs	r3, r4
 8009252:	4664      	mov	r4, ip
 8009254:	4a3d      	ldr	r2, [pc, #244]	; (800934c <PxMessagingTask+0xb90>)
 8009256:	5313      	strh	r3, [r2, r4]
							responseStatus =BOS_OK;
 8009258:	e6c1      	b.n	8008fde <PxMessagingTask+0x822>
							if(longMessage){
 800925a:	4b3d      	ldr	r3, [pc, #244]	; (8009350 <PxMessagingTask+0xb94>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d100      	bne.n	8009266 <PxMessagingTask+0xaaa>
 8009264:	e18e      	b.n	8009584 <PxMessagingTask+0xdc8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009266:	4b3b      	ldr	r3, [pc, #236]	; (8009354 <PxMessagingTask+0xb98>)
 8009268:	9909      	ldr	r1, [sp, #36]	; 0x24
 800926a:	881c      	ldrh	r4, [r3, #0]
 800926c:	4b3a      	ldr	r3, [pc, #232]	; (8009358 <PxMessagingTask+0xb9c>)
 800926e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009270:	1918      	adds	r0, r3, r4
 8009272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009274:	002a      	movs	r2, r5
 8009276:	469c      	mov	ip, r3
 8009278:	4b32      	ldr	r3, [pc, #200]	; (8009344 <PxMessagingTask+0xb88>)
 800927a:	4461      	add	r1, ip
 800927c:	469c      	mov	ip, r3
 800927e:	4461      	add	r1, ip
 8009280:	f009 ff84 	bl	801318c <memcpy>
								longMessageLastPtr +=numOfParams;
 8009284:	46ac      	mov	ip, r5
 8009286:	4b33      	ldr	r3, [pc, #204]	; (8009354 <PxMessagingTask+0xb98>)
 8009288:	4464      	add	r4, ip
 800928a:	801c      	strh	r4, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800928c:	4653      	mov	r3, sl
 800928e:	5dda      	ldrb	r2, [r3, r7]
 8009290:	2300      	movs	r3, #0
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	f7ff fb8b 	bl	80089ae <PxMessagingTask+0x1f2>
							rejected_FLAG =1;
 8009298:	2301      	movs	r3, #1
 800929a:	4a30      	ldr	r2, [pc, #192]	; (800935c <PxMessagingTask+0xba0>)
 800929c:	7013      	strb	r3, [r2, #0]
		if(result == BOS_ERR_UnknownMessage){
 800929e:	f7ff fbb4 	bl	8008a0a <PxMessagingTask+0x24e>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80092a2:	4b2f      	ldr	r3, [pc, #188]	; (8009360 <PxMessagingTask+0xba4>)
 80092a4:	4a2f      	ldr	r2, [pc, #188]	; (8009364 <PxMessagingTask+0xba8>)
							osDelay(10);
 80092a6:	200a      	movs	r0, #10
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80092a8:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 80092aa:	2301      	movs	r3, #1
 80092ac:	4a24      	ldr	r2, [pc, #144]	; (8009340 <PxMessagingTask+0xb84>)
 80092ae:	7013      	strb	r3, [r2, #0]
							osDelay(10);
 80092b0:	f004 fbb4 	bl	800da1c <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	4b2b      	ldr	r3, [pc, #172]	; (8009368 <PxMessagingTask+0xbac>)
 80092ba:	4a2c      	ldr	r2, [pc, #176]	; (800936c <PxMessagingTask+0xbb0>)
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	e7fd      	b.n	80092c2 <PxMessagingTask+0xb06>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80092c6:	f004 fd51 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
 80092ca:	0004      	movs	r4, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80092cc:	f7f6 ff24 	bl	8000118 <strlen>
 80092d0:	2100      	movs	r1, #0
 80092d2:	0002      	movs	r2, r0
 80092d4:	0020      	movs	r0, r4
 80092d6:	f009 ff62 	bl	801319e <memset>
							if(longMessage){
 80092da:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <PxMessagingTask+0xb94>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d100      	bne.n	80092e6 <PxMessagingTask+0xb2a>
 80092e4:	e132      	b.n	800954c <PxMessagingTask+0xd90>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80092e6:	4b1b      	ldr	r3, [pc, #108]	; (8009354 <PxMessagingTask+0xb98>)
 80092e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ea:	8818      	ldrh	r0, [r3, #0]
 80092ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ee:	1820      	adds	r0, r4, r0
 80092f0:	469c      	mov	ip, r3
 80092f2:	4b14      	ldr	r3, [pc, #80]	; (8009344 <PxMessagingTask+0xb88>)
 80092f4:	4461      	add	r1, ip
 80092f6:	469c      	mov	ip, r3
 80092f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092fa:	4461      	add	r1, ip
 80092fc:	0022      	movs	r2, r4
 80092fe:	f009 ff45 	bl	801318c <memcpy>
								longMessageLastPtr +=numOfParams;
 8009302:	46a4      	mov	ip, r4
 8009304:	4b13      	ldr	r3, [pc, #76]	; (8009354 <PxMessagingTask+0xb98>)
 8009306:	881a      	ldrh	r2, [r3, #0]
 8009308:	4b12      	ldr	r3, [pc, #72]	; (8009354 <PxMessagingTask+0xb98>)
 800930a:	4462      	add	r2, ip
 800930c:	801a      	strh	r2, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800930e:	4653      	mov	r3, sl
 8009310:	5dda      	ldrb	r2, [r3, r7]
 8009312:	2300      	movs	r3, #0
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	f7ff fb4a 	bl	80089ae <PxMessagingTask+0x1f2>
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	20000aa8 	.word	0x20000aa8
 8009320:	200011d8 	.word	0x200011d8
 8009324:	20000c74 	.word	0x20000c74
 8009328:	20000030 	.word	0x20000030
 800932c:	20000b74 	.word	0x20000b74
 8009330:	20000e74 	.word	0x20000e74
 8009334:	20001f4c 	.word	0x20001f4c
 8009338:	0801b168 	.word	0x0801b168
 800933c:	20000c60 	.word	0x20000c60
 8009340:	200011ef 	.word	0x200011ef
 8009344:	20000d40 	.word	0x20000d40
 8009348:	200011c4 	.word	0x200011c4
 800934c:	200029d4 	.word	0x200029d4
 8009350:	20000cfc 	.word	0x20000cfc
 8009354:	20000cfa 	.word	0x20000cfa
 8009358:	20002068 	.word	0x20002068
 800935c:	200011ed 	.word	0x200011ed
 8009360:	20007ff0 	.word	0x20007ff0
 8009364:	deadbeef 	.word	0xdeadbeef
 8009368:	e000ed00 	.word	0xe000ed00
 800936c:	05fa0004 	.word	0x05fa0004
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009370:	f004 fcfc 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
 8009374:	0004      	movs	r4, r0
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8009376:	48f2      	ldr	r0, [pc, #968]	; (8009740 <PxMessagingTask+0xf84>)
 8009378:	3030      	adds	r0, #48	; 0x30
							if(dst == BOS_BROADCAST)
 800937a:	2eff      	cmp	r6, #255	; 0xff
 800937c:	d100      	bne.n	8009380 <PxMessagingTask+0xbc4>
 800937e:	e33a      	b.n	80099f6 <PxMessagingTask+0x123a>
							else if(dst == BOS_MULTICAST)
 8009380:	2efe      	cmp	r6, #254	; 0xfe
 8009382:	d100      	bne.n	8009386 <PxMessagingTask+0xbca>
 8009384:	e281      	b.n	800988a <PxMessagingTask+0x10ce>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800938a:	469c      	mov	ip, r3
 800938c:	4bed      	ldr	r3, [pc, #948]	; (8009744 <PxMessagingTask+0xf88>)
 800938e:	4461      	add	r1, ip
 8009390:	469c      	mov	ip, r3
 8009392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009394:	4461      	add	r1, ip
 8009396:	f009 fef9 	bl	801318c <memcpy>
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800939a:	4ee9      	ldr	r6, [pc, #932]	; (8009740 <PxMessagingTask+0xf84>)
 800939c:	9704      	str	r7, [sp, #16]
 800939e:	3630      	adds	r6, #48	; 0x30
 80093a0:	e001      	b.n	80093a6 <PxMessagingTask+0xbea>
							} while(xReturned != pdFALSE);
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	d025      	beq.n	80093f2 <PxMessagingTask+0xc36>
								temp =PcPort;
 80093a6:	4be8      	ldr	r3, [pc, #928]	; (8009748 <PxMessagingTask+0xf8c>)
								PcPort =port;
 80093a8:	9a08      	ldr	r2, [sp, #32]
								temp =PcPort;
 80093aa:	781f      	ldrb	r7, [r3, #0]
								PcPort =port;
 80093ac:	701a      	strb	r2, [r3, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80093ae:	2299      	movs	r2, #153	; 0x99
 80093b0:	0021      	movs	r1, r4
 80093b2:	0030      	movs	r0, r6
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	f004 fc57 	bl	800dc68 <FreeRTOS_CLIProcessCommand>
								PcPort =temp;
 80093ba:	4be3      	ldr	r3, [pc, #908]	; (8009748 <PxMessagingTask+0xf8c>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80093bc:	0005      	movs	r5, r0
								PcPort =temp;
 80093be:	701f      	strb	r7, [r3, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80093c0:	464b      	mov	r3, r9
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b60      	cmp	r3, #96	; 0x60
 80093c6:	d1ec      	bne.n	80093a2 <PxMessagingTask+0xbe6>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 80093c8:	0020      	movs	r0, r4
 80093ca:	f7f6 fea5 	bl	8000118 <strlen>
 80093ce:	0021      	movs	r1, r4
 80093d0:	0002      	movs	r2, r0
 80093d2:	48de      	ldr	r0, [pc, #888]	; (800974c <PxMessagingTask+0xf90>)
 80093d4:	f009 feda 	bl	801318c <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 80093d8:	0020      	movs	r0, r4
 80093da:	f7f6 fe9d 	bl	8000118 <strlen>
 80093de:	2118      	movs	r1, #24
 80093e0:	b282      	uxth	r2, r0
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7fe ff18 	bl	8008218 <SendMessageToModule>
									osDelay(10);
 80093e8:	200a      	movs	r0, #10
 80093ea:	f004 fb17 	bl	800da1c <osDelay>
							} while(xReturned != pdFALSE);
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	d1d9      	bne.n	80093a6 <PxMessagingTask+0xbea>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 80093f2:	48d3      	ldr	r0, [pc, #844]	; (8009740 <PxMessagingTask+0xf84>)
 80093f4:	2232      	movs	r2, #50	; 0x32
 80093f6:	2100      	movs	r1, #0
 80093f8:	3030      	adds	r0, #48	; 0x30
 80093fa:	970c      	str	r7, [sp, #48]	; 0x30
 80093fc:	9f04      	ldr	r7, [sp, #16]
 80093fe:	f009 fece 	bl	801319e <memset>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009402:	4653      	mov	r3, sl
 8009404:	5dda      	ldrb	r2, [r3, r7]
 8009406:	2300      	movs	r3, #0
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	f7ff fad0 	bl	80089ae <PxMessagingTask+0x1f2>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800940e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009410:	1d61      	adds	r1, r4, #5
 8009412:	469c      	mov	ip, r3
 8009414:	4bcb      	ldr	r3, [pc, #812]	; (8009744 <PxMessagingTask+0xf88>)
 8009416:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009418:	4461      	add	r1, ip
 800941a:	469c      	mov	ip, r3
 800941c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009420:	5c18      	ldrb	r0, [r3, r0]
 8009422:	230a      	movs	r3, #10
 8009424:	3a01      	subs	r2, #1
 8009426:	b292      	uxth	r2, r2
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4461      	add	r1, ip
 800942c:	f004 f916 	bl	800d65c <writePxMutex>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009430:	4653      	mov	r3, sl
 8009432:	5dda      	ldrb	r2, [r3, r7]
 8009434:	2300      	movs	r3, #0
 8009436:	9304      	str	r3, [sp, #16]
 8009438:	f7ff fab9 	bl	80089ae <PxMessagingTask+0x1f2>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800943c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800943e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009440:	5c9b      	ldrb	r3, [r3, r2]
 8009442:	4ac3      	ldr	r2, [pc, #780]	; (8009750 <PxMessagingTask+0xf94>)
							ACK_FLAG =1;
 8009444:	7013      	strb	r3, [r2, #0]
 8009446:	e4bb      	b.n	8008dc0 <PxMessagingTask+0x604>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009448:	2002      	movs	r0, #2
 800944a:	4240      	negs	r0, r0
 800944c:	17c1      	asrs	r1, r0, #31
 800944e:	4bc1      	ldr	r3, [pc, #772]	; (8009754 <PxMessagingTask+0xf98>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	9204      	str	r2, [sp, #16]
 8009456:	9305      	str	r3, [sp, #20]
 8009458:	1812      	adds	r2, r2, r0
 800945a:	414b      	adcs	r3, r1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d100      	bne.n	8009462 <PxMessagingTask+0xca6>
 8009460:	e2a4      	b.n	80099ac <PxMessagingTask+0x11f0>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009462:	4bbb      	ldr	r3, [pc, #748]	; (8009750 <PxMessagingTask+0xf94>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b10      	cmp	r3, #16
 8009468:	d000      	beq.n	800946c <PxMessagingTask+0xcb0>
 800946a:	e5b8      	b.n	8008fde <PxMessagingTask+0x822>
 800946c:	f7ff facd 	bl	8008a0a <PxMessagingTask+0x24e>
							ClearEEportsDir();
 8009470:	f7fa f964 	bl	800373c <ClearEEportsDir>
							ClearROtopology();
 8009474:	f000 fff8 	bl	800a468 <ClearROtopology>
							osDelay(100);
 8009478:	2064      	movs	r0, #100	; 0x64
 800947a:	f004 facf 	bl	800da1c <osDelay>
							indMode =IND_TOPOLOGY;
 800947e:	2302      	movs	r3, #2
 8009480:	4ab5      	ldr	r2, [pc, #724]	; (8009758 <PxMessagingTask+0xf9c>)
							ACK_FLAG =1;
 8009482:	7013      	strb	r3, [r2, #0]
 8009484:	e49c      	b.n	8008dc0 <PxMessagingTask+0x604>
 8009486:	2301      	movs	r3, #1
 8009488:	4ab4      	ldr	r2, [pc, #720]	; (800975c <PxMessagingTask+0xfa0>)
 800948a:	7013      	strb	r3, [r2, #0]
 800948c:	e498      	b.n	8008dc0 <PxMessagingTask+0x604>
 800948e:	2309      	movs	r3, #9
 8009490:	469c      	mov	ip, r3
 8009492:	44a4      	add	ip, r4
 8009494:	4663      	mov	r3, ip
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	230a      	movs	r3, #10
 800949a:	469c      	mov	ip, r3
 800949c:	44a4      	add	ip, r4
 800949e:	4663      	mov	r3, ip
 80094a0:	930a      	str	r3, [sp, #40]	; 0x28
 80094a2:	230c      	movs	r3, #12
 80094a4:	4698      	mov	r8, r3
 80094a6:	3301      	adds	r3, #1
 80094a8:	469c      	mov	ip, r3
 80094aa:	44a4      	add	ip, r4
 80094ac:	4663      	mov	r3, ip
 80094ae:	930e      	str	r3, [sp, #56]	; 0x38
 80094b0:	230e      	movs	r3, #14
 80094b2:	469c      	mov	ip, r3
 80094b4:	44a4      	add	ip, r4
 80094b6:	4663      	mov	r3, ip
 80094b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094ba:	230f      	movs	r3, #15
 80094bc:	469c      	mov	ip, r3
 80094be:	44a4      	add	ip, r4
 80094c0:	0026      	movs	r6, r4
 80094c2:	4663      	mov	r3, ip
 80094c4:	44a0      	add	r8, r4
 80094c6:	360b      	adds	r6, #11
 80094c8:	9310      	str	r3, [sp, #64]	; 0x40
 80094ca:	3410      	adds	r4, #16
 80094cc:	f7ff fa2d 	bl	800892a <PxMessagingTask+0x16e>
									messageParams[temp] =p;
 80094d0:	4b9e      	ldr	r3, [pc, #632]	; (800974c <PxMessagingTask+0xf90>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80094d2:	1c70      	adds	r0, r6, #1
 80094d4:	469c      	mov	ip, r3
									messageParams[temp] =p;
 80094d6:	559c      	strb	r4, [r3, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80094d8:	2204      	movs	r2, #4
 80094da:	0029      	movs	r1, r5
 80094dc:	4460      	add	r0, ip
									temp +=5;
 80094de:	3605      	adds	r6, #5
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 80094e0:	f009 fe54 	bl	801318c <memcpy>
									temp +=5;
 80094e4:	b2f6      	uxtb	r6, r6
 80094e6:	f7ff fa85 	bl	80089f4 <PxMessagingTask+0x238>
								ADCSelectChannel(ADCPort,"top");
 80094ea:	499d      	ldr	r1, [pc, #628]	; (8009760 <PxMessagingTask+0xfa4>)
 80094ec:	f003 f84c 	bl	800c588 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 80094f0:	4b9c      	ldr	r3, [pc, #624]	; (8009764 <PxMessagingTask+0xfa8>)
 80094f2:	4a9c      	ldr	r2, [pc, #624]	; (8009764 <PxMessagingTask+0xfa8>)
 80094f4:	7a18      	ldrb	r0, [r3, #8]
 80094f6:	499a      	ldr	r1, [pc, #616]	; (8009760 <PxMessagingTask+0xfa4>)
 80094f8:	320c      	adds	r2, #12
 80094fa:	f003 f893 	bl	800c624 <ReadADCChannel>
 80094fe:	f7ff fa0e 	bl	800891e <PxMessagingTask+0x162>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009502:	9b04      	ldr	r3, [sp, #16]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d100      	bne.n	800950a <PxMessagingTask+0xd4e>
 8009508:	e183      	b.n	8009812 <PxMessagingTask+0x1056>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800950a:	9b04      	ldr	r3, [sp, #16]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d801      	bhi.n	8009514 <PxMessagingTask+0xd58>
 8009510:	f7ff fa7b 	bl	8008a0a <PxMessagingTask+0x24e>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	4a94      	ldr	r2, [pc, #592]	; (8009768 <PxMessagingTask+0xfac>)
 8009518:	3b04      	subs	r3, #4
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	58d2      	ldr	r2, [r2, r3]
 800951e:	230f      	movs	r3, #15
 8009520:	498a      	ldr	r1, [pc, #552]	; (800974c <PxMessagingTask+0xf90>)
 8009522:	4013      	ands	r3, r2
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	700b      	strb	r3, [r1, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8009528:	d101      	bne.n	800952e <PxMessagingTask+0xd72>
 800952a:	f000 fca5 	bl	8009e78 <PxMessagingTask+0x16bc>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800952e:	2380      	movs	r3, #128	; 0x80
 8009530:	9904      	ldr	r1, [sp, #16]
 8009532:	0c12      	lsrs	r2, r2, #16
 8009534:	3901      	subs	r1, #1
 8009536:	059b      	lsls	r3, r3, #22
 8009538:	b2c9      	uxtb	r1, r1
 800953a:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 800953c:	2907      	cmp	r1, #7
 800953e:	d901      	bls.n	8009544 <PxMessagingTask+0xd88>
 8009540:	f7ff fa63 	bl	8008a0a <PxMessagingTask+0x24e>
 8009544:	4889      	ldr	r0, [pc, #548]	; (800976c <PxMessagingTask+0xfb0>)
 8009546:	0089      	lsls	r1, r1, #2
 8009548:	5841      	ldr	r1, [r0, r1]
 800954a:	468f      	mov	pc, r1
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800954c:	4b88      	ldr	r3, [pc, #544]	; (8009770 <PxMessagingTask+0xfb4>)
 800954e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009550:	8818      	ldrh	r0, [r3, #0]
 8009552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009556:	469c      	mov	ip, r3
 8009558:	4b7a      	ldr	r3, [pc, #488]	; (8009744 <PxMessagingTask+0xf88>)
 800955a:	4461      	add	r1, ip
 800955c:	469c      	mov	ip, r3
 800955e:	1820      	adds	r0, r4, r0
 8009560:	4461      	add	r1, ip
 8009562:	f009 fe13 	bl	801318c <memcpy>
								longMessageLastPtr =0;
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	4a81      	ldr	r2, [pc, #516]	; (8009770 <PxMessagingTask+0xfb4>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800956a:	4882      	ldr	r0, [pc, #520]	; (8009774 <PxMessagingTask+0xfb8>)
								longMessageLastPtr =0;
 800956c:	8013      	strh	r3, [r2, #0]
								responseStatus =BOS_OK;
 800956e:	4a78      	ldr	r2, [pc, #480]	; (8009750 <PxMessagingTask+0xf94>)
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8009570:	0019      	movs	r1, r3
								responseStatus =BOS_OK;
 8009572:	7013      	strb	r3, [r2, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8009574:	6800      	ldr	r0, [r0, #0]
 8009576:	001a      	movs	r2, r3
 8009578:	f005 fd7e 	bl	800f078 <xTaskGenericNotify>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800957c:	4653      	mov	r3, sl
 800957e:	5dda      	ldrb	r2, [r3, r7]
 8009580:	f7ff fa15 	bl	80089ae <PxMessagingTask+0x1f2>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009584:	4b7a      	ldr	r3, [pc, #488]	; (8009770 <PxMessagingTask+0xfb4>)
 8009586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009588:	881c      	ldrh	r4, [r3, #0]
 800958a:	4b7b      	ldr	r3, [pc, #492]	; (8009778 <PxMessagingTask+0xfbc>)
 800958c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800958e:	1918      	adds	r0, r3, r4
 8009590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009592:	002a      	movs	r2, r5
 8009594:	469c      	mov	ip, r3
 8009596:	4b6b      	ldr	r3, [pc, #428]	; (8009744 <PxMessagingTask+0xf88>)
 8009598:	4461      	add	r1, ip
 800959a:	469c      	mov	ip, r3
 800959c:	4461      	add	r1, ip
 800959e:	f009 fdf5 	bl	801318c <memcpy>
								longMessageLastPtr +=numOfParams;
 80095a2:	46ac      	mov	ip, r5
 80095a4:	4464      	add	r4, ip
 80095a6:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80095a8:	2116      	movs	r1, #22
 80095aa:	0020      	movs	r0, r4
 80095ac:	f7f6 fdd0 	bl	8000150 <__udivsi3>
 80095b0:	4b72      	ldr	r3, [pc, #456]	; (800977c <PxMessagingTask+0xfc0>)
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 80095b2:	0022      	movs	r2, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80095b4:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 80095b6:	4970      	ldr	r1, [pc, #448]	; (8009778 <PxMessagingTask+0xfbc>)
 80095b8:	4871      	ldr	r0, [pc, #452]	; (8009780 <PxMessagingTask+0xfc4>)
 80095ba:	f009 fde7 	bl	801318c <memcpy>
								longMessageLastPtr =0;
 80095be:	4b6c      	ldr	r3, [pc, #432]	; (8009770 <PxMessagingTask+0xfb4>)
 80095c0:	9a04      	ldr	r2, [sp, #16]
 80095c2:	801a      	strh	r2, [r3, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80095c4:	4653      	mov	r3, sl
 80095c6:	5dda      	ldrb	r2, [r3, r7]
 80095c8:	f7ff f9f1 	bl	80089ae <PxMessagingTask+0x1f2>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80095cc:	4642      	mov	r2, r8
 80095ce:	4353      	muls	r3, r2
 80095d0:	4a6c      	ldr	r2, [pc, #432]	; (8009784 <PxMessagingTask+0xfc8>)
 80095d2:	486d      	ldr	r0, [pc, #436]	; (8009788 <PxMessagingTask+0xfcc>)
 80095d4:	4694      	mov	ip, r2
 80095d6:	496d      	ldr	r1, [pc, #436]	; (800978c <PxMessagingTask+0xfd0>)
 80095d8:	4642      	mov	r2, r8
 80095da:	4463      	add	r3, ip
 80095dc:	3040      	adds	r0, #64	; 0x40
 80095de:	f009 ffcf 	bl	8013580 <sprintf>
 80095e2:	e553      	b.n	800908c <PxMessagingTask+0x8d0>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80095e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095e6:	1da3      	adds	r3, r4, #6
 80095e8:	5cce      	ldrb	r6, [r1, r3]
 80095ea:	1de3      	adds	r3, r4, #7
 80095ec:	5ccb      	ldrb	r3, [r1, r3]
 80095ee:	0636      	lsls	r6, r6, #24
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	18f6      	adds	r6, r6, r3
 80095f4:	0023      	movs	r3, r4
 80095f6:	3309      	adds	r3, #9
 80095f8:	5ccb      	ldrb	r3, [r1, r3]
 80095fa:	18f6      	adds	r6, r6, r3
 80095fc:	0023      	movs	r3, r4
 80095fe:	3308      	adds	r3, #8
 8009600:	5ccb      	ldrb	r3, [r1, r3]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	18f6      	adds	r6, r6, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009606:	23e0      	movs	r3, #224	; 0xe0
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	18f2      	adds	r2, r6, r3
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	021b      	lsls	r3, r3, #8
 8009610:	429a      	cmp	r2, r3
 8009612:	d300      	bcc.n	8009616 <PxMessagingTask+0xe5a>
 8009614:	e0d2      	b.n	80097bc <PxMessagingTask+0x1000>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 8009616:	1d63      	adds	r3, r4, #5
 8009618:	5ccb      	ldrb	r3, [r1, r3]
 800961a:	3b01      	subs	r3, #1
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b07      	cmp	r3, #7
 8009620:	d901      	bls.n	8009626 <PxMessagingTask+0xe6a>
 8009622:	f7ff fbb8 	bl	8008d96 <PxMessagingTask+0x5da>
 8009626:	4a5a      	ldr	r2, [pc, #360]	; (8009790 <PxMessagingTask+0xfd4>)
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	58d3      	ldr	r3, [r2, r3]
 800962c:	469f      	mov	pc, r3
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d001      	beq.n	8009638 <PxMessagingTask+0xe7c>
 8009634:	f7ff f9e9 	bl	8008a0a <PxMessagingTask+0x24e>
								messageParams[0] =0; /* change own ID */
 8009638:	2500      	movs	r5, #0
 800963a:	4b44      	ldr	r3, [pc, #272]	; (800974c <PxMessagingTask+0xf90>)
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800963c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
								messageParams[0] =0; /* change own ID */
 800963e:	701d      	strb	r5, [r3, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009640:	1d63      	adds	r3, r4, #5
 8009642:	5cd3      	ldrb	r3, [r2, r3]
 8009644:	4941      	ldr	r1, [pc, #260]	; (800974c <PxMessagingTask+0xf90>)
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8009646:	3406      	adds	r4, #6
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8009648:	704b      	strb	r3, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800964a:	2303      	movs	r3, #3
 800964c:	5d10      	ldrb	r0, [r2, r4]
 800964e:	0029      	movs	r1, r5
 8009650:	002a      	movs	r2, r5
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	330d      	adds	r3, #13
 8009656:	f7fe fb6f 	bl	8007d38 <SendMessageFromPort>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800965a:	4653      	mov	r3, sl
 800965c:	9504      	str	r5, [sp, #16]
 800965e:	5dda      	ldrb	r2, [r3, r7]
 8009660:	f7ff f9a5 	bl	80089ae <PxMessagingTask+0x1f2>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8009664:	0023      	movs	r3, r4
 8009666:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009668:	3312      	adds	r3, #18
 800966a:	5cd3      	ldrb	r3, [r2, r3]
 800966c:	930c      	str	r3, [sp, #48]	; 0x30
 800966e:	2b00      	cmp	r3, #0
 8009670:	d100      	bne.n	8009674 <PxMessagingTask+0xeb8>
 8009672:	e4b7      	b.n	8008fe4 <PxMessagingTask+0x828>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009676:	340c      	adds	r4, #12
 8009678:	5d18      	ldrb	r0, [r3, r4]
 800967a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800967c:	002a      	movs	r2, r5
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	f7fe fa66 	bl	8007b54 <SetupDMAStreams>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009688:	4653      	mov	r3, sl
 800968a:	5dda      	ldrb	r2, [r3, r7]
 800968c:	2300      	movs	r3, #0
 800968e:	930c      	str	r3, [sp, #48]	; 0x30
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	f7ff f98c 	bl	80089ae <PxMessagingTask+0x1f2>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009696:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009698:	1da3      	adds	r3, r4, #6
 800969a:	1de2      	adds	r2, r4, #7
 800969c:	5cc3      	ldrb	r3, [r0, r3]
 800969e:	5c82      	ldrb	r2, [r0, r2]
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	0412      	lsls	r2, r2, #16
 80096a4:	189b      	adds	r3, r3, r2
 80096a6:	1d62      	adds	r2, r4, #5
 80096a8:	b2d1      	uxtb	r1, r2
 80096aa:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80096ac:	0026      	movs	r6, r4
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096ae:	185b      	adds	r3, r3, r1
 80096b0:	0021      	movs	r1, r4
 80096b2:	3108      	adds	r1, #8
 80096b4:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80096b6:	360b      	adds	r6, #11
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096b8:	0609      	lsls	r1, r1, #24
 80096ba:	185b      	adds	r3, r3, r1
 80096bc:	4920      	ldr	r1, [pc, #128]	; (8009740 <PxMessagingTask+0xf84>)
 80096be:	664b      	str	r3, [r1, #100]	; 0x64
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80096c0:	230a      	movs	r3, #10
 80096c2:	469c      	mov	ip, r3
 80096c4:	44a4      	add	ip, r4
 80096c6:	4663      	mov	r3, ip
 80096c8:	b2f1      	uxtb	r1, r6
 80096ca:	930a      	str	r3, [sp, #40]	; 0x28
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	5cc3      	ldrb	r3, [r0, r3]
 80096d0:	5c41      	ldrb	r1, [r0, r1]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	0409      	lsls	r1, r1, #16
 80096d6:	185b      	adds	r3, r3, r1
 80096d8:	2109      	movs	r1, #9
 80096da:	468c      	mov	ip, r1
 80096dc:	44a4      	add	ip, r4
 80096de:	4661      	mov	r1, ip
 80096e0:	9104      	str	r1, [sp, #16]
 80096e2:	b2c9      	uxtb	r1, r1
 80096e4:	5c41      	ldrb	r1, [r0, r1]
 80096e6:	185b      	adds	r3, r3, r1
 80096e8:	210c      	movs	r1, #12
 80096ea:	4688      	mov	r8, r1
 80096ec:	44a0      	add	r8, r4
 80096ee:	4641      	mov	r1, r8
 80096f0:	b2c9      	uxtb	r1, r1
 80096f2:	5c41      	ldrb	r1, [r0, r1]
 80096f4:	0609      	lsls	r1, r1, #24
 80096f6:	185b      	adds	r3, r3, r1
 80096f8:	4911      	ldr	r1, [pc, #68]	; (8009740 <PxMessagingTask+0xf84>)
 80096fa:	668b      	str	r3, [r1, #104]	; 0x68
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80096fc:	230e      	movs	r3, #14
 80096fe:	469c      	mov	ip, r3
 8009700:	210f      	movs	r1, #15
 8009702:	44a4      	add	ip, r4
 8009704:	4663      	mov	r3, ip
 8009706:	468c      	mov	ip, r1
 8009708:	44a4      	add	ip, r4
 800970a:	4661      	mov	r1, ip
 800970c:	930f      	str	r3, [sp, #60]	; 0x3c
 800970e:	9110      	str	r1, [sp, #64]	; 0x40
 8009710:	b2db      	uxtb	r3, r3
 8009712:	b2c9      	uxtb	r1, r1
 8009714:	5cc3      	ldrb	r3, [r0, r3]
 8009716:	5c41      	ldrb	r1, [r0, r1]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	0409      	lsls	r1, r1, #16
 800971c:	185b      	adds	r3, r3, r1
 800971e:	210d      	movs	r1, #13
 8009720:	468c      	mov	ip, r1
 8009722:	44a4      	add	ip, r4
 8009724:	4661      	mov	r1, ip
 8009726:	910e      	str	r1, [sp, #56]	; 0x38
 8009728:	b2c9      	uxtb	r1, r1
 800972a:	5c41      	ldrb	r1, [r0, r1]
 800972c:	3410      	adds	r4, #16
 800972e:	185b      	adds	r3, r3, r1
 8009730:	b2e1      	uxtb	r1, r4
 8009732:	5c41      	ldrb	r1, [r0, r1]
 8009734:	0609      	lsls	r1, r1, #24
 8009736:	185b      	adds	r3, r3, r1
 8009738:	4901      	ldr	r1, [pc, #4]	; (8009740 <PxMessagingTask+0xf84>)
 800973a:	66cb      	str	r3, [r1, #108]	; 0x6c
									break;
 800973c:	f7ff f999 	bl	8008a72 <PxMessagingTask+0x2b6>
 8009740:	20001fcc 	.word	0x20001fcc
 8009744:	20000d40 	.word	0x20000d40
 8009748:	20000c60 	.word	0x20000c60
 800974c:	20000b74 	.word	0x20000b74
 8009750:	20000c74 	.word	0x20000c74
 8009754:	20000c78 	.word	0x20000c78
 8009758:	200011ef 	.word	0x200011ef
 800975c:	200011ee 	.word	0x200011ee
 8009760:	0801a6a4 	.word	0x0801a6a4
 8009764:	2000204c 	.word	0x2000204c
 8009768:	20000c80 	.word	0x20000c80
 800976c:	080197a4 	.word	0x080197a4
 8009770:	20000cfa 	.word	0x20000cfa
 8009774:	20001ed4 	.word	0x20001ed4
 8009778:	20002068 	.word	0x20002068
 800977c:	20000008 	.word	0x20000008
 8009780:	20000f84 	.word	0x20000f84
 8009784:	20000e74 	.word	0x20000e74
 8009788:	20001f4c 	.word	0x20001f4c
 800978c:	0801b17c 	.word	0x0801b17c
 8009790:	080197c4 	.word	0x080197c4
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 8009794:	1e5d      	subs	r5, r3, #1
 8009796:	4bef      	ldr	r3, [pc, #956]	; (8009b54 <PxMessagingTask+0x1398>)
 8009798:	00ad      	lsls	r5, r5, #2
 800979a:	595a      	ldr	r2, [r3, r5]
 800979c:	4bee      	ldr	r3, [pc, #952]	; (8009b58 <PxMessagingTask+0x139c>)
 800979e:	0c10      	lsrs	r0, r2, #16
 80097a0:	469c      	mov	ip, r3
									switch(cMessage[port - 1][1 + shift]) // requested format
 80097a2:	1d63      	adds	r3, r4, #5
 80097a4:	5cce      	ldrb	r6, [r1, r3]
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	1e73      	subs	r3, r6, #1
 80097aa:	b2db      	uxtb	r3, r3
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE+0x10000; // Get var memory addres
 80097ac:	4460      	add	r0, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80097ae:	2b07      	cmp	r3, #7
 80097b0:	d900      	bls.n	80097b4 <PxMessagingTask+0xff8>
 80097b2:	e0e1      	b.n	8009978 <PxMessagingTask+0x11bc>
 80097b4:	49e9      	ldr	r1, [pc, #932]	; (8009b5c <PxMessagingTask+0x13a0>)
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	58cb      	ldr	r3, [r1, r3]
 80097ba:	469f      	mov	pc, r3
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80097bc:	23f8      	movs	r3, #248	; 0xf8
 80097be:	2280      	movs	r2, #128	; 0x80
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	18f3      	adds	r3, r6, r3
 80097c4:	0292      	lsls	r2, r2, #10
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d200      	bcs.n	80097cc <PxMessagingTask+0x1010>
 80097ca:	e2c5      	b.n	8009d58 <PxMessagingTask+0x159c>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 80097cc:	2315      	movs	r3, #21
 80097ce:	4ae4      	ldr	r2, [pc, #912]	; (8009b60 <PxMessagingTask+0x13a4>)
 80097d0:	7013      	strb	r3, [r2, #0]
 80097d2:	f7ff fae0 	bl	8008d96 <PxMessagingTask+0x5da>
										messageParams[0] =*(__IO int8_t* )temp32;
 80097d6:	4ae3      	ldr	r2, [pc, #908]	; (8009b64 <PxMessagingTask+0x13a8>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	7013      	strb	r3, [r2, #0]
										SendMessageToModule(src,
 80097dc:	2201      	movs	r2, #1
									SendMessageToModule(src,
 80097de:	211f      	movs	r1, #31
 80097e0:	4640      	mov	r0, r8
 80097e2:	f7fe fd19 	bl	8008218 <SendMessageToModule>
 80097e6:	f7ff f98b 	bl	8008b00 <PxMessagingTask+0x344>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 80097ea:	0021      	movs	r1, r4
 80097ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80097ee:	310c      	adds	r1, #12
 80097f0:	5c40      	ldrb	r0, [r0, r1]
 80097f2:	9200      	str	r2, [sp, #0]
 80097f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80097f6:	002a      	movs	r2, r5
 80097f8:	f7fe f9ac 	bl	8007b54 <SetupDMAStreams>
 80097fc:	f7ff fbb7 	bl	8008f6e <PxMessagingTask+0x7b2>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8009800:	3101      	adds	r1, #1
 8009802:	5c70      	ldrb	r0, [r6, r1]
 8009804:	9200      	str	r2, [sp, #0]
 8009806:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009808:	002a      	movs	r2, r5
 800980a:	f7fe f9a3 	bl	8007b54 <SetupDMAStreams>
 800980e:	f7ff fba2 	bl	8008f56 <PxMessagingTask+0x79a>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009814:	1d60      	adds	r0, r4, #5
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009816:	469c      	mov	ip, r3
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800981a:	4462      	add	r2, ip
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800981c:	469c      	mov	ip, r3
 800981e:	4bd2      	ldr	r3, [pc, #840]	; (8009b68 <PxMessagingTask+0x13ac>)
 8009820:	4460      	add	r0, ip
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009822:	2500      	movs	r5, #0
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009824:	469c      	mov	ip, r3
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009826:	3a01      	subs	r2, #1
 8009828:	7015      	strb	r5, [r2, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800982a:	4460      	add	r0, ip
 800982c:	f7fa f800 	bl	8003830 <IsModuleParameter>
 8009830:	900c      	str	r0, [sp, #48]	; 0x30
								if(temp == 0){ // Parameter does not exist
 8009832:	42a8      	cmp	r0, r5
 8009834:	d100      	bne.n	8009838 <PxMessagingTask+0x107c>
 8009836:	e16d      	b.n	8009b14 <PxMessagingTask+0x1358>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009838:	220c      	movs	r2, #12
									messageParams[0] =modParam[temp - 1].paramFormat;
 800983a:	49cc      	ldr	r1, [pc, #816]	; (8009b6c <PxMessagingTask+0x13b0>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800983c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
									messageParams[0] =modParam[temp - 1].paramFormat;
 800983e:	468c      	mov	ip, r1
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009840:	3b01      	subs	r3, #1
 8009842:	435a      	muls	r2, r3
 8009844:	4bc9      	ldr	r3, [pc, #804]	; (8009b6c <PxMessagingTask+0x13b0>)
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009846:	49c7      	ldr	r1, [pc, #796]	; (8009b64 <PxMessagingTask+0x13a8>)
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009848:	589b      	ldr	r3, [r3, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800984a:	4462      	add	r2, ip
 800984c:	7912      	ldrb	r2, [r2, #4]
 800984e:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009850:	3a01      	subs	r2, #1
 8009852:	b2d2      	uxtb	r2, r2
 8009854:	2a07      	cmp	r2, #7
 8009856:	d900      	bls.n	800985a <PxMessagingTask+0x109e>
 8009858:	e384      	b.n	8009f64 <PxMessagingTask+0x17a8>
 800985a:	49c5      	ldr	r1, [pc, #788]	; (8009b70 <PxMessagingTask+0x13b4>)
 800985c:	0092      	lsls	r2, r2, #2
 800985e:	588a      	ldr	r2, [r1, r2]
 8009860:	4697      	mov	pc, r2
								for(p =1; p <= NumOfPorts; p++){
 8009862:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 8009864:	0020      	movs	r0, r4
								for(p =1; p <= NumOfPorts; p++){
 8009866:	3401      	adds	r4, #1
									UpdateBaudrate(p,temp32);
 8009868:	0029      	movs	r1, r5
								for(p =1; p <= NumOfPorts; p++){
 800986a:	b2e4      	uxtb	r4, r4
									UpdateBaudrate(p,temp32);
 800986c:	f003 ff4c 	bl	800d708 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8009870:	2c06      	cmp	r4, #6
 8009872:	d1f7      	bne.n	8009864 <PxMessagingTask+0x10a8>
 8009874:	e708      	b.n	8009688 <PxMessagingTask+0xecc>
								temp =cMessage[port - 1][13 + shift];
 8009876:	3302      	adds	r3, #2
 8009878:	469c      	mov	ip, r3
 800987a:	44a4      	add	ip, r4
 800987c:	4663      	mov	r3, ip
 800987e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009880:	9304      	str	r3, [sp, #16]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	5cd3      	ldrb	r3, [r2, r3]
							if(numOfParams == 17)
 8009886:	f7ff fb2b 	bl	8008ee0 <PxMessagingTask+0x724>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800988a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800988e:	1a9a      	subs	r2, r3, r2
 8009890:	3a02      	subs	r2, #2
 8009892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009896:	469c      	mov	ip, r3
 8009898:	4bb3      	ldr	r3, [pc, #716]	; (8009b68 <PxMessagingTask+0x13ac>)
 800989a:	4461      	add	r1, ip
 800989c:	469c      	mov	ip, r3
 800989e:	4461      	add	r1, ip
 80098a0:	f009 fc74 	bl	801318c <memcpy>
 80098a4:	e579      	b.n	800939a <PxMessagingTask+0xbde>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098a8:	1da3      	adds	r3, r4, #6
 80098aa:	1de2      	adds	r2, r4, #7
 80098ac:	5cc3      	ldrb	r3, [r0, r3]
 80098ae:	5c82      	ldrb	r2, [r0, r2]
 80098b0:	021b      	lsls	r3, r3, #8
 80098b2:	0412      	lsls	r2, r2, #16
 80098b4:	189b      	adds	r3, r3, r2
 80098b6:	1d62      	adds	r2, r4, #5
 80098b8:	b2d1      	uxtb	r1, r2
 80098ba:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098bc:	0026      	movs	r6, r4
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098be:	185b      	adds	r3, r3, r1
 80098c0:	0021      	movs	r1, r4
 80098c2:	3108      	adds	r1, #8
 80098c4:	5c41      	ldrb	r1, [r0, r1]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098c6:	360b      	adds	r6, #11
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80098c8:	0609      	lsls	r1, r1, #24
 80098ca:	185b      	adds	r3, r3, r1
 80098cc:	49a9      	ldr	r1, [pc, #676]	; (8009b74 <PxMessagingTask+0x13b8>)
 80098ce:	670b      	str	r3, [r1, #112]	; 0x70
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80098d0:	230a      	movs	r3, #10
 80098d2:	469c      	mov	ip, r3
 80098d4:	44a4      	add	ip, r4
 80098d6:	4663      	mov	r3, ip
 80098d8:	b2f1      	uxtb	r1, r6
 80098da:	930a      	str	r3, [sp, #40]	; 0x28
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	5cc3      	ldrb	r3, [r0, r3]
 80098e0:	5c41      	ldrb	r1, [r0, r1]
 80098e2:	021b      	lsls	r3, r3, #8
 80098e4:	0409      	lsls	r1, r1, #16
 80098e6:	185b      	adds	r3, r3, r1
 80098e8:	2109      	movs	r1, #9
 80098ea:	468c      	mov	ip, r1
 80098ec:	44a4      	add	ip, r4
 80098ee:	4661      	mov	r1, ip
 80098f0:	9104      	str	r1, [sp, #16]
 80098f2:	b2c9      	uxtb	r1, r1
 80098f4:	5c41      	ldrb	r1, [r0, r1]
 80098f6:	185b      	adds	r3, r3, r1
 80098f8:	210c      	movs	r1, #12
 80098fa:	4688      	mov	r8, r1
 80098fc:	44a0      	add	r8, r4
 80098fe:	4641      	mov	r1, r8
 8009900:	b2c9      	uxtb	r1, r1
 8009902:	5c41      	ldrb	r1, [r0, r1]
 8009904:	0609      	lsls	r1, r1, #24
 8009906:	185b      	adds	r3, r3, r1
 8009908:	499a      	ldr	r1, [pc, #616]	; (8009b74 <PxMessagingTask+0x13b8>)
 800990a:	674b      	str	r3, [r1, #116]	; 0x74
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800990c:	230e      	movs	r3, #14
 800990e:	469c      	mov	ip, r3
 8009910:	210f      	movs	r1, #15
 8009912:	44a4      	add	ip, r4
 8009914:	4663      	mov	r3, ip
 8009916:	468c      	mov	ip, r1
 8009918:	44a4      	add	ip, r4
 800991a:	4661      	mov	r1, ip
 800991c:	930f      	str	r3, [sp, #60]	; 0x3c
 800991e:	9110      	str	r1, [sp, #64]	; 0x40
 8009920:	b2db      	uxtb	r3, r3
 8009922:	b2c9      	uxtb	r1, r1
 8009924:	5cc3      	ldrb	r3, [r0, r3]
 8009926:	5c41      	ldrb	r1, [r0, r1]
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	0409      	lsls	r1, r1, #16
 800992c:	185b      	adds	r3, r3, r1
 800992e:	210d      	movs	r1, #13
 8009930:	468c      	mov	ip, r1
 8009932:	44a4      	add	ip, r4
 8009934:	4661      	mov	r1, ip
 8009936:	910e      	str	r1, [sp, #56]	; 0x38
 8009938:	b2c9      	uxtb	r1, r1
 800993a:	5c41      	ldrb	r1, [r0, r1]
 800993c:	3410      	adds	r4, #16
 800993e:	185b      	adds	r3, r3, r1
 8009940:	b2e1      	uxtb	r1, r4
 8009942:	5c41      	ldrb	r1, [r0, r1]
 8009944:	0609      	lsls	r1, r1, #24
 8009946:	185b      	adds	r3, r3, r1
 8009948:	498a      	ldr	r1, [pc, #552]	; (8009b74 <PxMessagingTask+0x13b8>)
 800994a:	678b      	str	r3, [r1, #120]	; 0x78
									break;
 800994c:	f7ff f891 	bl	8008a72 <PxMessagingTask+0x2b6>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009950:	0713      	lsls	r3, r2, #28
 8009952:	d100      	bne.n	8009956 <PxMessagingTask+0x119a>
 8009954:	e292      	b.n	8009e7c <PxMessagingTask+0x16c0>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009958:	1de3      	adds	r3, r4, #7
 800995a:	5ccb      	ldrb	r3, [r1, r3]
 800995c:	1da2      	adds	r2, r4, #6
 800995e:	5c8a      	ldrb	r2, [r1, r2]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	189b      	adds	r3, r3, r2
 8009964:	0022      	movs	r2, r4
 8009966:	3208      	adds	r2, #8
 8009968:	5c8a      	ldrb	r2, [r1, r2]
 800996a:	0412      	lsls	r2, r2, #16
 800996c:	3409      	adds	r4, #9
 800996e:	189b      	adds	r3, r3, r2
 8009970:	5d0a      	ldrb	r2, [r1, r4]
 8009972:	0612      	lsls	r2, r2, #24
 8009974:	189b      	adds	r3, r3, r2
 8009976:	6003      	str	r3, [r0, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800997a:	9804      	ldr	r0, [sp, #16]
 800997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997e:	4a75      	ldr	r2, [pc, #468]	; (8009b54 <PxMessagingTask+0x1398>)
 8009980:	5ccb      	ldrb	r3, [r1, r3]
 8009982:	5c09      	ldrb	r1, [r1, r0]
 8009984:	200f      	movs	r0, #15
 8009986:	3b01      	subs	r3, #1
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	58d2      	ldr	r2, [r2, r3]
 800998c:	4010      	ands	r0, r2
 800998e:	4288      	cmp	r0, r1
 8009990:	d101      	bne.n	8009996 <PxMessagingTask+0x11da>
 8009992:	f7ff fa00 	bl	8008d96 <PxMessagingTask+0x5da>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009996:	4878      	ldr	r0, [pc, #480]	; (8009b78 <PxMessagingTask+0x13bc>)
 8009998:	4684      	mov	ip, r0
 800999a:	4461      	add	r1, ip
 800999c:	400a      	ands	r2, r1
 800999e:	496d      	ldr	r1, [pc, #436]	; (8009b54 <PxMessagingTask+0x1398>)
 80099a0:	50ca      	str	r2, [r1, r3]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 80099a2:	2314      	movs	r3, #20
 80099a4:	4a6e      	ldr	r2, [pc, #440]	; (8009b60 <PxMessagingTask+0x13a4>)
 80099a6:	7013      	strb	r3, [r2, #0]
 80099a8:	f7ff f9f5 	bl	8008d96 <PxMessagingTask+0x5da>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80099ac:	2a01      	cmp	r2, #1
 80099ae:	d900      	bls.n	80099b2 <PxMessagingTask+0x11f6>
 80099b0:	e557      	b.n	8009462 <PxMessagingTask+0xca6>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 80099b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b6:	5c9b      	ldrb	r3, [r3, r2]
 80099b8:	4a70      	ldr	r2, [pc, #448]	; (8009b7c <PxMessagingTask+0x13c0>)
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 80099be:	2b08      	cmp	r3, #8
 80099c0:	d900      	bls.n	80099c4 <PxMessagingTask+0x1208>
 80099c2:	e54e      	b.n	8009462 <PxMessagingTask+0xca6>
 80099c4:	4a6e      	ldr	r2, [pc, #440]	; (8009b80 <PxMessagingTask+0x13c4>)
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	58d3      	ldr	r3, [r2, r3]
 80099ca:	469f      	mov	pc, r3
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80099cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80099ce:	1da3      	adds	r3, r4, #6
 80099d0:	1de2      	adds	r2, r4, #7
 80099d2:	5cc3      	ldrb	r3, [r0, r3]
 80099d4:	5c82      	ldrb	r2, [r0, r2]
 80099d6:	021b      	lsls	r3, r3, #8
 80099d8:	0412      	lsls	r2, r2, #16
 80099da:	189b      	adds	r3, r3, r2
 80099dc:	1d62      	adds	r2, r4, #5
 80099de:	b2d1      	uxtb	r1, r2
 80099e0:	5c41      	ldrb	r1, [r0, r1]
 80099e2:	185b      	adds	r3, r3, r1
 80099e4:	0021      	movs	r1, r4
 80099e6:	3108      	adds	r1, #8
 80099e8:	5c41      	ldrb	r1, [r0, r1]
 80099ea:	0609      	lsls	r1, r1, #24
 80099ec:	185b      	adds	r3, r3, r1
 80099ee:	4961      	ldr	r1, [pc, #388]	; (8009b74 <PxMessagingTask+0x13b8>)
 80099f0:	67cb      	str	r3, [r1, #124]	; 0x7c
 80099f2:	f7ff f81f 	bl	8008a34 <PxMessagingTask+0x278>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 80099f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f8:	3a01      	subs	r2, #1
 80099fa:	e74a      	b.n	8009892 <PxMessagingTask+0x10d6>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 80099fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099fe:	1da3      	adds	r3, r4, #6
 8009a00:	5cd3      	ldrb	r3, [r2, r3]
 8009a02:	3405      	adds	r4, #5
 8009a04:	5d12      	ldrb	r2, [r2, r4]
 8009a06:	021b      	lsls	r3, r3, #8
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009a08:	189b      	adds	r3, r3, r2
 8009a0a:	4a5e      	ldr	r2, [pc, #376]	; (8009b84 <PxMessagingTask+0x13c8>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	17db      	asrs	r3, r3, #31
 8009a10:	6053      	str	r3, [r2, #4]
										break;
 8009a12:	e526      	b.n	8009462 <PxMessagingTask+0xca6>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009a14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a16:	1da3      	adds	r3, r4, #6
 8009a18:	1de2      	adds	r2, r4, #7
 8009a1a:	5ccb      	ldrb	r3, [r1, r3]
 8009a1c:	5c8a      	ldrb	r2, [r1, r2]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	0412      	lsls	r2, r2, #16
 8009a22:	189b      	adds	r3, r3, r2
 8009a24:	1d62      	adds	r2, r4, #5
 8009a26:	5c8a      	ldrb	r2, [r1, r2]
 8009a28:	3408      	adds	r4, #8
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	5d0a      	ldrb	r2, [r1, r4]
 8009a2e:	0612      	lsls	r2, r2, #24
 8009a30:	189b      	adds	r3, r3, r2
 8009a32:	4a54      	ldr	r2, [pc, #336]	; (8009b84 <PxMessagingTask+0x13c8>)
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	2300      	movs	r3, #0
 8009a38:	6053      	str	r3, [r2, #4]
										break;
 8009a3a:	e512      	b.n	8009462 <PxMessagingTask+0xca6>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3e:	3405      	adds	r4, #5
 8009a40:	5d1b      	ldrb	r3, [r3, r4]
 8009a42:	4a50      	ldr	r2, [pc, #320]	; (8009b84 <PxMessagingTask+0x13c8>)
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	2300      	movs	r3, #0
 8009a48:	6053      	str	r3, [r2, #4]
										break;
 8009a4a:	e50a      	b.n	8009462 <PxMessagingTask+0xca6>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009a4c:	881a      	ldrh	r2, [r3, #0]
 8009a4e:	4945      	ldr	r1, [pc, #276]	; (8009b64 <PxMessagingTask+0x13a8>)
 8009a50:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009a52:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009a54:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009a56:	0a1b      	lsrs	r3, r3, #8
 8009a58:	704b      	strb	r3, [r1, #1]
										SendMessageToModule(src,
 8009a5a:	e6c0      	b.n	80097de <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009a5c:	881a      	ldrh	r2, [r3, #0]
 8009a5e:	4941      	ldr	r1, [pc, #260]	; (8009b64 <PxMessagingTask+0x13a8>)
 8009a60:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009a62:	881b      	ldrh	r3, [r3, #0]
										SendMessageToModule(src,
 8009a64:	2202      	movs	r2, #2
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009a66:	b21b      	sxth	r3, r3
 8009a68:	121b      	asrs	r3, r3, #8
 8009a6a:	704b      	strb	r3, [r1, #1]
										SendMessageToModule(src,
 8009a6c:	e6b7      	b.n	80097de <PxMessagingTask+0x1022>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009a6e:	781a      	ldrb	r2, [r3, #0]
 8009a70:	493c      	ldr	r1, [pc, #240]	; (8009b64 <PxMessagingTask+0x13a8>)
 8009a72:	700a      	strb	r2, [r1, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009a74:	785a      	ldrb	r2, [r3, #1]
 8009a76:	704a      	strb	r2, [r1, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009a78:	789a      	ldrb	r2, [r3, #2]
 8009a7a:	708a      	strb	r2, [r1, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009a7c:	78db      	ldrb	r3, [r3, #3]
										SendMessageToModule(src,
 8009a7e:	2208      	movs	r2, #8
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009a80:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009a82:	e6ac      	b.n	80097de <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	4937      	ldr	r1, [pc, #220]	; (8009b64 <PxMessagingTask+0x13a8>)
 8009a88:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	1212      	asrs	r2, r2, #8
 8009a8e:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	1412      	asrs	r2, r2, #16
 8009a94:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009a96:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009a98:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009a9a:	161b      	asrs	r3, r3, #24
 8009a9c:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009a9e:	e69e      	b.n	80097de <PxMessagingTask+0x1022>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4930      	ldr	r1, [pc, #192]	; (8009b64 <PxMessagingTask+0x13a8>)
 8009aa4:	700a      	strb	r2, [r1, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	0a12      	lsrs	r2, r2, #8
 8009aaa:	704a      	strb	r2, [r1, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	0c12      	lsrs	r2, r2, #16
 8009ab0:	708a      	strb	r2, [r1, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009ab2:	681b      	ldr	r3, [r3, #0]
										SendMessageToModule(src,
 8009ab4:	2204      	movs	r2, #4
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009ab6:	0e1b      	lsrs	r3, r3, #24
 8009ab8:	70cb      	strb	r3, [r1, #3]
										SendMessageToModule(src,
 8009aba:	e690      	b.n	80097de <PxMessagingTask+0x1022>
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009abe:	340a      	adds	r4, #10
 8009ac0:	5d1b      	ldrb	r3, [r3, r4]
 8009ac2:	7033      	strb	r3, [r6, #0]
											break;
 8009ac4:	f7ff f967 	bl	8008d96 <PxMessagingTask+0x5da>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009ac8:	0713      	lsls	r3, r2, #28
 8009aca:	d100      	bne.n	8009ace <PxMessagingTask+0x1312>
 8009acc:	e1ee      	b.n	8009eac <PxMessagingTask+0x16f0>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad0:	3406      	adds	r4, #6
 8009ad2:	5d1b      	ldrb	r3, [r3, r4]
 8009ad4:	7003      	strb	r3, [r0, #0]
 8009ad6:	e74f      	b.n	8009978 <PxMessagingTask+0x11bc>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009ad8:	2310      	movs	r3, #16
 8009ada:	4a21      	ldr	r2, [pc, #132]	; (8009b60 <PxMessagingTask+0x13a4>)
 8009adc:	7013      	strb	r3, [r2, #0]
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009ade:	4653      	mov	r3, sl
 8009ae0:	5dda      	ldrb	r2, [r3, r7]
 8009ae2:	f7fe ff64 	bl	80089ae <PxMessagingTask+0x1f2>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009ae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ae8:	1da3      	adds	r3, r4, #6
 8009aea:	1d62      	adds	r2, r4, #5
 8009aec:	5ccb      	ldrb	r3, [r1, r3]
 8009aee:	5c8a      	ldrb	r2, [r1, r2]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	189b      	adds	r3, r3, r2
 8009af4:	1de2      	adds	r2, r4, #7
 8009af6:	5c8a      	ldrb	r2, [r1, r2]
 8009af8:	3408      	adds	r4, #8
 8009afa:	0412      	lsls	r2, r2, #16
 8009afc:	189b      	adds	r3, r3, r2
 8009afe:	5d0a      	ldrb	r2, [r1, r4]
 8009b00:	0612      	lsls	r2, r2, #24
 8009b02:	e781      	b.n	8009a08 <PxMessagingTask+0x124c>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b06:	3405      	adds	r4, #5
 8009b08:	571b      	ldrsb	r3, [r3, r4]
 8009b0a:	4a1e      	ldr	r2, [pc, #120]	; (8009b84 <PxMessagingTask+0x13c8>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	17db      	asrs	r3, r3, #31
 8009b10:	6053      	str	r3, [r2, #4]
										break;
 8009b12:	e4a6      	b.n	8009462 <PxMessagingTask+0xca6>
									SendMessageToModule(src,
 8009b14:	2201      	movs	r2, #1
 8009b16:	211f      	movs	r1, #31
 8009b18:	4640      	mov	r0, r8
 8009b1a:	f7fe fb7d 	bl	8008218 <SendMessageToModule>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009b1e:	4653      	mov	r3, sl
 8009b20:	5dda      	ldrb	r2, [r3, r7]
 8009b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	f7fe ff42 	bl	80089ae <PxMessagingTask+0x1f2>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009b2a:	0023      	movs	r3, r4
 8009b2c:	0022      	movs	r2, r4
 8009b2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b30:	330b      	adds	r3, #11
 8009b32:	5ccb      	ldrb	r3, [r1, r3]
 8009b34:	320a      	adds	r2, #10
 8009b36:	5c8a      	ldrb	r2, [r1, r2]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	189b      	adds	r3, r3, r2
 8009b3c:	0022      	movs	r2, r4
 8009b3e:	320c      	adds	r2, #12
 8009b40:	5c8a      	ldrb	r2, [r1, r2]
 8009b42:	0412      	lsls	r2, r2, #16
 8009b44:	340d      	adds	r4, #13
 8009b46:	189b      	adds	r3, r3, r2
 8009b48:	5d0a      	ldrb	r2, [r1, r4]
 8009b4a:	0612      	lsls	r2, r2, #24
 8009b4c:	189b      	adds	r3, r3, r2
 8009b4e:	6033      	str	r3, [r6, #0]
											break;
 8009b50:	f7ff f921 	bl	8008d96 <PxMessagingTask+0x5da>
 8009b54:	20000c80 	.word	0x20000c80
 8009b58:	20010000 	.word	0x20010000
 8009b5c:	080197e4 	.word	0x080197e4
 8009b60:	20000c74 	.word	0x20000c74
 8009b64:	20000b74 	.word	0x20000b74
 8009b68:	20000d40 	.word	0x20000d40
 8009b6c:	20000098 	.word	0x20000098
 8009b70:	08019804 	.word	0x08019804
 8009b74:	20001fcc 	.word	0x20001fcc
 8009b78:	0000fff0 	.word	0x0000fff0
 8009b7c:	20000032 	.word	0x20000032
 8009b80:	08019824 	.word	0x08019824
 8009b84:	20000c78 	.word	0x20000c78
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009b88:	0023      	movs	r3, r4
 8009b8a:	0022      	movs	r2, r4
 8009b8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b8e:	330b      	adds	r3, #11
 8009b90:	320c      	adds	r2, #12
 8009b92:	5ccb      	ldrb	r3, [r1, r3]
 8009b94:	5c8a      	ldrb	r2, [r1, r2]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	0412      	lsls	r2, r2, #16
 8009b9a:	189b      	adds	r3, r3, r2
 8009b9c:	0022      	movs	r2, r4
 8009b9e:	320a      	adds	r2, #10
 8009ba0:	5c8a      	ldrb	r2, [r1, r2]
 8009ba2:	e7cf      	b.n	8009b44 <PxMessagingTask+0x1388>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009ba4:	0023      	movs	r3, r4
 8009ba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ba8:	330b      	adds	r3, #11
 8009baa:	5cca      	ldrb	r2, [r1, r3]
 8009bac:	340a      	adds	r4, #10
 8009bae:	5d0b      	ldrb	r3, [r1, r4]
 8009bb0:	0212      	lsls	r2, r2, #8
 8009bb2:	189b      	adds	r3, r3, r2
 8009bb4:	b21b      	sxth	r3, r3
 8009bb6:	8033      	strh	r3, [r6, #0]
											break;
 8009bb8:	f7ff f8ed 	bl	8008d96 <PxMessagingTask+0x5da>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009bbc:	0023      	movs	r3, r4
 8009bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bc0:	330b      	adds	r3, #11
 8009bc2:	5cca      	ldrb	r2, [r1, r3]
 8009bc4:	340a      	adds	r4, #10
 8009bc6:	5d0b      	ldrb	r3, [r1, r4]
 8009bc8:	0212      	lsls	r2, r2, #8
 8009bca:	189b      	adds	r3, r3, r2
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	8033      	strh	r3, [r6, #0]
											break;
 8009bd0:	f7ff f8e1 	bl	8008d96 <PxMessagingTask+0x5da>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009bd4:	0023      	movs	r3, r4
 8009bd6:	0022      	movs	r2, r4
 8009bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bda:	330b      	adds	r3, #11
 8009bdc:	320c      	adds	r2, #12
 8009bde:	5ccb      	ldrb	r3, [r1, r3]
 8009be0:	5c8a      	ldrb	r2, [r1, r2]
 8009be2:	021b      	lsls	r3, r3, #8
 8009be4:	0412      	lsls	r2, r2, #16
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	0022      	movs	r2, r4
 8009bea:	320a      	adds	r2, #10
 8009bec:	5c8a      	ldrb	r2, [r1, r2]
 8009bee:	340d      	adds	r4, #13
 8009bf0:	189b      	adds	r3, r3, r2
 8009bf2:	5d0a      	ldrb	r2, [r1, r4]
 8009bf4:	49de      	ldr	r1, [pc, #888]	; (8009f70 <PxMessagingTask+0x17b4>)
 8009bf6:	0612      	lsls	r2, r2, #24
 8009bf8:	189b      	adds	r3, r3, r2
 8009bfa:	4add      	ldr	r2, [pc, #884]	; (8009f70 <PxMessagingTask+0x17b4>)
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	604a      	str	r2, [r1, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009c02:	6033      	str	r3, [r6, #0]
											break;
 8009c04:	f7ff f8c7 	bl	8008d96 <PxMessagingTask+0x5da>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0a:	340a      	adds	r4, #10
 8009c0c:	571b      	ldrsb	r3, [r3, r4]
 8009c0e:	7033      	strb	r3, [r6, #0]
											break;
 8009c10:	f7ff f8c1 	bl	8008d96 <PxMessagingTask+0x5da>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009c14:	0713      	lsls	r3, r2, #28
 8009c16:	d100      	bne.n	8009c1a <PxMessagingTask+0x145e>
 8009c18:	e15c      	b.n	8009ed4 <PxMessagingTask+0x1718>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c1c:	3406      	adds	r4, #6
 8009c1e:	571b      	ldrsb	r3, [r3, r4]
 8009c20:	7003      	strb	r3, [r0, #0]
 8009c22:	e6a9      	b.n	8009978 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009c24:	0713      	lsls	r3, r2, #28
 8009c26:	d100      	bne.n	8009c2a <PxMessagingTask+0x146e>
 8009c28:	e15e      	b.n	8009ee8 <PxMessagingTask+0x172c>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c2e:	1de3      	adds	r3, r4, #7
 8009c30:	3208      	adds	r2, #8
 8009c32:	5ccb      	ldrb	r3, [r1, r3]
 8009c34:	5c8a      	ldrb	r2, [r1, r2]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	0412      	lsls	r2, r2, #16
 8009c3a:	189b      	adds	r3, r3, r2
 8009c3c:	1da2      	adds	r2, r4, #6
 8009c3e:	5c8a      	ldrb	r2, [r1, r2]
 8009c40:	3409      	adds	r4, #9
 8009c42:	189b      	adds	r3, r3, r2
 8009c44:	5d0a      	ldrb	r2, [r1, r4]
 8009c46:	49ca      	ldr	r1, [pc, #808]	; (8009f70 <PxMessagingTask+0x17b4>)
 8009c48:	0612      	lsls	r2, r2, #24
 8009c4a:	189b      	adds	r3, r3, r2
 8009c4c:	4ac8      	ldr	r2, [pc, #800]	; (8009f70 <PxMessagingTask+0x17b4>)
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	2200      	movs	r2, #0
 8009c52:	604a      	str	r2, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	e68f      	b.n	8009978 <PxMessagingTask+0x11bc>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009c58:	4ac6      	ldr	r2, [pc, #792]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
											SendMessageToModule(src,
 8009c5c:	211f      	movs	r1, #31
											messageParams[1] =*(__IO int8_t* )temp32;
 8009c5e:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src,
 8009c60:	2202      	movs	r2, #2
 8009c62:	f7fe fecf 	bl	8008a04 <PxMessagingTask+0x248>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009c66:	0713      	lsls	r3, r2, #28
 8009c68:	d100      	bne.n	8009c6c <PxMessagingTask+0x14b0>
 8009c6a:	e129      	b.n	8009ec0 <PxMessagingTask+0x1704>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c6e:	1de3      	adds	r3, r4, #7
 8009c70:	5cca      	ldrb	r2, [r1, r3]
 8009c72:	3406      	adds	r4, #6
 8009c74:	5d0b      	ldrb	r3, [r1, r4]
 8009c76:	0212      	lsls	r2, r2, #8
 8009c78:	189b      	adds	r3, r3, r2
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	8003      	strh	r3, [r0, #0]
 8009c7e:	e67b      	b.n	8009978 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009c80:	0713      	lsls	r3, r2, #28
 8009c82:	d100      	bne.n	8009c86 <PxMessagingTask+0x14ca>
 8009c84:	e13a      	b.n	8009efc <PxMessagingTask+0x1740>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c88:	1de3      	adds	r3, r4, #7
 8009c8a:	5cca      	ldrb	r2, [r1, r3]
 8009c8c:	3406      	adds	r4, #6
 8009c8e:	5d0b      	ldrb	r3, [r1, r4]
 8009c90:	0212      	lsls	r2, r2, #8
 8009c92:	189b      	adds	r3, r3, r2
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	8003      	strh	r3, [r0, #0]
 8009c98:	e66e      	b.n	8009978 <PxMessagingTask+0x11bc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009c9a:	0713      	lsls	r3, r2, #28
 8009c9c:	d100      	bne.n	8009ca0 <PxMessagingTask+0x14e4>
 8009c9e:	e0f7      	b.n	8009e90 <PxMessagingTask+0x16d4>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009ca0:	0022      	movs	r2, r4
 8009ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ca4:	1de3      	adds	r3, r4, #7
 8009ca6:	3208      	adds	r2, #8
 8009ca8:	5ccb      	ldrb	r3, [r1, r3]
 8009caa:	5c8a      	ldrb	r2, [r1, r2]
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	0412      	lsls	r2, r2, #16
 8009cb0:	189b      	adds	r3, r3, r2
 8009cb2:	1da2      	adds	r2, r4, #6
 8009cb4:	5c8a      	ldrb	r2, [r1, r2]
 8009cb6:	e659      	b.n	800996c <PxMessagingTask+0x11b0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	49ae      	ldr	r1, [pc, #696]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009cbc:	704b      	strb	r3, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009cbe:	4bae      	ldr	r3, [pc, #696]	; (8009f78 <PxMessagingTask+0x17bc>)
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	708b      	strb	r3, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009cc6:	4bad      	ldr	r3, [pc, #692]	; (8009f7c <PxMessagingTask+0x17c0>)
 8009cc8:	18d3      	adds	r3, r2, r3
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	70cb      	strb	r3, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009cce:	4bac      	ldr	r3, [pc, #688]	; (8009f80 <PxMessagingTask+0x17c4>)
 8009cd0:	469c      	mov	ip, r3
 8009cd2:	4462      	add	r2, ip
 8009cd4:	7813      	ldrb	r3, [r2, #0]
											SendMessageToModule(src,
 8009cd6:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009cd8:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009cda:	211f      	movs	r1, #31
 8009cdc:	f7fe fe92 	bl	8008a04 <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	49a4      	ldr	r1, [pc, #656]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009ce4:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	0a12      	lsrs	r2, r2, #8
 8009cea:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	0c12      	lsrs	r2, r2, #16
 8009cf0:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009cf2:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009cf4:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009cf6:	0e1b      	lsrs	r3, r3, #24
 8009cf8:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009cfa:	211f      	movs	r1, #31
 8009cfc:	f7fe fe82 	bl	8008a04 <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009d00:	881a      	ldrh	r2, [r3, #0]
 8009d02:	499c      	ldr	r1, [pc, #624]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009d04:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009d06:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 8009d08:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009d0a:	b21b      	sxth	r3, r3
 8009d0c:	121b      	asrs	r3, r3, #8
 8009d0e:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 8009d10:	211f      	movs	r1, #31
 8009d12:	f7fe fe77 	bl	8008a04 <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009d16:	881a      	ldrh	r2, [r3, #0]
 8009d18:	4996      	ldr	r1, [pc, #600]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009d1a:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009d1c:	881b      	ldrh	r3, [r3, #0]
											SendMessageToModule(src,
 8009d1e:	2203      	movs	r2, #3
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009d20:	0a1b      	lsrs	r3, r3, #8
 8009d22:	708b      	strb	r3, [r1, #2]
											SendMessageToModule(src,
 8009d24:	211f      	movs	r1, #31
 8009d26:	f7fe fe6d 	bl	8008a04 <PxMessagingTask+0x248>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	4991      	ldr	r1, [pc, #580]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009d2e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	1212      	asrs	r2, r2, #8
 8009d34:	708a      	strb	r2, [r1, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	1412      	asrs	r2, r2, #16
 8009d3a:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009d3c:	681b      	ldr	r3, [r3, #0]
											SendMessageToModule(src,
 8009d3e:	2205      	movs	r2, #5
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009d40:	161b      	asrs	r3, r3, #24
 8009d42:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009d44:	211f      	movs	r1, #31
 8009d46:	f7fe fe5d 	bl	8008a04 <PxMessagingTask+0x248>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009d4a:	4653      	mov	r3, sl
 8009d4c:	5dda      	ldrb	r2, [r3, r7]
							temp =temp32 =0;
 8009d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d50:	930c      	str	r3, [sp, #48]	; 0x30
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	f7fe fe2b 	bl	80089ae <PxMessagingTask+0x1f2>
									HAL_FLASH_Unlock();
 8009d58:	f006 ffa0 	bl	8010c9c <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009d5c:	2d22      	cmp	r5, #34	; 0x22
 8009d5e:	d100      	bne.n	8009d62 <PxMessagingTask+0x15a6>
 8009d60:	e0a0      	b.n	8009ea4 <PxMessagingTask+0x16e8>
									if(responseStatus == BOS_OK){
 8009d62:	4b88      	ldr	r3, [pc, #544]	; (8009f84 <PxMessagingTask+0x17c8>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d111      	bne.n	8009d8e <PxMessagingTask+0x15d2>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d6c:	1d63      	adds	r3, r4, #5
 8009d6e:	5cd3      	ldrb	r3, [r2, r3]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b07      	cmp	r3, #7
 8009d76:	d80a      	bhi.n	8009d8e <PxMessagingTask+0x15d2>
 8009d78:	4a83      	ldr	r2, [pc, #524]	; (8009f88 <PxMessagingTask+0x17cc>)
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	58d3      	ldr	r3, [r2, r3]
 8009d7e:	469f      	mov	pc, r3
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009d80:	6833      	ldr	r3, [r6, #0]
 8009d82:	3301      	adds	r3, #1
 8009d84:	d100      	bne.n	8009d88 <PxMessagingTask+0x15cc>
 8009d86:	e109      	b.n	8009f9c <PxMessagingTask+0x17e0>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009d88:	2316      	movs	r3, #22
 8009d8a:	4a7e      	ldr	r2, [pc, #504]	; (8009f84 <PxMessagingTask+0x17c8>)
 8009d8c:	7013      	strb	r3, [r2, #0]
									HAL_FLASH_Lock();
 8009d8e:	f006 ff97 	bl	8010cc0 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <PxMessagingTask+0x15e0>
 8009d98:	f7fe fffd 	bl	8008d96 <PxMessagingTask+0x5da>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009d9c:	2316      	movs	r3, #22
 8009d9e:	4a79      	ldr	r2, [pc, #484]	; (8009f84 <PxMessagingTask+0x17c8>)
 8009da0:	7013      	strb	r3, [r2, #0]
 8009da2:	f7fe fff8 	bl	8008d96 <PxMessagingTask+0x5da>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009da6:	8832      	ldrh	r2, [r6, #0]
 8009da8:	4b78      	ldr	r3, [pc, #480]	; (8009f8c <PxMessagingTask+0x17d0>)
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d1ec      	bne.n	8009d88 <PxMessagingTask+0x15cc>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009dae:	0023      	movs	r3, r4
 8009db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009db2:	330b      	adds	r3, #11
 8009db4:	5cca      	ldrb	r2, [r1, r3]
 8009db6:	340a      	adds	r4, #10
 8009db8:	5d0b      	ldrb	r3, [r1, r4]
 8009dba:	0212      	lsls	r2, r2, #8
 8009dbc:	18d2      	adds	r2, r2, r3
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	496b      	ldr	r1, [pc, #428]	; (8009f70 <PxMessagingTask+0x17b4>)
													status =HAL_FLASH_Program(
 8009dc2:	2001      	movs	r0, #1
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009dc4:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009dc6:	0031      	movs	r1, r6
 8009dc8:	f006 ffc8 	bl	8010d5c <HAL_FLASH_Program>
 8009dcc:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 8009dce:	e7de      	b.n	8009d8e <PxMessagingTask+0x15d2>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009dd0:	8832      	ldrh	r2, [r6, #0]
 8009dd2:	4b6e      	ldr	r3, [pc, #440]	; (8009f8c <PxMessagingTask+0x17d0>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d1d7      	bne.n	8009d88 <PxMessagingTask+0x15cc>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dda:	340a      	adds	r4, #10
 8009ddc:	5d1a      	ldrb	r2, [r3, r4]
 8009dde:	e7ee      	b.n	8009dbe <PxMessagingTask+0x1602>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009de0:	0023      	movs	r3, r4
 8009de2:	4666      	mov	r6, ip
 8009de4:	46c1      	mov	r9, r8
 8009de6:	4688      	mov	r8, r1
 8009de8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009dea:	330c      	adds	r3, #12
 8009dec:	5ce9      	ldrb	r1, [r5, r3]
 8009dee:	20e4      	movs	r0, #228	; 0xe4
 8009df0:	0017      	movs	r7, r2
 8009df2:	f001 fbdf 	bl	800b5b4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dfa:	5ceb      	ldrb	r3, [r5, r3]
 8009dfc:	5c69      	ldrb	r1, [r5, r1]
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	18c9      	adds	r1, r1, r3
 8009e02:	b289      	uxth	r1, r1
 8009e04:	20e5      	movs	r0, #229	; 0xe5
 8009e06:	f001 fbd5 	bl	800b5b4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009e0e:	5ceb      	ldrb	r3, [r5, r3]
 8009e10:	5c69      	ldrb	r1, [r5, r1]
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	18c9      	adds	r1, r1, r3
 8009e16:	b289      	uxth	r1, r1
 8009e18:	20e6      	movs	r0, #230	; 0xe6
 8009e1a:	f001 fbcb 	bl	800b5b4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8009e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e20:	5da9      	ldrb	r1, [r5, r6]
 8009e22:	5ceb      	ldrb	r3, [r5, r3]
 8009e24:	20e7      	movs	r0, #231	; 0xe7
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	18c9      	adds	r1, r1, r3
 8009e2a:	b289      	uxth	r1, r1
 8009e2c:	f001 fbc2 	bl	800b5b4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8009e30:	4642      	mov	r2, r8
 8009e32:	5deb      	ldrb	r3, [r5, r7]
 8009e34:	5ca9      	ldrb	r1, [r5, r2]
 8009e36:	021b      	lsls	r3, r3, #8
 8009e38:	18c9      	adds	r1, r1, r3
 8009e3a:	b289      	uxth	r1, r1
 8009e3c:	20e8      	movs	r0, #232	; 0xe8
 8009e3e:	f001 fbb9 	bl	800b5b4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009e42:	0023      	movs	r3, r4
 8009e44:	0022      	movs	r2, r4
 8009e46:	330d      	adds	r3, #13
 8009e48:	5ceb      	ldrb	r3, [r5, r3]
 8009e4a:	320e      	adds	r2, #14
 8009e4c:	5ca9      	ldrb	r1, [r5, r2]
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	18c9      	adds	r1, r1, r3
 8009e52:	20e9      	movs	r0, #233	; 0xe9
 8009e54:	b289      	uxth	r1, r1
 8009e56:	f001 fbad 	bl	800b5b4 <EE_WriteVariable>
								if(numOfParams == 19)
 8009e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e5c:	2b13      	cmp	r3, #19
 8009e5e:	d064      	beq.n	8009f2a <PxMessagingTask+0x176e>
								if(numOfParams == 21)
 8009e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e62:	2b15      	cmp	r3, #21
 8009e64:	d054      	beq.n	8009f10 <PxMessagingTask+0x1754>
  __ASM volatile ("dsb 0xF":::"memory");
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	4b49      	ldr	r3, [pc, #292]	; (8009f90 <PxMessagingTask+0x17d4>)
 8009e6c:	4a49      	ldr	r2, [pc, #292]	; (8009f94 <PxMessagingTask+0x17d8>)
 8009e6e:	60da      	str	r2, [r3, #12]
 8009e70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8009e74:	46c0      	nop			; (mov r8, r8)
 8009e76:	e7fd      	b.n	8009e74 <PxMessagingTask+0x16b8>
									SendMessageToModule(src,
 8009e78:	2201      	movs	r2, #1
 8009e7a:	e4b0      	b.n	80097de <PxMessagingTask+0x1022>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009e7c:	2004      	movs	r0, #4
 8009e7e:	f008 ff51 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d05d      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009e86:	4a44      	ldr	r2, [pc, #272]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009e88:	0403      	lsls	r3, r0, #16
 8009e8a:	3306      	adds	r3, #6
 8009e8c:	5153      	str	r3, [r2, r5]
 8009e8e:	e562      	b.n	8009956 <PxMessagingTask+0x119a>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009e90:	2004      	movs	r0, #4
 8009e92:	f008 ff47 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d053      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009e9a:	4a3f      	ldr	r2, [pc, #252]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009e9c:	0403      	lsls	r3, r0, #16
 8009e9e:	3305      	adds	r3, #5
 8009ea0:	5153      	str	r3, [r2, r5]
 8009ea2:	e6fd      	b.n	8009ca0 <PxMessagingTask+0x14e4>
										EraseSector(temp32);
 8009ea4:	0030      	movs	r0, r6
 8009ea6:	f001 fdc9 	bl	800ba3c <EraseSector>
 8009eaa:	e75a      	b.n	8009d62 <PxMessagingTask+0x15a6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009eac:	2001      	movs	r0, #1
 8009eae:	f008 ff39 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d045      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009eb6:	0403      	lsls	r3, r0, #16
 8009eb8:	199e      	adds	r6, r3, r6
 8009eba:	4b37      	ldr	r3, [pc, #220]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009ebc:	515e      	str	r6, [r3, r5]
 8009ebe:	e606      	b.n	8009ace <PxMessagingTask+0x1312>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009ec0:	2002      	movs	r0, #2
 8009ec2:	f008 ff2f 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d03b      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009eca:	4a33      	ldr	r2, [pc, #204]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009ecc:	0403      	lsls	r3, r0, #16
 8009ece:	3304      	adds	r3, #4
 8009ed0:	5153      	str	r3, [r2, r5]
 8009ed2:	e6cb      	b.n	8009c6c <PxMessagingTask+0x14b0>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	f008 ff25 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d031      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ede:	4a2e      	ldr	r2, [pc, #184]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009ee0:	0403      	lsls	r3, r0, #16
 8009ee2:	3302      	adds	r3, #2
 8009ee4:	5153      	str	r3, [r2, r5]
 8009ee6:	e698      	b.n	8009c1a <PxMessagingTask+0x145e>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009ee8:	2004      	movs	r0, #4
 8009eea:	f008 ff1b 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d027      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ef2:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009ef4:	0403      	lsls	r3, r0, #16
 8009ef6:	3307      	adds	r3, #7
 8009ef8:	5153      	str	r3, [r2, r5]
 8009efa:	e696      	b.n	8009c2a <PxMessagingTask+0x146e>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009efc:	2002      	movs	r0, #2
 8009efe:	f008 ff11 	bl	8012d24 <malloc>
												if(temp32 != 0){
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d01d      	beq.n	8009f42 <PxMessagingTask+0x1786>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009f06:	4a24      	ldr	r2, [pc, #144]	; (8009f98 <PxMessagingTask+0x17dc>)
 8009f08:	0403      	lsls	r3, r0, #16
 8009f0a:	3303      	adds	r3, #3
 8009f0c:	5153      	str	r3, [r2, r5]
 8009f0e:	e6ba      	b.n	8009c86 <PxMessagingTask+0x14ca>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8009f10:	466b      	mov	r3, sp
 8009f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f14:	7c1b      	ldrb	r3, [r3, #16]
 8009f16:	3412      	adds	r4, #18
 8009f18:	5cd3      	ldrb	r3, [r2, r3]
 8009f1a:	5d11      	ldrb	r1, [r2, r4]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	18c9      	adds	r1, r1, r3
 8009f20:	b289      	uxth	r1, r1
 8009f22:	20eb      	movs	r0, #235	; 0xeb
 8009f24:	f001 fb46 	bl	800b5b4 <EE_WriteVariable>
 8009f28:	e79d      	b.n	8009e66 <PxMessagingTask+0x16aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f2e:	3410      	adds	r4, #16
 8009f30:	5cd3      	ldrb	r3, [r2, r3]
 8009f32:	5d11      	ldrb	r1, [r2, r4]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	18c9      	adds	r1, r1, r3
 8009f38:	b289      	uxth	r1, r1
 8009f3a:	20ea      	movs	r0, #234	; 0xea
 8009f3c:	f001 fb3a 	bl	800b5b4 <EE_WriteVariable>
								if(numOfParams == 21)
 8009f40:	e791      	b.n	8009e66 <PxMessagingTask+0x16aa>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009f42:	2312      	movs	r3, #18
 8009f44:	4a0f      	ldr	r2, [pc, #60]	; (8009f84 <PxMessagingTask+0x17c8>)
 8009f46:	7013      	strb	r3, [r2, #0]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009f48:	e516      	b.n	8009978 <PxMessagingTask+0x11bc>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	4909      	ldr	r1, [pc, #36]	; (8009f74 <PxMessagingTask+0x17b8>)
 8009f4e:	704a      	strb	r2, [r1, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009f50:	785a      	ldrb	r2, [r3, #1]
 8009f52:	708a      	strb	r2, [r1, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009f54:	789a      	ldrb	r2, [r3, #2]
 8009f56:	70ca      	strb	r2, [r1, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009f58:	78db      	ldrb	r3, [r3, #3]
											SendMessageToModule(src,
 8009f5a:	2209      	movs	r2, #9
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009f5c:	710b      	strb	r3, [r1, #4]
											SendMessageToModule(src,
 8009f5e:	211f      	movs	r1, #31
 8009f60:	f7fe fd50 	bl	8008a04 <PxMessagingTask+0x248>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8009f64:	4653      	mov	r3, sl
 8009f66:	9504      	str	r5, [sp, #16]
 8009f68:	5dda      	ldrb	r2, [r3, r7]
 8009f6a:	f7fe fd20 	bl	80089ae <PxMessagingTask+0x1f2>
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	20000c78 	.word	0x20000c78
 8009f74:	20000b74 	.word	0x20000b74
 8009f78:	20000001 	.word	0x20000001
 8009f7c:	20000002 	.word	0x20000002
 8009f80:	20000003 	.word	0x20000003
 8009f84:	20000c74 	.word	0x20000c74
 8009f88:	08019848 	.word	0x08019848
 8009f8c:	0000ffff 	.word	0x0000ffff
 8009f90:	e000ed00 	.word	0xe000ed00
 8009f94:	05fa0004 	.word	0x05fa0004
 8009f98:	20000c80 	.word	0x20000c80
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009f9c:	0023      	movs	r3, r4
 8009f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fa0:	330b      	adds	r3, #11
 8009fa2:	5cca      	ldrb	r2, [r1, r3]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	5ccb      	ldrb	r3, [r1, r3]
 8009fa8:	0212      	lsls	r2, r2, #8
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	18d2      	adds	r2, r2, r3
 8009fae:	0023      	movs	r3, r4
 8009fb0:	330a      	adds	r3, #10
 8009fb2:	5ccb      	ldrb	r3, [r1, r3]
 8009fb4:	340d      	adds	r4, #13
 8009fb6:	18d2      	adds	r2, r2, r3
 8009fb8:	5d0b      	ldrb	r3, [r1, r4]
 8009fba:	4914      	ldr	r1, [pc, #80]	; (800a00c <PxMessagingTask+0x1850>)
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	18d2      	adds	r2, r2, r3
 8009fc0:	2300      	movs	r3, #0
													status =HAL_FLASH_Program(
 8009fc2:	2002      	movs	r0, #2
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009fc4:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 8009fc6:	0031      	movs	r1, r6
 8009fc8:	f006 fec8 	bl	8010d5c <HAL_FLASH_Program>
 8009fcc:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 8009fce:	e6de      	b.n	8009d8e <PxMessagingTask+0x15d2>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	d000      	beq.n	8009fd8 <PxMessagingTask+0x181c>
 8009fd6:	e6d7      	b.n	8009d88 <PxMessagingTask+0x15cc>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009fd8:	0023      	movs	r3, r4
 8009fda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fdc:	330b      	adds	r3, #11
 8009fde:	5cca      	ldrb	r2, [r1, r3]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	5ccb      	ldrb	r3, [r1, r3]
 8009fe4:	0212      	lsls	r2, r2, #8
 8009fe6:	041b      	lsls	r3, r3, #16
 8009fe8:	18d2      	adds	r2, r2, r3
 8009fea:	0023      	movs	r3, r4
 8009fec:	330a      	adds	r3, #10
 8009fee:	5ccb      	ldrb	r3, [r1, r3]
 8009ff0:	340d      	adds	r4, #13
 8009ff2:	18d2      	adds	r2, r2, r3
 8009ff4:	5d0b      	ldrb	r3, [r1, r4]
 8009ff6:	4905      	ldr	r1, [pc, #20]	; (800a00c <PxMessagingTask+0x1850>)
 8009ff8:	061b      	lsls	r3, r3, #24
 8009ffa:	18d2      	adds	r2, r2, r3
 8009ffc:	2300      	movs	r3, #0
													status =HAL_FLASH_Program(
 8009ffe:	2003      	movs	r0, #3
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800a000:	c10c      	stmia	r1!, {r2, r3}
													status =HAL_FLASH_Program(
 800a002:	0031      	movs	r1, r6
 800a004:	f006 feaa 	bl	8010d5c <HAL_FLASH_Program>
 800a008:	9012      	str	r0, [sp, #72]	; 0x48
													break;
 800a00a:	e6c0      	b.n	8009d8e <PxMessagingTask+0x15d2>
 800a00c:	20000c78 	.word	0x20000c78

0800a010 <ledModeCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE ledModeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800a010:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a012:	b530      	push	{r4, r5, lr}
 800a014:	b083      	sub	sp, #12
 800a016:	0005      	movs	r5, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* Obtain the 1st parameter string. */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a018:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a01a:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a01c:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a01e:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a020:	f003 fea8 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	1, /* Return the first parameter. */
	&xParameterStringLength1 /* Store the parameter string length. */
	);
	if (!strcmp((char*) pcParameterString1, "on")
 800a024:	7803      	ldrb	r3, [r0, #0]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a026:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "on")
 800a028:	2b6f      	cmp	r3, #111	; 0x6f
 800a02a:	d110      	bne.n	800a04e <ledModeCommand+0x3e>
 800a02c:	7842      	ldrb	r2, [r0, #1]
 800a02e:	2a6e      	cmp	r2, #110	; 0x6e
 800a030:	d10d      	bne.n	800a04e <ledModeCommand+0x3e>
 800a032:	7882      	ldrb	r2, [r0, #2]
 800a034:	2a00      	cmp	r2, #0
 800a036:	d10a      	bne.n	800a04e <ledModeCommand+0x3e>
			|| !strcmp((char*) pcParameterString1, "ON"))
		SwitchindMode = 1;
 800a038:	2201      	movs	r2, #1
 800a03a:	4b16      	ldr	r3, [pc, #88]	; (800a094 <ledModeCommand+0x84>)
 800a03c:	701a      	strb	r2, [r3, #0]
			|| !strcmp((char*) pcParameterString1, "OFF"))
		SwitchindMode = 0;

	/* Respond to the command */
	if (SwitchindMode) {
		strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a03e:	222e      	movs	r2, #46	; 0x2e
 800a040:	0028      	movs	r0, r5
 800a042:	4915      	ldr	r1, [pc, #84]	; (800a098 <ledModeCommand+0x88>)
 800a044:	f009 f8a2 	bl	801318c <memcpy>
	}

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800a048:	2000      	movs	r0, #0
 800a04a:	b003      	add	sp, #12
 800a04c:	bd30      	pop	{r4, r5, pc}
			|| !strcmp((char*) pcParameterString1, "ON"))
 800a04e:	2b4f      	cmp	r3, #79	; 0x4f
 800a050:	d00e      	beq.n	800a070 <ledModeCommand+0x60>
	else if (!strcmp((char*) pcParameterString1, "off")
 800a052:	0020      	movs	r0, r4
 800a054:	4911      	ldr	r1, [pc, #68]	; (800a09c <ledModeCommand+0x8c>)
 800a056:	f7f6 f855 	bl	8000104 <strcmp>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d10f      	bne.n	800a07e <ledModeCommand+0x6e>
		SwitchindMode = 0;
 800a05e:	2200      	movs	r2, #0
 800a060:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <ledModeCommand+0x84>)
 800a062:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a064:	222f      	movs	r2, #47	; 0x2f
 800a066:	0028      	movs	r0, r5
 800a068:	490d      	ldr	r1, [pc, #52]	; (800a0a0 <ledModeCommand+0x90>)
 800a06a:	f009 f88f 	bl	801318c <memcpy>
 800a06e:	e7eb      	b.n	800a048 <ledModeCommand+0x38>
			|| !strcmp((char*) pcParameterString1, "ON"))
 800a070:	7863      	ldrb	r3, [r4, #1]
 800a072:	2b4e      	cmp	r3, #78	; 0x4e
 800a074:	d1ed      	bne.n	800a052 <ledModeCommand+0x42>
 800a076:	78a3      	ldrb	r3, [r4, #2]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0dd      	beq.n	800a038 <ledModeCommand+0x28>
 800a07c:	e7e9      	b.n	800a052 <ledModeCommand+0x42>
			|| !strcmp((char*) pcParameterString1, "OFF"))
 800a07e:	0020      	movs	r0, r4
 800a080:	4908      	ldr	r1, [pc, #32]	; (800a0a4 <ledModeCommand+0x94>)
 800a082:	f7f6 f83f 	bl	8000104 <strcmp>
 800a086:	2800      	cmp	r0, #0
 800a088:	d0e9      	beq.n	800a05e <ledModeCommand+0x4e>
	if (SwitchindMode) {
 800a08a:	4b02      	ldr	r3, [pc, #8]	; (800a094 <ledModeCommand+0x84>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0e8      	beq.n	800a064 <ledModeCommand+0x54>
 800a092:	e7d4      	b.n	800a03e <ledModeCommand+0x2e>
 800a094:	200021a4 	.word	0x200021a4
 800a098:	0801bfa4 	.word	0x0801bfa4
 800a09c:	0801bf9c 	.word	0x0801bf9c
 800a0a0:	0801bfd4 	.word	0x0801bfd4
 800a0a4:	0801bfa0 	.word	0x0801bfa0

0800a0a8 <SwitchTimerCallback>:
void SwitchTimerCallback(TimerHandle_t xTimerSwitch) {
 800a0a8:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	4809      	ldr	r0, [pc, #36]	; (800a0d4 <SwitchTimerCallback+0x2c>)
 800a0b0:	f007 f8ea 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a0b4:	4c08      	ldr	r4, [pc, #32]	; (800a0d8 <SwitchTimerCallback+0x30>)
 800a0b6:	7823      	ldrb	r3, [r4, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <SwitchTimerCallback+0x1a>
	Switch_state = STATE_OFF;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	7063      	strb	r3, [r4, #1]
}
 800a0c0:	bd10      	pop	{r4, pc}
		IND_OFF();
 800a0c2:	2180      	movs	r1, #128	; 0x80
 800a0c4:	2090      	movs	r0, #144	; 0x90
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	0109      	lsls	r1, r1, #4
 800a0ca:	05c0      	lsls	r0, r0, #23
 800a0cc:	f007 f8dc 	bl	8011288 <HAL_GPIO_WritePin>
 800a0d0:	e7f4      	b.n	800a0bc <SwitchTimerCallback+0x14>
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	48000400 	.word	0x48000400
 800a0d8:	200021a4 	.word	0x200021a4

0800a0dc <offCommand>:
		const int8_t *pcCommandString) {
 800a0dc:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a0de:	2200      	movs	r2, #0
		const int8_t *pcCommandString) {
 800a0e0:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	480b      	ldr	r0, [pc, #44]	; (800a114 <offCommand+0x38>)
 800a0e6:	f007 f8cf 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a0ea:	4d0b      	ldr	r5, [pc, #44]	; (800a118 <offCommand+0x3c>)
 800a0ec:	782b      	ldrb	r3, [r5, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d108      	bne.n	800a104 <offCommand+0x28>
	Switch_state = STATE_OFF;
 800a0f2:	2300      	movs	r3, #0
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a0f4:	2223      	movs	r2, #35	; 0x23
 800a0f6:	0020      	movs	r0, r4
 800a0f8:	4908      	ldr	r1, [pc, #32]	; (800a11c <offCommand+0x40>)
	Switch_state = STATE_OFF;
 800a0fa:	706b      	strb	r3, [r5, #1]
		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800a0fc:	f009 f846 	bl	801318c <memcpy>
}
 800a100:	2000      	movs	r0, #0
 800a102:	bd70      	pop	{r4, r5, r6, pc}
		IND_OFF();
 800a104:	2180      	movs	r1, #128	; 0x80
 800a106:	2090      	movs	r0, #144	; 0x90
 800a108:	2200      	movs	r2, #0
 800a10a:	0109      	lsls	r1, r1, #4
 800a10c:	05c0      	lsls	r0, r0, #23
 800a10e:	f007 f8bb 	bl	8011288 <HAL_GPIO_WritePin>
 800a112:	e7ee      	b.n	800a0f2 <offCommand+0x16>
 800a114:	48000400 	.word	0x48000400
 800a118:	200021a4 	.word	0x200021a4
 800a11c:	0801c004 	.word	0x0801c004

0800a120 <toggleCommand>:
		const int8_t *pcCommandString) {
 800a120:	b570      	push	{r4, r5, r6, lr}
	if (Switch_state) {
 800a122:	4d1e      	ldr	r5, [pc, #120]	; (800a19c <toggleCommand+0x7c>)
		const int8_t *pcCommandString) {
 800a124:	0004      	movs	r4, r0
	if (Switch_state) {
 800a126:	786b      	ldrb	r3, [r5, #1]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10a      	bne.n	800a142 <toggleCommand+0x22>
		if (Switch_Oldstate == STATE_ON)
 800a12c:	4e1c      	ldr	r6, [pc, #112]	; (800a1a0 <toggleCommand+0x80>)
 800a12e:	7833      	ldrb	r3, [r6, #0]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d011      	beq.n	800a158 <toggleCommand+0x38>
			strcpy((char*) pcWriteBuffer, (char*) pcOK0Message);
 800a134:	2223      	movs	r2, #35	; 0x23
 800a136:	0020      	movs	r0, r4
 800a138:	491a      	ldr	r1, [pc, #104]	; (800a1a4 <toggleCommand+0x84>)
 800a13a:	f009 f827 	bl	801318c <memcpy>
}
 800a13e:	2000      	movs	r0, #0
 800a140:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a142:	2200      	movs	r2, #0
 800a144:	2101      	movs	r1, #1
 800a146:	4818      	ldr	r0, [pc, #96]	; (800a1a8 <toggleCommand+0x88>)
 800a148:	f007 f89e 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a14c:	782b      	ldrb	r3, [r5, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d113      	bne.n	800a17a <toggleCommand+0x5a>
	Switch_state = STATE_OFF;
 800a152:	2300      	movs	r3, #0
 800a154:	706b      	strb	r3, [r5, #1]
	return result;
 800a156:	e7ed      	b.n	800a134 <toggleCommand+0x14>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a158:	2201      	movs	r2, #1
 800a15a:	2101      	movs	r1, #1
 800a15c:	4812      	ldr	r0, [pc, #72]	; (800a1a8 <toggleCommand+0x88>)
 800a15e:	f007 f893 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a162:	782b      	ldrb	r3, [r5, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d110      	bne.n	800a18a <toggleCommand+0x6a>
	Switch_state = STATE_ON;
 800a168:	2301      	movs	r3, #1
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a16a:	2222      	movs	r2, #34	; 0x22
 800a16c:	0020      	movs	r0, r4
 800a16e:	490f      	ldr	r1, [pc, #60]	; (800a1ac <toggleCommand+0x8c>)
	Switch_state = STATE_ON;
 800a170:	706b      	strb	r3, [r5, #1]
	Switch_Oldstate = Switch_state;
 800a172:	7033      	strb	r3, [r6, #0]
			strcpy((char*) pcWriteBuffer, (char*) pcOK1Message);
 800a174:	f009 f80a 	bl	801318c <memcpy>
 800a178:	e7e1      	b.n	800a13e <toggleCommand+0x1e>
		IND_OFF();
 800a17a:	2180      	movs	r1, #128	; 0x80
 800a17c:	2090      	movs	r0, #144	; 0x90
 800a17e:	2200      	movs	r2, #0
 800a180:	0109      	lsls	r1, r1, #4
 800a182:	05c0      	lsls	r0, r0, #23
 800a184:	f007 f880 	bl	8011288 <HAL_GPIO_WritePin>
 800a188:	e7e3      	b.n	800a152 <toggleCommand+0x32>
		IND_ON();
 800a18a:	2180      	movs	r1, #128	; 0x80
 800a18c:	2090      	movs	r0, #144	; 0x90
 800a18e:	2201      	movs	r2, #1
 800a190:	0109      	lsls	r1, r1, #4
 800a192:	05c0      	lsls	r0, r0, #23
 800a194:	f007 f878 	bl	8011288 <HAL_GPIO_WritePin>
 800a198:	e7e6      	b.n	800a168 <toggleCommand+0x48>
 800a19a:	46c0      	nop			; (mov r8, r8)
 800a19c:	200021a4 	.word	0x200021a4
 800a1a0:	20000094 	.word	0x20000094
 800a1a4:	0801c004 	.word	0x0801c004
 800a1a8:	48000400 	.word	0x48000400
 800a1ac:	0801c028 	.word	0x0801c028

0800a1b0 <SystemClock_Config>:
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a1b0:	2310      	movs	r3, #16
void SystemClock_Config(void) {
 800a1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b4:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a1b6:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1b8:	2680      	movs	r6, #128	; 0x80
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a1ba:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a1bc:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a1be:	2401      	movs	r4, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1c0:	2702      	movs	r7, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1c2:	0276      	lsls	r6, r6, #9
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a1c4:	035b      	lsls	r3, r3, #13
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a1c6:	a80d      	add	r0, sp, #52	; 0x34
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a1c8:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a1ca:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a1cc:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a1ce:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a1d0:	9519      	str	r5, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a1d2:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1d4:	9617      	str	r6, [sp, #92]	; 0x5c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a1d6:	f007 f86d 	bl	80112b4 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a1da:	2307      	movs	r3, #7
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a1dc:	2101      	movs	r1, #1
 800a1de:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a1e0:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1e2:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a1e4:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a1e6:	9703      	str	r7, [sp, #12]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a1e8:	f007 fb06 	bl	80117f8 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <SystemClock_Config+0xa8>)
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a1ee:	a806      	add	r0, sp, #24
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a1f0:	9306      	str	r3, [sp, #24]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a1f2:	9508      	str	r5, [sp, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a1f4:	9509      	str	r5, [sp, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a1f6:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a1f8:	f007 fc96 	bl	8011b28 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800a1fc:	2180      	movs	r1, #128	; 0x80
 800a1fe:	4d17      	ldr	r5, [pc, #92]	; (800a25c <SystemClock_Config+0xac>)
 800a200:	0549      	lsls	r1, r1, #21
 800a202:	69ea      	ldr	r2, [r5, #28]
 800a204:	430a      	orrs	r2, r1
 800a206:	61ea      	str	r2, [r5, #28]
 800a208:	69eb      	ldr	r3, [r5, #28]
 800a20a:	400b      	ands	r3, r1
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800a210:	f007 f846 	bl	80112a0 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a214:	23c0      	movs	r3, #192	; 0xc0
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a216:	a806      	add	r0, sp, #24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	9307      	str	r3, [sp, #28]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a21c:	9606      	str	r6, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a21e:	f007 fc83 	bl	8011b28 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800a222:	f007 fc55 	bl	8011ad0 <HAL_RCC_GetHCLKFreq>
 800a226:	21fa      	movs	r1, #250	; 0xfa
 800a228:	0089      	lsls	r1, r1, #2
 800a22a:	f7f5 ff91 	bl	8000150 <__udivsi3>
 800a22e:	f005 fe3f 	bl	800feb0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a232:	2004      	movs	r0, #4
 800a234:	f005 fe56 	bl	800fee4 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a238:	2001      	movs	r0, #1
	__SYSCFG_CLK_ENABLE()
 800a23a:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a23c:	2200      	movs	r2, #0
	__SYSCFG_CLK_ENABLE()
 800a23e:	4323      	orrs	r3, r4
 800a240:	61ab      	str	r3, [r5, #24]
 800a242:	69ab      	ldr	r3, [r5, #24]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a244:	2100      	movs	r1, #0
	__SYSCFG_CLK_ENABLE()
 800a246:	401c      	ands	r4, r3
 800a248:	9401      	str	r4, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a24a:	4240      	negs	r0, r0
	__SYSCFG_CLK_ENABLE()
 800a24c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a24e:	f005 fde9 	bl	800fe24 <HAL_NVIC_SetPriority>
}
 800a252:	b01b      	add	sp, #108	; 0x6c
 800a254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a256:	46c0      	nop			; (mov r8, r8)
 800a258:	00040003 	.word	0x00040003
 800a25c:	40021000 	.word	0x40021000

0800a260 <SaveToRO>:
uint8_t SaveToRO(void) {
 800a260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a262:	46de      	mov	lr, fp
 800a264:	4657      	mov	r7, sl
 800a266:	464e      	mov	r6, r9
 800a268:	4645      	mov	r5, r8
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a26a:	2300      	movs	r3, #0
uint8_t SaveToRO(void) {
 800a26c:	b5e0      	push	{r5, r6, r7, lr}
 800a26e:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a270:	2211      	movs	r2, #17
 800a272:	2100      	movs	r1, #0
 800a274:	a803      	add	r0, sp, #12
 800a276:	9302      	str	r3, [sp, #8]
 800a278:	f008 ff91 	bl	801319e <memset>
	HAL_FLASH_Unlock();
 800a27c:	f006 fd0e 	bl	8010c9c <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800a280:	486f      	ldr	r0, [pc, #444]	; (800a440 <SaveToRO+0x1e0>)
 800a282:	f006 fe3b 	bl	8010efc <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800a286:	486f      	ldr	r0, [pc, #444]	; (800a444 <SaveToRO+0x1e4>)
 800a288:	f006 fd24 	bl	8010cd4 <FLASH_WaitForLastOperation>
 800a28c:	4683      	mov	fp, r0
	if (FlashStatus != HAL_OK) {
 800a28e:	2800      	cmp	r0, #0
 800a290:	d000      	beq.n	800a294 <SaveToRO+0x34>
 800a292:	e088      	b.n	800a3a6 <SaveToRO+0x146>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a294:	4b6c      	ldr	r3, [pc, #432]	; (800a448 <SaveToRO+0x1e8>)
 800a296:	2202      	movs	r2, #2
 800a298:	4699      	mov	r9, r3
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	4393      	bics	r3, r2
 800a29e:	464a      	mov	r2, r9
 800a2a0:	6113      	str	r3, [r2, #16]
	if (myID) {
 800a2a2:	4b6a      	ldr	r3, [pc, #424]	; (800a44c <SaveToRO+0x1ec>)
 800a2a4:	7819      	ldrb	r1, [r3, #0]
 800a2a6:	2900      	cmp	r1, #0
 800a2a8:	d16e      	bne.n	800a388 <SaveToRO+0x128>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a2aa:	4b69      	ldr	r3, [pc, #420]	; (800a450 <SaveToRO+0x1f0>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d067      	beq.n	800a382 <SaveToRO+0x122>
 800a2b2:	4b68      	ldr	r3, [pc, #416]	; (800a454 <SaveToRO+0x1f4>)
 800a2b4:	2600      	movs	r6, #0
 800a2b6:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a2b8:	465b      	mov	r3, fp
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a2ba:	4d67      	ldr	r5, [pc, #412]	; (800a458 <SaveToRO+0x1f8>)
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a2bc:	4f62      	ldr	r7, [pc, #392]	; (800a448 <SaveToRO+0x1e8>)
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	e005      	b.n	800a2ce <SaveToRO+0x6e>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a2c2:	4b63      	ldr	r3, [pc, #396]	; (800a450 <SaveToRO+0x1f0>)
 800a2c4:	3601      	adds	r6, #1
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	b2f6      	uxtb	r6, r6
 800a2ca:	42b3      	cmp	r3, r6
 800a2cc:	d957      	bls.n	800a37e <SaveToRO+0x11e>
		if (snippets[s].cond.conditionType) {
 800a2ce:	00b3      	lsls	r3, r6, #2
 800a2d0:	1999      	adds	r1, r3, r6
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	0089      	lsls	r1, r1, #2
 800a2d8:	5c5b      	ldrb	r3, [r3, r1]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0f1      	beq.n	800a2c2 <SaveToRO+0x62>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a2de:	23fe      	movs	r3, #254	; 0xfe
 800a2e0:	aa02      	add	r2, sp, #8
 800a2e2:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800a2e4:	ab02      	add	r3, sp, #8
 800a2e6:	1c58      	adds	r0, r3, #1
 800a2e8:	2214      	movs	r2, #20
 800a2ea:	4449      	add	r1, r9
 800a2ec:	f008 ff4e 	bl	801318c <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a2f0:	2314      	movs	r3, #20
 800a2f2:	469b      	mov	fp, r3
						*(uint16_t*) &snipBuffer[j * 2]);
 800a2f4:	ab02      	add	r3, sp, #8
 800a2f6:	44ab      	add	fp, r5
 800a2f8:	1b5b      	subs	r3, r3, r5
 800a2fa:	46b2      	mov	sl, r6
 800a2fc:	001c      	movs	r4, r3
 800a2fe:	465e      	mov	r6, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a300:	2300      	movs	r3, #0
 800a302:	0029      	movs	r1, r5
 800a304:	2001      	movs	r0, #1
 800a306:	5b62      	ldrh	r2, [r4, r5]
 800a308:	f006 fd28 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a30c:	484d      	ldr	r0, [pc, #308]	; (800a444 <SaveToRO+0x1e4>)
 800a30e:	f006 fce1 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a312:	2800      	cmp	r0, #0
 800a314:	d147      	bne.n	800a3a6 <SaveToRO+0x146>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a316:	2201      	movs	r2, #1
 800a318:	693b      	ldr	r3, [r7, #16]
					currentAdd += 2;
 800a31a:	3502      	adds	r5, #2
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a31c:	4393      	bics	r3, r2
 800a31e:	613b      	str	r3, [r7, #16]
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a320:	42ae      	cmp	r6, r5
 800a322:	d1ed      	bne.n	800a300 <SaveToRO+0xa0>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a324:	4656      	mov	r6, sl
 800a326:	4643      	mov	r3, r8
 800a328:	199b      	adds	r3, r3, r6
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	444b      	add	r3, r9
 800a32e:	0004      	movs	r4, r0
 800a330:	4698      	mov	r8, r3
 800a332:	002e      	movs	r6, r5
 800a334:	e012      	b.n	800a35c <SaveToRO+0xfc>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800a336:	0063      	lsls	r3, r4, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a338:	5aea      	ldrh	r2, [r5, r3]
 800a33a:	0031      	movs	r1, r6
 800a33c:	2300      	movs	r3, #0
 800a33e:	2001      	movs	r0, #1
 800a340:	f006 fd0c 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a344:	483f      	ldr	r0, [pc, #252]	; (800a444 <SaveToRO+0x1e4>)
 800a346:	f006 fcc5 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d12b      	bne.n	800a3a6 <SaveToRO+0x146>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a34e:	2201      	movs	r2, #1
 800a350:	693b      	ldr	r3, [r7, #16]
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a352:	3401      	adds	r4, #1
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a354:	4393      	bics	r3, r2
 800a356:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a358:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a35a:	b2e4      	uxtb	r4, r4
 800a35c:	4643      	mov	r3, r8
 800a35e:	68dd      	ldr	r5, [r3, #12]
 800a360:	0028      	movs	r0, r5
 800a362:	f7f5 fed9 	bl	8000118 <strlen>
 800a366:	3001      	adds	r0, #1
 800a368:	0840      	lsrs	r0, r0, #1
 800a36a:	4284      	cmp	r4, r0
 800a36c:	d3e3      	bcc.n	800a336 <SaveToRO+0xd6>
 800a36e:	0035      	movs	r5, r6
 800a370:	4656      	mov	r6, sl
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a372:	4b37      	ldr	r3, [pc, #220]	; (800a450 <SaveToRO+0x1f0>)
 800a374:	3601      	adds	r6, #1
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	b2f6      	uxtb	r6, r6
 800a37a:	42b3      	cmp	r3, r6
 800a37c:	d8a7      	bhi.n	800a2ce <SaveToRO+0x6e>
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	469b      	mov	fp, r3
	HAL_FLASH_Lock();
 800a382:	f006 fc9d 	bl	8010cc0 <HAL_FLASH_Lock>
	return result;
 800a386:	e012      	b.n	800a3ae <SaveToRO+0x14e>
		temp = (uint16_t) (N << 8) + myID;
 800a388:	4b34      	ldr	r3, [pc, #208]	; (800a45c <SaveToRO+0x1fc>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a38a:	2001      	movs	r0, #1
		temp = (uint16_t) (N << 8) + myID;
 800a38c:	781a      	ldrb	r2, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a38e:	2300      	movs	r3, #0
		temp = (uint16_t) (N << 8) + myID;
 800a390:	0212      	lsls	r2, r2, #8
 800a392:	1852      	adds	r2, r2, r1
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a394:	b292      	uxth	r2, r2
 800a396:	492a      	ldr	r1, [pc, #168]	; (800a440 <SaveToRO+0x1e0>)
 800a398:	f006 fce0 	bl	8010d5c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800a39c:	4829      	ldr	r0, [pc, #164]	; (800a444 <SaveToRO+0x1e4>)
 800a39e:	f006 fc99 	bl	8010cd4 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d00b      	beq.n	800a3be <SaveToRO+0x15e>
					return pFlash.ErrorCode;
 800a3a6:	4b2e      	ldr	r3, [pc, #184]	; (800a460 <SaveToRO+0x200>)
 800a3a8:	69d8      	ldr	r0, [r3, #28]
 800a3aa:	b2c3      	uxtb	r3, r0
 800a3ac:	469b      	mov	fp, r3
}
 800a3ae:	4658      	mov	r0, fp
 800a3b0:	b009      	add	sp, #36	; 0x24
 800a3b2:	bcf0      	pop	{r4, r5, r6, r7}
 800a3b4:	46bb      	mov	fp, r7
 800a3b6:	46b2      	mov	sl, r6
 800a3b8:	46a9      	mov	r9, r5
 800a3ba:	46a0      	mov	r8, r4
 800a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a3be:	464b      	mov	r3, r9
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	4393      	bics	r3, r2
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800a3ca:	4b24      	ldr	r3, [pc, #144]	; (800a45c <SaveToRO+0x1fc>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d100      	bne.n	800a3d4 <SaveToRO+0x174>
 800a3d2:	e76a      	b.n	800a2aa <SaveToRO+0x4a>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	469a      	mov	sl, r3
 800a3d8:	4b22      	ldr	r3, [pc, #136]	; (800a464 <SaveToRO+0x204>)
	uint16_t add = 2, temp = 0;
 800a3da:	2502      	movs	r5, #2
 800a3dc:	4698      	mov	r8, r3
				if (array[i - 1][0]) {
 800a3de:	4653      	mov	r3, sl
 800a3e0:	1e5e      	subs	r6, r3, #1
 800a3e2:	2316      	movs	r3, #22
 800a3e4:	4647      	mov	r7, r8
 800a3e6:	435e      	muls	r6, r3
 800a3e8:	4643      	mov	r3, r8
 800a3ea:	3716      	adds	r7, #22
 800a3ec:	199c      	adds	r4, r3, r6
 800a3ee:	19bf      	adds	r7, r7, r6
 800a3f0:	e002      	b.n	800a3f8 <SaveToRO+0x198>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a3f2:	3402      	adds	r4, #2
 800a3f4:	42bc      	cmp	r4, r7
 800a3f6:	d01a      	beq.n	800a42e <SaveToRO+0x1ce>
				if (array[i - 1][0]) {
 800a3f8:	4643      	mov	r3, r8
 800a3fa:	5b9b      	ldrh	r3, [r3, r6]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0f8      	beq.n	800a3f2 <SaveToRO+0x192>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800a400:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <SaveToRO+0x1e0>)
 800a402:	2001      	movs	r0, #1
 800a404:	18e9      	adds	r1, r5, r3
 800a406:	8822      	ldrh	r2, [r4, #0]
 800a408:	2300      	movs	r3, #0
 800a40a:	f006 fca7 	bl	8010d5c <HAL_FLASH_Program>
					add += 2;
 800a40e:	3502      	adds	r5, #2
					FlashStatus = FLASH_WaitForLastOperation(
 800a410:	480c      	ldr	r0, [pc, #48]	; (800a444 <SaveToRO+0x1e4>)
					add += 2;
 800a412:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800a414:	f006 fc5e 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a418:	2800      	cmp	r0, #0
 800a41a:	d1c4      	bne.n	800a3a6 <SaveToRO+0x146>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a41c:	464b      	mov	r3, r9
 800a41e:	2201      	movs	r2, #1
 800a420:	691b      	ldr	r3, [r3, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a422:	3402      	adds	r4, #2
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a424:	4393      	bics	r3, r2
 800a426:	464a      	mov	r2, r9
 800a428:	6113      	str	r3, [r2, #16]
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a42a:	42bc      	cmp	r4, r7
 800a42c:	d1e4      	bne.n	800a3f8 <SaveToRO+0x198>
		for (uint8_t i = 1; i <= N; i++) {
 800a42e:	4653      	mov	r3, sl
 800a430:	3301      	adds	r3, #1
 800a432:	b2db      	uxtb	r3, r3
 800a434:	469a      	mov	sl, r3
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <SaveToRO+0x1fc>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4553      	cmp	r3, sl
 800a43c:	d2cf      	bcs.n	800a3de <SaveToRO+0x17e>
 800a43e:	e734      	b.n	800a2aa <SaveToRO+0x4a>
 800a440:	0801d800 	.word	0x0801d800
 800a444:	0000c350 	.word	0x0000c350
 800a448:	40022000 	.word	0x40022000
 800a44c:	20000aa8 	.word	0x20000aa8
 800a450:	200017ac 	.word	0x200017ac
 800a454:	200017b0 	.word	0x200017b0
 800a458:	0801dc00 	.word	0x0801dc00
 800a45c:	20000008 	.word	0x20000008
 800a460:	20006d80 	.word	0x20006d80
 800a464:	20000f84 	.word	0x20000f84

0800a468 <ClearROtopology>:
	memset(array, 0, sizeof(array));
 800a468:	228f      	movs	r2, #143	; 0x8f
uint8_t ClearROtopology(void) {
 800a46a:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800a46c:	2100      	movs	r1, #0
 800a46e:	0092      	lsls	r2, r2, #2
 800a470:	4805      	ldr	r0, [pc, #20]	; (800a488 <ClearROtopology+0x20>)
 800a472:	f008 fe94 	bl	801319e <memset>
	N = 1;
 800a476:	2201      	movs	r2, #1
 800a478:	4b04      	ldr	r3, [pc, #16]	; (800a48c <ClearROtopology+0x24>)
 800a47a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800a47c:	2200      	movs	r2, #0
 800a47e:	4b04      	ldr	r3, [pc, #16]	; (800a490 <ClearROtopology+0x28>)
 800a480:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800a482:	f7ff feed 	bl	800a260 <SaveToRO>
}
 800a486:	bd10      	pop	{r4, pc}
 800a488:	20000f84 	.word	0x20000f84
 800a48c:	20000008 	.word	0x20000008
 800a490:	20000aa8 	.word	0x20000aa8

0800a494 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a496:	464e      	mov	r6, r9
 800a498:	4645      	mov	r5, r8
 800a49a:	46de      	mov	lr, fp
 800a49c:	4657      	mov	r7, sl
 800a49e:	4698      	mov	r8, r3
 800a4a0:	b5e0      	push	{r5, r6, r7, lr}
	myOutport =FindRoute(myID,dst);
 800a4a2:	4f3c      	ldr	r7, [pc, #240]	; (800a594 <remoteBootloaderUpdate+0x100>)
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a4a4:	4681      	mov	r9, r0
 800a4a6:	b085      	sub	sp, #20
	myOutport =FindRoute(myID,dst);
 800a4a8:	7838      	ldrb	r0, [r7, #0]
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a4aa:	000c      	movs	r4, r1
 800a4ac:	0015      	movs	r5, r2
	myOutport =FindRoute(myID,dst);
 800a4ae:	f7f9 fb7f 	bl	8003bb0 <FindRoute>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a4b2:	4643      	mov	r3, r8
	myOutport =FindRoute(myID,dst);
 800a4b4:	0006      	movs	r6, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d13f      	bne.n	800a53a <remoteBootloaderUpdate+0xa6>
	if(src == myID){
 800a4ba:	783b      	ldrb	r3, [r7, #0]
 800a4bc:	454b      	cmp	r3, r9
 800a4be:	d060      	beq.n	800a582 <remoteBootloaderUpdate+0xee>
	UART_HandleTypeDef *huart =GetUart(port);
 800a4c0:	0028      	movs	r0, r5
 800a4c2:	f003 f933 	bl	800d72c <GetUart>
	huart->Init.BaudRate =57600;
 800a4c6:	23e1      	movs	r3, #225	; 0xe1
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	469b      	mov	fp, r3
 800a4cc:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a4ce:	2380      	movs	r3, #128	; 0x80
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	469a      	mov	sl, r3
 800a4d4:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a4d6:	2380      	movs	r3, #128	; 0x80
	UART_HandleTypeDef *huart =GetUart(port);
 800a4d8:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a4da:	015b      	lsls	r3, r3, #5
 800a4dc:	6083      	str	r3, [r0, #8]
 800a4de:	4699      	mov	r9, r3
	HAL_UART_Init(huart);
 800a4e0:	f008 fa32 	bl	8012948 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a4e4:	2120      	movs	r1, #32
 800a4e6:	6822      	ldr	r2, [r4, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 800a4e8:	0030      	movs	r0, r6
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a4ea:	6813      	ldr	r3, [r2, #0]
 800a4ec:	4688      	mov	r8, r1
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	6013      	str	r3, [r2, #0]
	UART_HandleTypeDef *huart =GetUart(port);
 800a4f2:	f003 f91b 	bl	800d72c <GetUart>
	huart->Init.BaudRate =57600;
 800a4f6:	465b      	mov	r3, fp
 800a4f8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a4fa:	4653      	mov	r3, sl
 800a4fc:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a4fe:	464b      	mov	r3, r9
	UART_HandleTypeDef *huart =GetUart(port);
 800a500:	0004      	movs	r4, r0
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a502:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a504:	f008 fa20 	bl	8012948 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a508:	4641      	mov	r1, r8
 800a50a:	6822      	ldr	r2, [r4, #0]
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a50c:	0028      	movs	r0, r5
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	430b      	orrs	r3, r1
 800a512:	6013      	str	r3, [r2, #0]
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a514:	2300      	movs	r3, #0
 800a516:	7839      	ldrb	r1, [r7, #0]
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	3b01      	subs	r3, #1
 800a51c:	9302      	str	r3, [sp, #8]
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	3303      	adds	r3, #3
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	0032      	movs	r2, r6
 800a526:	000b      	movs	r3, r1
 800a528:	f7fd feac 	bl	8008284 <StartScastDMAStream>
}
 800a52c:	b005      	add	sp, #20
 800a52e:	bcf0      	pop	{r4, r5, r6, r7}
 800a530:	46bb      	mov	fp, r7
 800a532:	46b2      	mov	sl, r6
 800a534:	46a9      	mov	r9, r5
 800a536:	46a0      	mov	r8, r4
 800a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a53a:	783b      	ldrb	r3, [r7, #0]
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d01c      	beq.n	800a57a <remoteBootloaderUpdate+0xe6>
	if(src == myID){
 800a540:	454b      	cmp	r3, r9
 800a542:	d1bd      	bne.n	800a4c0 <remoteBootloaderUpdate+0x2c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a544:	f003 fc12 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a548:	4b13      	ldr	r3, [pc, #76]	; (800a598 <remoteBootloaderUpdate+0x104>)
 800a54a:	0022      	movs	r2, r4
 800a54c:	6819      	ldr	r1, [r3, #0]
 800a54e:	4643      	mov	r3, r8
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a550:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a552:	f009 f815 	bl	8013580 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a556:	4b11      	ldr	r3, [pc, #68]	; (800a59c <remoteBootloaderUpdate+0x108>)
 800a558:	4648      	mov	r0, r9
 800a55a:	6819      	ldr	r1, [r3, #0]
 800a55c:	f009 f830 	bl	80135c0 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a560:	4648      	mov	r0, r9
 800a562:	f7f5 fdd9 	bl	8000118 <strlen>
 800a566:	2332      	movs	r3, #50	; 0x32
 800a568:	b282      	uxth	r2, r0
 800a56a:	4649      	mov	r1, r9
 800a56c:	0028      	movs	r0, r5
 800a56e:	f003 f8ab 	bl	800d6c8 <writePxITMutex>
		Delay_ms(100);
 800a572:	2064      	movs	r0, #100	; 0x64
 800a574:	f005 f924 	bl	800f7c0 <HAL_Delay>
 800a578:	e7a2      	b.n	800a4c0 <remoteBootloaderUpdate+0x2c>
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a57a:	4646      	mov	r6, r8
	if(src == myID){
 800a57c:	454b      	cmp	r3, r9
 800a57e:	d19f      	bne.n	800a4c0 <remoteBootloaderUpdate+0x2c>
 800a580:	e7e0      	b.n	800a544 <remoteBootloaderUpdate+0xb0>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a582:	f003 fbf3 	bl	800dd6c <FreeRTOS_CLIGetOutputBuffer>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a586:	4b06      	ldr	r3, [pc, #24]	; (800a5a0 <remoteBootloaderUpdate+0x10c>)
 800a588:	0022      	movs	r2, r4
 800a58a:	6819      	ldr	r1, [r3, #0]
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a58c:	4681      	mov	r9, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a58e:	f008 fff7 	bl	8013580 <sprintf>
 800a592:	e7e0      	b.n	800a556 <remoteBootloaderUpdate+0xc2>
 800a594:	20000aa8 	.word	0x20000aa8
 800a598:	20000058 	.word	0x20000058
 800a59c:	20000054 	.word	0x20000054
 800a5a0:	2000005c 	.word	0x2000005c

0800a5a4 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a5a4:	b500      	push	{lr}
 800a5a6:	b083      	sub	sp, #12
	MX_USART1_UART_Init();
 800a5a8:	f002 feee 	bl	800d388 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a5ac:	f002 ff04 	bl	800d3b8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a5b0:	f002 ff1a 	bl	800d3e8 <MX_USART3_UART_Init>
	MX_USART5_UART_Init();
 800a5b4:	f002 ff30 	bl	800d418 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800a5b8:	f002 ff46 	bl	800d448 <MX_USART6_UART_Init>
	xTimerSwitch =xTimerCreate("SwitchTimer",pdMS_TO_TICKS(1000),pdFALSE,(void* )1,SwitchTimerCallback);
 800a5bc:	21fa      	movs	r1, #250	; 0xfa
 800a5be:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <Module_Peripheral_Init+0x38>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	0089      	lsls	r1, r1, #2
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	4805      	ldr	r0, [pc, #20]	; (800a5e0 <Module_Peripheral_Init+0x3c>)
 800a5ca:	f004 fde5 	bl	800f198 <xTimerCreate>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <Module_Peripheral_Init+0x40>)
 800a5d0:	6058      	str	r0, [r3, #4]
	Switch_Init();
 800a5d2:	f001 fa8d 	bl	800baf0 <Switch_Init>
}
 800a5d6:	b003      	add	sp, #12
 800a5d8:	bd00      	pop	{pc}
 800a5da:	46c0      	nop			; (mov r8, r8)
 800a5dc:	0800a0a9 	.word	0x0800a0a9
 800a5e0:	0801c04c 	.word	0x0801c04c
 800a5e4:	200021a4 	.word	0x200021a4

0800a5e8 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a5e8:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&onCommandDefinition);
 800a5ea:	4c08      	ldr	r4, [pc, #32]	; (800a60c <RegisterModuleCLICommands+0x24>)
 800a5ec:	0020      	movs	r0, r4
 800a5ee:	f003 fb23 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&offCommandDefinition);
 800a5f2:	0020      	movs	r0, r4
 800a5f4:	3010      	adds	r0, #16
 800a5f6:	f003 fb1f 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&toggleCommandDefinition);
 800a5fa:	0020      	movs	r0, r4
 800a5fc:	3020      	adds	r0, #32
 800a5fe:	f003 fb1b 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ledModeCommandDefinition);
 800a602:	0020      	movs	r0, r4
 800a604:	3030      	adds	r0, #48	; 0x30
 800a606:	f003 fb17 	bl	800dc38 <FreeRTOS_CLIRegisterCommand>
}
 800a60a:	bd10      	pop	{r4, pc}
 800a60c:	08019868 	.word	0x08019868

0800a610 <GetPort>:
	if (huart->Instance == USART5)
 800a610:	6800      	ldr	r0, [r0, #0]
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <GetPort+0x40>)
 800a614:	4298      	cmp	r0, r3
 800a616:	d012      	beq.n	800a63e <GetPort+0x2e>
	else if (huart->Instance == USART2)
 800a618:	4b0e      	ldr	r3, [pc, #56]	; (800a654 <GetPort+0x44>)
 800a61a:	4298      	cmp	r0, r3
 800a61c:	d011      	beq.n	800a642 <GetPort+0x32>
	else if (huart->Instance == USART6)
 800a61e:	4b0e      	ldr	r3, [pc, #56]	; (800a658 <GetPort+0x48>)
 800a620:	4298      	cmp	r0, r3
 800a622:	d010      	beq.n	800a646 <GetPort+0x36>
	else if (huart->Instance == USART3)
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <GetPort+0x4c>)
 800a626:	4298      	cmp	r0, r3
 800a628:	d00f      	beq.n	800a64a <GetPort+0x3a>
		return P5;
 800a62a:	4b0d      	ldr	r3, [pc, #52]	; (800a660 <GetPort+0x50>)
 800a62c:	469c      	mov	ip, r3
 800a62e:	4460      	add	r0, ip
 800a630:	1e43      	subs	r3, r0, #1
 800a632:	4198      	sbcs	r0, r3
 800a634:	2304      	movs	r3, #4
 800a636:	4240      	negs	r0, r0
 800a638:	4398      	bics	r0, r3
 800a63a:	3005      	adds	r0, #5
}
 800a63c:	4770      	bx	lr
		return P1;
 800a63e:	2001      	movs	r0, #1
 800a640:	e7fc      	b.n	800a63c <GetPort+0x2c>
		return P2;
 800a642:	2002      	movs	r0, #2
 800a644:	e7fa      	b.n	800a63c <GetPort+0x2c>
		return P3;
 800a646:	2003      	movs	r0, #3
 800a648:	e7f8      	b.n	800a63c <GetPort+0x2c>
		return P4;
 800a64a:	2004      	movs	r0, #4
 800a64c:	e7f6      	b.n	800a63c <GetPort+0x2c>
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	40005000 	.word	0x40005000
 800a654:	40004400 	.word	0x40004400
 800a658:	40011400 	.word	0x40011400
 800a65c:	40004800 	.word	0x40004800
 800a660:	bffec800 	.word	0xbffec800

0800a664 <Output_on>:
Module_Status Output_on(uint32_t timeout) {
 800a664:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a666:	2201      	movs	r2, #1
Module_Status Output_on(uint32_t timeout) {
 800a668:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a66a:	2101      	movs	r1, #1
 800a66c:	481c      	ldr	r0, [pc, #112]	; (800a6e0 <Output_on+0x7c>)
Module_Status Output_on(uint32_t timeout) {
 800a66e:	b083      	sub	sp, #12
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a670:	f006 fe0a 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a674:	4d1b      	ldr	r5, [pc, #108]	; (800a6e4 <Output_on+0x80>)
 800a676:	782b      	ldrb	r3, [r5, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d11f      	bne.n	800a6bc <Output_on+0x58>
	if (timeout != portMAX_DELAY) {
 800a67c:	1c63      	adds	r3, r4, #1
 800a67e:	d106      	bne.n	800a68e <Output_on+0x2a>
	Switch_state = STATE_ON;
 800a680:	2301      	movs	r3, #1
}
 800a682:	2000      	movs	r0, #0
	Switch_Oldstate = Switch_state;
 800a684:	4a18      	ldr	r2, [pc, #96]	; (800a6e8 <Output_on+0x84>)
	Switch_state = STATE_ON;
 800a686:	706b      	strb	r3, [r5, #1]
	Switch_Oldstate = Switch_state;
 800a688:	7013      	strb	r3, [r2, #0]
}
 800a68a:	b003      	add	sp, #12
 800a68c:	bd30      	pop	{r4, r5, pc}
		if (xTimerIsTimerActive(xTimerSwitch))
 800a68e:	6868      	ldr	r0, [r5, #4]
 800a690:	f004 fee2 	bl	800f458 <xTimerIsTimerActive>
 800a694:	2800      	cmp	r0, #0
 800a696:	d119      	bne.n	800a6cc <Output_on+0x68>
		xTimerChangePeriod(xTimerSwitch, pdMS_TO_TICKS(timeout), 100);
 800a698:	21fa      	movs	r1, #250	; 0xfa
 800a69a:	0160      	lsls	r0, r4, #5
 800a69c:	1b00      	subs	r0, r0, r4
 800a69e:	0080      	lsls	r0, r0, #2
 800a6a0:	1900      	adds	r0, r0, r4
 800a6a2:	0089      	lsls	r1, r1, #2
 800a6a4:	00c0      	lsls	r0, r0, #3
 800a6a6:	f7f5 fd53 	bl	8000150 <__udivsi3>
 800a6aa:	2364      	movs	r3, #100	; 0x64
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	0002      	movs	r2, r0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	6868      	ldr	r0, [r5, #4]
 800a6b6:	f004 fd8f 	bl	800f1d8 <xTimerGenericCommand>
 800a6ba:	e7e1      	b.n	800a680 <Output_on+0x1c>
		IND_ON();
 800a6bc:	2180      	movs	r1, #128	; 0x80
 800a6be:	2090      	movs	r0, #144	; 0x90
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	0109      	lsls	r1, r1, #4
 800a6c4:	05c0      	lsls	r0, r0, #23
 800a6c6:	f006 fddf 	bl	8011288 <HAL_GPIO_WritePin>
 800a6ca:	e7d7      	b.n	800a67c <Output_on+0x18>
			xTimerStop(xTimerSwitch, 100);
 800a6cc:	2364      	movs	r3, #100	; 0x64
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2103      	movs	r1, #3
 800a6d6:	6868      	ldr	r0, [r5, #4]
 800a6d8:	f004 fd7e 	bl	800f1d8 <xTimerGenericCommand>
 800a6dc:	e7dc      	b.n	800a698 <Output_on+0x34>
 800a6de:	46c0      	nop			; (mov r8, r8)
 800a6e0:	48000400 	.word	0x48000400
 800a6e4:	200021a4 	.word	0x200021a4
 800a6e8:	20000094 	.word	0x20000094

0800a6ec <onCommand>:
	portBASE_TYPE xParameterStringLength1 = 0;
 800a6ec:	2300      	movs	r3, #0
		const int8_t *pcCommandString) {
 800a6ee:	b530      	push	{r4, r5, lr}
 800a6f0:	b083      	sub	sp, #12
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a6f2:	2101      	movs	r1, #1
		const int8_t *pcCommandString) {
 800a6f4:	0005      	movs	r5, r0
 800a6f6:	0010      	movs	r0, r2
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a6f8:	aa01      	add	r2, sp, #4
	portBASE_TYPE xParameterStringLength1 = 0;
 800a6fa:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a6fc:	f003 fb3a 	bl	800dd74 <FreeRTOS_CLIGetParameter>
	if (!strcmp((char*) pcParameterString1, "inf")
 800a700:	4914      	ldr	r1, [pc, #80]	; (800a754 <onCommand+0x68>)
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 800a702:	0004      	movs	r4, r0
	if (!strcmp((char*) pcParameterString1, "inf")
 800a704:	f7f5 fcfe 	bl	8000104 <strcmp>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d005      	beq.n	800a718 <onCommand+0x2c>
			|| !strcmp((char*) pcParameterString1, "INF"))
 800a70c:	0020      	movs	r0, r4
 800a70e:	4912      	ldr	r1, [pc, #72]	; (800a758 <onCommand+0x6c>)
 800a710:	f7f5 fcf8 	bl	8000104 <strcmp>
 800a714:	2800      	cmp	r0, #0
 800a716:	d10d      	bne.n	800a734 <onCommand+0x48>
	result = Output_on(timeout);
 800a718:	2001      	movs	r0, #1
 800a71a:	4240      	negs	r0, r0
 800a71c:	f7ff ffa2 	bl	800a664 <Output_on>
	if (result == H0FR1_OK) {
 800a720:	2800      	cmp	r0, #0
 800a722:	d104      	bne.n	800a72e <onCommand+0x42>
			strcpy((char*) pcWriteBuffer, (char*) pcOKMessageInf);
 800a724:	2232      	movs	r2, #50	; 0x32
 800a726:	0028      	movs	r0, r5
 800a728:	490c      	ldr	r1, [pc, #48]	; (800a75c <onCommand+0x70>)
 800a72a:	f008 fd2f 	bl	801318c <memcpy>
}
 800a72e:	2000      	movs	r0, #0
 800a730:	b003      	add	sp, #12
 800a732:	bd30      	pop	{r4, r5, pc}
		timeout = (uint32_t) atol((char*) pcParameterString1);
 800a734:	0020      	movs	r0, r4
 800a736:	f008 fa6a 	bl	8012c0e <atol>
 800a73a:	0004      	movs	r4, r0
	result = Output_on(timeout);
 800a73c:	f7ff ff92 	bl	800a664 <Output_on>
	if (result == H0FR1_OK) {
 800a740:	2800      	cmp	r0, #0
 800a742:	d1f4      	bne.n	800a72e <onCommand+0x42>
		if (timeout != portMAX_DELAY) {
 800a744:	1c63      	adds	r3, r4, #1
 800a746:	d0ed      	beq.n	800a724 <onCommand+0x38>
			sprintf((char*) pcWriteBuffer, (char*) pcOKMessage, timeout);
 800a748:	0022      	movs	r2, r4
 800a74a:	0028      	movs	r0, r5
 800a74c:	4904      	ldr	r1, [pc, #16]	; (800a760 <onCommand+0x74>)
 800a74e:	f008 ff17 	bl	8013580 <sprintf>
 800a752:	e7ec      	b.n	800a72e <onCommand+0x42>
 800a754:	0801c058 	.word	0x0801c058
 800a758:	0801c05c 	.word	0x0801c05c
 800a75c:	0801c098 	.word	0x0801c098
 800a760:	0801c060 	.word	0x0801c060

0800a764 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	ab04      	add	r3, sp, #16
 800a768:	781a      	ldrb	r2, [r3, #0]
	switch (code) {
 800a76a:	4b2f      	ldr	r3, [pc, #188]	; (800a828 <Module_MessagingTask+0xc4>)
 800a76c:	4298      	cmp	r0, r3
 800a76e:	d008      	beq.n	800a782 <Module_MessagingTask+0x1e>
 800a770:	3301      	adds	r3, #1
 800a772:	4298      	cmp	r0, r3
 800a774:	d029      	beq.n	800a7ca <Module_MessagingTask+0x66>
 800a776:	4b2d      	ldr	r3, [pc, #180]	; (800a82c <Module_MessagingTask+0xc8>)
 800a778:	2401      	movs	r4, #1
 800a77a:	4298      	cmp	r0, r3
 800a77c:	d00e      	beq.n	800a79c <Module_MessagingTask+0x38>
}
 800a77e:	0020      	movs	r0, r4
 800a780:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a782:	2200      	movs	r2, #0
 800a784:	2101      	movs	r1, #1
 800a786:	482a      	ldr	r0, [pc, #168]	; (800a830 <Module_MessagingTask+0xcc>)
 800a788:	f006 fd7e 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a78c:	4d29      	ldr	r5, [pc, #164]	; (800a834 <Module_MessagingTask+0xd0>)
 800a78e:	782b      	ldrb	r3, [r5, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d136      	bne.n	800a802 <Module_MessagingTask+0x9e>
	Switch_state = STATE_OFF;
 800a794:	2300      	movs	r3, #0
	Module_Status result = H0FR1_OK;
 800a796:	2400      	movs	r4, #0
	Switch_state = STATE_OFF;
 800a798:	706b      	strb	r3, [r5, #1]
	return result;
 800a79a:	e7f0      	b.n	800a77e <Module_MessagingTask+0x1a>
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800a79c:	3901      	subs	r1, #1
 800a79e:	00cb      	lsls	r3, r1, #3
 800a7a0:	1a59      	subs	r1, r3, r1
 800a7a2:	4b25      	ldr	r3, [pc, #148]	; (800a838 <Module_MessagingTask+0xd4>)
 800a7a4:	00c9      	lsls	r1, r1, #3
 800a7a6:	1859      	adds	r1, r3, r1
 800a7a8:	188b      	adds	r3, r1, r2
 800a7aa:	7858      	ldrb	r0, [r3, #1]
 800a7ac:	789c      	ldrb	r4, [r3, #2]
 800a7ae:	5c8a      	ldrb	r2, [r1, r2]
 800a7b0:	78db      	ldrb	r3, [r3, #3]
 800a7b2:	0424      	lsls	r4, r4, #16
 800a7b4:	0200      	lsls	r0, r0, #8
 800a7b6:	1900      	adds	r0, r0, r4
 800a7b8:	1880      	adds	r0, r0, r2
 800a7ba:	061b      	lsls	r3, r3, #24
 800a7bc:	18c0      	adds	r0, r0, r3
 800a7be:	4b1d      	ldr	r3, [pc, #116]	; (800a834 <Module_MessagingTask+0xd0>)
	Module_Status result = H0FR1_OK;
 800a7c0:	2400      	movs	r4, #0
		temp32 = cMessage[port - 1][shift] + ((uint32_t) cMessage[port - 1][1 + shift] << 8)+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)+ ((uint32_t)cMessage[port - 1][3 + shift]<< 24);
 800a7c2:	6098      	str	r0, [r3, #8]
		Output_on(temp32);
 800a7c4:	f7ff ff4e 	bl	800a664 <Output_on>
		break;
 800a7c8:	e7d9      	b.n	800a77e <Module_MessagingTask+0x1a>
	if (Switch_state) {
 800a7ca:	4d1a      	ldr	r5, [pc, #104]	; (800a834 <Module_MessagingTask+0xd0>)
 800a7cc:	786c      	ldrb	r4, [r5, #1]
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d10f      	bne.n	800a7f2 <Module_MessagingTask+0x8e>
		if (Switch_Oldstate == STATE_ON)
 800a7d2:	4e1a      	ldr	r6, [pc, #104]	; (800a83c <Module_MessagingTask+0xd8>)
 800a7d4:	7833      	ldrb	r3, [r6, #0]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d1d1      	bne.n	800a77e <Module_MessagingTask+0x1a>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_SET);
 800a7da:	2201      	movs	r2, #1
 800a7dc:	2101      	movs	r1, #1
 800a7de:	4814      	ldr	r0, [pc, #80]	; (800a830 <Module_MessagingTask+0xcc>)
 800a7e0:	f006 fd52 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a7e4:	782b      	ldrb	r3, [r5, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d116      	bne.n	800a818 <Module_MessagingTask+0xb4>
	Switch_state = STATE_ON;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	706b      	strb	r3, [r5, #1]
	Switch_Oldstate = Switch_state;
 800a7ee:	7033      	strb	r3, [r6, #0]
	return result;
 800a7f0:	e7c5      	b.n	800a77e <Module_MessagingTask+0x1a>
	HAL_GPIO_WritePin(_Switch_PORT, _Switch_PIN, GPIO_PIN_RESET);
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	480e      	ldr	r0, [pc, #56]	; (800a830 <Module_MessagingTask+0xcc>)
 800a7f8:	f006 fd46 	bl	8011288 <HAL_GPIO_WritePin>
	if (SwitchindMode)
 800a7fc:	782b      	ldrb	r3, [r5, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d0c8      	beq.n	800a794 <Module_MessagingTask+0x30>
		IND_OFF();
 800a802:	2180      	movs	r1, #128	; 0x80
 800a804:	2090      	movs	r0, #144	; 0x90
 800a806:	2200      	movs	r2, #0
 800a808:	0109      	lsls	r1, r1, #4
 800a80a:	05c0      	lsls	r0, r0, #23
 800a80c:	f006 fd3c 	bl	8011288 <HAL_GPIO_WritePin>
	Switch_state = STATE_OFF;
 800a810:	2300      	movs	r3, #0
	Module_Status result = H0FR1_OK;
 800a812:	2400      	movs	r4, #0
	Switch_state = STATE_OFF;
 800a814:	706b      	strb	r3, [r5, #1]
	return result;
 800a816:	e7b2      	b.n	800a77e <Module_MessagingTask+0x1a>
		IND_ON();
 800a818:	2180      	movs	r1, #128	; 0x80
 800a81a:	2090      	movs	r0, #144	; 0x90
 800a81c:	2201      	movs	r2, #1
 800a81e:	0109      	lsls	r1, r1, #4
 800a820:	05c0      	lsls	r0, r0, #23
 800a822:	f006 fd31 	bl	8011288 <HAL_GPIO_WritePin>
 800a826:	e7e0      	b.n	800a7ea <Module_MessagingTask+0x86>
 800a828:	000002ef 	.word	0x000002ef
 800a82c:	000002ee 	.word	0x000002ee
 800a830:	48000400 	.word	0x48000400
 800a834:	200021a4 	.word	0x200021a4
 800a838:	20000d40 	.word	0x20000d40
 800a83c:	20000094 	.word	0x20000094

0800a840 <DMA_Init>:

/** 
  * Initialize the DMAs
  */
void DMA_Init(void) 
{
 800a840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a842:	46de      	mov	lr, fp
 800a844:	4657      	mov	r7, sl
 800a846:	464e      	mov	r6, r9
 800a848:	4645      	mov	r5, r8
	/* DMA controller clock enable */
	__DMA1_CLK_ENABLE();
 800a84a:	2201      	movs	r2, #1
 800a84c:	4b53      	ldr	r3, [pc, #332]	; (800a99c <DMA_Init+0x15c>)
{
 800a84e:	b5e0      	push	{r5, r6, r7, lr}
	__DMA1_CLK_ENABLE();
 800a850:	6959      	ldr	r1, [r3, #20]
{
 800a852:	b083      	sub	sp, #12
	__DMA1_CLK_ENABLE();
 800a854:	4311      	orrs	r1, r2
 800a856:	6159      	str	r1, [r3, #20]
 800a858:	6959      	ldr	r1, [r3, #20]

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a85a:	4c51      	ldr	r4, [pc, #324]	; (800a9a0 <DMA_Init+0x160>)
	__DMA1_CLK_ENABLE();
 800a85c:	400a      	ands	r2, r1
 800a85e:	9200      	str	r2, [sp, #0]
 800a860:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800a862:	2202      	movs	r2, #2
 800a864:	6959      	ldr	r1, [r3, #20]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_CIRCULAR; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a866:	2780      	movs	r7, #128	; 0x80
	__DMA2_CLK_ENABLE();
 800a868:	4311      	orrs	r1, r2
 800a86a:	6159      	str	r1, [r3, #20]
 800a86c:	695b      	ldr	r3, [r3, #20]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a86e:	2500      	movs	r5, #0
	__DMA2_CLK_ENABLE();
 800a870:	401a      	ands	r2, r3
 800a872:	9201      	str	r2, [sp, #4]
 800a874:	9b01      	ldr	r3, [sp, #4]
	hDMA->Instance = ch;
 800a876:	4b4b      	ldr	r3, [pc, #300]	; (800a9a4 <DMA_Init+0x164>)
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a878:	2680      	movs	r6, #128	; 0x80
	hDMA->Instance = ch;
 800a87a:	6023      	str	r3, [r4, #0]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a87c:	2320      	movs	r3, #32
 800a87e:	469b      	mov	fp, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a880:	01bf      	lsls	r7, r7, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a882:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a884:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a886:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a888:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a88a:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a88c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a88e:	61e7      	str	r7, [r4, #28]
	
	HAL_DMA_Init(hDMA);		
 800a890:	0020      	movs	r0, r4
 800a892:	f005 fc4b 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a896:	4b44      	ldr	r3, [pc, #272]	; (800a9a8 <DMA_Init+0x168>)
	HAL_DMA_Init(hDMA);		
 800a898:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a89a:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a89c:	465b      	mov	r3, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a89e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a8a0:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a8a2:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8a4:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8a6:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8a8:	6523      	str	r3, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a8aa:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a8ac:	3038      	adds	r0, #56	; 0x38
 800a8ae:	f005 fc3d 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a8b2:	4b3e      	ldr	r3, [pc, #248]	; (800a9ac <DMA_Init+0x16c>)
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8b4:	465a      	mov	r2, fp
	hDMA->Instance = ch;
 800a8b6:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8b8:	2384      	movs	r3, #132	; 0x84
	HAL_DMA_Init(hDMA);		
 800a8ba:	0020      	movs	r0, r4
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8bc:	50e5      	str	r5, [r4, r3]
 800a8be:	469a      	mov	sl, r3
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	50e2      	str	r2, [r4, r3]
 800a8c4:	4699      	mov	r9, r3
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	50e7      	str	r7, [r4, r3]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8ca:	6765      	str	r5, [r4, #116]	; 0x74
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a8cc:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a8ce:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8d0:	51a5      	str	r5, [r4, r6]
	HAL_DMA_Init(hDMA);		
 800a8d2:	3070      	adds	r0, #112	; 0x70
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a8d4:	4698      	mov	r8, r3
	HAL_DMA_Init(hDMA);		
 800a8d6:	f005 fc29 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a8da:	23a8      	movs	r3, #168	; 0xa8
 800a8dc:	4a34      	ldr	r2, [pc, #208]	; (800a9b0 <DMA_Init+0x170>)
	HAL_DMA_Init(hDMA);		
 800a8de:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a8e0:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8e2:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a900:	30a8      	adds	r0, #168	; 0xa8
 800a902:	f005 fc13 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a906:	23e0      	movs	r3, #224	; 0xe0
 800a908:	4a2a      	ldr	r2, [pc, #168]	; (800a9b4 <DMA_Init+0x174>)
	HAL_DMA_Init(hDMA);		
 800a90a:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a90c:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a90e:	465a      	mov	r2, fp
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a910:	3304      	adds	r3, #4
 800a912:	50e5      	str	r5, [r4, r3]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a914:	3304      	adds	r3, #4
 800a916:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a918:	3304      	adds	r3, #4
 800a91a:	50e6      	str	r6, [r4, r3]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a91c:	3304      	adds	r3, #4
 800a91e:	50e5      	str	r5, [r4, r3]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a920:	3304      	adds	r3, #4
 800a922:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800a924:	3304      	adds	r3, #4
 800a926:	50e2      	str	r2, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a928:	3304      	adds	r3, #4
 800a92a:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a92c:	30e0      	adds	r0, #224	; 0xe0
 800a92e:	f005 fbfd 	bl	801012c <HAL_DMA_Init>

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
	hDMA->Instance = ch;
 800a932:	4c21      	ldr	r4, [pc, #132]	; (800a9b8 <DMA_Init+0x178>)
 800a934:	4b21      	ldr	r3, [pc, #132]	; (800a9bc <DMA_Init+0x17c>)
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
	hDMA->Init.Mode = DMA_NORMAL; 
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
	
	HAL_DMA_Init(hDMA);		
 800a936:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a938:	6023      	str	r3, [r4, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a93a:	2310      	movs	r3, #16
 800a93c:	469b      	mov	fp, r3
 800a93e:	6063      	str	r3, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a940:	60a5      	str	r5, [r4, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a942:	60e6      	str	r6, [r4, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a944:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a946:	6165      	str	r5, [r4, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a948:	61a5      	str	r5, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a94a:	61e7      	str	r7, [r4, #28]
	HAL_DMA_Init(hDMA);		
 800a94c:	f005 fbee 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a950:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <DMA_Init+0x180>)
	HAL_DMA_Init(hDMA);		
 800a952:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a954:	63a3      	str	r3, [r4, #56]	; 0x38
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a956:	465b      	mov	r3, fp
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a958:	6425      	str	r5, [r4, #64]	; 0x40
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a95a:	63e3      	str	r3, [r4, #60]	; 0x3c
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a95c:	6466      	str	r6, [r4, #68]	; 0x44
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a95e:	64a5      	str	r5, [r4, #72]	; 0x48
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a960:	64e5      	str	r5, [r4, #76]	; 0x4c
	hDMA->Init.Mode = DMA_NORMAL; 
 800a962:	6525      	str	r5, [r4, #80]	; 0x50
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a964:	6567      	str	r7, [r4, #84]	; 0x54
	HAL_DMA_Init(hDMA);		
 800a966:	3038      	adds	r0, #56	; 0x38
 800a968:	f005 fbe0 	bl	801012c <HAL_DMA_Init>
	hDMA->Instance = ch;
 800a96c:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <DMA_Init+0x184>)
	HAL_DMA_Init(hDMA);		
 800a96e:	0020      	movs	r0, r4
	hDMA->Instance = ch;
 800a970:	6723      	str	r3, [r4, #112]	; 0x70
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a972:	465b      	mov	r3, fp
 800a974:	6763      	str	r3, [r4, #116]	; 0x74
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a976:	4653      	mov	r3, sl
 800a978:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Mode = DMA_NORMAL; 
 800a97a:	464b      	mov	r3, r9
 800a97c:	50e5      	str	r5, [r4, r3]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a97e:	4643      	mov	r3, r8
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800a980:	67a5      	str	r5, [r4, #120]	; 0x78
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800a982:	67e6      	str	r6, [r4, #124]	; 0x7c
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a984:	51a5      	str	r5, [r4, r6]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800a986:	50e7      	str	r7, [r4, r3]
	HAL_DMA_Init(hDMA);		
 800a988:	3070      	adds	r0, #112	; 0x70
 800a98a:	f005 fbcf 	bl	801012c <HAL_DMA_Init>
}
 800a98e:	b003      	add	sp, #12
 800a990:	bcf0      	pop	{r4, r5, r6, r7}
 800a992:	46bb      	mov	fp, r7
 800a994:	46b2      	mov	sl, r6
 800a996:	46a9      	mov	r9, r5
 800a998:	46a0      	mov	r8, r4
 800a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99c:	40021000 	.word	0x40021000
 800a9a0:	200026e8 	.word	0x200026e8
 800a9a4:	40020008 	.word	0x40020008
 800a9a8:	40020030 	.word	0x40020030
 800a9ac:	40020058 	.word	0x40020058
 800a9b0:	4002006c 	.word	0x4002006c
 800a9b4:	4002041c 	.word	0x4002041c
 800a9b8:	20002640 	.word	0x20002640
 800a9bc:	4002001c 	.word	0x4002001c
 800a9c0:	40020044 	.word	0x40020044
 800a9c4:	40020080 	.word	0x40020080

0800a9c8 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800a9c8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800a9ca:	1e44      	subs	r4, r0, #1
 800a9cc:	00e5      	lsls	r5, r4, #3
 800a9ce:	4e07      	ldr	r6, [pc, #28]	; (800a9ec <StopStreamDMA+0x24>)
 800a9d0:	1b2d      	subs	r5, r5, r4
 800a9d2:	00ed      	lsls	r5, r5, #3
 800a9d4:	19a8      	adds	r0, r5, r6

	HAL_DMA_Abort(hDMA);
 800a9d6:	f005 fc01 	bl	80101dc <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	59aa      	ldr	r2, [r5, r6]
	dmaStreamCount[port - 1] = 0;
 800a9de:	00a4      	lsls	r4, r4, #2
	hDMA->Instance->CNDTR = 0;
 800a9e0:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800a9e2:	4a03      	ldr	r2, [pc, #12]	; (800a9f0 <StopStreamDMA+0x28>)
 800a9e4:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800a9e6:	4a03      	ldr	r2, [pc, #12]	; (800a9f4 <StopStreamDMA+0x2c>)
 800a9e8:	50a3      	str	r3, [r4, r2]

}
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	200024f0 	.word	0x200024f0
 800a9f0:	200019a0 	.word	0x200019a0
 800a9f4:	200019b4 	.word	0x200019b4

0800a9f8 <SwitchMsgDMAToStream>:
 */
void StopMsgDMA(uint8_t port){
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800a9f8:	3801      	subs	r0, #1

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800a9fa:	b570      	push	{r4, r5, r6, lr}
 800a9fc:	00c4      	lsls	r4, r0, #3
	hDMA =&msgRxDMA[port - 1];
 800a9fe:	4d0c      	ldr	r5, [pc, #48]	; (800aa30 <SwitchMsgDMAToStream+0x38>)
 800aa00:	1a24      	subs	r4, r4, r0
 800aa02:	00e4      	lsls	r4, r4, #3
 800aa04:	1960      	adds	r0, r4, r5
	HAL_DMA_Abort(hDMA);
 800aa06:	f005 fbe9 	bl	80101dc <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	5962      	ldr	r2, [r4, r5]
	hDMA->Instance = ch;
 800aa0e:	4809      	ldr	r0, [pc, #36]	; (800aa34 <SwitchMsgDMAToStream+0x3c>)
	hDMA->Instance->CNDTR =0;
 800aa10:	6053      	str	r3, [r2, #4]
	hDMA->Instance = ch;
 800aa12:	5022      	str	r2, [r4, r0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aa14:	1900      	adds	r0, r0, r4
 800aa16:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800aa18:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800aa1a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aa1c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aa1e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800aa20:	3320      	adds	r3, #32
 800aa22:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800aa24:	2380      	movs	r3, #128	; 0x80
 800aa26:	015b      	lsls	r3, r3, #5
 800aa28:	61c3      	str	r3, [r0, #28]
	HAL_DMA_Init(hDMA);		
 800aa2a:	f005 fb7f 	bl	801012c <HAL_DMA_Init>
	// Stop the messaging DMA
	StopMsgDMA(port);

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
}
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	200026e8 	.word	0x200026e8
 800aa34:	200024f0 	.word	0x200024f0

0800aa38 <SetupDMAInterrupts>:

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
	switch ((uint32_t)hDMA->Instance)
 800aa38:	6803      	ldr	r3, [r0, #0]
 800aa3a:	4a22      	ldr	r2, [pc, #136]	; (800aac4 <SetupDMAInterrupts+0x8c>)
{
 800aa3c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d019      	beq.n	800aa76 <SetupDMAInterrupts+0x3e>
 800aa42:	d928      	bls.n	800aa96 <SetupDMAInterrupts+0x5e>
 800aa44:	4a20      	ldr	r2, [pc, #128]	; (800aac8 <SetupDMAInterrupts+0x90>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d015      	beq.n	800aa76 <SetupDMAInterrupts+0x3e>
 800aa4a:	d91c      	bls.n	800aa86 <SetupDMAInterrupts+0x4e>
 800aa4c:	4a1f      	ldr	r2, [pc, #124]	; (800aacc <SetupDMAInterrupts+0x94>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d006      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aa52:	d90d      	bls.n	800aa70 <SetupDMAInterrupts+0x38>
 800aa54:	4a1e      	ldr	r2, [pc, #120]	; (800aad0 <SetupDMAInterrupts+0x98>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d002      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aa5a:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <SetupDMAInterrupts+0x9c>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d106      	bne.n	800aa6e <SetupDMAInterrupts+0x36>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800aa60:	200b      	movs	r0, #11
 800aa62:	2200      	movs	r2, #0
 800aa64:	f005 f9de 	bl	800fe24 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800aa68:	200b      	movs	r0, #11
 800aa6a:	f005 fa0d 	bl	800fe88 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800aa6e:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800aa70:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <SetupDMAInterrupts+0xa0>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d1fb      	bne.n	800aa6e <SetupDMAInterrupts+0x36>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800aa76:	2200      	movs	r2, #0
 800aa78:	200a      	movs	r0, #10
 800aa7a:	f005 f9d3 	bl	800fe24 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800aa7e:	200a      	movs	r0, #10
 800aa80:	f005 fa02 	bl	800fe88 <HAL_NVIC_EnableIRQ>
			break;
 800aa84:	e7f3      	b.n	800aa6e <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800aa86:	4a15      	ldr	r2, [pc, #84]	; (800aadc <SetupDMAInterrupts+0xa4>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d0e9      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aa8c:	d90e      	bls.n	800aaac <SetupDMAInterrupts+0x74>
 800aa8e:	4a14      	ldr	r2, [pc, #80]	; (800aae0 <SetupDMAInterrupts+0xa8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d0e5      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aa94:	e7eb      	b.n	800aa6e <SetupDMAInterrupts+0x36>
 800aa96:	4a13      	ldr	r2, [pc, #76]	; (800aae4 <SetupDMAInterrupts+0xac>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d10e      	bne.n	800aaba <SetupDMAInterrupts+0x82>
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	2009      	movs	r0, #9
 800aaa0:	f005 f9c0 	bl	800fe24 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800aaa4:	2009      	movs	r0, #9
 800aaa6:	f005 f9ef 	bl	800fe88 <HAL_NVIC_EnableIRQ>
			break;
 800aaaa:	e7e0      	b.n	800aa6e <SetupDMAInterrupts+0x36>
	switch ((uint32_t)hDMA->Instance)
 800aaac:	4a0e      	ldr	r2, [pc, #56]	; (800aae8 <SetupDMAInterrupts+0xb0>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d0d6      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aab2:	4a0e      	ldr	r2, [pc, #56]	; (800aaec <SetupDMAInterrupts+0xb4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d0d3      	beq.n	800aa60 <SetupDMAInterrupts+0x28>
 800aab8:	e7d9      	b.n	800aa6e <SetupDMAInterrupts+0x36>
 800aaba:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <SetupDMAInterrupts+0xb8>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d0da      	beq.n	800aa76 <SetupDMAInterrupts+0x3e>
 800aac0:	e7d5      	b.n	800aa6e <SetupDMAInterrupts+0x36>
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	40020030 	.word	0x40020030
 800aac8:	40020408 	.word	0x40020408
 800aacc:	40020430 	.word	0x40020430
 800aad0:	40020444 	.word	0x40020444
 800aad4:	40020458 	.word	0x40020458
 800aad8:	4002041c 	.word	0x4002041c
 800aadc:	4002006c 	.word	0x4002006c
 800aae0:	40020080 	.word	0x40020080
 800aae4:	40020008 	.word	0x40020008
 800aae8:	40020044 	.word	0x40020044
 800aaec:	40020058 	.word	0x40020058
 800aaf0:	4002001c 	.word	0x4002001c

0800aaf4 <UnSetupDMAInterrupts>:

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
	switch ((uint32_t)hDMA->Instance)
 800aaf4:	6803      	ldr	r3, [r0, #0]
 800aaf6:	4a1c      	ldr	r2, [pc, #112]	; (800ab68 <UnSetupDMAInterrupts+0x74>)
{
 800aaf8:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d015      	beq.n	800ab2a <UnSetupDMAInterrupts+0x36>
 800aafe:	d920      	bls.n	800ab42 <UnSetupDMAInterrupts+0x4e>
 800ab00:	4a1a      	ldr	r2, [pc, #104]	; (800ab6c <UnSetupDMAInterrupts+0x78>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d011      	beq.n	800ab2a <UnSetupDMAInterrupts+0x36>
 800ab06:	d914      	bls.n	800ab32 <UnSetupDMAInterrupts+0x3e>
 800ab08:	4a19      	ldr	r2, [pc, #100]	; (800ab70 <UnSetupDMAInterrupts+0x7c>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d006      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab0e:	d909      	bls.n	800ab24 <UnSetupDMAInterrupts+0x30>
 800ab10:	4a18      	ldr	r2, [pc, #96]	; (800ab74 <UnSetupDMAInterrupts+0x80>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d002      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab16:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <UnSetupDMAInterrupts+0x84>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d102      	bne.n	800ab22 <UnSetupDMAInterrupts+0x2e>
		case (uint32_t)DMA1_Channel6:
		case (uint32_t)DMA1_Channel7:
		case (uint32_t)DMA2_Channel3:
		case (uint32_t)DMA2_Channel4:
		case (uint32_t)DMA2_Channel5:
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ab1c:	200b      	movs	r0, #11
 800ab1e:	f005 f9bd 	bl	800fe9c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800ab22:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ab24:	4a15      	ldr	r2, [pc, #84]	; (800ab7c <UnSetupDMAInterrupts+0x88>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d1fb      	bne.n	800ab22 <UnSetupDMAInterrupts+0x2e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ab2a:	200a      	movs	r0, #10
 800ab2c:	f005 f9b6 	bl	800fe9c <HAL_NVIC_DisableIRQ>
			break;
 800ab30:	e7f7      	b.n	800ab22 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800ab32:	4a13      	ldr	r2, [pc, #76]	; (800ab80 <UnSetupDMAInterrupts+0x8c>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d0f1      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab38:	d90a      	bls.n	800ab50 <UnSetupDMAInterrupts+0x5c>
 800ab3a:	4a12      	ldr	r2, [pc, #72]	; (800ab84 <UnSetupDMAInterrupts+0x90>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d0ed      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab40:	e7ef      	b.n	800ab22 <UnSetupDMAInterrupts+0x2e>
 800ab42:	4a11      	ldr	r2, [pc, #68]	; (800ab88 <UnSetupDMAInterrupts+0x94>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d10a      	bne.n	800ab5e <UnSetupDMAInterrupts+0x6a>
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ab48:	2009      	movs	r0, #9
 800ab4a:	f005 f9a7 	bl	800fe9c <HAL_NVIC_DisableIRQ>
			break;
 800ab4e:	e7e8      	b.n	800ab22 <UnSetupDMAInterrupts+0x2e>
	switch ((uint32_t)hDMA->Instance)
 800ab50:	4a0e      	ldr	r2, [pc, #56]	; (800ab8c <UnSetupDMAInterrupts+0x98>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d0e2      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab56:	4a0e      	ldr	r2, [pc, #56]	; (800ab90 <UnSetupDMAInterrupts+0x9c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d0df      	beq.n	800ab1c <UnSetupDMAInterrupts+0x28>
 800ab5c:	e7e1      	b.n	800ab22 <UnSetupDMAInterrupts+0x2e>
 800ab5e:	4a0d      	ldr	r2, [pc, #52]	; (800ab94 <UnSetupDMAInterrupts+0xa0>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d0e2      	beq.n	800ab2a <UnSetupDMAInterrupts+0x36>
 800ab64:	e7dd      	b.n	800ab22 <UnSetupDMAInterrupts+0x2e>
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	40020030 	.word	0x40020030
 800ab6c:	40020408 	.word	0x40020408
 800ab70:	40020430 	.word	0x40020430
 800ab74:	40020444 	.word	0x40020444
 800ab78:	40020458 	.word	0x40020458
 800ab7c:	4002041c 	.word	0x4002041c
 800ab80:	4002006c 	.word	0x4002006c
 800ab84:	40020080 	.word	0x40020080
 800ab88:	40020008 	.word	0x40020008
 800ab8c:	40020044 	.word	0x40020044
 800ab90:	40020058 	.word	0x40020058
 800ab94:	4002001c 	.word	0x4002001c

0800ab98 <DMA_MSG_TX_UnSetup>:
{	
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ab9c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ab9e:	f7ff ffa9 	bl	800aaf4 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800aba6:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800aba8:	6623      	str	r3, [r4, #96]	; 0x60
}
 800abaa:	bd10      	pop	{r4, pc}

0800abac <RemapAndLinkDMAtoUARTRx>:
/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800abac:	6803      	ldr	r3, [r0, #0]
 800abae:	4ac9      	ldr	r2, [pc, #804]	; (800aed4 <RemapAndLinkDMAtoUARTRx+0x328>)
{
 800abb0:	b570      	push	{r4, r5, r6, lr}
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d03d      	beq.n	800ac32 <RemapAndLinkDMAtoUARTRx+0x86>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800abb6:	4ac8      	ldr	r2, [pc, #800]	; (800aed8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d05a      	beq.n	800ac72 <RemapAndLinkDMAtoUARTRx+0xc6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800abbc:	4ac7      	ldr	r2, [pc, #796]	; (800aedc <RemapAndLinkDMAtoUARTRx+0x330>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d100      	bne.n	800abc4 <RemapAndLinkDMAtoUARTRx+0x18>
 800abc2:	e072      	b.n	800acaa <RemapAndLinkDMAtoUARTRx+0xfe>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800abc4:	4ac6      	ldr	r2, [pc, #792]	; (800aee0 <RemapAndLinkDMAtoUARTRx+0x334>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d100      	bne.n	800abcc <RemapAndLinkDMAtoUARTRx+0x20>
 800abca:	e0c2      	b.n	800ad52 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800abcc:	4ac5      	ldr	r2, [pc, #788]	; (800aee4 <RemapAndLinkDMAtoUARTRx+0x338>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d100      	bne.n	800abd4 <RemapAndLinkDMAtoUARTRx+0x28>
 800abd2:	e0ed      	b.n	800adb0 <RemapAndLinkDMAtoUARTRx+0x204>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800abd4:	4ac4      	ldr	r2, [pc, #784]	; (800aee8 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d100      	bne.n	800abdc <RemapAndLinkDMAtoUARTRx+0x30>
 800abda:	e1a1      	b.n	800af20 <RemapAndLinkDMAtoUARTRx+0x374>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800abdc:	4ac3      	ldr	r2, [pc, #780]	; (800aeec <RemapAndLinkDMAtoUARTRx+0x340>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d100      	bne.n	800abe4 <RemapAndLinkDMAtoUARTRx+0x38>
 800abe2:	e1e7      	b.n	800afb4 <RemapAndLinkDMAtoUARTRx+0x408>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800abe4:	4ac2      	ldr	r2, [pc, #776]	; (800aef0 <RemapAndLinkDMAtoUARTRx+0x344>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d15c      	bne.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800abea:	680b      	ldr	r3, [r1, #0]
 800abec:	4ac1      	ldr	r2, [pc, #772]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d100      	bne.n	800abf4 <RemapAndLinkDMAtoUARTRx+0x48>
 800abf2:	e293      	b.n	800b11c <RemapAndLinkDMAtoUARTRx+0x570>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800abf4:	4ac0      	ldr	r2, [pc, #768]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d100      	bne.n	800abfc <RemapAndLinkDMAtoUARTRx+0x50>
 800abfa:	e299      	b.n	800b130 <RemapAndLinkDMAtoUARTRx+0x584>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800abfc:	4abf      	ldr	r2, [pc, #764]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d100      	bne.n	800ac04 <RemapAndLinkDMAtoUARTRx+0x58>
 800ac02:	e297      	b.n	800b134 <RemapAndLinkDMAtoUARTRx+0x588>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800ac04:	4abe      	ldr	r2, [pc, #760]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d100      	bne.n	800ac0c <RemapAndLinkDMAtoUARTRx+0x60>
 800ac0a:	e29f      	b.n	800b14c <RemapAndLinkDMAtoUARTRx+0x5a0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800ac0c:	4abd      	ldr	r2, [pc, #756]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d100      	bne.n	800ac14 <RemapAndLinkDMAtoUARTRx+0x68>
 800ac12:	e2a7      	b.n	800b164 <RemapAndLinkDMAtoUARTRx+0x5b8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ac14:	4abc      	ldr	r2, [pc, #752]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d144      	bne.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ac1a:	4abc      	ldr	r2, [pc, #752]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ac1c:	23a8      	movs	r3, #168	; 0xa8
 800ac1e:	4dbc      	ldr	r5, [pc, #752]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ac20:	58d4      	ldr	r4, [r2, r3]
 800ac22:	402c      	ands	r4, r5
 800ac24:	50d4      	str	r4, [r2, r3]
 800ac26:	24f0      	movs	r4, #240	; 0xf0
 800ac28:	58d5      	ldr	r5, [r2, r3]
 800ac2a:	0124      	lsls	r4, r4, #4
 800ac2c:	432c      	orrs	r4, r5
 800ac2e:	50d4      	str	r4, [r2, r3]
 800ac30:	e038      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ac32:	680b      	ldr	r3, [r1, #0]
 800ac34:	4aaf      	ldr	r2, [pc, #700]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d100      	bne.n	800ac3c <RemapAndLinkDMAtoUARTRx+0x90>
 800ac3a:	e07f      	b.n	800ad3c <RemapAndLinkDMAtoUARTRx+0x190>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800ac3c:	4aae      	ldr	r2, [pc, #696]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d057      	beq.n	800acf2 <RemapAndLinkDMAtoUARTRx+0x146>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800ac42:	4aae      	ldr	r2, [pc, #696]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d056      	beq.n	800acf6 <RemapAndLinkDMAtoUARTRx+0x14a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800ac48:	4aad      	ldr	r2, [pc, #692]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d05f      	beq.n	800ad0e <RemapAndLinkDMAtoUARTRx+0x162>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800ac4e:	4aad      	ldr	r2, [pc, #692]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d068      	beq.n	800ad26 <RemapAndLinkDMAtoUARTRx+0x17a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800ac54:	4aac      	ldr	r2, [pc, #688]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d124      	bne.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ac5a:	4aac      	ldr	r2, [pc, #688]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ac5c:	23a8      	movs	r3, #168	; 0xa8
 800ac5e:	4dac      	ldr	r5, [pc, #688]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ac60:	58d4      	ldr	r4, [r2, r3]
 800ac62:	402c      	ands	r4, r5
 800ac64:	50d4      	str	r4, [r2, r3]
 800ac66:	2480      	movs	r4, #128	; 0x80
 800ac68:	58d5      	ldr	r5, [r2, r3]
 800ac6a:	0124      	lsls	r4, r4, #4
 800ac6c:	432c      	orrs	r4, r5
 800ac6e:	50d4      	str	r4, [r2, r3]
 800ac70:	e018      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ac72:	680b      	ldr	r3, [r1, #0]
 800ac74:	4a9f      	ldr	r2, [pc, #636]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d100      	bne.n	800ac7c <RemapAndLinkDMAtoUARTRx+0xd0>
 800ac7a:	e08e      	b.n	800ad9a <RemapAndLinkDMAtoUARTRx+0x1ee>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ac7c:	4a9e      	ldr	r2, [pc, #632]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d100      	bne.n	800ac84 <RemapAndLinkDMAtoUARTRx+0xd8>
 800ac82:	e0d0      	b.n	800ae26 <RemapAndLinkDMAtoUARTRx+0x27a>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ac84:	4a9d      	ldr	r2, [pc, #628]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d100      	bne.n	800ac8c <RemapAndLinkDMAtoUARTRx+0xe0>
 800ac8a:	e0d8      	b.n	800ae3e <RemapAndLinkDMAtoUARTRx+0x292>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ac8c:	4a9c      	ldr	r2, [pc, #624]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d100      	bne.n	800ac94 <RemapAndLinkDMAtoUARTRx+0xe8>
 800ac92:	e0e0      	b.n	800ae56 <RemapAndLinkDMAtoUARTRx+0x2aa>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ac94:	4a9b      	ldr	r2, [pc, #620]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d100      	bne.n	800ac9c <RemapAndLinkDMAtoUARTRx+0xf0>
 800ac9a:	e0e8      	b.n	800ae6e <RemapAndLinkDMAtoUARTRx+0x2c2>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ac9c:	4a9a      	ldr	r2, [pc, #616]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d100      	bne.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800aca2:	e0ef      	b.n	800ae84 <RemapAndLinkDMAtoUARTRx+0x2d8>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800aca4:	6641      	str	r1, [r0, #100]	; 0x64
 800aca6:	6248      	str	r0, [r1, #36]	; 0x24
}
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800acaa:	680b      	ldr	r3, [r1, #0]
 800acac:	4a91      	ldr	r2, [pc, #580]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d100      	bne.n	800acb4 <RemapAndLinkDMAtoUARTRx+0x108>
 800acb2:	e0e9      	b.n	800ae88 <RemapAndLinkDMAtoUARTRx+0x2dc>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800acb4:	4a90      	ldr	r2, [pc, #576]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d100      	bne.n	800acbc <RemapAndLinkDMAtoUARTRx+0x110>
 800acba:	e0f0      	b.n	800ae9e <RemapAndLinkDMAtoUARTRx+0x2f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800acbc:	4a8f      	ldr	r2, [pc, #572]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d100      	bne.n	800acc4 <RemapAndLinkDMAtoUARTRx+0x118>
 800acc2:	e0ee      	b.n	800aea2 <RemapAndLinkDMAtoUARTRx+0x2f6>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800acc4:	4a8e      	ldr	r2, [pc, #568]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d100      	bne.n	800accc <RemapAndLinkDMAtoUARTRx+0x120>
 800acca:	e0f6      	b.n	800aeba <RemapAndLinkDMAtoUARTRx+0x30e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800accc:	4a8d      	ldr	r2, [pc, #564]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d100      	bne.n	800acd4 <RemapAndLinkDMAtoUARTRx+0x128>
 800acd2:	e092      	b.n	800adfa <RemapAndLinkDMAtoUARTRx+0x24e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800acd4:	4a8c      	ldr	r2, [pc, #560]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d1e4      	bne.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800acda:	4a8c      	ldr	r2, [pc, #560]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800acdc:	23a8      	movs	r3, #168	; 0xa8
 800acde:	4d8c      	ldr	r5, [pc, #560]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ace0:	58d4      	ldr	r4, [r2, r3]
 800ace2:	402c      	ands	r4, r5
 800ace4:	50d4      	str	r4, [r2, r3]
 800ace6:	24a0      	movs	r4, #160	; 0xa0
 800ace8:	58d5      	ldr	r5, [r2, r3]
 800acea:	0124      	lsls	r4, r4, #4
 800acec:	432c      	orrs	r4, r5
 800acee:	50d4      	str	r4, [r2, r3]
 800acf0:	e7d8      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800acf2:	4a88      	ldr	r2, [pc, #544]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800acf4:	e7b2      	b.n	800ac5c <RemapAndLinkDMAtoUARTRx+0xb0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800acf6:	23a8      	movs	r3, #168	; 0xa8
 800acf8:	4a86      	ldr	r2, [pc, #536]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800acfa:	4d87      	ldr	r5, [pc, #540]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800acfc:	58d4      	ldr	r4, [r2, r3]
 800acfe:	402c      	ands	r4, r5
 800ad00:	50d4      	str	r4, [r2, r3]
 800ad02:	2480      	movs	r4, #128	; 0x80
 800ad04:	58d5      	ldr	r5, [r2, r3]
 800ad06:	0324      	lsls	r4, r4, #12
 800ad08:	432c      	orrs	r4, r5
 800ad0a:	50d4      	str	r4, [r2, r3]
 800ad0c:	e7ca      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800ad0e:	23a8      	movs	r3, #168	; 0xa8
 800ad10:	4a80      	ldr	r2, [pc, #512]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ad12:	4d82      	ldr	r5, [pc, #520]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x370>)
 800ad14:	58d4      	ldr	r4, [r2, r3]
 800ad16:	402c      	ands	r4, r5
 800ad18:	50d4      	str	r4, [r2, r3]
 800ad1a:	2480      	movs	r4, #128	; 0x80
 800ad1c:	58d5      	ldr	r5, [r2, r3]
 800ad1e:	0424      	lsls	r4, r4, #16
 800ad20:	432c      	orrs	r4, r5
 800ad22:	50d4      	str	r4, [r2, r3]
 800ad24:	e7be      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800ad26:	23a8      	movs	r3, #168	; 0xa8
 800ad28:	25f0      	movs	r5, #240	; 0xf0
 800ad2a:	4a78      	ldr	r2, [pc, #480]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ad2c:	58d4      	ldr	r4, [r2, r3]
 800ad2e:	43ac      	bics	r4, r5
 800ad30:	50d4      	str	r4, [r2, r3]
 800ad32:	58d4      	ldr	r4, [r2, r3]
 800ad34:	3d70      	subs	r5, #112	; 0x70
 800ad36:	432c      	orrs	r4, r5
 800ad38:	50d4      	str	r4, [r2, r3]
 800ad3a:	e7b3      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800ad3c:	23a8      	movs	r3, #168	; 0xa8
 800ad3e:	250f      	movs	r5, #15
 800ad40:	4a74      	ldr	r2, [pc, #464]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ad42:	58d4      	ldr	r4, [r2, r3]
 800ad44:	43ac      	bics	r4, r5
 800ad46:	50d4      	str	r4, [r2, r3]
 800ad48:	58d4      	ldr	r4, [r2, r3]
 800ad4a:	3d07      	subs	r5, #7
 800ad4c:	432c      	orrs	r4, r5
 800ad4e:	50d4      	str	r4, [r2, r3]
 800ad50:	e7a8      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800ad52:	680b      	ldr	r3, [r1, #0]
 800ad54:	4a67      	ldr	r2, [pc, #412]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d05a      	beq.n	800ae10 <RemapAndLinkDMAtoUARTRx+0x264>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ad5a:	4a67      	ldr	r2, [pc, #412]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d100      	bne.n	800ad62 <RemapAndLinkDMAtoUARTRx+0x1b6>
 800ad60:	e103      	b.n	800af6a <RemapAndLinkDMAtoUARTRx+0x3be>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800ad62:	4a66      	ldr	r2, [pc, #408]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d100      	bne.n	800ad6a <RemapAndLinkDMAtoUARTRx+0x1be>
 800ad68:	e101      	b.n	800af6e <RemapAndLinkDMAtoUARTRx+0x3c2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800ad6a:	4a65      	ldr	r2, [pc, #404]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d100      	bne.n	800ad72 <RemapAndLinkDMAtoUARTRx+0x1c6>
 800ad70:	e109      	b.n	800af86 <RemapAndLinkDMAtoUARTRx+0x3da>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800ad72:	4a64      	ldr	r2, [pc, #400]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d100      	bne.n	800ad7a <RemapAndLinkDMAtoUARTRx+0x1ce>
 800ad78:	e111      	b.n	800af9e <RemapAndLinkDMAtoUARTRx+0x3f2>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800ad7a:	4a63      	ldr	r2, [pc, #396]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d000      	beq.n	800ad82 <RemapAndLinkDMAtoUARTRx+0x1d6>
 800ad80:	e790      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800ad82:	4a62      	ldr	r2, [pc, #392]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ad84:	23a8      	movs	r3, #168	; 0xa8
 800ad86:	4d62      	ldr	r5, [pc, #392]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ad88:	58d4      	ldr	r4, [r2, r3]
 800ad8a:	402c      	ands	r4, r5
 800ad8c:	50d4      	str	r4, [r2, r3]
 800ad8e:	24b0      	movs	r4, #176	; 0xb0
 800ad90:	58d5      	ldr	r5, [r2, r3]
 800ad92:	0124      	lsls	r4, r4, #4
 800ad94:	432c      	orrs	r4, r5
 800ad96:	50d4      	str	r4, [r2, r3]
 800ad98:	e784      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ad9a:	23a8      	movs	r3, #168	; 0xa8
 800ad9c:	250f      	movs	r5, #15
 800ad9e:	4a5d      	ldr	r2, [pc, #372]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ada0:	58d4      	ldr	r4, [r2, r3]
 800ada2:	43ac      	bics	r4, r5
 800ada4:	50d4      	str	r4, [r2, r3]
 800ada6:	58d4      	ldr	r4, [r2, r3]
 800ada8:	3d06      	subs	r5, #6
 800adaa:	432c      	orrs	r4, r5
 800adac:	50d4      	str	r4, [r2, r3]
 800adae:	e779      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800adb0:	680b      	ldr	r3, [r1, #0]
 800adb2:	4a50      	ldr	r2, [pc, #320]	; (800aef4 <RemapAndLinkDMAtoUARTRx+0x348>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d100      	bne.n	800adba <RemapAndLinkDMAtoUARTRx+0x20e>
 800adb8:	e120      	b.n	800affc <RemapAndLinkDMAtoUARTRx+0x450>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800adba:	4a4f      	ldr	r2, [pc, #316]	; (800aef8 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d100      	bne.n	800adc2 <RemapAndLinkDMAtoUARTRx+0x216>
 800adc0:	e127      	b.n	800b012 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800adc2:	4a4e      	ldr	r2, [pc, #312]	; (800aefc <RemapAndLinkDMAtoUARTRx+0x350>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d100      	bne.n	800adca <RemapAndLinkDMAtoUARTRx+0x21e>
 800adc8:	e125      	b.n	800b016 <RemapAndLinkDMAtoUARTRx+0x46a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800adca:	4a4d      	ldr	r2, [pc, #308]	; (800af00 <RemapAndLinkDMAtoUARTRx+0x354>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d100      	bne.n	800add2 <RemapAndLinkDMAtoUARTRx+0x226>
 800add0:	e12d      	b.n	800b02e <RemapAndLinkDMAtoUARTRx+0x482>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800add2:	4a4c      	ldr	r2, [pc, #304]	; (800af04 <RemapAndLinkDMAtoUARTRx+0x358>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d100      	bne.n	800adda <RemapAndLinkDMAtoUARTRx+0x22e>
 800add8:	e135      	b.n	800b046 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800adda:	4a4b      	ldr	r2, [pc, #300]	; (800af08 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d000      	beq.n	800ade2 <RemapAndLinkDMAtoUARTRx+0x236>
 800ade0:	e760      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800ade2:	4a4a      	ldr	r2, [pc, #296]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ade4:	23a8      	movs	r3, #168	; 0xa8
 800ade6:	4d4a      	ldr	r5, [pc, #296]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ade8:	58d4      	ldr	r4, [r2, r3]
 800adea:	402c      	ands	r4, r5
 800adec:	50d4      	str	r4, [r2, r3]
 800adee:	24c0      	movs	r4, #192	; 0xc0
 800adf0:	58d5      	ldr	r5, [r2, r3]
 800adf2:	0124      	lsls	r4, r4, #4
 800adf4:	432c      	orrs	r4, r5
 800adf6:	50d4      	str	r4, [r2, r3]
 800adf8:	e754      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800adfa:	23a8      	movs	r3, #168	; 0xa8
 800adfc:	25f0      	movs	r5, #240	; 0xf0
 800adfe:	4a43      	ldr	r2, [pc, #268]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ae00:	58d4      	ldr	r4, [r2, r3]
 800ae02:	43ac      	bics	r4, r5
 800ae04:	50d4      	str	r4, [r2, r3]
 800ae06:	58d4      	ldr	r4, [r2, r3]
 800ae08:	3d50      	subs	r5, #80	; 0x50
 800ae0a:	432c      	orrs	r4, r5
 800ae0c:	50d4      	str	r4, [r2, r3]
 800ae0e:	e749      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800ae10:	23a8      	movs	r3, #168	; 0xa8
 800ae12:	250f      	movs	r5, #15
 800ae14:	4a3f      	ldr	r2, [pc, #252]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ae16:	58d4      	ldr	r4, [r2, r3]
 800ae18:	43ac      	bics	r4, r5
 800ae1a:	50d4      	str	r4, [r2, r3]
 800ae1c:	58d4      	ldr	r4, [r2, r3]
 800ae1e:	3d04      	subs	r5, #4
 800ae20:	432c      	orrs	r4, r5
 800ae22:	50d4      	str	r4, [r2, r3]
 800ae24:	e73e      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ae26:	4a3b      	ldr	r2, [pc, #236]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ae28:	23a8      	movs	r3, #168	; 0xa8
 800ae2a:	4d39      	ldr	r5, [pc, #228]	; (800af10 <RemapAndLinkDMAtoUARTRx+0x364>)
 800ae2c:	58d4      	ldr	r4, [r2, r3]
 800ae2e:	402c      	ands	r4, r5
 800ae30:	50d4      	str	r4, [r2, r3]
 800ae32:	2490      	movs	r4, #144	; 0x90
 800ae34:	58d5      	ldr	r5, [r2, r3]
 800ae36:	0124      	lsls	r4, r4, #4
 800ae38:	432c      	orrs	r4, r5
 800ae3a:	50d4      	str	r4, [r2, r3]
 800ae3c:	e732      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ae3e:	23a8      	movs	r3, #168	; 0xa8
 800ae40:	4a34      	ldr	r2, [pc, #208]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ae42:	4d35      	ldr	r5, [pc, #212]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800ae44:	58d4      	ldr	r4, [r2, r3]
 800ae46:	402c      	ands	r4, r5
 800ae48:	50d4      	str	r4, [r2, r3]
 800ae4a:	2490      	movs	r4, #144	; 0x90
 800ae4c:	58d5      	ldr	r5, [r2, r3]
 800ae4e:	0324      	lsls	r4, r4, #12
 800ae50:	432c      	orrs	r4, r5
 800ae52:	50d4      	str	r4, [r2, r3]
 800ae54:	e726      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ae56:	23a8      	movs	r3, #168	; 0xa8
 800ae58:	4a2e      	ldr	r2, [pc, #184]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ae5a:	4d30      	ldr	r5, [pc, #192]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x370>)
 800ae5c:	58d4      	ldr	r4, [r2, r3]
 800ae5e:	402c      	ands	r4, r5
 800ae60:	50d4      	str	r4, [r2, r3]
 800ae62:	2490      	movs	r4, #144	; 0x90
 800ae64:	58d5      	ldr	r5, [r2, r3]
 800ae66:	0424      	lsls	r4, r4, #16
 800ae68:	432c      	orrs	r4, r5
 800ae6a:	50d4      	str	r4, [r2, r3]
 800ae6c:	e71a      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ae6e:	23a8      	movs	r3, #168	; 0xa8
 800ae70:	25f0      	movs	r5, #240	; 0xf0
 800ae72:	4a26      	ldr	r2, [pc, #152]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ae74:	58d4      	ldr	r4, [r2, r3]
 800ae76:	43ac      	bics	r4, r5
 800ae78:	50d4      	str	r4, [r2, r3]
 800ae7a:	58d4      	ldr	r4, [r2, r3]
 800ae7c:	3d60      	subs	r5, #96	; 0x60
 800ae7e:	432c      	orrs	r4, r5
 800ae80:	50d4      	str	r4, [r2, r3]
 800ae82:	e70f      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ae84:	4a21      	ldr	r2, [pc, #132]	; (800af0c <RemapAndLinkDMAtoUARTRx+0x360>)
 800ae86:	e7cf      	b.n	800ae28 <RemapAndLinkDMAtoUARTRx+0x27c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800ae88:	23a8      	movs	r3, #168	; 0xa8
 800ae8a:	250f      	movs	r5, #15
 800ae8c:	4a21      	ldr	r2, [pc, #132]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800ae8e:	58d4      	ldr	r4, [r2, r3]
 800ae90:	43ac      	bics	r4, r5
 800ae92:	50d4      	str	r4, [r2, r3]
 800ae94:	58d4      	ldr	r4, [r2, r3]
 800ae96:	3d05      	subs	r5, #5
 800ae98:	432c      	orrs	r4, r5
 800ae9a:	50d4      	str	r4, [r2, r3]
 800ae9c:	e702      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800ae9e:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800aea0:	e71c      	b.n	800acdc <RemapAndLinkDMAtoUARTRx+0x130>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800aea2:	23a8      	movs	r3, #168	; 0xa8
 800aea4:	4a1b      	ldr	r2, [pc, #108]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800aea6:	4d1c      	ldr	r5, [pc, #112]	; (800af18 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800aea8:	58d4      	ldr	r4, [r2, r3]
 800aeaa:	402c      	ands	r4, r5
 800aeac:	50d4      	str	r4, [r2, r3]
 800aeae:	24a0      	movs	r4, #160	; 0xa0
 800aeb0:	58d5      	ldr	r5, [r2, r3]
 800aeb2:	0324      	lsls	r4, r4, #12
 800aeb4:	432c      	orrs	r4, r5
 800aeb6:	50d4      	str	r4, [r2, r3]
 800aeb8:	e6f4      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800aeba:	23a8      	movs	r3, #168	; 0xa8
 800aebc:	4a15      	ldr	r2, [pc, #84]	; (800af14 <RemapAndLinkDMAtoUARTRx+0x368>)
 800aebe:	4d17      	ldr	r5, [pc, #92]	; (800af1c <RemapAndLinkDMAtoUARTRx+0x370>)
 800aec0:	58d4      	ldr	r4, [r2, r3]
 800aec2:	402c      	ands	r4, r5
 800aec4:	50d4      	str	r4, [r2, r3]
 800aec6:	24a0      	movs	r4, #160	; 0xa0
 800aec8:	58d5      	ldr	r5, [r2, r3]
 800aeca:	0424      	lsls	r4, r4, #16
 800aecc:	432c      	orrs	r4, r5
 800aece:	50d4      	str	r4, [r2, r3]
 800aed0:	e6e8      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
 800aed2:	46c0      	nop			; (mov r8, r8)
 800aed4:	40013800 	.word	0x40013800
 800aed8:	40004400 	.word	0x40004400
 800aedc:	40004800 	.word	0x40004800
 800aee0:	40004c00 	.word	0x40004c00
 800aee4:	40005000 	.word	0x40005000
 800aee8:	40011400 	.word	0x40011400
 800aeec:	40011800 	.word	0x40011800
 800aef0:	40011c00 	.word	0x40011c00
 800aef4:	40020008 	.word	0x40020008
 800aef8:	40020030 	.word	0x40020030
 800aefc:	40020058 	.word	0x40020058
 800af00:	4002006c 	.word	0x4002006c
 800af04:	4002041c 	.word	0x4002041c
 800af08:	40020430 	.word	0x40020430
 800af0c:	40020400 	.word	0x40020400
 800af10:	fffff0ff 	.word	0xfffff0ff
 800af14:	40020000 	.word	0x40020000
 800af18:	fff0ffff 	.word	0xfff0ffff
 800af1c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800af20:	680b      	ldr	r3, [r1, #0]
 800af22:	4a93      	ldr	r2, [pc, #588]	; (800b170 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d100      	bne.n	800af2a <RemapAndLinkDMAtoUARTRx+0x37e>
 800af28:	e098      	b.n	800b05c <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800af2a:	4a92      	ldr	r2, [pc, #584]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d100      	bne.n	800af32 <RemapAndLinkDMAtoUARTRx+0x386>
 800af30:	e09f      	b.n	800b072 <RemapAndLinkDMAtoUARTRx+0x4c6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800af32:	4a91      	ldr	r2, [pc, #580]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d100      	bne.n	800af3a <RemapAndLinkDMAtoUARTRx+0x38e>
 800af38:	e09d      	b.n	800b076 <RemapAndLinkDMAtoUARTRx+0x4ca>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800af3a:	4a90      	ldr	r2, [pc, #576]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d100      	bne.n	800af42 <RemapAndLinkDMAtoUARTRx+0x396>
 800af40:	e0a5      	b.n	800b08e <RemapAndLinkDMAtoUARTRx+0x4e2>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800af42:	4a8f      	ldr	r2, [pc, #572]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d100      	bne.n	800af4a <RemapAndLinkDMAtoUARTRx+0x39e>
 800af48:	e0ad      	b.n	800b0a6 <RemapAndLinkDMAtoUARTRx+0x4fa>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800af4a:	4a8e      	ldr	r2, [pc, #568]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d000      	beq.n	800af52 <RemapAndLinkDMAtoUARTRx+0x3a6>
 800af50:	e6a8      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800af52:	4a8d      	ldr	r2, [pc, #564]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800af54:	23a8      	movs	r3, #168	; 0xa8
 800af56:	4d8d      	ldr	r5, [pc, #564]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800af58:	58d4      	ldr	r4, [r2, r3]
 800af5a:	402c      	ands	r4, r5
 800af5c:	50d4      	str	r4, [r2, r3]
 800af5e:	24d0      	movs	r4, #208	; 0xd0
 800af60:	58d5      	ldr	r5, [r2, r3]
 800af62:	0124      	lsls	r4, r4, #4
 800af64:	432c      	orrs	r4, r5
 800af66:	50d4      	str	r4, [r2, r3]
 800af68:	e69c      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800af6a:	4a89      	ldr	r2, [pc, #548]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800af6c:	e70a      	b.n	800ad84 <RemapAndLinkDMAtoUARTRx+0x1d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800af6e:	23a8      	movs	r3, #168	; 0xa8
 800af70:	4a87      	ldr	r2, [pc, #540]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800af72:	4d88      	ldr	r5, [pc, #544]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800af74:	58d4      	ldr	r4, [r2, r3]
 800af76:	402c      	ands	r4, r5
 800af78:	50d4      	str	r4, [r2, r3]
 800af7a:	24b0      	movs	r4, #176	; 0xb0
 800af7c:	58d5      	ldr	r5, [r2, r3]
 800af7e:	0324      	lsls	r4, r4, #12
 800af80:	432c      	orrs	r4, r5
 800af82:	50d4      	str	r4, [r2, r3]
 800af84:	e68e      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800af86:	23a8      	movs	r3, #168	; 0xa8
 800af88:	4a81      	ldr	r2, [pc, #516]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800af8a:	4d83      	ldr	r5, [pc, #524]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800af8c:	58d4      	ldr	r4, [r2, r3]
 800af8e:	402c      	ands	r4, r5
 800af90:	50d4      	str	r4, [r2, r3]
 800af92:	24b0      	movs	r4, #176	; 0xb0
 800af94:	58d5      	ldr	r5, [r2, r3]
 800af96:	0424      	lsls	r4, r4, #16
 800af98:	432c      	orrs	r4, r5
 800af9a:	50d4      	str	r4, [r2, r3]
 800af9c:	e682      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800af9e:	23a8      	movs	r3, #168	; 0xa8
 800afa0:	25f0      	movs	r5, #240	; 0xf0
 800afa2:	4a79      	ldr	r2, [pc, #484]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800afa4:	58d4      	ldr	r4, [r2, r3]
 800afa6:	43ac      	bics	r4, r5
 800afa8:	50d4      	str	r4, [r2, r3]
 800afaa:	58d4      	ldr	r4, [r2, r3]
 800afac:	3d40      	subs	r5, #64	; 0x40
 800afae:	432c      	orrs	r4, r5
 800afb0:	50d4      	str	r4, [r2, r3]
 800afb2:	e677      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800afb4:	680b      	ldr	r3, [r1, #0]
 800afb6:	4a6e      	ldr	r2, [pc, #440]	; (800b170 <RemapAndLinkDMAtoUARTRx+0x5c4>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d07f      	beq.n	800b0bc <RemapAndLinkDMAtoUARTRx+0x510>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800afbc:	4a6d      	ldr	r2, [pc, #436]	; (800b174 <RemapAndLinkDMAtoUARTRx+0x5c8>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d100      	bne.n	800afc4 <RemapAndLinkDMAtoUARTRx+0x418>
 800afc2:	e086      	b.n	800b0d2 <RemapAndLinkDMAtoUARTRx+0x526>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800afc4:	4a6c      	ldr	r2, [pc, #432]	; (800b178 <RemapAndLinkDMAtoUARTRx+0x5cc>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d100      	bne.n	800afcc <RemapAndLinkDMAtoUARTRx+0x420>
 800afca:	e084      	b.n	800b0d6 <RemapAndLinkDMAtoUARTRx+0x52a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800afcc:	4a6b      	ldr	r2, [pc, #428]	; (800b17c <RemapAndLinkDMAtoUARTRx+0x5d0>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d100      	bne.n	800afd4 <RemapAndLinkDMAtoUARTRx+0x428>
 800afd2:	e08c      	b.n	800b0ee <RemapAndLinkDMAtoUARTRx+0x542>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800afd4:	4a6a      	ldr	r2, [pc, #424]	; (800b180 <RemapAndLinkDMAtoUARTRx+0x5d4>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d100      	bne.n	800afdc <RemapAndLinkDMAtoUARTRx+0x430>
 800afda:	e094      	b.n	800b106 <RemapAndLinkDMAtoUARTRx+0x55a>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800afdc:	4a69      	ldr	r2, [pc, #420]	; (800b184 <RemapAndLinkDMAtoUARTRx+0x5d8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d000      	beq.n	800afe4 <RemapAndLinkDMAtoUARTRx+0x438>
 800afe2:	e65f      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800afe4:	4a68      	ldr	r2, [pc, #416]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800afe6:	23a8      	movs	r3, #168	; 0xa8
 800afe8:	4d68      	ldr	r5, [pc, #416]	; (800b18c <RemapAndLinkDMAtoUARTRx+0x5e0>)
 800afea:	58d4      	ldr	r4, [r2, r3]
 800afec:	402c      	ands	r4, r5
 800afee:	50d4      	str	r4, [r2, r3]
 800aff0:	24e0      	movs	r4, #224	; 0xe0
 800aff2:	58d5      	ldr	r5, [r2, r3]
 800aff4:	0124      	lsls	r4, r4, #4
 800aff6:	432c      	orrs	r4, r5
 800aff8:	50d4      	str	r4, [r2, r3]
 800affa:	e653      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800affc:	23a8      	movs	r3, #168	; 0xa8
 800affe:	250f      	movs	r5, #15
 800b000:	4a63      	ldr	r2, [pc, #396]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b002:	58d4      	ldr	r4, [r2, r3]
 800b004:	43ac      	bics	r4, r5
 800b006:	50d4      	str	r4, [r2, r3]
 800b008:	58d4      	ldr	r4, [r2, r3]
 800b00a:	3d03      	subs	r5, #3
 800b00c:	432c      	orrs	r4, r5
 800b00e:	50d4      	str	r4, [r2, r3]
 800b010:	e648      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b012:	4a5f      	ldr	r2, [pc, #380]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b014:	e6e6      	b.n	800ade4 <RemapAndLinkDMAtoUARTRx+0x238>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b016:	23a8      	movs	r3, #168	; 0xa8
 800b018:	4a5d      	ldr	r2, [pc, #372]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b01a:	4d5e      	ldr	r5, [pc, #376]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b01c:	58d4      	ldr	r4, [r2, r3]
 800b01e:	402c      	ands	r4, r5
 800b020:	50d4      	str	r4, [r2, r3]
 800b022:	24c0      	movs	r4, #192	; 0xc0
 800b024:	58d5      	ldr	r5, [r2, r3]
 800b026:	0324      	lsls	r4, r4, #12
 800b028:	432c      	orrs	r4, r5
 800b02a:	50d4      	str	r4, [r2, r3]
 800b02c:	e63a      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b02e:	23a8      	movs	r3, #168	; 0xa8
 800b030:	4a57      	ldr	r2, [pc, #348]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b032:	4d59      	ldr	r5, [pc, #356]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b034:	58d4      	ldr	r4, [r2, r3]
 800b036:	402c      	ands	r4, r5
 800b038:	50d4      	str	r4, [r2, r3]
 800b03a:	24c0      	movs	r4, #192	; 0xc0
 800b03c:	58d5      	ldr	r5, [r2, r3]
 800b03e:	0424      	lsls	r4, r4, #16
 800b040:	432c      	orrs	r4, r5
 800b042:	50d4      	str	r4, [r2, r3]
 800b044:	e62e      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b046:	23a8      	movs	r3, #168	; 0xa8
 800b048:	25f0      	movs	r5, #240	; 0xf0
 800b04a:	4a4f      	ldr	r2, [pc, #316]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b04c:	58d4      	ldr	r4, [r2, r3]
 800b04e:	43ac      	bics	r4, r5
 800b050:	50d4      	str	r4, [r2, r3]
 800b052:	58d4      	ldr	r4, [r2, r3]
 800b054:	3d30      	subs	r5, #48	; 0x30
 800b056:	432c      	orrs	r4, r5
 800b058:	50d4      	str	r4, [r2, r3]
 800b05a:	e623      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b05c:	23a8      	movs	r3, #168	; 0xa8
 800b05e:	250f      	movs	r5, #15
 800b060:	4a4b      	ldr	r2, [pc, #300]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b062:	58d4      	ldr	r4, [r2, r3]
 800b064:	43ac      	bics	r4, r5
 800b066:	50d4      	str	r4, [r2, r3]
 800b068:	58d4      	ldr	r4, [r2, r3]
 800b06a:	3d02      	subs	r5, #2
 800b06c:	432c      	orrs	r4, r5
 800b06e:	50d4      	str	r4, [r2, r3]
 800b070:	e618      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b072:	4a47      	ldr	r2, [pc, #284]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b074:	e76e      	b.n	800af54 <RemapAndLinkDMAtoUARTRx+0x3a8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b076:	23a8      	movs	r3, #168	; 0xa8
 800b078:	4a45      	ldr	r2, [pc, #276]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b07a:	4d46      	ldr	r5, [pc, #280]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b07c:	58d4      	ldr	r4, [r2, r3]
 800b07e:	402c      	ands	r4, r5
 800b080:	50d4      	str	r4, [r2, r3]
 800b082:	24d0      	movs	r4, #208	; 0xd0
 800b084:	58d5      	ldr	r5, [r2, r3]
 800b086:	0324      	lsls	r4, r4, #12
 800b088:	432c      	orrs	r4, r5
 800b08a:	50d4      	str	r4, [r2, r3]
 800b08c:	e60a      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b08e:	23a8      	movs	r3, #168	; 0xa8
 800b090:	4a3f      	ldr	r2, [pc, #252]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b092:	4d41      	ldr	r5, [pc, #260]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b094:	58d4      	ldr	r4, [r2, r3]
 800b096:	402c      	ands	r4, r5
 800b098:	50d4      	str	r4, [r2, r3]
 800b09a:	24d0      	movs	r4, #208	; 0xd0
 800b09c:	58d5      	ldr	r5, [r2, r3]
 800b09e:	0424      	lsls	r4, r4, #16
 800b0a0:	432c      	orrs	r4, r5
 800b0a2:	50d4      	str	r4, [r2, r3]
 800b0a4:	e5fe      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b0a6:	23a8      	movs	r3, #168	; 0xa8
 800b0a8:	25f0      	movs	r5, #240	; 0xf0
 800b0aa:	4a37      	ldr	r2, [pc, #220]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b0ac:	58d4      	ldr	r4, [r2, r3]
 800b0ae:	43ac      	bics	r4, r5
 800b0b0:	50d4      	str	r4, [r2, r3]
 800b0b2:	58d4      	ldr	r4, [r2, r3]
 800b0b4:	3d20      	subs	r5, #32
 800b0b6:	432c      	orrs	r4, r5
 800b0b8:	50d4      	str	r4, [r2, r3]
 800b0ba:	e5f3      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b0bc:	23a8      	movs	r3, #168	; 0xa8
 800b0be:	250f      	movs	r5, #15
 800b0c0:	4a33      	ldr	r2, [pc, #204]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b0c2:	58d4      	ldr	r4, [r2, r3]
 800b0c4:	43ac      	bics	r4, r5
 800b0c6:	50d4      	str	r4, [r2, r3]
 800b0c8:	58d4      	ldr	r4, [r2, r3]
 800b0ca:	3d01      	subs	r5, #1
 800b0cc:	432c      	orrs	r4, r5
 800b0ce:	50d4      	str	r4, [r2, r3]
 800b0d0:	e5e8      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b0d2:	4a2f      	ldr	r2, [pc, #188]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b0d4:	e787      	b.n	800afe6 <RemapAndLinkDMAtoUARTRx+0x43a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b0d6:	23a8      	movs	r3, #168	; 0xa8
 800b0d8:	4a2d      	ldr	r2, [pc, #180]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b0da:	4d2e      	ldr	r5, [pc, #184]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b0dc:	58d4      	ldr	r4, [r2, r3]
 800b0de:	402c      	ands	r4, r5
 800b0e0:	50d4      	str	r4, [r2, r3]
 800b0e2:	24e0      	movs	r4, #224	; 0xe0
 800b0e4:	58d5      	ldr	r5, [r2, r3]
 800b0e6:	0324      	lsls	r4, r4, #12
 800b0e8:	432c      	orrs	r4, r5
 800b0ea:	50d4      	str	r4, [r2, r3]
 800b0ec:	e5da      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b0ee:	23a8      	movs	r3, #168	; 0xa8
 800b0f0:	4a27      	ldr	r2, [pc, #156]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b0f2:	4d29      	ldr	r5, [pc, #164]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b0f4:	58d4      	ldr	r4, [r2, r3]
 800b0f6:	402c      	ands	r4, r5
 800b0f8:	50d4      	str	r4, [r2, r3]
 800b0fa:	24e0      	movs	r4, #224	; 0xe0
 800b0fc:	58d5      	ldr	r5, [r2, r3]
 800b0fe:	0424      	lsls	r4, r4, #16
 800b100:	432c      	orrs	r4, r5
 800b102:	50d4      	str	r4, [r2, r3]
 800b104:	e5ce      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b106:	23a8      	movs	r3, #168	; 0xa8
 800b108:	25f0      	movs	r5, #240	; 0xf0
 800b10a:	4a1f      	ldr	r2, [pc, #124]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b10c:	58d4      	ldr	r4, [r2, r3]
 800b10e:	43ac      	bics	r4, r5
 800b110:	50d4      	str	r4, [r2, r3]
 800b112:	58d4      	ldr	r4, [r2, r3]
 800b114:	3d10      	subs	r5, #16
 800b116:	432c      	orrs	r4, r5
 800b118:	50d4      	str	r4, [r2, r3]
 800b11a:	e5c3      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b11c:	23a8      	movs	r3, #168	; 0xa8
 800b11e:	260f      	movs	r6, #15
 800b120:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b122:	58d5      	ldr	r5, [r2, r3]
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b124:	43b5      	bics	r5, r6
 800b126:	50d5      	str	r5, [r2, r3]
 800b128:	58d4      	ldr	r4, [r2, r3]
 800b12a:	4334      	orrs	r4, r6
 800b12c:	50d4      	str	r4, [r2, r3]
 800b12e:	e5b9      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b130:	4a17      	ldr	r2, [pc, #92]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b132:	e573      	b.n	800ac1c <RemapAndLinkDMAtoUARTRx+0x70>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b134:	23a8      	movs	r3, #168	; 0xa8
 800b136:	4a16      	ldr	r2, [pc, #88]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b138:	4d16      	ldr	r5, [pc, #88]	; (800b194 <RemapAndLinkDMAtoUARTRx+0x5e8>)
 800b13a:	58d4      	ldr	r4, [r2, r3]
 800b13c:	402c      	ands	r4, r5
 800b13e:	50d4      	str	r4, [r2, r3]
 800b140:	24f0      	movs	r4, #240	; 0xf0
 800b142:	58d5      	ldr	r5, [r2, r3]
 800b144:	0324      	lsls	r4, r4, #12
 800b146:	432c      	orrs	r4, r5
 800b148:	50d4      	str	r4, [r2, r3]
 800b14a:	e5ab      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b14c:	23a8      	movs	r3, #168	; 0xa8
 800b14e:	4a10      	ldr	r2, [pc, #64]	; (800b190 <RemapAndLinkDMAtoUARTRx+0x5e4>)
 800b150:	4d11      	ldr	r5, [pc, #68]	; (800b198 <RemapAndLinkDMAtoUARTRx+0x5ec>)
 800b152:	58d4      	ldr	r4, [r2, r3]
 800b154:	402c      	ands	r4, r5
 800b156:	50d4      	str	r4, [r2, r3]
 800b158:	24f0      	movs	r4, #240	; 0xf0
 800b15a:	58d5      	ldr	r5, [r2, r3]
 800b15c:	0424      	lsls	r4, r4, #16
 800b15e:	432c      	orrs	r4, r5
 800b160:	50d4      	str	r4, [r2, r3]
 800b162:	e59f      	b.n	800aca4 <RemapAndLinkDMAtoUARTRx+0xf8>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b164:	23a8      	movs	r3, #168	; 0xa8
 800b166:	4a08      	ldr	r2, [pc, #32]	; (800b188 <RemapAndLinkDMAtoUARTRx+0x5dc>)
 800b168:	26f0      	movs	r6, #240	; 0xf0
 800b16a:	58d5      	ldr	r5, [r2, r3]
 800b16c:	e7da      	b.n	800b124 <RemapAndLinkDMAtoUARTRx+0x578>
 800b16e:	46c0      	nop			; (mov r8, r8)
 800b170:	40020008 	.word	0x40020008
 800b174:	40020030 	.word	0x40020030
 800b178:	40020058 	.word	0x40020058
 800b17c:	4002006c 	.word	0x4002006c
 800b180:	4002041c 	.word	0x4002041c
 800b184:	40020430 	.word	0x40020430
 800b188:	40020400 	.word	0x40020400
 800b18c:	fffff0ff 	.word	0xfffff0ff
 800b190:	40020000 	.word	0x40020000
 800b194:	fff0ffff 	.word	0xfff0ffff
 800b198:	ff0fffff 	.word	0xff0fffff

0800b19c <DMA_STREAM_Setup>:
{	
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	0016      	movs	r6, r2
 800b1a0:	0005      	movs	r5, r0
 800b1a2:	000f      	movs	r7, r1
	uint8_t port = GetPort(huartSrc);
 800b1a4:	f7ff fa34 	bl	800a610 <GetPort>
	hDMA = &streamDMA[port-1];
 800b1a8:	3801      	subs	r0, #1
 800b1aa:	00c4      	lsls	r4, r0, #3
 800b1ac:	1a24      	subs	r4, r4, r0
 800b1ae:	480a      	ldr	r0, [pc, #40]	; (800b1d8 <DMA_STREAM_Setup+0x3c>)
 800b1b0:	00e4      	lsls	r4, r4, #3
 800b1b2:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b1b4:	0021      	movs	r1, r4
 800b1b6:	0028      	movs	r0, r5
 800b1b8:	f7ff fcf8 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b1bc:	0020      	movs	r0, r4
 800b1be:	2101      	movs	r1, #1
 800b1c0:	f7ff fc3a 	bl	800aa38 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b1c4:	2369      	movs	r3, #105	; 0x69
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	0032      	movs	r2, r6
 800b1ce:	0028      	movs	r0, r5
 800b1d0:	3128      	adds	r1, #40	; 0x28
 800b1d2:	f007 f8cf 	bl	8012374 <HAL_UART_Receive_DMA>
}
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	200024f0 	.word	0x200024f0

0800b1dc <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1de:	46d6      	mov	lr, sl
 800b1e0:	464f      	mov	r7, r9
 800b1e2:	4646      	mov	r6, r8
 800b1e4:	b5c0      	push	{r6, r7, lr}
	hDMA = &streamDMA[port - 1];
 800b1e6:	1e47      	subs	r7, r0, #1
 800b1e8:	00fe      	lsls	r6, r7, #3
 800b1ea:	4b24      	ldr	r3, [pc, #144]	; (800b27c <SwitchStreamDMAToMsg+0xa0>)
 800b1ec:	1bf6      	subs	r6, r6, r7
 800b1ee:	00f6      	lsls	r6, r6, #3
 800b1f0:	4699      	mov	r9, r3
 800b1f2:	46b2      	mov	sl, r6
 800b1f4:	44ca      	add	sl, r9
void SwitchStreamDMAToMsg(uint8_t port) {
 800b1f6:	4680      	mov	r8, r0
	HAL_DMA_Abort(hDMA);
 800b1f8:	4650      	mov	r0, sl
 800b1fa:	f004 ffef 	bl	80101dc <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b1fe:	464b      	mov	r3, r9
 800b200:	2500      	movs	r5, #0
 800b202:	58f2      	ldr	r2, [r6, r3]
	dmaStreamCount[port - 1] = 0;
 800b204:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <SwitchStreamDMAToMsg+0xa4>)
 800b206:	00bf      	lsls	r7, r7, #2
	hDMA->Instance->CNDTR = 0;
 800b208:	6055      	str	r5, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b20a:	50fd      	str	r5, [r7, r3]
	dmaStreamTotal[port - 1] = 0;
 800b20c:	4b1d      	ldr	r3, [pc, #116]	; (800b284 <SwitchStreamDMAToMsg+0xa8>)
 800b20e:	50fd      	str	r5, [r7, r3]
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b210:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <SwitchStreamDMAToMsg+0xac>)
 800b212:	18f4      	adds	r4, r6, r3
	hDMA->Instance = ch;
 800b214:	50f2      	str	r2, [r6, r3]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b216:	2380      	movs	r3, #128	; 0x80
 800b218:	60e3      	str	r3, [r4, #12]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b21a:	3b60      	subs	r3, #96	; 0x60
 800b21c:	61a3      	str	r3, [r4, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	019b      	lsls	r3, r3, #6
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b222:	6065      	str	r5, [r4, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b224:	60a5      	str	r5, [r4, #8]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b226:	6125      	str	r5, [r4, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b228:	6165      	str	r5, [r4, #20]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b22a:	61e3      	str	r3, [r4, #28]
	HAL_DMA_Init(hDMA);		
 800b22c:	0020      	movs	r0, r4
 800b22e:	f004 ff7d 	bl	801012c <HAL_DMA_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b232:	4653      	mov	r3, sl
 800b234:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b236:	f7ff f9eb 	bl	800a610 <GetPort>
 800b23a:	4b14      	ldr	r3, [pc, #80]	; (800b28c <SwitchStreamDMAToMsg+0xb0>)
 800b23c:	541d      	strb	r5, [r3, r0]
	streamDMA[port - 1].Instance = 0;
 800b23e:	464b      	mov	r3, r9
 800b240:	50f5      	str	r5, [r6, r3]
	dmaStreamDst[port - 1] = 0;
 800b242:	4b13      	ldr	r3, [pc, #76]	; (800b290 <SwitchStreamDMAToMsg+0xb4>)
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b244:	4640      	mov	r0, r8
	dmaStreamDst[port - 1] = 0;
 800b246:	50fd      	str	r5, [r7, r3]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b248:	f002 fa70 	bl	800d72c <GetUart>
 800b24c:	0005      	movs	r5, r0
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b24e:	0021      	movs	r1, r4
 800b250:	f7ff fcac 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b254:	2100      	movs	r1, #0
 800b256:	0020      	movs	r0, r4
 800b258:	f7ff fbee 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b25c:	0028      	movs	r0, r5
 800b25e:	f7ff f9d7 	bl	800a610 <GetPort>
 800b262:	1e41      	subs	r1, r0, #1
 800b264:	480b      	ldr	r0, [pc, #44]	; (800b294 <SwitchStreamDMAToMsg+0xb8>)
 800b266:	2201      	movs	r2, #1
 800b268:	1809      	adds	r1, r1, r0
 800b26a:	0028      	movs	r0, r5
 800b26c:	f007 f822 	bl	80122b4 <HAL_UART_Receive_IT>
}
 800b270:	bce0      	pop	{r5, r6, r7}
 800b272:	46ba      	mov	sl, r7
 800b274:	46b1      	mov	r9, r6
 800b276:	46a8      	mov	r8, r5
 800b278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b27a:	46c0      	nop			; (mov r8, r8)
 800b27c:	200024f0 	.word	0x200024f0
 800b280:	200019a0 	.word	0x200019a0
 800b284:	200019b4 	.word	0x200019b4
 800b288:	200026e8 	.word	0x200026e8
 800b28c:	20000c64 	.word	0x20000c64
 800b290:	2000198c 	.word	0x2000198c
 800b294:	20001dd0 	.word	0x20001dd0

0800b298 <SetupMessagingRxDMAs>:
{	
 800b298:	b570      	push	{r4, r5, r6, lr}
	if (portStatus[P1] == FREE)
 800b29a:	4c41      	ldr	r4, [pc, #260]	; (800b3a0 <SetupMessagingRxDMAs+0x108>)
 800b29c:	7863      	ldrb	r3, [r4, #1]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00c      	beq.n	800b2bc <SetupMessagingRxDMAs+0x24>
	if (portStatus[P2] == FREE)	
 800b2a2:	78a3      	ldrb	r3, [r4, #2]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d020      	beq.n	800b2ea <SetupMessagingRxDMAs+0x52>
	if (portStatus[P3] == FREE)
 800b2a8:	78e3      	ldrb	r3, [r4, #3]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d034      	beq.n	800b318 <SetupMessagingRxDMAs+0x80>
	if (portStatus[P4] == FREE)
 800b2ae:	7923      	ldrb	r3, [r4, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d048      	beq.n	800b346 <SetupMessagingRxDMAs+0xae>
	if (portStatus[P5] == FREE)
 800b2b4:	7963      	ldrb	r3, [r4, #5]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d05c      	beq.n	800b374 <SetupMessagingRxDMAs+0xdc>
}
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b2bc:	4d39      	ldr	r5, [pc, #228]	; (800b3a4 <SetupMessagingRxDMAs+0x10c>)
 800b2be:	4e3a      	ldr	r6, [pc, #232]	; (800b3a8 <SetupMessagingRxDMAs+0x110>)
 800b2c0:	0028      	movs	r0, r5
 800b2c2:	0031      	movs	r1, r6
 800b2c4:	f7ff fc72 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	0030      	movs	r0, r6
 800b2cc:	f7ff fbb4 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b2d0:	0028      	movs	r0, r5
 800b2d2:	f7ff f99d 	bl	800a610 <GetPort>
 800b2d6:	1e41      	subs	r1, r0, #1
 800b2d8:	4834      	ldr	r0, [pc, #208]	; (800b3ac <SetupMessagingRxDMAs+0x114>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	1809      	adds	r1, r1, r0
 800b2de:	0028      	movs	r0, r5
 800b2e0:	f006 ffe8 	bl	80122b4 <HAL_UART_Receive_IT>
	if (portStatus[P2] == FREE)	
 800b2e4:	78a3      	ldrb	r3, [r4, #2]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1de      	bne.n	800b2a8 <SetupMessagingRxDMAs+0x10>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b2ea:	4d31      	ldr	r5, [pc, #196]	; (800b3b0 <SetupMessagingRxDMAs+0x118>)
 800b2ec:	4e31      	ldr	r6, [pc, #196]	; (800b3b4 <SetupMessagingRxDMAs+0x11c>)
 800b2ee:	0028      	movs	r0, r5
 800b2f0:	0031      	movs	r1, r6
 800b2f2:	f7ff fc5b 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	0030      	movs	r0, r6
 800b2fa:	f7ff fb9d 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b2fe:	0028      	movs	r0, r5
 800b300:	f7ff f986 	bl	800a610 <GetPort>
 800b304:	1e41      	subs	r1, r0, #1
 800b306:	4829      	ldr	r0, [pc, #164]	; (800b3ac <SetupMessagingRxDMAs+0x114>)
 800b308:	2201      	movs	r2, #1
 800b30a:	1809      	adds	r1, r1, r0
 800b30c:	0028      	movs	r0, r5
 800b30e:	f006 ffd1 	bl	80122b4 <HAL_UART_Receive_IT>
	if (portStatus[P3] == FREE)
 800b312:	78e3      	ldrb	r3, [r4, #3]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1ca      	bne.n	800b2ae <SetupMessagingRxDMAs+0x16>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b318:	4d27      	ldr	r5, [pc, #156]	; (800b3b8 <SetupMessagingRxDMAs+0x120>)
 800b31a:	4e28      	ldr	r6, [pc, #160]	; (800b3bc <SetupMessagingRxDMAs+0x124>)
 800b31c:	0028      	movs	r0, r5
 800b31e:	0031      	movs	r1, r6
 800b320:	f7ff fc44 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b324:	2100      	movs	r1, #0
 800b326:	0030      	movs	r0, r6
 800b328:	f7ff fb86 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b32c:	0028      	movs	r0, r5
 800b32e:	f7ff f96f 	bl	800a610 <GetPort>
 800b332:	1e41      	subs	r1, r0, #1
 800b334:	481d      	ldr	r0, [pc, #116]	; (800b3ac <SetupMessagingRxDMAs+0x114>)
 800b336:	2201      	movs	r2, #1
 800b338:	1809      	adds	r1, r1, r0
 800b33a:	0028      	movs	r0, r5
 800b33c:	f006 ffba 	bl	80122b4 <HAL_UART_Receive_IT>
	if (portStatus[P4] == FREE)
 800b340:	7923      	ldrb	r3, [r4, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1b6      	bne.n	800b2b4 <SetupMessagingRxDMAs+0x1c>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b346:	4d1e      	ldr	r5, [pc, #120]	; (800b3c0 <SetupMessagingRxDMAs+0x128>)
 800b348:	4e1e      	ldr	r6, [pc, #120]	; (800b3c4 <SetupMessagingRxDMAs+0x12c>)
 800b34a:	0028      	movs	r0, r5
 800b34c:	0031      	movs	r1, r6
 800b34e:	f7ff fc2d 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b352:	2100      	movs	r1, #0
 800b354:	0030      	movs	r0, r6
 800b356:	f7ff fb6f 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b35a:	0028      	movs	r0, r5
 800b35c:	f7ff f958 	bl	800a610 <GetPort>
 800b360:	1e41      	subs	r1, r0, #1
 800b362:	4812      	ldr	r0, [pc, #72]	; (800b3ac <SetupMessagingRxDMAs+0x114>)
 800b364:	2201      	movs	r2, #1
 800b366:	1809      	adds	r1, r1, r0
 800b368:	0028      	movs	r0, r5
 800b36a:	f006 ffa3 	bl	80122b4 <HAL_UART_Receive_IT>
	if (portStatus[P5] == FREE)
 800b36e:	7963      	ldrb	r3, [r4, #5]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1a2      	bne.n	800b2ba <SetupMessagingRxDMAs+0x22>
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b374:	4c14      	ldr	r4, [pc, #80]	; (800b3c8 <SetupMessagingRxDMAs+0x130>)
 800b376:	4d15      	ldr	r5, [pc, #84]	; (800b3cc <SetupMessagingRxDMAs+0x134>)
 800b378:	0020      	movs	r0, r4
 800b37a:	0029      	movs	r1, r5
 800b37c:	f7ff fc16 	bl	800abac <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b380:	2100      	movs	r1, #0
 800b382:	0028      	movs	r0, r5
 800b384:	f7ff fb58 	bl	800aa38 <SetupDMAInterrupts>
	HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800b388:	0020      	movs	r0, r4
 800b38a:	f7ff f941 	bl	800a610 <GetPort>
 800b38e:	1e41      	subs	r1, r0, #1
 800b390:	4806      	ldr	r0, [pc, #24]	; (800b3ac <SetupMessagingRxDMAs+0x114>)
 800b392:	2201      	movs	r2, #1
 800b394:	1809      	adds	r1, r1, r0
 800b396:	0020      	movs	r0, r4
 800b398:	f006 ff8c 	bl	80122b4 <HAL_UART_Receive_IT>
}
 800b39c:	e78d      	b.n	800b2ba <SetupMessagingRxDMAs+0x22>
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	20000c64 	.word	0x20000c64
 800b3a4:	20002264 	.word	0x20002264
 800b3a8:	200026e8 	.word	0x200026e8
 800b3ac:	20001dd0 	.word	0x20001dd0
 800b3b0:	20002344 	.word	0x20002344
 800b3b4:	20002720 	.word	0x20002720
 800b3b8:	200021f4 	.word	0x200021f4
 800b3bc:	20002758 	.word	0x20002758
 800b3c0:	200022d4 	.word	0x200022d4
 800b3c4:	20002790 	.word	0x20002790
 800b3c8:	200023b4 	.word	0x200023b4
 800b3cc:	200027c8 	.word	0x200027c8

0800b3d0 <CRC_Init>:
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
  hcrc.Instance = CRC;
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b3d0:	2310      	movs	r3, #16
 800b3d2:	4807      	ldr	r0, [pc, #28]	; (800b3f0 <CRC_Init+0x20>)
{
 800b3d4:	b510      	push	{r4, lr}
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b3d6:	60c3      	str	r3, [r0, #12]
  hcrc.Instance = CRC;
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <CRC_Init+0x24>)
 800b3da:	6003      	str	r3, [r0, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	8083      	strh	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b3e0:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b3e2:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b3e4:	3303      	adds	r3, #3
 800b3e6:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b3e8:	f004 fdd2 	bl	800ff90 <HAL_CRC_Init>
}
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	20002424 	.word	0x20002424
 800b3f4:	40023000 	.word	0x40023000

0800b3f8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b3f8:	2340      	movs	r3, #64	; 0x40
 800b3fa:	4a05      	ldr	r2, [pc, #20]	; (800b410 <HAL_CRC_MspInit+0x18>)
{
 800b3fc:	b082      	sub	sp, #8
	__HAL_RCC_CRC_CLK_ENABLE();
 800b3fe:	6951      	ldr	r1, [r2, #20]
 800b400:	4319      	orrs	r1, r3
 800b402:	6151      	str	r1, [r2, #20]
 800b404:	6952      	ldr	r2, [r2, #20]
 800b406:	4013      	ands	r3, r2
 800b408:	9301      	str	r3, [sp, #4]
 800b40a:	9b01      	ldr	r3, [sp, #4]
}
 800b40c:	b002      	add	sp, #8
 800b40e:	4770      	bx	lr
 800b410:	40021000 	.word	0x40021000

0800b414 <CalculateCRC8>:
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b414:	2300      	movs	r3, #0
{
 800b416:	b570      	push	{r4, r5, r6, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	0005      	movs	r5, r0
 800b41c:	000c      	movs	r4, r1

	return pTemp;
  }
  
else
	return 0;
 800b41e:	2000      	movs	r0, #0
  uint8_t temp_buffer[4] = {0};
 800b420:	9301      	str	r3, [sp, #4]
  if (NULL!=pBuffer && 0!=size)
 800b422:	2d00      	cmp	r5, #0
 800b424:	d017      	beq.n	800b456 <CalculateCRC8+0x42>
 800b426:	2900      	cmp	r1, #0
 800b428:	d015      	beq.n	800b456 <CalculateCRC8+0x42>
	if(size < 4)
 800b42a:	2903      	cmp	r1, #3
 800b42c:	d815      	bhi.n	800b45a <CalculateCRC8+0x46>
			temp_buffer[i] = pBuffer[temp_index++];
 800b42e:	466a      	mov	r2, sp
 800b430:	782b      	ldrb	r3, [r5, #0]
			if(--size == 0) break;
 800b432:	3c01      	subs	r4, #1
 800b434:	b2a4      	uxth	r4, r4
			temp_buffer[i] = pBuffer[temp_index++];
 800b436:	7113      	strb	r3, [r2, #4]
			if(--size == 0) break;
 800b438:	2c00      	cmp	r4, #0
 800b43a:	d006      	beq.n	800b44a <CalculateCRC8+0x36>
			temp_buffer[i] = pBuffer[temp_index++];
 800b43c:	4669      	mov	r1, sp
 800b43e:	786a      	ldrb	r2, [r5, #1]
 800b440:	714a      	strb	r2, [r1, #5]
			if(--size == 0) break;
 800b442:	2c01      	cmp	r4, #1
 800b444:	d001      	beq.n	800b44a <CalculateCRC8+0x36>
			temp_buffer[i] = pBuffer[temp_index++];
 800b446:	78aa      	ldrb	r2, [r5, #2]
 800b448:	718a      	strb	r2, [r1, #6]
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b44a:	2201      	movs	r2, #1
 800b44c:	4813      	ldr	r0, [pc, #76]	; (800b49c <CalculateCRC8+0x88>)
 800b44e:	a901      	add	r1, sp, #4
 800b450:	f004 fdf6 	bl	8010040 <HAL_CRC_Calculate>
 800b454:	b2c0      	uxtb	r0, r0
}
 800b456:	b002      	add	sp, #8
 800b458:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b45a:	4e10      	ldr	r6, [pc, #64]	; (800b49c <CalculateCRC8+0x88>)
 800b45c:	088a      	lsrs	r2, r1, #2
 800b45e:	0030      	movs	r0, r6
 800b460:	0029      	movs	r1, r5
 800b462:	f004 fded 	bl	8010040 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b466:	2103      	movs	r1, #3
 800b468:	000a      	movs	r2, r1
 800b46a:	4022      	ands	r2, r4
 800b46c:	4221      	tst	r1, r4
 800b46e:	d013      	beq.n	800b498 <CalculateCRC8+0x84>
			temp_index = size - (size%4);
 800b470:	438c      	bics	r4, r1
 800b472:	b2e4      	uxtb	r4, r4
 800b474:	0013      	movs	r3, r2
 800b476:	a901      	add	r1, sp, #4
 800b478:	18a4      	adds	r4, r4, r2
 800b47a:	e000      	b.n	800b47e <CalculateCRC8+0x6a>
			for(int i=0; i<4; i++)
 800b47c:	3101      	adds	r1, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b47e:	1ae2      	subs	r2, r4, r3
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	5caa      	ldrb	r2, [r5, r2]
				if(--size == 0) break;
 800b484:	3b01      	subs	r3, #1
 800b486:	b29b      	uxth	r3, r3
				temp_buffer[i] = pBuffer[temp_index++];
 800b488:	700a      	strb	r2, [r1, #0]
				if(--size == 0) break;
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f6      	bne.n	800b47c <CalculateCRC8+0x68>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b48e:	2201      	movs	r2, #1
 800b490:	0030      	movs	r0, r6
 800b492:	a901      	add	r1, sp, #4
 800b494:	f004 fdaa 	bl	800ffec <HAL_CRC_Accumulate>
 800b498:	b2c0      	uxtb	r0, r0
 800b49a:	e7dc      	b.n	800b456 <CalculateCRC8+0x42>
 800b49c:	20002424 	.word	0x20002424

0800b4a0 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	000e      	movs	r6, r1
 800b4a4:	0007      	movs	r7, r0
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4a6:	4c25      	ldr	r4, [pc, #148]	; (800b53c <EE_VerifyPageFullWriteVariable+0x9c>)
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b4a8:	f005 fbf8 	bl	8010c9c <HAL_FLASH_Unlock>
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b4ac:	4924      	ldr	r1, [pc, #144]	; (800b540 <EE_VerifyPageFullWriteVariable+0xa0>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4ae:	8823      	ldrh	r3, [r4, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b4b0:	880a      	ldrh	r2, [r1, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b4b2:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b4b4:	b290      	uxth	r0, r2
			if(PageStatusB == VALID_PAGE){
 800b4b6:	2a00      	cmp	r2, #0
 800b4b8:	d126      	bne.n	800b508 <EE_VerifyPageFullWriteVariable+0x68>
				if(PageStatusA == RECEIVE_DATA){
 800b4ba:	4a22      	ldr	r2, [pc, #136]	; (800b544 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d028      	beq.n	800b512 <EE_VerifyPageFullWriteVariable+0x72>
				if(PageStatusB == RECEIVE_DATA){
 800b4c0:	000c      	movs	r4, r1
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b4c2:	6823      	ldr	r3, [r4, #0]
				if(PageStatusB == RECEIVE_DATA){
 800b4c4:	4d20      	ldr	r5, [pc, #128]	; (800b548 <EE_VerifyPageFullWriteVariable+0xa8>)
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	d125      	bne.n	800b516 <EE_VerifyPageFullWriteVariable+0x76>
			/* Set variable data */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b4ca:	0032      	movs	r2, r6
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	0021      	movs	r1, r4
 800b4d0:	2001      	movs	r0, #1
 800b4d2:	f005 fc43 	bl	8010d5c <HAL_FLASH_Program>
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4d6:	481d      	ldr	r0, [pc, #116]	; (800b54c <EE_VerifyPageFullWriteVariable+0xac>)
 800b4d8:	f005 fbfc 	bl	8010cd4 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d10f      	bne.n	800b500 <EE_VerifyPageFullWriteVariable+0x60>
				return pFlash.ErrorCode;
			}
			else{
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b4e0:	2601      	movs	r6, #1
 800b4e2:	4d1b      	ldr	r5, [pc, #108]	; (800b550 <EE_VerifyPageFullWriteVariable+0xb0>)
			}
			
			/* Set variable virtual address */
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b4e4:	003a      	movs	r2, r7
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b4e6:	692b      	ldr	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b4e8:	2001      	movs	r0, #1
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b4ea:	43b3      	bics	r3, r6
 800b4ec:	612b      	str	r3, [r5, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b4ee:	1ca1      	adds	r1, r4, #2
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f005 fc33 	bl	8010d5c <HAL_FLASH_Program>
			
			/* Wait for last operation to be completed */
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b4f6:	4815      	ldr	r0, [pc, #84]	; (800b54c <EE_VerifyPageFullWriteVariable+0xac>)
 800b4f8:	f005 fbec 	bl	8010cd4 <FLASH_WaitForLastOperation>
			/* If program operation was failed, a Flash error code is returned */
			if(FlashStatus != HAL_OK){
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d019      	beq.n	800b534 <EE_VerifyPageFullWriteVariable+0x94>
				/* If the program operation is completed, disable the PG Bit */
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
			}
			
			/* Return program operation status */
			return pFlash.ErrorCode;
 800b500:	4b14      	ldr	r3, [pc, #80]	; (800b554 <EE_VerifyPageFullWriteVariable+0xb4>)
 800b502:	69d8      	ldr	r0, [r3, #28]
 800b504:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
}
 800b506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else if(PageStatusA == VALID_PAGE){
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d111      	bne.n	800b530 <EE_VerifyPageFullWriteVariable+0x90>
				if(PageStatusB == RECEIVE_DATA){
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <EE_VerifyPageFullWriteVariable+0xa4>)
 800b50e:	4298      	cmp	r0, r3
 800b510:	d0d6      	beq.n	800b4c0 <EE_VerifyPageFullWriteVariable+0x20>
 800b512:	4d11      	ldr	r5, [pc, #68]	; (800b558 <EE_VerifyPageFullWriteVariable+0xb8>)
	while(Address < PageEndAddress){
 800b514:	e002      	b.n	800b51c <EE_VerifyPageFullWriteVariable+0x7c>
			Address =Address + 4;
 800b516:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b518:	42a5      	cmp	r5, r4
 800b51a:	d905      	bls.n	800b528 <EE_VerifyPageFullWriteVariable+0x88>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	3301      	adds	r3, #1
 800b520:	d0d3      	beq.n	800b4ca <EE_VerifyPageFullWriteVariable+0x2a>
			Address =Address + 4;
 800b522:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800b524:	42a5      	cmp	r5, r4
 800b526:	d8f9      	bhi.n	800b51c <EE_VerifyPageFullWriteVariable+0x7c>
	HAL_FLASH_Lock();
 800b528:	f005 fbca 	bl	8010cc0 <HAL_FLASH_Lock>
	return PAGE_FULL;
 800b52c:	2080      	movs	r0, #128	; 0x80
 800b52e:	e7ea      	b.n	800b506 <EE_VerifyPageFullWriteVariable+0x66>
		return NO_VALID_PAGE;
 800b530:	20ab      	movs	r0, #171	; 0xab
 800b532:	e7e8      	b.n	800b506 <EE_VerifyPageFullWriteVariable+0x66>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b534:	692b      	ldr	r3, [r5, #16]
 800b536:	43b3      	bics	r3, r6
 800b538:	612b      	str	r3, [r5, #16]
 800b53a:	e7e1      	b.n	800b500 <EE_VerifyPageFullWriteVariable+0x60>
 800b53c:	0801e000 	.word	0x0801e000
 800b540:	0801f000 	.word	0x0801f000
 800b544:	0000eeee 	.word	0x0000eeee
 800b548:	0801fffe 	.word	0x0801fffe
 800b54c:	0000c350 	.word	0x0000c350
 800b550:	40022000 	.word	0x40022000
 800b554:	20006d80 	.word	0x20006d80
 800b558:	0801effe 	.word	0x0801effe

0800b55c <EE_ReadVariable>:
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <EE_ReadVariable+0x40>)
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800b55e:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b560:	881a      	ldrh	r2, [r3, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b562:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <EE_ReadVariable+0x44>)
 800b564:	881b      	ldrh	r3, [r3, #0]
 800b566:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b568:	2a00      	cmp	r2, #0
 800b56a:	d011      	beq.n	800b590 <EE_ReadVariable+0x34>
			else if(PageStatusB == VALID_PAGE){
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10d      	bne.n	800b58c <EE_ReadVariable+0x30>
 800b570:	4c0c      	ldr	r4, [pc, #48]	; (800b5a4 <EE_ReadVariable+0x48>)
 800b572:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <EE_ReadVariable+0x4c>)
	while(Address > (PageStartAddress + 2)){
 800b574:	e002      	b.n	800b57c <EE_ReadVariable+0x20>
			Address =Address - 4;
 800b576:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800b578:	429c      	cmp	r4, r3
 800b57a:	d20c      	bcs.n	800b596 <EE_ReadVariable+0x3a>
		AddressValue =(*(__IO uint16_t* )Address);
 800b57c:	881a      	ldrh	r2, [r3, #0]
		if(AddressValue == VirtAddress){
 800b57e:	4282      	cmp	r2, r0
 800b580:	d1f9      	bne.n	800b576 <EE_ReadVariable+0x1a>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b582:	3b02      	subs	r3, #2
 800b584:	881b      	ldrh	r3, [r3, #0]
			ReadStatus =0;
 800b586:	2000      	movs	r0, #0
			*Data =(*(__IO uint16_t* )(Address - 2));
 800b588:	800b      	strh	r3, [r1, #0]
			break;
 800b58a:	e000      	b.n	800b58e <EE_ReadVariable+0x32>
		return NO_VALID_PAGE;
 800b58c:	20ab      	movs	r0, #171	; 0xab
}
 800b58e:	bd10      	pop	{r4, pc}
 800b590:	4c06      	ldr	r4, [pc, #24]	; (800b5ac <EE_ReadVariable+0x50>)
 800b592:	4b07      	ldr	r3, [pc, #28]	; (800b5b0 <EE_ReadVariable+0x54>)
 800b594:	e7f2      	b.n	800b57c <EE_ReadVariable+0x20>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800b596:	2001      	movs	r0, #1
 800b598:	e7f9      	b.n	800b58e <EE_ReadVariable+0x32>
 800b59a:	46c0      	nop			; (mov r8, r8)
 800b59c:	0801e000 	.word	0x0801e000
 800b5a0:	0801f000 	.word	0x0801f000
 800b5a4:	0801f002 	.word	0x0801f002
 800b5a8:	0801fffe 	.word	0x0801fffe
 800b5ac:	0801e002 	.word	0x0801e002
 800b5b0:	0801effe 	.word	0x0801effe

0800b5b4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5b6:	46d6      	mov	lr, sl
 800b5b8:	4646      	mov	r6, r8
 800b5ba:	464f      	mov	r7, r9
 800b5bc:	000c      	movs	r4, r1
 800b5be:	b5c0      	push	{r6, r7, lr}
 800b5c0:	0006      	movs	r6, r0
	HAL_FLASH_Unlock();
 800b5c2:	f005 fb6b 	bl	8010c9c <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b5c6:	0021      	movs	r1, r4
 800b5c8:	0030      	movs	r0, r6
 800b5ca:	f7ff ff69 	bl	800b4a0 <EE_VerifyPageFullWriteVariable>
 800b5ce:	0005      	movs	r5, r0
	if(Status == PAGE_FULL){
 800b5d0:	2880      	cmp	r0, #128	; 0x80
 800b5d2:	d007      	beq.n	800b5e4 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800b5d4:	f005 fb74 	bl	8010cc0 <HAL_FLASH_Lock>
}
 800b5d8:	0028      	movs	r0, r5
 800b5da:	bce0      	pop	{r5, r6, r7}
 800b5dc:	46ba      	mov	sl, r7
 800b5de:	46b1      	mov	r9, r6
 800b5e0:	46a8      	mov	r8, r5
 800b5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800b5e4:	f005 fb5a 	bl	8010c9c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b5e8:	4934      	ldr	r1, [pc, #208]	; (800b6bc <EE_WriteVariable+0x108>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b5ea:	4a35      	ldr	r2, [pc, #212]	; (800b6c0 <EE_WriteVariable+0x10c>)
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b5ec:	8808      	ldrh	r0, [r1, #0]
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b5ee:	8813      	ldrh	r3, [r2, #0]
 800b5f0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d05b      	beq.n	800b6ae <EE_WriteVariable+0xfa>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800b5f6:	352b      	adds	r5, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1eb      	bne.n	800b5d4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800b5fc:	4691      	mov	r9, r2
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800b5fe:	4688      	mov	r8, r1
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800b600:	2300      	movs	r3, #0
 800b602:	4641      	mov	r1, r8
 800b604:	2001      	movs	r0, #1
 800b606:	4a2f      	ldr	r2, [pc, #188]	; (800b6c4 <EE_WriteVariable+0x110>)
 800b608:	f005 fba8 	bl	8010d5c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b60c:	482e      	ldr	r0, [pc, #184]	; (800b6c8 <EE_WriteVariable+0x114>)
 800b60e:	f005 fb61 	bl	8010cd4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b612:	2800      	cmp	r0, #0
 800b614:	d14e      	bne.n	800b6b4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b616:	2101      	movs	r1, #1
 800b618:	4a2c      	ldr	r2, [pc, #176]	; (800b6cc <EE_WriteVariable+0x118>)
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b61a:	0030      	movs	r0, r6
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b61c:	6913      	ldr	r3, [r2, #16]
 800b61e:	438b      	bics	r3, r1
 800b620:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800b622:	0021      	movs	r1, r4
 800b624:	f7ff ff3c 	bl	800b4a0 <EE_VerifyPageFullWriteVariable>
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800b628:	1e05      	subs	r5, r0, #0
 800b62a:	d1d3      	bne.n	800b5d4 <EE_WriteVariable+0x20>
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
		{
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b62c:	4b28      	ldr	r3, [pc, #160]	; (800b6d0 <EE_WriteVariable+0x11c>)
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b62e:	2401      	movs	r4, #1
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b630:	469a      	mov	sl, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b632:	4f28      	ldr	r7, [pc, #160]	; (800b6d4 <EE_WriteVariable+0x120>)
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800b634:	42a6      	cmp	r6, r4
 800b636:	d00c      	beq.n	800b652 <EE_WriteVariable+0x9e>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b638:	4651      	mov	r1, sl
 800b63a:	0020      	movs	r0, r4
 800b63c:	f7ff ff8e 	bl	800b55c <EE_ReadVariable>
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
 800b640:	2801      	cmp	r0, #1
 800b642:	d006      	beq.n	800b652 <EE_WriteVariable+0x9e>
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b644:	4653      	mov	r3, sl
 800b646:	0020      	movs	r0, r4
 800b648:	8819      	ldrh	r1, [r3, #0]
 800b64a:	f7ff ff29 	bl	800b4a0 <EE_VerifyPageFullWriteVariable>
 800b64e:	1e05      	subs	r5, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800b650:	d1c0      	bne.n	800b5d4 <EE_WriteVariable+0x20>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b652:	3401      	adds	r4, #1
 800b654:	b2a4      	uxth	r4, r4
 800b656:	42bc      	cmp	r4, r7
 800b658:	d1ec      	bne.n	800b634 <EE_WriteVariable+0x80>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800b65a:	4648      	mov	r0, r9
 800b65c:	f005 fc4e 	bl	8010efc <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b660:	4819      	ldr	r0, [pc, #100]	; (800b6c8 <EE_WriteVariable+0x114>)
 800b662:	f005 fb37 	bl	8010cd4 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b666:	2800      	cmp	r0, #0
 800b668:	d124      	bne.n	800b6b4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800b66a:	2080      	movs	r0, #128	; 0x80
 800b66c:	0100      	lsls	r0, r0, #4
 800b66e:	4448      	add	r0, r9
 800b670:	f005 fc44 	bl	8010efc <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b674:	4814      	ldr	r0, [pc, #80]	; (800b6c8 <EE_WriteVariable+0x114>)
 800b676:	f005 fb2d 	bl	8010cd4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d11a      	bne.n	800b6b4 <EE_WriteVariable+0x100>
			return pFlash.ErrorCode;
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b67e:	2202      	movs	r2, #2
 800b680:	4c12      	ldr	r4, [pc, #72]	; (800b6cc <EE_WriteVariable+0x118>)
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b682:	4641      	mov	r1, r8
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b684:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b686:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b688:	4393      	bics	r3, r2
 800b68a:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	f005 fb64 	bl	8010d5c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b694:	480c      	ldr	r0, [pc, #48]	; (800b6c8 <EE_WriteVariable+0x114>)
 800b696:	f005 fb1d 	bl	8010cd4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d10a      	bne.n	800b6b4 <EE_WriteVariable+0x100>
		return pFlash.ErrorCode;
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b69e:	2201      	movs	r2, #1
 800b6a0:	6923      	ldr	r3, [r4, #16]
	}
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
 800b6a2:	2500      	movs	r5, #0
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b6a4:	4393      	bics	r3, r2
 800b6a6:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800b6a8:	f005 fb0a 	bl	8010cc0 <HAL_FLASH_Lock>
	return FlashStatus;
 800b6ac:	e792      	b.n	800b5d4 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800b6ae:	4689      	mov	r9, r1
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800b6b0:	4690      	mov	r8, r2
 800b6b2:	e7a5      	b.n	800b600 <EE_WriteVariable+0x4c>
		return pFlash.ErrorCode;
 800b6b4:	4b08      	ldr	r3, [pc, #32]	; (800b6d8 <EE_WriteVariable+0x124>)
 800b6b6:	69dd      	ldr	r5, [r3, #28]
 800b6b8:	b2ad      	uxth	r5, r5
 800b6ba:	e78b      	b.n	800b5d4 <EE_WriteVariable+0x20>
 800b6bc:	0801e000 	.word	0x0801e000
 800b6c0:	0801f000 	.word	0x0801f000
 800b6c4:	0000eeee 	.word	0x0000eeee
 800b6c8:	0000c350 	.word	0x0000c350
 800b6cc:	40022000 	.word	0x40022000
 800b6d0:	20002838 	.word	0x20002838
 800b6d4:	00000401 	.word	0x00000401
 800b6d8:	20006d80 	.word	0x20006d80

0800b6dc <EE_Format>:
uint16_t EE_Format(void){
 800b6dc:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800b6de:	f005 fadd 	bl	8010c9c <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b6e2:	481f      	ldr	r0, [pc, #124]	; (800b760 <EE_Format+0x84>)
 800b6e4:	f005 fc0a 	bl	8010efc <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b6e8:	481e      	ldr	r0, [pc, #120]	; (800b764 <EE_Format+0x88>)
 800b6ea:	f005 faf3 	bl	8010cd4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d003      	beq.n	800b6fa <EE_Format+0x1e>
			return pFlash.ErrorCode;
 800b6f2:	4b1d      	ldr	r3, [pc, #116]	; (800b768 <EE_Format+0x8c>)
 800b6f4:	69d8      	ldr	r0, [r3, #28]
 800b6f6:	b280      	uxth	r0, r0
}
 800b6f8:	bd70      	pop	{r4, r5, r6, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b6fa:	481c      	ldr	r0, [pc, #112]	; (800b76c <EE_Format+0x90>)
 800b6fc:	f005 fbfe 	bl	8010efc <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b700:	4818      	ldr	r0, [pc, #96]	; (800b764 <EE_Format+0x88>)
 800b702:	f005 fae7 	bl	8010cd4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b706:	2800      	cmp	r0, #0
 800b708:	d1f3      	bne.n	800b6f2 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b70a:	2202      	movs	r2, #2
 800b70c:	4c18      	ldr	r4, [pc, #96]	; (800b770 <EE_Format+0x94>)
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b70e:	2001      	movs	r0, #1
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b710:	6923      	ldr	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b712:	4913      	ldr	r1, [pc, #76]	; (800b760 <EE_Format+0x84>)
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b714:	4393      	bics	r3, r2
 800b716:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	f005 fb1e 	bl	8010d5c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b720:	4810      	ldr	r0, [pc, #64]	; (800b764 <EE_Format+0x88>)
 800b722:	f005 fad7 	bl	8010cd4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b726:	2800      	cmp	r0, #0
 800b728:	d1e3      	bne.n	800b6f2 <EE_Format+0x16>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b72a:	2501      	movs	r5, #1
 800b72c:	6923      	ldr	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b72e:	4811      	ldr	r0, [pc, #68]	; (800b774 <EE_Format+0x98>)
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b730:	43ab      	bics	r3, r5
 800b732:	6123      	str	r3, [r4, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b734:	f005 fbe2 	bl	8010efc <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b738:	480a      	ldr	r0, [pc, #40]	; (800b764 <EE_Format+0x88>)
 800b73a:	f005 facb 	bl	8010cd4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800b73e:	2800      	cmp	r0, #0
 800b740:	d1d7      	bne.n	800b6f2 <EE_Format+0x16>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b742:	480d      	ldr	r0, [pc, #52]	; (800b778 <EE_Format+0x9c>)
 800b744:	f005 fbda 	bl	8010efc <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b748:	4806      	ldr	r0, [pc, #24]	; (800b764 <EE_Format+0x88>)
 800b74a:	f005 fac3 	bl	8010cd4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1cf      	bne.n	800b6f2 <EE_Format+0x16>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	43ab      	bics	r3, r5
 800b756:	6123      	str	r3, [r4, #16]
	HAL_FLASH_Lock();
 800b758:	f005 fab2 	bl	8010cc0 <HAL_FLASH_Lock>
	return FlashStatus;
 800b75c:	2000      	movs	r0, #0
 800b75e:	e7cb      	b.n	800b6f8 <EE_Format+0x1c>
 800b760:	0801e000 	.word	0x0801e000
 800b764:	0000c350 	.word	0x0000c350
 800b768:	20006d80 	.word	0x20006d80
 800b76c:	0801e800 	.word	0x0801e800
 800b770:	40022000 	.word	0x40022000
 800b774:	0801f000 	.word	0x0801f000
 800b778:	0801f800 	.word	0x0801f800

0800b77c <EE_Init>:
uint16_t EE_Init(void){
 800b77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b77e:	46c6      	mov	lr, r8
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b780:	4ca1      	ldr	r4, [pc, #644]	; (800ba08 <EE_Init+0x28c>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b782:	4da2      	ldr	r5, [pc, #648]	; (800ba0c <EE_Init+0x290>)
uint16_t EE_Init(void){
 800b784:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800b786:	f005 fa89 	bl	8010c9c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b78a:	8821      	ldrh	r1, [r4, #0]
	switch(PageStatusA){
 800b78c:	48a0      	ldr	r0, [pc, #640]	; (800ba10 <EE_Init+0x294>)
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b78e:	882b      	ldrh	r3, [r5, #0]
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b790:	b28a      	uxth	r2, r1
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b792:	b29b      	uxth	r3, r3
	switch(PageStatusA){
 800b794:	4281      	cmp	r1, r0
 800b796:	d04d      	beq.n	800b834 <EE_Init+0xb8>
 800b798:	499e      	ldr	r1, [pc, #632]	; (800ba14 <EE_Init+0x298>)
 800b79a:	428a      	cmp	r2, r1
 800b79c:	d03a      	beq.n	800b814 <EE_Init+0x98>
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d00e      	beq.n	800b7c0 <EE_Init+0x44>
			FlashStatus =EE_Format();
 800b7a2:	f7ff ff9b 	bl	800b6dc <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b7a6:	489c      	ldr	r0, [pc, #624]	; (800ba18 <EE_Init+0x29c>)
 800b7a8:	f005 fa94 	bl	8010cd4 <FLASH_WaitForLastOperation>
 800b7ac:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	d102      	bne.n	800b7b8 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800b7b2:	f005 fa85 	bl	8010cc0 <HAL_FLASH_Lock>
	return HAL_OK;
 800b7b6:	2500      	movs	r5, #0
}
 800b7b8:	0028      	movs	r0, r5
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	46b8      	mov	r8, r7
 800b7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d0ee      	beq.n	800b7a2 <EE_Init+0x26>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800b7c4:	428b      	cmp	r3, r1
 800b7c6:	d100      	bne.n	800b7ca <EE_Init+0x4e>
 800b7c8:	e10b      	b.n	800b9e2 <EE_Init+0x266>
	int16_t x =-1;
 800b7ca:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b7cc:	4b93      	ldr	r3, [pc, #588]	; (800ba1c <EE_Init+0x2a0>)
 800b7ce:	2401      	movs	r4, #1
 800b7d0:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b7d2:	4f93      	ldr	r7, [pc, #588]	; (800ba20 <EE_Init+0x2a4>)
	int16_t x =-1;
 800b7d4:	4276      	negs	r6, r6
 800b7d6:	e004      	b.n	800b7e2 <EE_Init+0x66>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b7d8:	4b92      	ldr	r3, [pc, #584]	; (800ba24 <EE_Init+0x2a8>)
 800b7da:	3401      	adds	r4, #1
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	d100      	bne.n	800b7e2 <EE_Init+0x66>
 800b7e0:	e08d      	b.n	800b8fe <EE_Init+0x182>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800b7e2:	883b      	ldrh	r3, [r7, #0]
 800b7e4:	b2a5      	uxth	r5, r4
 800b7e6:	42ab      	cmp	r3, r5
 800b7e8:	d100      	bne.n	800b7ec <EE_Init+0x70>
						x =VarIdx;
 800b7ea:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b7ec:	42a6      	cmp	r6, r4
 800b7ee:	d0f3      	beq.n	800b7d8 <EE_Init+0x5c>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b7f0:	4641      	mov	r1, r8
 800b7f2:	0028      	movs	r0, r5
 800b7f4:	f7ff feb2 	bl	800b55c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b7f8:	2801      	cmp	r0, #1
 800b7fa:	d0ed      	beq.n	800b7d8 <EE_Init+0x5c>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b7fc:	4643      	mov	r3, r8
 800b7fe:	0028      	movs	r0, r5
 800b800:	8819      	ldrh	r1, [r3, #0]
 800b802:	f7ff fe4d 	bl	800b4a0 <EE_VerifyPageFullWriteVariable>
 800b806:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b808:	4883      	ldr	r0, [pc, #524]	; (800ba18 <EE_Init+0x29c>)
 800b80a:	f005 fa63 	bl	8010cd4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b80e:	2800      	cmp	r0, #0
 800b810:	d0e2      	beq.n	800b7d8 <EE_Init+0x5c>
 800b812:	e7d1      	b.n	800b7b8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800b814:	2b00      	cmp	r3, #0
 800b816:	d05c      	beq.n	800b8d2 <EE_Init+0x156>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800b818:	4283      	cmp	r3, r0
 800b81a:	d100      	bne.n	800b81e <EE_Init+0xa2>
 800b81c:	e096      	b.n	800b94c <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800b81e:	f7ff ff5d 	bl	800b6dc <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b822:	487d      	ldr	r0, [pc, #500]	; (800ba18 <EE_Init+0x29c>)
 800b824:	f005 fa56 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b828:	2800      	cmp	r0, #0
 800b82a:	d0c2      	beq.n	800b7b2 <EE_Init+0x36>
						return pFlash.ErrorCode;
 800b82c:	4b7e      	ldr	r3, [pc, #504]	; (800ba28 <EE_Init+0x2ac>)
 800b82e:	69dd      	ldr	r5, [r3, #28]
 800b830:	b2ad      	uxth	r5, r5
 800b832:	e7c1      	b.n	800b7b8 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800b834:	2b00      	cmp	r3, #0
 800b836:	d124      	bne.n	800b882 <EE_Init+0x106>
	int16_t x =-1;
 800b838:	2601      	movs	r6, #1
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b83a:	4b78      	ldr	r3, [pc, #480]	; (800ba1c <EE_Init+0x2a0>)
 800b83c:	2401      	movs	r4, #1
 800b83e:	4698      	mov	r8, r3
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b840:	4f7a      	ldr	r7, [pc, #488]	; (800ba2c <EE_Init+0x2b0>)
	int16_t x =-1;
 800b842:	4276      	negs	r6, r6
 800b844:	e004      	b.n	800b850 <EE_Init+0xd4>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800b846:	4b77      	ldr	r3, [pc, #476]	; (800ba24 <EE_Init+0x2a8>)
 800b848:	3401      	adds	r4, #1
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d100      	bne.n	800b850 <EE_Init+0xd4>
 800b84e:	e0a5      	b.n	800b99c <EE_Init+0x220>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800b850:	883b      	ldrh	r3, [r7, #0]
 800b852:	b2a5      	uxth	r5, r4
 800b854:	42ab      	cmp	r3, r5
 800b856:	d100      	bne.n	800b85a <EE_Init+0xde>
						x =VarIdx;
 800b858:	b226      	sxth	r6, r4
					if(VarIdx != x){
 800b85a:	42a6      	cmp	r6, r4
 800b85c:	d0f3      	beq.n	800b846 <EE_Init+0xca>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800b85e:	4641      	mov	r1, r8
 800b860:	0028      	movs	r0, r5
 800b862:	f7ff fe7b 	bl	800b55c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800b866:	2801      	cmp	r0, #1
 800b868:	d0ed      	beq.n	800b846 <EE_Init+0xca>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800b86a:	4643      	mov	r3, r8
 800b86c:	0028      	movs	r0, r5
 800b86e:	8819      	ldrh	r1, [r3, #0]
 800b870:	f7ff fe16 	bl	800b4a0 <EE_VerifyPageFullWriteVariable>
 800b874:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b876:	4868      	ldr	r0, [pc, #416]	; (800ba18 <EE_Init+0x29c>)
 800b878:	f005 fa2c 	bl	8010cd4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d0e2      	beq.n	800b846 <EE_Init+0xca>
 800b880:	e79a      	b.n	800b7b8 <EE_Init+0x3c>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800b882:	4a64      	ldr	r2, [pc, #400]	; (800ba14 <EE_Init+0x298>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d1ca      	bne.n	800b81e <EE_Init+0xa2>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b888:	0028      	movs	r0, r5
 800b88a:	f005 fb37 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b88e:	4862      	ldr	r0, [pc, #392]	; (800ba18 <EE_Init+0x29c>)
 800b890:	f005 fa20 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b894:	2800      	cmp	r0, #0
 800b896:	d1c9      	bne.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b898:	4865      	ldr	r0, [pc, #404]	; (800ba30 <EE_Init+0x2b4>)
 800b89a:	f005 fb2f 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b89e:	485e      	ldr	r0, [pc, #376]	; (800ba18 <EE_Init+0x29c>)
 800b8a0:	f005 fa18 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d1c1      	bne.n	800b82c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	4d62      	ldr	r5, [pc, #392]	; (800ba34 <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b8ac:	0021      	movs	r1, r4
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8ae:	692b      	ldr	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b8b0:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8b2:	4393      	bics	r3, r2
 800b8b4:	612b      	str	r3, [r5, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f005 fa4f 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8be:	4856      	ldr	r0, [pc, #344]	; (800ba18 <EE_Init+0x29c>)
 800b8c0:	f005 fa08 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d1b1      	bne.n	800b82c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	692b      	ldr	r3, [r5, #16]
 800b8cc:	4393      	bics	r3, r2
 800b8ce:	612b      	str	r3, [r5, #16]
 800b8d0:	e76f      	b.n	800b7b2 <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b8d2:	0020      	movs	r0, r4
 800b8d4:	f005 fb12 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8d8:	484f      	ldr	r0, [pc, #316]	; (800ba18 <EE_Init+0x29c>)
 800b8da:	f005 f9fb 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d1a4      	bne.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b8e2:	4855      	ldr	r0, [pc, #340]	; (800ba38 <EE_Init+0x2bc>)
 800b8e4:	f005 fb0a 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b8e8:	484b      	ldr	r0, [pc, #300]	; (800ba18 <EE_Init+0x29c>)
 800b8ea:	f005 f9f3 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d19c      	bne.n	800b82c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b8f2:	2102      	movs	r1, #2
 800b8f4:	4a4f      	ldr	r2, [pc, #316]	; (800ba34 <EE_Init+0x2b8>)
 800b8f6:	6913      	ldr	r3, [r2, #16]
 800b8f8:	438b      	bics	r3, r1
 800b8fa:	6113      	str	r3, [r2, #16]
 800b8fc:	e759      	b.n	800b7b2 <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b8fe:	2200      	movs	r2, #0
 800b900:	2300      	movs	r3, #0
 800b902:	2001      	movs	r0, #1
 800b904:	4941      	ldr	r1, [pc, #260]	; (800ba0c <EE_Init+0x290>)
 800b906:	f005 fa29 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b90a:	4843      	ldr	r0, [pc, #268]	; (800ba18 <EE_Init+0x29c>)
 800b90c:	f005 f9e2 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b910:	2800      	cmp	r0, #0
 800b912:	d18b      	bne.n	800b82c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b914:	2201      	movs	r2, #1
 800b916:	4c47      	ldr	r4, [pc, #284]	; (800ba34 <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b918:	483b      	ldr	r0, [pc, #236]	; (800ba08 <EE_Init+0x28c>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b91a:	6923      	ldr	r3, [r4, #16]
 800b91c:	4393      	bics	r3, r2
 800b91e:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b920:	f005 faec 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b924:	483c      	ldr	r0, [pc, #240]	; (800ba18 <EE_Init+0x29c>)
 800b926:	f005 f9d5 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d000      	beq.n	800b930 <EE_Init+0x1b4>
 800b92e:	e77d      	b.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b930:	4841      	ldr	r0, [pc, #260]	; (800ba38 <EE_Init+0x2bc>)
 800b932:	f005 fae3 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b936:	4838      	ldr	r0, [pc, #224]	; (800ba18 <EE_Init+0x29c>)
 800b938:	f005 f9cc 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d000      	beq.n	800b942 <EE_Init+0x1c6>
 800b940:	e774      	b.n	800b82c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b942:	2202      	movs	r2, #2
 800b944:	6923      	ldr	r3, [r4, #16]
 800b946:	4393      	bics	r3, r2
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	e732      	b.n	800b7b2 <EE_Init+0x36>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800b94c:	0020      	movs	r0, r4
 800b94e:	f005 fad5 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b952:	4831      	ldr	r0, [pc, #196]	; (800ba18 <EE_Init+0x29c>)
 800b954:	f005 f9be 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b958:	2800      	cmp	r0, #0
 800b95a:	d000      	beq.n	800b95e <EE_Init+0x1e2>
 800b95c:	e766      	b.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800b95e:	4836      	ldr	r0, [pc, #216]	; (800ba38 <EE_Init+0x2bc>)
 800b960:	f005 facc 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b964:	482c      	ldr	r0, [pc, #176]	; (800ba18 <EE_Init+0x29c>)
 800b966:	f005 f9b5 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d000      	beq.n	800b970 <EE_Init+0x1f4>
 800b96e:	e75d      	b.n	800b82c <EE_Init+0xb0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b970:	2202      	movs	r2, #2
 800b972:	4c30      	ldr	r4, [pc, #192]	; (800ba34 <EE_Init+0x2b8>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b974:	0029      	movs	r1, r5
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b976:	6923      	ldr	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b978:	2001      	movs	r0, #1
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800b97a:	4393      	bics	r3, r2
 800b97c:	6123      	str	r3, [r4, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	f005 f9eb 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b986:	4824      	ldr	r0, [pc, #144]	; (800ba18 <EE_Init+0x29c>)
 800b988:	f005 f9a4 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d000      	beq.n	800b992 <EE_Init+0x216>
 800b990:	e74c      	b.n	800b82c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b992:	2201      	movs	r2, #1
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	4393      	bics	r3, r2
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	e70a      	b.n	800b7b2 <EE_Init+0x36>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800b99c:	2200      	movs	r2, #0
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	4919      	ldr	r1, [pc, #100]	; (800ba08 <EE_Init+0x28c>)
 800b9a4:	f005 f9da 	bl	8010d5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9a8:	481b      	ldr	r0, [pc, #108]	; (800ba18 <EE_Init+0x29c>)
 800b9aa:	f005 f993 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	d000      	beq.n	800b9b4 <EE_Init+0x238>
 800b9b2:	e73b      	b.n	800b82c <EE_Init+0xb0>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	4c1f      	ldr	r4, [pc, #124]	; (800ba34 <EE_Init+0x2b8>)
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b9b8:	4814      	ldr	r0, [pc, #80]	; (800ba0c <EE_Init+0x290>)
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	4393      	bics	r3, r2
 800b9be:	6123      	str	r3, [r4, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b9c0:	f005 fa9c 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9c4:	4814      	ldr	r0, [pc, #80]	; (800ba18 <EE_Init+0x29c>)
 800b9c6:	f005 f985 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d000      	beq.n	800b9d0 <EE_Init+0x254>
 800b9ce:	e72d      	b.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b9d0:	4817      	ldr	r0, [pc, #92]	; (800ba30 <EE_Init+0x2b4>)
 800b9d2:	f005 fa93 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9d6:	4810      	ldr	r0, [pc, #64]	; (800ba18 <EE_Init+0x29c>)
 800b9d8:	f005 f97c 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d0b0      	beq.n	800b942 <EE_Init+0x1c6>
 800b9e0:	e724      	b.n	800b82c <EE_Init+0xb0>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800b9e2:	0028      	movs	r0, r5
 800b9e4:	f005 fa8a 	bl	8010efc <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9e8:	480b      	ldr	r0, [pc, #44]	; (800ba18 <EE_Init+0x29c>)
 800b9ea:	f005 f973 	bl	8010cd4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d000      	beq.n	800b9f4 <EE_Init+0x278>
 800b9f2:	e71b      	b.n	800b82c <EE_Init+0xb0>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800b9f4:	480e      	ldr	r0, [pc, #56]	; (800ba30 <EE_Init+0x2b4>)
 800b9f6:	f005 fa81 	bl	8010efc <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9fa:	4807      	ldr	r0, [pc, #28]	; (800ba18 <EE_Init+0x29c>)
 800b9fc:	f005 f96a 	bl	8010cd4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d100      	bne.n	800ba06 <EE_Init+0x28a>
 800ba04:	e775      	b.n	800b8f2 <EE_Init+0x176>
 800ba06:	e711      	b.n	800b82c <EE_Init+0xb0>
 800ba08:	0801e000 	.word	0x0801e000
 800ba0c:	0801f000 	.word	0x0801f000
 800ba10:	0000eeee 	.word	0x0000eeee
 800ba14:	0000ffff 	.word	0x0000ffff
 800ba18:	0000c350 	.word	0x0000c350
 800ba1c:	20002838 	.word	0x20002838
 800ba20:	0801f006 	.word	0x0801f006
 800ba24:	00000401 	.word	0x00000401
 800ba28:	20006d80 	.word	0x20006d80
 800ba2c:	0801e006 	.word	0x0801e006
 800ba30:	0801f800 	.word	0x0801f800
 800ba34:	40022000 	.word	0x40022000
 800ba38:	0801e800 	.word	0x0801e800

0800ba3c <EraseSector>:
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ba3c:	2300      	movs	r3, #0
BOS_Status EraseSector(uint32_t sector ) {
 800ba3e:	b500      	push	{lr}
 800ba40:	b085      	sub	sp, #20
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ba42:	9301      	str	r3, [sp, #4]
		erase.PageAddress = sector;
 800ba44:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800ba46:	3301      	adds	r3, #1
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800ba48:	4669      	mov	r1, sp
 800ba4a:	a801      	add	r0, sp, #4
		erase.NbPages =1;
 800ba4c:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800ba4e:	f005 f9e9 	bl	8010e24 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d102      	bne.n	800ba5c <EraseSector+0x20>
 800ba56:	9b00      	ldr	r3, [sp, #0]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	d002      	beq.n	800ba62 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800ba5c:	2216      	movs	r2, #22
 800ba5e:	4b02      	ldr	r3, [pc, #8]	; (800ba68 <EraseSector+0x2c>)
 800ba60:	701a      	strb	r2, [r3, #0]

	return result;
}
 800ba62:	2000      	movs	r0, #0
 800ba64:	b005      	add	sp, #20
 800ba66:	bd00      	pop	{pc}
 800ba68:	20000c74 	.word	0x20000c74

0800ba6c <GPIO_Init>:
/** Pinout Configuration
*/
void GPIO_Init(void)
{
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 800ba6c:	2080      	movs	r0, #128	; 0x80
 800ba6e:	4b1f      	ldr	r3, [pc, #124]	; (800baec <GPIO_Init+0x80>)
 800ba70:	0300      	lsls	r0, r0, #12
 800ba72:	6959      	ldr	r1, [r3, #20]
{
 800ba74:	b500      	push	{lr}
  __GPIOC_CLK_ENABLE();
 800ba76:	4301      	orrs	r1, r0
 800ba78:	6159      	str	r1, [r3, #20]
 800ba7a:	695a      	ldr	r2, [r3, #20]
{
 800ba7c:	b08b      	sub	sp, #44	; 0x2c
  __GPIOC_CLK_ENABLE();
 800ba7e:	4002      	ands	r2, r0
  __GPIOA_CLK_ENABLE();
 800ba80:	2080      	movs	r0, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800ba82:	9200      	str	r2, [sp, #0]
 800ba84:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 800ba86:	6959      	ldr	r1, [r3, #20]
 800ba88:	0280      	lsls	r0, r0, #10
 800ba8a:	4301      	orrs	r1, r0
 800ba8c:	6159      	str	r1, [r3, #20]
 800ba8e:	695a      	ldr	r2, [r3, #20]
 800ba90:	4002      	ands	r2, r0
  __GPIOD_CLK_ENABLE();
 800ba92:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800ba94:	9201      	str	r2, [sp, #4]
 800ba96:	9a01      	ldr	r2, [sp, #4]
  __GPIOD_CLK_ENABLE();
 800ba98:	6959      	ldr	r1, [r3, #20]
 800ba9a:	0340      	lsls	r0, r0, #13
 800ba9c:	4301      	orrs	r1, r0
 800ba9e:	6159      	str	r1, [r3, #20]
 800baa0:	695a      	ldr	r2, [r3, #20]
 800baa2:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800baa4:	2080      	movs	r0, #128	; 0x80
  __GPIOD_CLK_ENABLE();
 800baa6:	9202      	str	r2, [sp, #8]
 800baa8:	9a02      	ldr	r2, [sp, #8]
  __GPIOB_CLK_ENABLE();
 800baaa:	6959      	ldr	r1, [r3, #20]
 800baac:	02c0      	lsls	r0, r0, #11
 800baae:	4301      	orrs	r1, r0
 800bab0:	6159      	str	r1, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bab2:	2180      	movs	r1, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800bab4:	695a      	ldr	r2, [r3, #20]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bab6:	03c9      	lsls	r1, r1, #15
  __GPIOB_CLK_ENABLE();
 800bab8:	4002      	ands	r2, r0
 800baba:	9203      	str	r2, [sp, #12]
 800babc:	9a03      	ldr	r2, [sp, #12]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800babe:	695a      	ldr	r2, [r3, #20]
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bac0:	2090      	movs	r0, #144	; 0x90
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800bac2:	430a      	orrs	r2, r1
 800bac4:	615a      	str	r2, [r3, #20]
 800bac6:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bac8:	05c0      	lsls	r0, r0, #23
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800baca:	400b      	ands	r3, r1
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	9b04      	ldr	r3, [sp, #16]
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800bad0:	2380      	movs	r3, #128	; 0x80
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bad6:	2301      	movs	r3, #1
 800bad8:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bada:	2300      	movs	r3, #0
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800badc:	a905      	add	r1, sp, #20
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bade:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bae0:	3303      	adds	r3, #3
 800bae2:	9308      	str	r3, [sp, #32]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800bae4:	f005 fa1c 	bl	8010f20 <HAL_GPIO_Init>
}
 800bae8:	b00b      	add	sp, #44	; 0x2c
 800baea:	bd00      	pop	{pc}
 800baec:	40021000 	.word	0x40021000

0800baf0 <Switch_Init>:
*/
void Switch_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _Switch_PIN;
 800baf0:	2301      	movs	r3, #1
{
 800baf2:	b500      	push	{lr}
 800baf4:	b087      	sub	sp, #28
	GPIO_InitStruct.Pin = _Switch_PIN;
 800baf6:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800baf8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bafa:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <Switch_Init+0x20>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bafe:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bb00:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bb02:	3303      	adds	r3, #3
 800bb04:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_Switch_PORT, &GPIO_InitStruct);
 800bb06:	f005 fa0b 	bl	8010f20 <HAL_GPIO_Init>
}
 800bb0a:	b007      	add	sp, #28
 800bb0c:	bd00      	pop	{pc}
 800bb0e:	46c0      	nop			; (mov r8, r8)
 800bb10:	48000400 	.word	0x48000400

0800bb14 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	000e      	movs	r6, r1
 800bb18:	0015      	movs	r5, r2
 800bb1a:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800bb1c:	f001 fe06 	bl	800d72c <GetUart>
 800bb20:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800bb22:	4824      	ldr	r0, [pc, #144]	; (800bbb4 <GetPortGPIOs+0xa0>)
 800bb24:	4284      	cmp	r4, r0
 800bb26:	d022      	beq.n	800bb6e <GetPortGPIOs+0x5a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800bb28:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <GetPortGPIOs+0xa4>)
 800bb2a:	429c      	cmp	r4, r3
 800bb2c:	d014      	beq.n	800bb58 <GetPortGPIOs+0x44>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800bb2e:	4b23      	ldr	r3, [pc, #140]	; (800bbbc <GetPortGPIOs+0xa8>)
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d029      	beq.n	800bb88 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800bb34:	4b22      	ldr	r3, [pc, #136]	; (800bbc0 <GetPortGPIOs+0xac>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d032      	beq.n	800bba0 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800bb3a:	4b22      	ldr	r3, [pc, #136]	; (800bbc4 <GetPortGPIOs+0xb0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800bb3c:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	d114      	bne.n	800bb6c <GetPortGPIOs+0x58>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bb42:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART6_TX_PIN;
 800bb44:	2210      	movs	r2, #16
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800bb46:	05db      	lsls	r3, r3, #23
 800bb48:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800bb4a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800bb4c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800bb4e:	2320      	movs	r3, #32
 800bb50:	9a06      	ldr	r2, [sp, #24]
	BOS_Status result = BOS_OK;
 800bb52:	2000      	movs	r0, #0
		*RX_Pin = USART6_RX_PIN;
 800bb54:	8013      	strh	r3, [r2, #0]
 800bb56:	e009      	b.n	800bb6c <GetPortGPIOs+0x58>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bb58:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART2_TX_PIN;
 800bb5a:	2204      	movs	r2, #4
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800bb5c:	05db      	lsls	r3, r3, #23
 800bb5e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800bb60:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800bb62:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800bb64:	2308      	movs	r3, #8
	BOS_Status result = BOS_OK;
 800bb66:	2000      	movs	r0, #0
		*RX_Pin = USART2_RX_PIN;
 800bb68:	9a06      	ldr	r2, [sp, #24]
 800bb6a:	8013      	strh	r3, [r2, #0]
	
	return result;	
}
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bb6e:	2390      	movs	r3, #144	; 0x90
		*TX_Pin = USART1_TX_PIN;
 800bb70:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bb72:	05db      	lsls	r3, r3, #23
		*TX_Pin = USART1_TX_PIN;
 800bb74:	0092      	lsls	r2, r2, #2
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800bb76:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800bb78:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800bb7a:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800bb7c:	2380      	movs	r3, #128	; 0x80
 800bb7e:	9a06      	ldr	r2, [sp, #24]
 800bb80:	00db      	lsls	r3, r3, #3
	BOS_Status result = BOS_OK;
 800bb82:	2000      	movs	r0, #0
		*RX_Pin = USART1_RX_PIN;
 800bb84:	8013      	strh	r3, [r2, #0]
 800bb86:	e7f1      	b.n	800bb6c <GetPortGPIOs+0x58>
		*TX_Pin = USART3_TX_PIN;
 800bb88:	2280      	movs	r2, #128	; 0x80
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bb8a:	4b0f      	ldr	r3, [pc, #60]	; (800bbc8 <GetPortGPIOs+0xb4>)
		*TX_Pin = USART3_TX_PIN;
 800bb8c:	00d2      	lsls	r2, r2, #3
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800bb8e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800bb90:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800bb92:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800bb94:	2380      	movs	r3, #128	; 0x80
 800bb96:	9a06      	ldr	r2, [sp, #24]
 800bb98:	011b      	lsls	r3, r3, #4
	BOS_Status result = BOS_OK;
 800bb9a:	2000      	movs	r0, #0
		*RX_Pin = USART3_RX_PIN;
 800bb9c:	8013      	strh	r3, [r2, #0]
 800bb9e:	e7e5      	b.n	800bb6c <GetPortGPIOs+0x58>
		*TX_Pin = USART5_TX_PIN;
 800bba0:	2208      	movs	r2, #8
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <GetPortGPIOs+0xb4>)
	BOS_Status result = BOS_OK;
 800bba4:	2000      	movs	r0, #0
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800bba6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800bba8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800bbaa:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800bbac:	2310      	movs	r3, #16
 800bbae:	9a06      	ldr	r2, [sp, #24]
 800bbb0:	8013      	strh	r3, [r2, #0]
 800bbb2:	e7db      	b.n	800bb6c <GetPortGPIOs+0x58>
 800bbb4:	200023b4 	.word	0x200023b4
 800bbb8:	20002344 	.word	0x20002344
 800bbbc:	200022d4 	.word	0x200022d4
 800bbc0:	20002264 	.word	0x20002264
 800bbc4:	200021f4 	.word	0x200021f4
 800bbc8:	48000400 	.word	0x48000400

0800bbcc <IsFactoryReset>:
  __GPIOA_CLK_ENABLE();
 800bbcc:	2080      	movs	r0, #128	; 0x80
 800bbce:	4b39      	ldr	r3, [pc, #228]	; (800bcb4 <IsFactoryReset+0xe8>)
 800bbd0:	0280      	lsls	r0, r0, #10
 800bbd2:	6959      	ldr	r1, [r3, #20]
{
 800bbd4:	b530      	push	{r4, r5, lr}
  __GPIOA_CLK_ENABLE();
 800bbd6:	4301      	orrs	r1, r0
 800bbd8:	6159      	str	r1, [r3, #20]
 800bbda:	695a      	ldr	r2, [r3, #20]
{
 800bbdc:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800bbde:	4002      	ands	r2, r0
  __GPIOB_CLK_ENABLE();
 800bbe0:	2080      	movs	r0, #128	; 0x80
  __GPIOA_CLK_ENABLE();
 800bbe2:	9209      	str	r2, [sp, #36]	; 0x24
 800bbe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __GPIOB_CLK_ENABLE();
 800bbe6:	6959      	ldr	r1, [r3, #20]
 800bbe8:	02c0      	lsls	r0, r0, #11
 800bbea:	4301      	orrs	r1, r0
 800bbec:	6159      	str	r1, [r3, #20]
 800bbee:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bbf0:	2412      	movs	r4, #18
  __GPIOB_CLK_ENABLE();
 800bbf2:	4002      	ands	r2, r0
  __GPIOC_CLK_ENABLE();
 800bbf4:	2080      	movs	r0, #128	; 0x80
  __GPIOB_CLK_ENABLE();
 800bbf6:	920a      	str	r2, [sp, #40]	; 0x28
 800bbf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __GPIOC_CLK_ENABLE();
 800bbfa:	6959      	ldr	r1, [r3, #20]
 800bbfc:	0300      	lsls	r0, r0, #12
 800bbfe:	4301      	orrs	r1, r0
 800bc00:	6159      	str	r1, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800bc02:	2180      	movs	r1, #128	; 0x80
  __GPIOC_CLK_ENABLE();
 800bc04:	695a      	ldr	r2, [r3, #20]
	__GPIOD_CLK_ENABLE();
 800bc06:	0349      	lsls	r1, r1, #13
  __GPIOC_CLK_ENABLE();
 800bc08:	4002      	ands	r2, r0
 800bc0a:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	__GPIOD_CLK_ENABLE();
 800bc0e:	695a      	ldr	r2, [r3, #20]
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bc10:	446c      	add	r4, sp
	__GPIOD_CLK_ENABLE();
 800bc12:	430a      	orrs	r2, r1
 800bc14:	615a      	str	r2, [r3, #20]
 800bc16:	695b      	ldr	r3, [r3, #20]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bc18:	aa03      	add	r2, sp, #12
	__GPIOD_CLK_ENABLE();
 800bc1a:	400b      	ands	r3, r1
 800bc1c:	930c      	str	r3, [sp, #48]	; 0x30
 800bc1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800bc20:	230e      	movs	r3, #14
 800bc22:	446b      	add	r3, sp
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	a905      	add	r1, sp, #20
 800bc28:	ab06      	add	r3, sp, #24
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	f7ff ff72 	bl	800bb14 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800bc30:	aa04      	add	r2, sp, #16
 800bc32:	ab08      	add	r3, sp, #32
 800bc34:	a907      	add	r1, sp, #28
 800bc36:	2005      	movs	r0, #5
 800bc38:	9400      	str	r4, [sp, #0]
 800bc3a:	f7ff ff6b 	bl	800bb14 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bc42:	466b      	mov	r3, sp
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bc46:	899b      	ldrh	r3, [r3, #12]
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bc48:	9805      	ldr	r0, [sp, #20]
 800bc4a:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800bc4c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc4e:	950f      	str	r5, [sp, #60]	; 0x3c
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800bc50:	f005 f966 	bl	8010f20 <HAL_GPIO_Init>
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800bc54:	2302      	movs	r3, #2
 800bc56:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bc58:	8823      	ldrh	r3, [r4, #0]
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bc5a:	9808      	ldr	r0, [sp, #32]
 800bc5c:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800bc5e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc60:	950e      	str	r5, [sp, #56]	; 0x38
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800bc62:	f005 f95d 	bl	8010f20 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800bc66:	466b      	mov	r3, sp
 800bc68:	2200      	movs	r2, #0
 800bc6a:	8999      	ldrh	r1, [r3, #12]
 800bc6c:	9805      	ldr	r0, [sp, #20]
 800bc6e:	f005 fb0b 	bl	8011288 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800bc72:	2005      	movs	r0, #5
 800bc74:	f001 fb76 	bl	800d364 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800bc78:	8821      	ldrh	r1, [r4, #0]
 800bc7a:	9808      	ldr	r0, [sp, #32]
 800bc7c:	f005 fafe 	bl	801127c <HAL_GPIO_ReadPin>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d006      	beq.n	800bc92 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bc84:	2201      	movs	r2, #1
	return 0;
 800bc86:	2000      	movs	r0, #0
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800bc88:	4b0b      	ldr	r3, [pc, #44]	; (800bcb8 <IsFactoryReset+0xec>)
 800bc8a:	4252      	negs	r2, r2
 800bc8c:	601a      	str	r2, [r3, #0]
}
 800bc8e:	b013      	add	sp, #76	; 0x4c
 800bc90:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800bc92:	466b      	mov	r3, sp
 800bc94:	2201      	movs	r2, #1
 800bc96:	8999      	ldrh	r1, [r3, #12]
 800bc98:	9805      	ldr	r0, [sp, #20]
 800bc9a:	f005 faf5 	bl	8011288 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800bc9e:	2005      	movs	r0, #5
 800bca0:	f001 fb60 	bl	800d364 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800bca4:	8821      	ldrh	r1, [r4, #0]
 800bca6:	9808      	ldr	r0, [sp, #32]
 800bca8:	f005 fae8 	bl	801127c <HAL_GPIO_ReadPin>
 800bcac:	2801      	cmp	r0, #1
 800bcae:	d1e9      	bne.n	800bc84 <IsFactoryReset+0xb8>
 800bcb0:	e7ed      	b.n	800bc8e <IsFactoryReset+0xc2>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	40021000 	.word	0x40021000
 800bcb8:	20007ff0 	.word	0x20007ff0

0800bcbc <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800bcbc:	4770      	bx	lr
 800bcbe:	46c0      	nop			; (mov r8, r8)

0800bcc0 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800bcc0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bcc2:	00c1      	lsls	r1, r0, #3
 800bcc4:	4c12      	ldr	r4, [pc, #72]	; (800bd10 <CheckForTimedButtonPress+0x50>)
 800bcc6:	1809      	adds	r1, r1, r0
 800bcc8:	1865      	adds	r5, r4, r1
 800bcca:	78ae      	ldrb	r6, [r5, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800bccc:	0080      	lsls	r0, r0, #2
	t1 *= 1000;
 800bcce:	0172      	lsls	r2, r6, #5
	if (pressCounter[port] == t1) {
 800bcd0:	1820      	adds	r0, r4, r0
	t1 *= 1000;
 800bcd2:	1b92      	subs	r2, r2, r6
 800bcd4:	0093      	lsls	r3, r2, #2
	if (pressCounter[port] == t1) {
 800bcd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
	t1 *= 1000;
 800bcd8:	199b      	adds	r3, r3, r6
 800bcda:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800bcdc:	4298      	cmp	r0, r3
 800bcde:	d014      	beq.n	800bd0a <CheckForTimedButtonPress+0x4a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800bce0:	78ee      	ldrb	r6, [r5, #3]
	t2 *= 1000;
 800bce2:	0172      	lsls	r2, r6, #5
 800bce4:	1b92      	subs	r2, r2, r6
 800bce6:	0093      	lsls	r3, r2, #2
 800bce8:	199b      	adds	r3, r3, r6
 800bcea:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800bcec:	4298      	cmp	r0, r3
 800bcee:	d009      	beq.n	800bd04 <CheckForTimedButtonPress+0x44>
			t3 = button[port].pressedX3Sec;
 800bcf0:	792d      	ldrb	r5, [r5, #4]
	t3 *= 1000;
 800bcf2:	016a      	lsls	r2, r5, #5
 800bcf4:	1b52      	subs	r2, r2, r5
 800bcf6:	0093      	lsls	r3, r2, #2
 800bcf8:	195b      	adds	r3, r3, r5
 800bcfa:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800bcfc:	4298      	cmp	r0, r3
 800bcfe:	d001      	beq.n	800bd04 <CheckForTimedButtonPress+0x44>
		button[port].state = PRESSED_FOR_X2_SEC;
	}

	return result;
}
 800bd00:	2000      	movs	r0, #0
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800bd04:	230a      	movs	r3, #10
 800bd06:	550b      	strb	r3, [r1, r4]
 800bd08:	e7fa      	b.n	800bd00 <CheckForTimedButtonPress+0x40>
		button[port].state = PRESSED_FOR_X1_SEC;
 800bd0a:	2309      	movs	r3, #9
 800bd0c:	550b      	strb	r3, [r1, r4]
 800bd0e:	e7f7      	b.n	800bd00 <CheckForTimedButtonPress+0x40>
 800bd10:	2000283c 	.word	0x2000283c

0800bd14 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800bd14:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bd16:	00c1      	lsls	r1, r0, #3
 800bd18:	4c12      	ldr	r4, [pc, #72]	; (800bd64 <CheckForTimedButtonRelease+0x50>)
 800bd1a:	1809      	adds	r1, r1, r0
 800bd1c:	1865      	adds	r5, r4, r1
 800bd1e:	796e      	ldrb	r6, [r5, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800bd20:	0080      	lsls	r0, r0, #2
	t1 *= 1000;
 800bd22:	0172      	lsls	r2, r6, #5
	if (releaseCounter[port] == t1) {
 800bd24:	1820      	adds	r0, r4, r0
	t1 *= 1000;
 800bd26:	1b92      	subs	r2, r2, r6
 800bd28:	0093      	lsls	r3, r2, #2
	if (releaseCounter[port] == t1) {
 800bd2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	t1 *= 1000;
 800bd2c:	199b      	adds	r3, r3, r6
 800bd2e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800bd30:	4298      	cmp	r0, r3
 800bd32:	d014      	beq.n	800bd5e <CheckForTimedButtonRelease+0x4a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800bd34:	79ae      	ldrb	r6, [r5, #6]
	t2 *= 1000;
 800bd36:	0172      	lsls	r2, r6, #5
 800bd38:	1b92      	subs	r2, r2, r6
 800bd3a:	0093      	lsls	r3, r2, #2
 800bd3c:	199b      	adds	r3, r3, r6
 800bd3e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800bd40:	4298      	cmp	r0, r3
 800bd42:	d009      	beq.n	800bd58 <CheckForTimedButtonRelease+0x44>
			t3 = button[port].releasedY3Sec;
 800bd44:	79ed      	ldrb	r5, [r5, #7]
	t3 *= 1000;
 800bd46:	016a      	lsls	r2, r5, #5
 800bd48:	1b52      	subs	r2, r2, r5
 800bd4a:	0093      	lsls	r3, r2, #2
 800bd4c:	195b      	adds	r3, r3, r5
 800bd4e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800bd50:	4298      	cmp	r0, r3
 800bd52:	d001      	beq.n	800bd58 <CheckForTimedButtonRelease+0x44>
		button[port].state = RELEASED_FOR_Y2_SEC;
	}

	return result;
}
 800bd54:	2000      	movs	r0, #0
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800bd58:	230d      	movs	r3, #13
 800bd5a:	550b      	strb	r3, [r1, r4]
 800bd5c:	e7fa      	b.n	800bd54 <CheckForTimedButtonRelease+0x40>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800bd5e:	230c      	movs	r3, #12
 800bd60:	550b      	strb	r3, [r1, r4]
 800bd62:	e7f7      	b.n	800bd54 <CheckForTimedButtonRelease+0x40>
 800bd64:	2000283c 	.word	0x2000283c

0800bd68 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800bd6a:	4d37      	ldr	r5, [pc, #220]	; (800be48 <AddPortButton+0xe0>)
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bd6c:	0006      	movs	r6, r0
	if (BOS_initialized) {
 800bd6e:	782b      	ldrb	r3, [r5, #0]
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800bd70:	000c      	movs	r4, r1
 800bd72:	b08d      	sub	sp, #52	; 0x34
	if (BOS_initialized) {
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d152      	bne.n	800be1e <AddPortButton+0xb6>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800bd78:	2204      	movs	r2, #4
 800bd7a:	4b34      	ldr	r3, [pc, #208]	; (800be4c <AddPortButton+0xe4>)
 800bd7c:	545a      	strb	r2, [r3, r1]
	if (BOS_initialized) {
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800bd7e:	250e      	movs	r5, #14
 800bd80:	af04      	add	r7, sp, #16
 800bd82:	446d      	add	r5, sp
 800bd84:	002a      	movs	r2, r5
 800bd86:	ab06      	add	r3, sp, #24
 800bd88:	a905      	add	r1, sp, #20
 800bd8a:	0020      	movs	r0, r4
 800bd8c:	9700      	str	r7, [sp, #0]
 800bd8e:	f7ff fec1 	bl	800bb14 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800bd92:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd94:	2500      	movs	r5, #0
	GPIO_InitStruct.Pin = TX_Pin;
 800bd96:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd98:	2301      	movs	r3, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bd9a:	9805      	ldr	r0, [sp, #20]
 800bd9c:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bd9e:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bda0:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800bda2:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800bda4:	f005 f8bc 	bl	8010f20 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800bda8:	883b      	ldrh	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bdaa:	9806      	ldr	r0, [sp, #24]
	GPIO_InitStruct.Pin = RX_Pin;
 800bdac:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bdae:	2302      	movs	r3, #2
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bdb0:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bdb2:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800bdb4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800bdb6:	f005 f8b3 	bl	8010f20 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800bdba:	4b25      	ldr	r3, [pc, #148]	; (800be50 <AddPortButton+0xe8>)
 800bdbc:	00e2      	lsls	r2, r4, #3
 800bdbe:	1912      	adds	r2, r2, r4
 800bdc0:	189b      	adds	r3, r3, r2

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bdc2:	0025      	movs	r5, r4
	button[port].type = buttonType;
 800bdc4:	705e      	strb	r6, [r3, #1]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bdc6:	2312      	movs	r3, #18
 800bdc8:	353a      	adds	r5, #58	; 0x3a
 800bdca:	00ad      	lsls	r5, r5, #2
 800bdcc:	446b      	add	r3, sp
 800bdce:	0019      	movs	r1, r3
 800bdd0:	0028      	movs	r0, r5
 800bdd2:	f7ff fbc3 	bl	800b55c <EE_ReadVariable>
	if (!res)											// This variable exists
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d109      	bne.n	800bdee <AddPortButton+0x86>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800bdda:	466b      	mov	r3, sp
 800bddc:	8a5b      	ldrh	r3, [r3, #18]
 800bdde:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800bde0:	0b1b      	lsrs	r3, r3, #12
 800bde2:	42a3      	cmp	r3, r4
 800bde4:	d103      	bne.n	800bdee <AddPortButton+0x86>
 800bde6:	230f      	movs	r3, #15
 800bde8:	4013      	ands	r3, r2
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	d014      	beq.n	800be18 <AddPortButton+0xb0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
		}
	} else							// Variable does not exist. Create a new one
	{
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bdee:	466b      	mov	r3, sp
 800bdf0:	0321      	lsls	r1, r4, #12
 800bdf2:	0236      	lsls	r6, r6, #8
 800bdf4:	4331      	orrs	r1, r6
 800bdf6:	b289      	uxth	r1, r1
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bdf8:	0028      	movs	r0, r5
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800bdfa:	8259      	strh	r1, [r3, #18]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800bdfc:	f7ff fbda 	bl	800b5b4 <EE_WriteVariable>
		/* Reset times */
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800be00:	2100      	movs	r1, #0
 800be02:	1c68      	adds	r0, r5, #1
 800be04:	f7ff fbd6 	bl	800b5b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800be08:	2100      	movs	r1, #0
 800be0a:	1ca8      	adds	r0, r5, #2
 800be0c:	f7ff fbd2 	bl	800b5b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800be10:	2100      	movs	r1, #0
 800be12:	1ce8      	adds	r0, r5, #3
 800be14:	f7ff fbce 	bl	800b5b4 <EE_WriteVariable>
	}

	return result;
}
 800be18:	2000      	movs	r0, #0
 800be1a:	b00d      	add	sp, #52	; 0x34
 800be1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <AddPortButton+0xec>)
 800be20:	008f      	lsls	r7, r1, #2
 800be22:	58f8      	ldr	r0, [r7, r3]
 800be24:	f001 fe40 	bl	800daa8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800be28:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <AddPortButton+0xf0>)
 800be2a:	58f8      	ldr	r0, [r7, r3]
 800be2c:	f001 fe3c 	bl	800daa8 <osSemaphoreRelease>
	portStatus[port] = PORTBUTTON;
 800be30:	2104      	movs	r1, #4
 800be32:	4a06      	ldr	r2, [pc, #24]	; (800be4c <AddPortButton+0xe4>)
	if (BOS_initialized) {
 800be34:	782b      	ldrb	r3, [r5, #0]
	portStatus[port] = PORTBUTTON;
 800be36:	5511      	strb	r1, [r2, r4]
	if (BOS_initialized) {
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0a0      	beq.n	800bd7e <AddPortButton+0x16>
		HAL_UART_DeInit(GetUart(port));
 800be3c:	0020      	movs	r0, r4
 800be3e:	f001 fc75 	bl	800d72c <GetUart>
 800be42:	f006 f9e9 	bl	8012218 <HAL_UART_DeInit>
 800be46:	e79a      	b.n	800bd7e <AddPortButton+0x16>
 800be48:	20000b71 	.word	0x20000b71
 800be4c:	20000c64 	.word	0x20000c64
 800be50:	2000283c 	.word	0x2000283c
 800be54:	20001eec 	.word	0x20001eec
 800be58:	20001f08 	.word	0x20001f08

0800be5c <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800be60:	2300      	movs	r3, #0
 800be62:	4839      	ldr	r0, [pc, #228]	; (800bf48 <RemovePortButton+0xec>)
 800be64:	00e9      	lsls	r1, r5, #3
 800be66:	1949      	adds	r1, r1, r5
	button[port].releasedY1Sec = 0;
	button[port].releasedY2Sec = 0;
	button[port].releasedY3Sec = 0;

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800be68:	002c      	movs	r4, r5
	button[port].type = NONE;
 800be6a:	1842      	adds	r2, r0, r1
BOS_Status RemovePortButton(uint8_t port) {
 800be6c:	b082      	sub	sp, #8
	button[port].state = NONE;
 800be6e:	540b      	strb	r3, [r1, r0]
	button[port].type = NONE;
 800be70:	7053      	strb	r3, [r2, #1]
	button[port].events = 0;
 800be72:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800be74:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800be76:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800be78:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800be7a:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800be7c:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800be7e:	71d3      	strb	r3, [r2, #7]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800be80:	466b      	mov	r3, sp
 800be82:	343a      	adds	r4, #58	; 0x3a
 800be84:	00a4      	lsls	r4, r4, #2
 800be86:	0020      	movs	r0, r4
 800be88:	1d99      	adds	r1, r3, #6
 800be8a:	f7ff fb67 	bl	800b55c <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800be8e:	2800      	cmp	r0, #0
 800be90:	d02d      	beq.n	800beee <RemovePortButton+0x92>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800be92:	0028      	movs	r0, r5
 800be94:	f001 fc4a 	bl	800d72c <GetUart>

	if (huart->Instance == USART1) {
 800be98:	4a2c      	ldr	r2, [pc, #176]	; (800bf4c <RemovePortButton+0xf0>)
 800be9a:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800be9c:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d03d      	beq.n	800bf1e <RemovePortButton+0xc2>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800bea2:	4a2b      	ldr	r2, [pc, #172]	; (800bf50 <RemovePortButton+0xf4>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d03e      	beq.n	800bf26 <RemovePortButton+0xca>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800bea8:	4a2a      	ldr	r2, [pc, #168]	; (800bf54 <RemovePortButton+0xf8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d03f      	beq.n	800bf2e <RemovePortButton+0xd2>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800beae:	4a2a      	ldr	r2, [pc, #168]	; (800bf58 <RemovePortButton+0xfc>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d010      	beq.n	800bed6 <RemovePortButton+0x7a>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800beb4:	4a29      	ldr	r2, [pc, #164]	; (800bf5c <RemovePortButton+0x100>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d03d      	beq.n	800bf36 <RemovePortButton+0xda>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800beba:	4a29      	ldr	r2, [pc, #164]	; (800bf60 <RemovePortButton+0x104>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d03e      	beq.n	800bf3e <RemovePortButton+0xe2>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800bec0:	4a28      	ldr	r2, [pc, #160]	; (800bf64 <RemovePortButton+0x108>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d007      	beq.n	800bed6 <RemovePortButton+0x7a>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800bec6:	4a28      	ldr	r2, [pc, #160]	; (800bf68 <RemovePortButton+0x10c>)
 800bec8:	4694      	mov	ip, r2
 800beca:	4463      	add	r3, ip
 800becc:	1e5a      	subs	r2, r3, #1
 800bece:	4193      	sbcs	r3, r2
 800bed0:	425c      	negs	r4, r3
 800bed2:	b2e4      	uxtb	r4, r4
 800bed4:	e000      	b.n	800bed8 <RemovePortButton+0x7c>
	BOS_Status result = BOS_OK;
 800bed6:	2400      	movs	r4, #0
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800bed8:	2200      	movs	r2, #0
 800beda:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <RemovePortButton+0x110>)
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800bedc:	0030      	movs	r0, r6
	portStatus[port] = FREE;
 800bede:	555a      	strb	r2, [r3, r5]
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800bee0:	4923      	ldr	r1, [pc, #140]	; (800bf70 <RemovePortButton+0x114>)
 800bee2:	3201      	adds	r2, #1
 800bee4:	f006 f9e6 	bl	80122b4 <HAL_UART_Receive_IT>

	return result;
}
 800bee8:	0020      	movs	r0, r4
 800beea:	b002      	add	sp, #8
 800beec:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800beee:	2100      	movs	r1, #0
 800bef0:	0020      	movs	r0, r4
 800bef2:	f7ff fb5f 	bl	800b5b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800bef6:	2100      	movs	r1, #0
 800bef8:	1c60      	adds	r0, r4, #1
 800befa:	f7ff fb5b 	bl	800b5b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800befe:	2100      	movs	r1, #0
 800bf00:	1ca0      	adds	r0, r4, #2
 800bf02:	f7ff fb57 	bl	800b5b4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800bf06:	2100      	movs	r1, #0
 800bf08:	1ce0      	adds	r0, r4, #3
 800bf0a:	f7ff fb53 	bl	800b5b4 <EE_WriteVariable>
	UART_HandleTypeDef *huart = GetUart(port);
 800bf0e:	0028      	movs	r0, r5
 800bf10:	f001 fc0c 	bl	800d72c <GetUart>
	if (huart->Instance == USART1) {
 800bf14:	4a0d      	ldr	r2, [pc, #52]	; (800bf4c <RemovePortButton+0xf0>)
 800bf16:	6803      	ldr	r3, [r0, #0]
	UART_HandleTypeDef *huart = GetUart(port);
 800bf18:	0006      	movs	r6, r0
	if (huart->Instance == USART1) {
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d1c1      	bne.n	800bea2 <RemovePortButton+0x46>
		MX_USART1_UART_Init();
 800bf1e:	f001 fa33 	bl	800d388 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800bf22:	2400      	movs	r4, #0
 800bf24:	e7d8      	b.n	800bed8 <RemovePortButton+0x7c>
		MX_USART2_UART_Init();
 800bf26:	f001 fa47 	bl	800d3b8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800bf2a:	2400      	movs	r4, #0
 800bf2c:	e7d4      	b.n	800bed8 <RemovePortButton+0x7c>
		MX_USART3_UART_Init();
 800bf2e:	f001 fa5b 	bl	800d3e8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800bf32:	2400      	movs	r4, #0
 800bf34:	e7d0      	b.n	800bed8 <RemovePortButton+0x7c>
		MX_USART5_UART_Init();
 800bf36:	f001 fa6f 	bl	800d418 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	e7cc      	b.n	800bed8 <RemovePortButton+0x7c>
		MX_USART6_UART_Init();
 800bf3e:	f001 fa83 	bl	800d448 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800bf42:	2400      	movs	r4, #0
 800bf44:	e7c8      	b.n	800bed8 <RemovePortButton+0x7c>
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	2000283c 	.word	0x2000283c
 800bf4c:	40013800 	.word	0x40013800
 800bf50:	40004400 	.word	0x40004400
 800bf54:	40004800 	.word	0x40004800
 800bf58:	40004c00 	.word	0x40004c00
 800bf5c:	40005000 	.word	0x40005000
 800bf60:	40011400 	.word	0x40011400
 800bf64:	40011800 	.word	0x40011800
 800bf68:	bffee400 	.word	0xbffee400
 800bf6c:	20000c64 	.word	0x20000c64
 800bf70:	20000cfd 	.word	0x20000cfd

0800bf74 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf76:	4657      	mov	r7, sl
 800bf78:	4645      	mov	r5, r8
 800bf7a:	46de      	mov	lr, fp
 800bf7c:	464e      	mov	r6, r9
 800bf7e:	b5e0      	push	{r5, r6, r7, lr}
 800bf80:	b087      	sub	sp, #28
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	ab10      	add	r3, sp, #64	; 0x40
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	0004      	movs	r4, r0
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	ab11      	add	r3, sp, #68	; 0x44
 800bf8e:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800bf90:	00e7      	lsls	r7, r4, #3
		uint8_t mode) {
 800bf92:	9303      	str	r3, [sp, #12]
 800bf94:	ab12      	add	r3, sp, #72	; 0x48
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	4699      	mov	r9, r3
 800bf9a:	ab13      	add	r3, sp, #76	; 0x4c
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	469a      	mov	sl, r3
 800bfa0:	ab14      	add	r3, sp, #80	; 0x50
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	469b      	mov	fp, r3
 800bfa6:	ab15      	add	r3, sp, #84	; 0x54
 800bfa8:	7818      	ldrb	r0, [r3, #0]
	if (button[port].type == NONE)
 800bfaa:	4b64      	ldr	r3, [pc, #400]	; (800c13c <SetButtonEvents+0x1c8>)
 800bfac:	4698      	mov	r8, r3
 800bfae:	193b      	adds	r3, r7, r4
 800bfb0:	4443      	add	r3, r8
 800bfb2:	785d      	ldrb	r5, [r3, #1]
 800bfb4:	2d00      	cmp	r5, #0
 800bfb6:	d100      	bne.n	800bfba <SetButtonEvents+0x46>
 800bfb8:	e092      	b.n	800c0e0 <SetButtonEvents+0x16c>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800bfba:	9d01      	ldr	r5, [sp, #4]
 800bfbc:	709d      	strb	r5, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800bfbe:	9d02      	ldr	r5, [sp, #8]
 800bfc0:	70dd      	strb	r5, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800bfc2:	9d03      	ldr	r5, [sp, #12]
 800bfc4:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800bfc6:	464d      	mov	r5, r9
 800bfc8:	715d      	strb	r5, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800bfca:	4655      	mov	r5, sl
 800bfcc:	719d      	strb	r5, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800bfce:	465d      	mov	r5, fp
 800bfd0:	71dd      	strb	r5, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800bfd2:	2801      	cmp	r0, #1
 800bfd4:	d100      	bne.n	800bfd8 <SetButtonEvents+0x64>
 800bfd6:	e085      	b.n	800c0e4 <SetButtonEvents+0x170>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d056      	beq.n	800c08a <SetButtonEvents+0x116>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800bfdc:	0025      	movs	r5, r4
 800bfde:	ab04      	add	r3, sp, #16
 800bfe0:	353a      	adds	r5, #58	; 0x3a
 800bfe2:	00ad      	lsls	r5, r5, #2
 800bfe4:	1d9e      	adds	r6, r3, #6
 800bfe6:	0031      	movs	r1, r6
 800bfe8:	0028      	movs	r0, r5
 800bfea:	f7ff fab7 	bl	800b55c <EE_ReadVariable>
	if (!res)											// This variable exists
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d000      	beq.n	800bff4 <SetButtonEvents+0x80>
 800bff2:	e075      	b.n	800c0e0 <SetButtonEvents+0x16c>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bff4:	193f      	adds	r7, r7, r4
 800bff6:	4447      	add	r7, r8
 800bff8:	7a3a      	ldrb	r2, [r7, #8]
 800bffa:	7831      	ldrb	r1, [r6, #0]
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800bffc:	8833      	ldrh	r3, [r6, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800bffe:	4291      	cmp	r1, r2
 800c000:	d13b      	bne.n	800c07a <SetButtonEvents+0x106>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c002:	1c6c      	adds	r4, r5, #1
 800c004:	0031      	movs	r1, r6
 800c006:	0020      	movs	r0, r4
 800c008:	f7ff faa8 	bl	800b55c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c00c:	464a      	mov	r2, r9
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	0219      	lsls	r1, r3, #8
 800c012:	8833      	ldrh	r3, [r6, #0]
 800c014:	430a      	orrs	r2, r1
		if (temp16
 800c016:	4293      	cmp	r3, r2
 800c018:	d12a      	bne.n	800c070 <SetButtonEvents+0xfc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c01a:	1cac      	adds	r4, r5, #2
 800c01c:	0031      	movs	r1, r6
 800c01e:	0020      	movs	r0, r4
 800c020:	f7ff fa9c 	bl	800b55c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c024:	4652      	mov	r2, sl
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	0219      	lsls	r1, r3, #8
 800c02a:	8833      	ldrh	r3, [r6, #0]
 800c02c:	430a      	orrs	r2, r1
		if (temp16
 800c02e:	4293      	cmp	r3, r2
 800c030:	d119      	bne.n	800c066 <SetButtonEvents+0xf2>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c032:	3503      	adds	r5, #3
 800c034:	0031      	movs	r1, r6
 800c036:	0028      	movs	r0, r5
 800c038:	f7ff fa90 	bl	800b55c <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c03c:	465a      	mov	r2, fp
 800c03e:	9b03      	ldr	r3, [sp, #12]
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800c040:	2400      	movs	r4, #0
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c042:	0219      	lsls	r1, r3, #8
 800c044:	8833      	ldrh	r3, [r6, #0]
 800c046:	430a      	orrs	r2, r1
		if (temp16
 800c048:	4293      	cmp	r3, r2
 800c04a:	d107      	bne.n	800c05c <SetButtonEvents+0xe8>
}
 800c04c:	0020      	movs	r0, r4
 800c04e:	b007      	add	sp, #28
 800c050:	bcf0      	pop	{r4, r5, r6, r7}
 800c052:	46bb      	mov	fp, r7
 800c054:	46b2      	mov	sl, r6
 800c056:	46a9      	mov	r9, r5
 800c058:	46a0      	mov	r8, r4
 800c05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c05c:	0028      	movs	r0, r5
 800c05e:	b291      	uxth	r1, r2
 800c060:	f7ff faa8 	bl	800b5b4 <EE_WriteVariable>
 800c064:	e7f2      	b.n	800c04c <SetButtonEvents+0xd8>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c066:	0020      	movs	r0, r4
 800c068:	b291      	uxth	r1, r2
 800c06a:	f7ff faa3 	bl	800b5b4 <EE_WriteVariable>
 800c06e:	e7e0      	b.n	800c032 <SetButtonEvents+0xbe>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c070:	0020      	movs	r0, r4
 800c072:	b291      	uxth	r1, r2
 800c074:	f7ff fa9e 	bl	800b5b4 <EE_WriteVariable>
 800c078:	e7cf      	b.n	800c01a <SetButtonEvents+0xa6>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	0219      	lsls	r1, r3, #8
 800c07e:	4311      	orrs	r1, r2
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c080:	0028      	movs	r0, r5
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c082:	8031      	strh	r1, [r6, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c084:	f7ff fa96 	bl	800b5b4 <EE_WriteVariable>
 800c088:	e7bb      	b.n	800c002 <SetButtonEvents+0x8e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c08a:	2900      	cmp	r1, #0
 800c08c:	d134      	bne.n	800c0f8 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c08e:	2101      	movs	r1, #1
 800c090:	7a1b      	ldrb	r3, [r3, #8]
 800c092:	438b      	bics	r3, r1
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c094:	2a00      	cmp	r2, #0
 800c096:	d034      	beq.n	800c102 <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c098:	2202      	movs	r2, #2
 800c09a:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c09c:	9a01      	ldr	r2, [sp, #4]
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	d034      	beq.n	800c10c <SetButtonEvents+0x198>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c0a2:	2204      	movs	r2, #4
 800c0a4:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c0a6:	9a02      	ldr	r2, [sp, #8]
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d034      	beq.n	800c116 <SetButtonEvents+0x1a2>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c0b0:	9a03      	ldr	r2, [sp, #12]
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	d034      	beq.n	800c120 <SetButtonEvents+0x1ac>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c0b6:	2210      	movs	r2, #16
 800c0b8:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c0ba:	464a      	mov	r2, r9
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d034      	beq.n	800c12a <SetButtonEvents+0x1b6>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c0c4:	4652      	mov	r2, sl
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	d034      	beq.n	800c134 <SetButtonEvents+0x1c0>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c0ca:	2240      	movs	r2, #64	; 0x40
 800c0cc:	4313      	orrs	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c0ce:	465a      	mov	r2, fp
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d10a      	bne.n	800c0ea <SetButtonEvents+0x176>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c0d4:	217f      	movs	r1, #127	; 0x7f
 800c0d6:	193a      	adds	r2, r7, r4
 800c0d8:	4442      	add	r2, r8
 800c0da:	400b      	ands	r3, r1
 800c0dc:	7213      	strb	r3, [r2, #8]
 800c0de:	e77d      	b.n	800bfdc <SetButtonEvents+0x68>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c0e0:	240b      	movs	r4, #11
 800c0e2:	e7b3      	b.n	800c04c <SetButtonEvents+0xd8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c0e4:	7a1a      	ldrb	r2, [r3, #8]
 800c0e6:	237f      	movs	r3, #127	; 0x7f
 800c0e8:	4313      	orrs	r3, r2
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c0ea:	2180      	movs	r1, #128	; 0x80
 800c0ec:	193a      	adds	r2, r7, r4
 800c0ee:	4249      	negs	r1, r1
 800c0f0:	4442      	add	r2, r8
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	7213      	strb	r3, [r2, #8]
 800c0f6:	e771      	b.n	800bfdc <SetButtonEvents+0x68>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c0f8:	2101      	movs	r1, #1
 800c0fa:	7a1b      	ldrb	r3, [r3, #8]
 800c0fc:	430b      	orrs	r3, r1
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d1ca      	bne.n	800c098 <SetButtonEvents+0x124>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c102:	2202      	movs	r2, #2
 800c104:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c106:	9a01      	ldr	r2, [sp, #4]
 800c108:	2a00      	cmp	r2, #0
 800c10a:	d1ca      	bne.n	800c0a2 <SetButtonEvents+0x12e>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c10c:	2204      	movs	r2, #4
 800c10e:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c110:	9a02      	ldr	r2, [sp, #8]
 800c112:	2a00      	cmp	r2, #0
 800c114:	d1ca      	bne.n	800c0ac <SetButtonEvents+0x138>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c116:	2208      	movs	r2, #8
 800c118:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c11a:	9a03      	ldr	r2, [sp, #12]
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	d1ca      	bne.n	800c0b6 <SetButtonEvents+0x142>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c120:	2210      	movs	r2, #16
 800c122:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c124:	464a      	mov	r2, r9
 800c126:	2a00      	cmp	r2, #0
 800c128:	d1ca      	bne.n	800c0c0 <SetButtonEvents+0x14c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c12a:	2220      	movs	r2, #32
 800c12c:	4393      	bics	r3, r2
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c12e:	4652      	mov	r2, sl
 800c130:	2a00      	cmp	r2, #0
 800c132:	d1ca      	bne.n	800c0ca <SetButtonEvents+0x156>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c134:	2240      	movs	r2, #64	; 0x40
 800c136:	4393      	bics	r3, r2
 800c138:	e7c9      	b.n	800c0ce <SetButtonEvents+0x15a>
 800c13a:	46c0      	nop			; (mov r8, r8)
 800c13c:	2000283c 	.word	0x2000283c

0800c140 <MX_ADC_Init>:
 * to read multiple ADC channel in Port 2 and port 3 and for calculate
 * internal temperature and internal voltage reference which is equal in stm32f0 to around 1.2v.
 *
 */
void MX_ADC_Init(void) {
	hadc.Instance = ADC1;
 800c140:	4816      	ldr	r0, [pc, #88]	; (800c19c <MX_ADC_Init+0x5c>)
 800c142:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <MX_ADC_Init+0x60>)
void MX_ADC_Init(void) {
 800c144:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c146:	6683      	str	r3, [r0, #104]	; 0x68
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c148:	2380      	movs	r3, #128	; 0x80
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c14a:	2104      	movs	r1, #4
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c14c:	061b      	lsls	r3, r3, #24
 800c14e:	66c3      	str	r3, [r0, #108]	; 0x6c
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c150:	2300      	movs	r3, #0
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c152:	2201      	movs	r2, #1
	hadc.Init.LowPowerAutoWait = DISABLE;
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
	hadc.Init.ContinuousConvMode = ENABLE;
	hadc.Init.DiscontinuousConvMode = DISABLE;
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c154:	24c2      	movs	r4, #194	; 0xc2
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c156:	67c1      	str	r1, [r0, #124]	; 0x7c
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c158:	317c      	adds	r1, #124	; 0x7c
 800c15a:	5043      	str	r3, [r0, r1]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c15c:	3104      	adds	r1, #4
 800c15e:	5043      	str	r3, [r0, r1]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c160:	3104      	adds	r1, #4
 800c162:	5042      	str	r2, [r0, r1]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c164:	3104      	adds	r1, #4
 800c166:	5043      	str	r3, [r0, r1]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c168:	34ff      	adds	r4, #255	; 0xff
 800c16a:	3104      	adds	r1, #4
 800c16c:	5044      	str	r4, [r0, r1]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c16e:	3104      	adds	r1, #4
 800c170:	5043      	str	r3, [r0, r1]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c172:	3104      	adds	r1, #4
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c174:	6703      	str	r3, [r0, #112]	; 0x70
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c176:	6743      	str	r3, [r0, #116]	; 0x74
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c178:	5043      	str	r3, [r0, r1]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c17a:	339c      	adds	r3, #156	; 0x9c
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c17c:	6782      	str	r2, [r0, #120]	; 0x78
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c17e:	50c2      	str	r2, [r0, r3]

	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c180:	3068      	adds	r0, #104	; 0x68
 800c182:	f003 fbf7 	bl	800f974 <HAL_ADC_Init>
 800c186:	2800      	cmp	r0, #0
 800c188:	d104      	bne.n	800c194 <MX_ADC_Init+0x54>
		Error_Handler();
	}
	ADC_flag = 1;
 800c18a:	2334      	movs	r3, #52	; 0x34
 800c18c:	2101      	movs	r1, #1
 800c18e:	4a05      	ldr	r2, [pc, #20]	; (800c1a4 <MX_ADC_Init+0x64>)
 800c190:	54d1      	strb	r1, [r2, r3]
}
 800c192:	bd10      	pop	{r4, pc}
		return ADC_CHANNEL_5;
}

void Error_Handler(void) {

	HAL_Delay(100);
 800c194:	2064      	movs	r0, #100	; 0x64
 800c196:	f003 fb13 	bl	800f7c0 <HAL_Delay>

}
 800c19a:	e7f6      	b.n	800c18a <MX_ADC_Init+0x4a>
 800c19c:	2000283c 	.word	0x2000283c
 800c1a0:	40012400 	.word	0x40012400
 800c1a4:	200028bc 	.word	0x200028bc

0800c1a8 <HAL_ADC_MspInit>:
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c1a8:	b500      	push	{lr}
 800c1aa:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c1ac:	2214      	movs	r2, #20
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	a803      	add	r0, sp, #12
 800c1b2:	f006 fff4 	bl	801319e <memset>
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c1b6:	2080      	movs	r0, #128	; 0x80
 800c1b8:	4b11      	ldr	r3, [pc, #68]	; (800c200 <HAL_ADC_MspInit+0x58>)
 800c1ba:	0080      	lsls	r0, r0, #2
 800c1bc:	6999      	ldr	r1, [r3, #24]
 800c1be:	4301      	orrs	r1, r0
 800c1c0:	6199      	str	r1, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c1c2:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c1c4:	699a      	ldr	r2, [r3, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c1c6:	0289      	lsls	r1, r1, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c1c8:	4002      	ands	r2, r0
 800c1ca:	9201      	str	r2, [sp, #4]
 800c1cc:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c1ce:	695a      	ldr	r2, [r3, #20]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	615a      	str	r2, [r3, #20]
 800c1d4:	695b      	ldr	r3, [r3, #20]
		if(flag_ADC_Select==1){
 800c1d6:	4a0b      	ldr	r2, [pc, #44]	; (800c204 <HAL_ADC_MspInit+0x5c>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c1d8:	400b      	ands	r3, r1
 800c1da:	9302      	str	r3, [sp, #8]
 800c1dc:	9b02      	ldr	r3, [sp, #8]
		if(flag_ADC_Select==1){
 800c1de:	2335      	movs	r3, #53	; 0x35
 800c1e0:	5cd3      	ldrb	r3, [r2, r3]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d001      	beq.n	800c1ea <HAL_ADC_MspInit+0x42>
}
 800c1e6:	b009      	add	sp, #36	; 0x24
 800c1e8:	bd00      	pop	{pc}
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c1ea:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c1ec:	333b      	adds	r3, #59	; 0x3b
 800c1ee:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c1f0:	a903      	add	r1, sp, #12
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c1f2:	3b39      	subs	r3, #57	; 0x39
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c1f4:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c1f6:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c1f8:	f004 fe92 	bl	8010f20 <HAL_GPIO_Init>
}
 800c1fc:	e7f3      	b.n	800c1e6 <HAL_ADC_MspInit+0x3e>
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	40021000 	.word	0x40021000
 800c204:	200028bc 	.word	0x200028bc

0800c208 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	4647      	mov	r7, r8
 800c20c:	46ce      	mov	lr, r9
	if (0 == ADC_flag)
 800c20e:	2334      	movs	r3, #52	; 0x34
void ReadTempAndVref(float *temp, float *Vref) {
 800c210:	b580      	push	{r7, lr}
	if (0 == ADC_flag)
 800c212:	4c57      	ldr	r4, [pc, #348]	; (800c370 <ReadTempAndVref+0x168>)
void ReadTempAndVref(float *temp, float *Vref) {
 800c214:	0007      	movs	r7, r0
	if (0 == ADC_flag)
 800c216:	5ce3      	ldrb	r3, [r4, r3]
void ReadTempAndVref(float *temp, float *Vref) {
 800c218:	4688      	mov	r8, r1
	if (0 == ADC_flag)
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d100      	bne.n	800c220 <ReadTempAndVref+0x18>
 800c21e:	e093      	b.n	800c348 <ReadTempAndVref+0x140>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c220:	2310      	movs	r3, #16
 800c222:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c224:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c226:	4d53      	ldr	r5, [pc, #332]	; (800c374 <ReadTempAndVref+0x16c>)
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c228:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c22a:	0021      	movs	r1, r4
 800c22c:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c22e:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c230:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c232:	3138      	adds	r1, #56	; 0x38
 800c234:	3068      	adds	r0, #104	; 0x68
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c236:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c238:	f003 fd62 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d000      	beq.n	800c242 <ReadTempAndVref+0x3a>
 800c240:	e091      	b.n	800c366 <ReadTempAndVref+0x15e>
	HAL_ADC_Start(&hadc);
 800c242:	002e      	movs	r6, r5
 800c244:	3668      	adds	r6, #104	; 0x68
 800c246:	0030      	movs	r0, r6
 800c248:	f003 fc34 	bl	800fab4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c24c:	2164      	movs	r1, #100	; 0x64
 800c24e:	0030      	movs	r0, r6
 800c250:	f003 fc7c 	bl	800fb4c <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c254:	0030      	movs	r0, r6
 800c256:	f003 fcd7 	bl	800fc08 <HAL_ADC_GetValue>
 800c25a:	2344      	movs	r3, #68	; 0x44
 800c25c:	52e0      	strh	r0, [r4, r3]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c25e:	0400      	lsls	r0, r0, #16
 800c260:	0c00      	lsrs	r0, r0, #16
 800c262:	f7f6 fc7b 	bl	8002b5c <__aeabi_i2d>
 800c266:	4a44      	ldr	r2, [pc, #272]	; (800c378 <ReadTempAndVref+0x170>)
 800c268:	4b44      	ldr	r3, [pc, #272]	; (800c37c <ReadTempAndVref+0x174>)
 800c26a:	f7f5 fe25 	bl	8001eb8 <__aeabi_dmul>
 800c26e:	2200      	movs	r2, #0
 800c270:	4b43      	ldr	r3, [pc, #268]	; (800c380 <ReadTempAndVref+0x178>)
 800c272:	f7f5 fa1f 	bl	80016b4 <__aeabi_ddiv>
 800c276:	4a43      	ldr	r2, [pc, #268]	; (800c384 <ReadTempAndVref+0x17c>)
 800c278:	4b43      	ldr	r3, [pc, #268]	; (800c388 <ReadTempAndVref+0x180>)
 800c27a:	f7f6 f889 	bl	8002390 <__aeabi_dsub>
 800c27e:	4a43      	ldr	r2, [pc, #268]	; (800c38c <ReadTempAndVref+0x184>)
 800c280:	4b43      	ldr	r3, [pc, #268]	; (800c390 <ReadTempAndVref+0x188>)
 800c282:	f7f5 fa17 	bl	80016b4 <__aeabi_ddiv>
 800c286:	4b43      	ldr	r3, [pc, #268]	; (800c394 <ReadTempAndVref+0x18c>)
 800c288:	2200      	movs	r2, #0
 800c28a:	f7f4 fed7 	bl	800103c <__aeabi_dadd>
 800c28e:	f7f6 fd03 	bl	8002c98 <__aeabi_d2f>
 800c292:	6038      	str	r0, [r7, #0]
	HAL_ADC_Stop(&hadc);
 800c294:	0030      	movs	r0, r6
 800c296:	f003 fc39 	bl	800fb0c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c29a:	2310      	movs	r3, #16
 800c29c:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_NONE;
 800c29e:	4b3e      	ldr	r3, [pc, #248]	; (800c398 <ReadTempAndVref+0x190>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2a0:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c2a2:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c2a4:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2a6:	0030      	movs	r0, r6
 800c2a8:	3138      	adds	r1, #56	; 0x38
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c2aa:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2ac:	f003 fd28 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d154      	bne.n	800c35e <ReadTempAndVref+0x156>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c2b4:	2311      	movs	r3, #17
 800c2b6:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2b8:	2380      	movs	r3, #128	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2ba:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2bc:	015b      	lsls	r3, r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2be:	0028      	movs	r0, r5
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c2c0:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c2c2:	2305      	movs	r3, #5
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2c4:	3138      	adds	r1, #56	; 0x38
 800c2c6:	3068      	adds	r0, #104	; 0x68
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800c2c8:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c2ca:	f003 fd19 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d141      	bne.n	800c356 <ReadTempAndVref+0x14e>
	HAL_ADC_Start(&hadc);
 800c2d2:	3568      	adds	r5, #104	; 0x68
 800c2d4:	0028      	movs	r0, r5
 800c2d6:	f003 fbed 	bl	800fab4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c2da:	2164      	movs	r1, #100	; 0x64
 800c2dc:	0028      	movs	r0, r5
 800c2de:	f003 fc35 	bl	800fb4c <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800c2e2:	0028      	movs	r0, r5
 800c2e4:	f003 fc90 	bl	800fc08 <HAL_ADC_GetValue>
 800c2e8:	2346      	movs	r3, #70	; 0x46
 800c2ea:	4681      	mov	r9, r0
 800c2ec:	52e0      	strh	r0, [r4, r3]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800c2ee:	4b2b      	ldr	r3, [pc, #172]	; (800c39c <ReadTempAndVref+0x194>)
 800c2f0:	8818      	ldrh	r0, [r3, #0]
 800c2f2:	f7f6 fc33 	bl	8002b5c <__aeabi_i2d>
 800c2f6:	4a20      	ldr	r2, [pc, #128]	; (800c378 <ReadTempAndVref+0x170>)
 800c2f8:	4b20      	ldr	r3, [pc, #128]	; (800c37c <ReadTempAndVref+0x174>)
 800c2fa:	f7f5 fddd 	bl	8001eb8 <__aeabi_dmul>
 800c2fe:	464b      	mov	r3, r9
 800c300:	0006      	movs	r6, r0
 800c302:	0418      	lsls	r0, r3, #16
 800c304:	0c00      	lsrs	r0, r0, #16
 800c306:	000f      	movs	r7, r1
 800c308:	f7f6 fc28 	bl	8002b5c <__aeabi_i2d>
 800c30c:	0002      	movs	r2, r0
 800c30e:	000b      	movs	r3, r1
 800c310:	0030      	movs	r0, r6
 800c312:	0039      	movs	r1, r7
 800c314:	f7f5 f9ce 	bl	80016b4 <__aeabi_ddiv>
 800c318:	f7f6 fcbe 	bl	8002c98 <__aeabi_d2f>
 800c31c:	4643      	mov	r3, r8
 800c31e:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800c320:	0028      	movs	r0, r5
 800c322:	f003 fbf3 	bl	800fb0c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c326:	2311      	movs	r3, #17
 800c328:	63a3      	str	r3, [r4, #56]	; 0x38
	sConfig.Rank = ADC_RANK_NONE;
 800c32a:	4b1b      	ldr	r3, [pc, #108]	; (800c398 <ReadTempAndVref+0x190>)
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c32c:	0021      	movs	r1, r4
	sConfig.Rank = ADC_RANK_NONE;
 800c32e:	63e3      	str	r3, [r4, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c330:	2301      	movs	r3, #1
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c332:	0028      	movs	r0, r5
 800c334:	3138      	adds	r1, #56	; 0x38
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c336:	6423      	str	r3, [r4, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c338:	f003 fce2 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d106      	bne.n	800c34e <ReadTempAndVref+0x146>
}
 800c340:	bcc0      	pop	{r6, r7}
 800c342:	46b9      	mov	r9, r7
 800c344:	46b0      	mov	r8, r6
 800c346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800c348:	f7ff fefa 	bl	800c140 <MX_ADC_Init>
 800c34c:	e768      	b.n	800c220 <ReadTempAndVref+0x18>
	HAL_Delay(100);
 800c34e:	2064      	movs	r0, #100	; 0x64
 800c350:	f003 fa36 	bl	800f7c0 <HAL_Delay>
}
 800c354:	e7f4      	b.n	800c340 <ReadTempAndVref+0x138>
	HAL_Delay(100);
 800c356:	2064      	movs	r0, #100	; 0x64
 800c358:	f003 fa32 	bl	800f7c0 <HAL_Delay>
}
 800c35c:	e7b9      	b.n	800c2d2 <ReadTempAndVref+0xca>
	HAL_Delay(100);
 800c35e:	2064      	movs	r0, #100	; 0x64
 800c360:	f003 fa2e 	bl	800f7c0 <HAL_Delay>
}
 800c364:	e7a6      	b.n	800c2b4 <ReadTempAndVref+0xac>
	HAL_Delay(100);
 800c366:	2064      	movs	r0, #100	; 0x64
 800c368:	f003 fa2a 	bl	800f7c0 <HAL_Delay>
}
 800c36c:	e769      	b.n	800c242 <ReadTempAndVref+0x3a>
 800c36e:	46c0      	nop			; (mov r8, r8)
 800c370:	200028bc 	.word	0x200028bc
 800c374:	2000283c 	.word	0x2000283c
 800c378:	66666666 	.word	0x66666666
 800c37c:	400a6666 	.word	0x400a6666
 800c380:	40affe00 	.word	0x40affe00
 800c384:	28f5c28f 	.word	0x28f5c28f
 800c388:	3ff68f5c 	.word	0x3ff68f5c
 800c38c:	33333333 	.word	0x33333333
 800c390:	40113333 	.word	0x40113333
 800c394:	40390000 	.word	0x40390000
 800c398:	00001001 	.word	0x00001001
 800c39c:	1ffff7ba 	.word	0x1ffff7ba

0800c3a0 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (port == 2 || port == 3) {
 800c3a2:	1e83      	subs	r3, r0, #2
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800c3a4:	0005      	movs	r5, r0
 800c3a6:	000e      	movs	r6, r1
 800c3a8:	2700      	movs	r7, #0
 800c3aa:	b087      	sub	sp, #28
	if (port == 2 || port == 3) {
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d901      	bls.n	800c3b4 <GetReadPrecentage+0x14>
}
 800c3b0:	b007      	add	sp, #28
 800c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (0 == ADC_flag) {
 800c3b4:	2334      	movs	r3, #52	; 0x34
 800c3b6:	4c51      	ldr	r4, [pc, #324]	; (800c4fc <GetReadPrecentage+0x15c>)
 800c3b8:	5ce3      	ldrb	r3, [r4, r3]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d05b      	beq.n	800c476 <GetReadPrecentage+0xd6>
		Channel = Get_channel(GetUart(port), "bottom");
 800c3be:	0028      	movs	r0, r5
 800c3c0:	f001 f9b4 	bl	800d72c <GetUart>
	else if (huart->Instance == USART2 && side == "bottom")
 800c3c4:	4a4e      	ldr	r2, [pc, #312]	; (800c500 <GetReadPrecentage+0x160>)
	if (huart->Instance == USART2 && side == "top")
 800c3c6:	6803      	ldr	r3, [r0, #0]
	else if (huart->Instance == USART2 && side == "bottom")
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d077      	beq.n	800c4bc <GetReadPrecentage+0x11c>
	else if (huart->Instance == USART6 && side == "bottom")
 800c3cc:	4a4d      	ldr	r2, [pc, #308]	; (800c504 <GetReadPrecentage+0x164>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d077      	beq.n	800c4c2 <GetReadPrecentage+0x122>
		sConfig.Channel = Channel;
 800c3d2:	2200      	movs	r2, #0
		Channel = Get_channel(GetUart(port), "bottom");
 800c3d4:	2348      	movs	r3, #72	; 0x48
 800c3d6:	54e7      	strb	r7, [r4, r3]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c3d8:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c3da:	4d4b      	ldr	r5, [pc, #300]	; (800c508 <GetReadPrecentage+0x168>)
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c3dc:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c3de:	0021      	movs	r1, r4
 800c3e0:	0028      	movs	r0, r5
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c3e2:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c3e4:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c3e6:	3138      	adds	r1, #56	; 0x38
 800c3e8:	3068      	adds	r0, #104	; 0x68
		sConfig.Channel = Channel;
 800c3ea:	63a2      	str	r2, [r4, #56]	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c3ec:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c3ee:	f003 fc87 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d13b      	bne.n	800c46e <GetReadPrecentage+0xce>
		HAL_ADC_Start(&hadc);
 800c3f6:	3568      	adds	r5, #104	; 0x68
 800c3f8:	0028      	movs	r0, r5
 800c3fa:	f003 fb5b 	bl	800fab4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c3fe:	2164      	movs	r1, #100	; 0x64
 800c400:	0028      	movs	r0, r5
 800c402:	f003 fba3 	bl	800fb4c <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800c406:	0028      	movs	r0, r5
 800c408:	f003 fbfe 	bl	800fc08 <HAL_ADC_GetValue>
 800c40c:	f7f4 fdd4 	bl	8000fb8 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800c410:	f7f6 fbfa 	bl	8002c08 <__aeabi_f2d>
 800c414:	4a3d      	ldr	r2, [pc, #244]	; (800c50c <GetReadPrecentage+0x16c>)
 800c416:	4b3e      	ldr	r3, [pc, #248]	; (800c510 <GetReadPrecentage+0x170>)
 800c418:	f7f5 fd4e 	bl	8001eb8 <__aeabi_dmul>
 800c41c:	2200      	movs	r2, #0
 800c41e:	4b3d      	ldr	r3, [pc, #244]	; (800c514 <GetReadPrecentage+0x174>)
 800c420:	f7f5 f948 	bl	80016b4 <__aeabi_ddiv>
 800c424:	f7f6 fc38 	bl	8002c98 <__aeabi_d2f>
		current = (100 * percentage) / 3.3;
 800c428:	493b      	ldr	r1, [pc, #236]	; (800c518 <GetReadPrecentage+0x178>)
		percentage = 3.3 * percentage / 4095;
 800c42a:	64e0      	str	r0, [r4, #76]	; 0x4c
		current = (100 * percentage) / 3.3;
 800c42c:	f7f4 fad0 	bl	80009d0 <__aeabi_fmul>
 800c430:	f7f6 fbea 	bl	8002c08 <__aeabi_f2d>
 800c434:	4b36      	ldr	r3, [pc, #216]	; (800c510 <GetReadPrecentage+0x170>)
 800c436:	4a35      	ldr	r2, [pc, #212]	; (800c50c <GetReadPrecentage+0x16c>)
 800c438:	f7f5 f93c 	bl	80016b4 <__aeabi_ddiv>
 800c43c:	f7f6 fc2c 	bl	8002c98 <__aeabi_d2f>
 800c440:	6520      	str	r0, [r4, #80]	; 0x50
		*precentageValue = current;
 800c442:	6030      	str	r0, [r6, #0]
		HAL_ADC_Stop(&hadc);
 800c444:	0028      	movs	r0, r5
 800c446:	f003 fb61 	bl	800fb0c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c44a:	2348      	movs	r3, #72	; 0x48
 800c44c:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c44e:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800c450:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_NONE;
 800c452:	4b32      	ldr	r3, [pc, #200]	; (800c51c <GetReadPrecentage+0x17c>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c454:	0028      	movs	r0, r5
		sConfig.Rank = ADC_RANK_NONE;
 800c456:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c458:	2301      	movs	r3, #1
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c45a:	3138      	adds	r1, #56	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c45c:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c45e:	f003 fc4f 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c462:	2800      	cmp	r0, #0
 800c464:	d0a4      	beq.n	800c3b0 <GetReadPrecentage+0x10>
	HAL_Delay(100);
 800c466:	2064      	movs	r0, #100	; 0x64
 800c468:	f003 f9aa 	bl	800f7c0 <HAL_Delay>
}
 800c46c:	e7a0      	b.n	800c3b0 <GetReadPrecentage+0x10>
	HAL_Delay(100);
 800c46e:	2064      	movs	r0, #100	; 0x64
 800c470:	f003 f9a6 	bl	800f7c0 <HAL_Delay>
}
 800c474:	e7bf      	b.n	800c3f6 <GetReadPrecentage+0x56>
			MX_ADC_Init();
 800c476:	f7ff fe63 	bl	800c140 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800c47a:	0028      	movs	r0, r5
 800c47c:	f001 f956 	bl	800d72c <GetUart>
 800c480:	f005 feca 	bl	8012218 <HAL_UART_DeInit>
			if (port == 3) {
 800c484:	2d03      	cmp	r5, #3
 800c486:	d01f      	beq.n	800c4c8 <GetReadPrecentage+0x128>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800c488:	2090      	movs	r0, #144	; 0x90
 800c48a:	2104      	movs	r1, #4
 800c48c:	05c0      	lsls	r0, r0, #23
 800c48e:	f004 fe5d 	bl	801114c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c492:	2304      	movs	r3, #4
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c494:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c496:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c498:	3b03      	subs	r3, #3
 800c49a:	9302      	str	r3, [sp, #8]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c49c:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c49e:	3302      	adds	r3, #2
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4a0:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4a2:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4a4:	f004 fd3c 	bl	8010f20 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c4a8:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c4aa:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c4ac:	4b1c      	ldr	r3, [pc, #112]	; (800c520 <GetReadPrecentage+0x180>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c4ae:	2104      	movs	r1, #4
				portStatus[port - 1] = CUSTOM;
 800c4b0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800c4b2:	05c0      	lsls	r0, r0, #23
 800c4b4:	3a05      	subs	r2, #5
 800c4b6:	f004 fee7 	bl	8011288 <HAL_GPIO_WritePin>
 800c4ba:	e780      	b.n	800c3be <GetReadPrecentage+0x1e>
 800c4bc:	2203      	movs	r2, #3
		return ADC_CHANNEL_3;
 800c4be:	2703      	movs	r7, #3
 800c4c0:	e788      	b.n	800c3d4 <GetReadPrecentage+0x34>
 800c4c2:	2205      	movs	r2, #5
		return ADC_CHANNEL_5;
 800c4c4:	2705      	movs	r7, #5
 800c4c6:	e785      	b.n	800c3d4 <GetReadPrecentage+0x34>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800c4c8:	2090      	movs	r0, #144	; 0x90
 800c4ca:	2110      	movs	r1, #16
 800c4cc:	05c0      	lsls	r0, r0, #23
 800c4ce:	f004 fe3d 	bl	801114c <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c4d2:	2310      	movs	r3, #16
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d4:	2090      	movs	r0, #144	; 0x90
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800c4d6:	9301      	str	r3, [sp, #4]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4d8:	a901      	add	r1, sp, #4
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4da:	3b0f      	subs	r3, #15
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4dc:	05c0      	lsls	r0, r0, #23
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c4de:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c4e0:	9504      	str	r5, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4e2:	f004 fd1d 	bl	8010f20 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800c4e6:	2206      	movs	r2, #6
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c4e8:	2090      	movs	r0, #144	; 0x90
				portStatus[port - 1] = CUSTOM;
 800c4ea:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <GetReadPrecentage+0x180>)
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c4ec:	2110      	movs	r1, #16
				portStatus[port - 1] = CUSTOM;
 800c4ee:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800c4f0:	05c0      	lsls	r0, r0, #23
 800c4f2:	3a05      	subs	r2, #5
 800c4f4:	f004 fec8 	bl	8011288 <HAL_GPIO_WritePin>
 800c4f8:	e761      	b.n	800c3be <GetReadPrecentage+0x1e>
 800c4fa:	46c0      	nop			; (mov r8, r8)
 800c4fc:	200028bc 	.word	0x200028bc
 800c500:	40004400 	.word	0x40004400
 800c504:	40011400 	.word	0x40011400
 800c508:	2000283c 	.word	0x2000283c
 800c50c:	66666666 	.word	0x66666666
 800c510:	400a6666 	.word	0x400a6666
 800c514:	40affe00 	.word	0x40affe00
 800c518:	42c80000 	.word	0x42c80000
 800c51c:	00001001 	.word	0x00001001
 800c520:	20000c64 	.word	0x20000c64

0800c524 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800c524:	2802      	cmp	r0, #2
 800c526:	d010      	beq.n	800c54a <Get_Rank+0x26>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800c528:	2803      	cmp	r0, #3
 800c52a:	d003      	beq.n	800c534 <Get_Rank+0x10>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800c52c:	2354      	movs	r3, #84	; 0x54
 800c52e:	4a13      	ldr	r2, [pc, #76]	; (800c57c <Get_Rank+0x58>)
 800c530:	5cd0      	ldrb	r0, [r2, r3]
}
 800c532:	4770      	bx	lr
	else if (Port == 3 && side == "top")
 800c534:	4b12      	ldr	r3, [pc, #72]	; (800c580 <Get_Rank+0x5c>)
 800c536:	4299      	cmp	r1, r3
 800c538:	d013      	beq.n	800c562 <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800c53a:	4b12      	ldr	r3, [pc, #72]	; (800c584 <Get_Rank+0x60>)
 800c53c:	4299      	cmp	r1, r3
 800c53e:	d1f5      	bne.n	800c52c <Get_Rank+0x8>
		Rank_t = 3;
 800c540:	2354      	movs	r3, #84	; 0x54
 800c542:	4a0e      	ldr	r2, [pc, #56]	; (800c57c <Get_Rank+0x58>)
 800c544:	54d0      	strb	r0, [r2, r3]
 800c546:	2003      	movs	r0, #3
 800c548:	e7f3      	b.n	800c532 <Get_Rank+0xe>
	if (Port == 2 && side == "top")
 800c54a:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <Get_Rank+0x5c>)
 800c54c:	4299      	cmp	r1, r3
 800c54e:	d00e      	beq.n	800c56e <Get_Rank+0x4a>
	else if (Port == 2 && side == "bottom")
 800c550:	4b0c      	ldr	r3, [pc, #48]	; (800c584 <Get_Rank+0x60>)
 800c552:	4299      	cmp	r1, r3
 800c554:	d1ea      	bne.n	800c52c <Get_Rank+0x8>
		Rank_t = 1;
 800c556:	2354      	movs	r3, #84	; 0x54
 800c558:	2101      	movs	r1, #1
 800c55a:	4a08      	ldr	r2, [pc, #32]	; (800c57c <Get_Rank+0x58>)
 800c55c:	2001      	movs	r0, #1
 800c55e:	54d1      	strb	r1, [r2, r3]
 800c560:	e7e7      	b.n	800c532 <Get_Rank+0xe>
		Rank_t = 2;
 800c562:	2354      	movs	r3, #84	; 0x54
 800c564:	2102      	movs	r1, #2
 800c566:	4a05      	ldr	r2, [pc, #20]	; (800c57c <Get_Rank+0x58>)
 800c568:	3801      	subs	r0, #1
 800c56a:	54d1      	strb	r1, [r2, r3]
 800c56c:	e7e1      	b.n	800c532 <Get_Rank+0xe>
		Rank_t = 0;
 800c56e:	2354      	movs	r3, #84	; 0x54
 800c570:	2100      	movs	r1, #0
 800c572:	4a02      	ldr	r2, [pc, #8]	; (800c57c <Get_Rank+0x58>)
 800c574:	2000      	movs	r0, #0
 800c576:	54d1      	strb	r1, [r2, r3]
 800c578:	e7db      	b.n	800c532 <Get_Rank+0xe>
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	200028bc 	.word	0x200028bc
 800c580:	0801a6a4 	.word	0x0801a6a4
 800c584:	0801a6a8 	.word	0x0801a6a8

0800c588 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ADC_port == 2 || ADC_port == 3) {
 800c58a:	1e83      	subs	r3, r0, #2
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800c58c:	0004      	movs	r4, r0
 800c58e:	000d      	movs	r5, r1
 800c590:	2600      	movs	r6, #0
	if (ADC_port == 2 || ADC_port == 3) {
 800c592:	2b01      	cmp	r3, #1
 800c594:	d900      	bls.n	800c598 <ADCSelectChannel+0x10>
}
 800c596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		flag_ADC_Select=1;
 800c598:	2335      	movs	r3, #53	; 0x35
 800c59a:	2201      	movs	r2, #1
 800c59c:	4f1b      	ldr	r7, [pc, #108]	; (800c60c <ADCSelectChannel+0x84>)
 800c59e:	54fa      	strb	r2, [r7, r3]
		HAL_UART_DeInit(GetUart(ADC_port));
 800c5a0:	f001 f8c4 	bl	800d72c <GetUart>
 800c5a4:	f005 fe38 	bl	8012218 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800c5a8:	2206      	movs	r2, #6
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <ADCSelectChannel+0x88>)
		Channel = Get_channel(GetUart(ADC_port), side);
 800c5ac:	0020      	movs	r0, r4
		portStatus[ADC_port - 1] = CUSTOM;
 800c5ae:	191b      	adds	r3, r3, r4
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800c5b4:	f001 f8ba 	bl	800d72c <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c5b8:	4a16      	ldr	r2, [pc, #88]	; (800c614 <ADCSelectChannel+0x8c>)
 800c5ba:	6803      	ldr	r3, [r0, #0]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d011      	beq.n	800c5e4 <ADCSelectChannel+0x5c>
	else if (huart->Instance == USART6 && side == "top")
 800c5c0:	4a15      	ldr	r2, [pc, #84]	; (800c618 <ADCSelectChannel+0x90>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d016      	beq.n	800c5f4 <ADCSelectChannel+0x6c>
		Channel = Get_channel(GetUart(ADC_port), side);
 800c5c6:	2348      	movs	r3, #72	; 0x48
		Rank_t = Get_Rank(ADC_port, side);
 800c5c8:	0029      	movs	r1, r5
 800c5ca:	0020      	movs	r0, r4
		Channel = Get_channel(GetUart(ADC_port), side);
 800c5cc:	54fe      	strb	r6, [r7, r3]
		Rank_t = Get_Rank(ADC_port, side);
 800c5ce:	f7ff ffa9 	bl	800c524 <Get_Rank>
 800c5d2:	2354      	movs	r3, #84	; 0x54
 800c5d4:	54f8      	strb	r0, [r7, r3]
		if (ADC_flag == 0)
 800c5d6:	3b20      	subs	r3, #32
 800c5d8:	5cfb      	ldrb	r3, [r7, r3]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1db      	bne.n	800c596 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800c5de:	f7ff fdaf 	bl	800c140 <MX_ADC_Init>
}
 800c5e2:	e7d8      	b.n	800c596 <ADCSelectChannel+0xe>
	if (huart->Instance == USART2 && side == "top")
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <ADCSelectChannel+0x94>)
 800c5e6:	429d      	cmp	r5, r3
 800c5e8:	d00c      	beq.n	800c604 <ADCSelectChannel+0x7c>
	else if (huart->Instance == USART2 && side == "bottom")
 800c5ea:	4b0d      	ldr	r3, [pc, #52]	; (800c620 <ADCSelectChannel+0x98>)
 800c5ec:	429d      	cmp	r5, r3
 800c5ee:	d1ea      	bne.n	800c5c6 <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_3;
 800c5f0:	2603      	movs	r6, #3
 800c5f2:	e7e8      	b.n	800c5c6 <ADCSelectChannel+0x3e>
	else if (huart->Instance == USART6 && side == "top")
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <ADCSelectChannel+0x94>)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	d006      	beq.n	800c608 <ADCSelectChannel+0x80>
	else if (huart->Instance == USART6 && side == "bottom")
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <ADCSelectChannel+0x98>)
 800c5fc:	429d      	cmp	r5, r3
 800c5fe:	d1e2      	bne.n	800c5c6 <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_5;
 800c600:	2605      	movs	r6, #5
 800c602:	e7e0      	b.n	800c5c6 <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_2;
 800c604:	2602      	movs	r6, #2
 800c606:	e7de      	b.n	800c5c6 <ADCSelectChannel+0x3e>
		return ADC_CHANNEL_4;
 800c608:	2604      	movs	r6, #4
 800c60a:	e7dc      	b.n	800c5c6 <ADCSelectChannel+0x3e>
 800c60c:	200028bc 	.word	0x200028bc
 800c610:	20000c64 	.word	0x20000c64
 800c614:	40004400 	.word	0x40004400
 800c618:	40011400 	.word	0x40011400
 800c61c:	0801a6a4 	.word	0x0801a6a4
 800c620:	0801a6a8 	.word	0x0801a6a8

0800c624 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	4647      	mov	r7, r8
 800c628:	46ce      	mov	lr, r9
 800c62a:	2300      	movs	r3, #0
 800c62c:	b580      	push	{r7, lr}
	if (ADC_flag == 1) {
 800c62e:	4c3e      	ldr	r4, [pc, #248]	; (800c728 <ReadADCChannel+0x104>)
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c630:	4698      	mov	r8, r3
	if (ADC_flag == 1) {
 800c632:	3334      	adds	r3, #52	; 0x34
 800c634:	5ce3      	ldrb	r3, [r4, r3]
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800c636:	0007      	movs	r7, r0
 800c638:	000e      	movs	r6, r1
 800c63a:	0015      	movs	r5, r2
	if (ADC_flag == 1) {
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d00c      	beq.n	800c65a <ReadADCChannel+0x36>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800c640:	2354      	movs	r3, #84	; 0x54
 800c642:	5ce3      	ldrb	r3, [r4, r3]
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	18e4      	adds	r4, r4, r3
 800c648:	2358      	movs	r3, #88	; 0x58
 800c64a:	5ae0      	ldrh	r0, [r4, r3]
 800c64c:	f7f4 fcb4 	bl	8000fb8 <__aeabi_ui2f>
 800c650:	6028      	str	r0, [r5, #0]
}
 800c652:	bcc0      	pop	{r6, r7}
 800c654:	46b9      	mov	r9, r7
 800c656:	46b0      	mov	r8, r6
 800c658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800c65a:	f001 f867 	bl	800d72c <GetUart>
	if (huart->Instance == USART2 && side == "top")
 800c65e:	4a33      	ldr	r2, [pc, #204]	; (800c72c <ReadADCChannel+0x108>)
 800c660:	6803      	ldr	r3, [r0, #0]
 800c662:	4293      	cmp	r3, r2
 800c664:	d043      	beq.n	800c6ee <ReadADCChannel+0xca>
	else if (huart->Instance == USART6 && side == "top")
 800c666:	4a32      	ldr	r2, [pc, #200]	; (800c730 <ReadADCChannel+0x10c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d04d      	beq.n	800c708 <ReadADCChannel+0xe4>
		Channel = Get_channel(GetUart(Port), side);
 800c66c:	2348      	movs	r3, #72	; 0x48
 800c66e:	4642      	mov	r2, r8
		Rank_t = Get_Rank(Port, side);
 800c670:	0031      	movs	r1, r6
 800c672:	0038      	movs	r0, r7
		Channel = Get_channel(GetUart(Port), side);
 800c674:	4699      	mov	r9, r3
 800c676:	54e2      	strb	r2, [r4, r3]
		Rank_t = Get_Rank(Port, side);
 800c678:	f7ff ff54 	bl	800c524 <Get_Rank>
 800c67c:	2354      	movs	r3, #84	; 0x54
 800c67e:	54e0      	strb	r0, [r4, r3]
		sConfig.Channel = Channel;
 800c680:	464b      	mov	r3, r9
 800c682:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c684:	4e2b      	ldr	r6, [pc, #172]	; (800c734 <ReadADCChannel+0x110>)
		sConfig.Channel = Channel;
 800c686:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c688:	2380      	movs	r3, #128	; 0x80
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c68a:	0021      	movs	r1, r4
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c68c:	015b      	lsls	r3, r3, #5
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c68e:	0030      	movs	r0, r6
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c690:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c692:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c694:	3138      	adds	r1, #56	; 0x38
 800c696:	3068      	adds	r0, #104	; 0x68
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c698:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c69a:	f003 fb31 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d12e      	bne.n	800c700 <ReadADCChannel+0xdc>
		HAL_ADC_Start(&hadc);
 800c6a2:	3668      	adds	r6, #104	; 0x68
 800c6a4:	0030      	movs	r0, r6
 800c6a6:	f003 fa05 	bl	800fab4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800c6aa:	2164      	movs	r1, #100	; 0x64
 800c6ac:	0030      	movs	r0, r6
 800c6ae:	f003 fa4d 	bl	800fb4c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800c6b2:	0030      	movs	r0, r6
 800c6b4:	f003 faa8 	bl	800fc08 <HAL_ADC_GetValue>
 800c6b8:	2354      	movs	r3, #84	; 0x54
 800c6ba:	2258      	movs	r2, #88	; 0x58
 800c6bc:	5ce3      	ldrb	r3, [r4, r3]
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	18e3      	adds	r3, r4, r3
 800c6c2:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800c6c4:	0030      	movs	r0, r6
 800c6c6:	f003 fa21 	bl	800fb0c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800c6ca:	2348      	movs	r3, #72	; 0x48
 800c6cc:	5ce3      	ldrb	r3, [r4, r3]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6ce:	0021      	movs	r1, r4
		sConfig.Channel = Channel;
 800c6d0:	63a3      	str	r3, [r4, #56]	; 0x38
		sConfig.Rank = ADC_RANK_NONE;
 800c6d2:	4b19      	ldr	r3, [pc, #100]	; (800c738 <ReadADCChannel+0x114>)
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6d4:	0030      	movs	r0, r6
		sConfig.Rank = ADC_RANK_NONE;
 800c6d6:	63e3      	str	r3, [r4, #60]	; 0x3c
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c6d8:	2303      	movs	r3, #3
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6da:	3138      	adds	r1, #56	; 0x38
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800c6dc:	6423      	str	r3, [r4, #64]	; 0x40
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c6de:	f003 fb0f 	bl	800fd00 <HAL_ADC_ConfigChannel>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d0ac      	beq.n	800c640 <ReadADCChannel+0x1c>
	HAL_Delay(100);
 800c6e6:	2064      	movs	r0, #100	; 0x64
 800c6e8:	f003 f86a 	bl	800f7c0 <HAL_Delay>
}
 800c6ec:	e7a8      	b.n	800c640 <ReadADCChannel+0x1c>
	if (huart->Instance == USART2 && side == "top")
 800c6ee:	4b13      	ldr	r3, [pc, #76]	; (800c73c <ReadADCChannel+0x118>)
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	d012      	beq.n	800c71a <ReadADCChannel+0xf6>
	else if (huart->Instance == USART2 && side == "bottom")
 800c6f4:	4b12      	ldr	r3, [pc, #72]	; (800c740 <ReadADCChannel+0x11c>)
 800c6f6:	429e      	cmp	r6, r3
 800c6f8:	d1b8      	bne.n	800c66c <ReadADCChannel+0x48>
		return ADC_CHANNEL_3;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	4698      	mov	r8, r3
 800c6fe:	e7b5      	b.n	800c66c <ReadADCChannel+0x48>
	HAL_Delay(100);
 800c700:	2064      	movs	r0, #100	; 0x64
 800c702:	f003 f85d 	bl	800f7c0 <HAL_Delay>
}
 800c706:	e7cc      	b.n	800c6a2 <ReadADCChannel+0x7e>
	else if (huart->Instance == USART6 && side == "top")
 800c708:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <ReadADCChannel+0x118>)
 800c70a:	429e      	cmp	r6, r3
 800c70c:	d008      	beq.n	800c720 <ReadADCChannel+0xfc>
	else if (huart->Instance == USART6 && side == "bottom")
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <ReadADCChannel+0x11c>)
 800c710:	429e      	cmp	r6, r3
 800c712:	d1ab      	bne.n	800c66c <ReadADCChannel+0x48>
		return ADC_CHANNEL_5;
 800c714:	2305      	movs	r3, #5
 800c716:	4698      	mov	r8, r3
 800c718:	e7a8      	b.n	800c66c <ReadADCChannel+0x48>
		return ADC_CHANNEL_2;
 800c71a:	2302      	movs	r3, #2
 800c71c:	4698      	mov	r8, r3
 800c71e:	e7a5      	b.n	800c66c <ReadADCChannel+0x48>
		return ADC_CHANNEL_4;
 800c720:	2304      	movs	r3, #4
 800c722:	4698      	mov	r8, r3
 800c724:	e7a2      	b.n	800c66c <ReadADCChannel+0x48>
 800c726:	46c0      	nop			; (mov r8, r8)
 800c728:	200028bc 	.word	0x200028bc
 800c72c:	40004400 	.word	0x40004400
 800c730:	40011400 	.word	0x40011400
 800c734:	2000283c 	.word	0x2000283c
 800c738:	00001001 	.word	0x00001001
 800c73c:	0801a6a4 	.word	0x0801a6a4
 800c740:	0801a6a8 	.word	0x0801a6a8

0800c744 <buttonReleasedCallback>:
 800c744:	4770      	bx	lr
 800c746:	46c0      	nop			; (mov r8, r8)

0800c748 <buttonClickedCallback>:
 800c748:	4770      	bx	lr
 800c74a:	46c0      	nop			; (mov r8, r8)

0800c74c <buttonDblClickedCallback>:
 800c74c:	4770      	bx	lr
 800c74e:	46c0      	nop			; (mov r8, r8)

0800c750 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800c750:	4770      	bx	lr
 800c752:	46c0      	nop			; (mov r8, r8)

0800c754 <buttonReleasedForYCallback>:
 800c754:	4770      	bx	lr
 800c756:	46c0      	nop			; (mov r8, r8)

0800c758 <CheckAttachedButtons>:
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c758:	2338      	movs	r3, #56	; 0x38
void CheckAttachedButtons(void) {
 800c75a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75c:	4645      	mov	r5, r8
 800c75e:	4698      	mov	r8, r3
 800c760:	4bbe      	ldr	r3, [pc, #760]	; (800ca5c <CheckAttachedButtons+0x304>)
 800c762:	4657      	mov	r7, sl
 800c764:	469a      	mov	sl, r3
 800c766:	2360      	movs	r3, #96	; 0x60
 800c768:	464e      	mov	r6, r9
 800c76a:	46de      	mov	lr, fp
 800c76c:	4453      	add	r3, sl
 800c76e:	4699      	mov	r9, r3
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c770:	2300      	movs	r3, #0
void CheckAttachedButtons(void) {
 800c772:	b5e0      	push	{r5, r6, r7, lr}
 800c774:	4dba      	ldr	r5, [pc, #744]	; (800ca60 <CheckAttachedButtons+0x308>)
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c776:	2401      	movs	r4, #1
 800c778:	002e      	movs	r6, r5
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c77a:	469b      	mov	fp, r3
void CheckAttachedButtons(void) {
 800c77c:	b089      	sub	sp, #36	; 0x24
 800c77e:	44a8      	add	r8, r5
 800c780:	3650      	adds	r6, #80	; 0x50
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800c782:	9303      	str	r3, [sp, #12]
		if (button[i].type)			// Only check defined butons
 800c784:	7aab      	ldrb	r3, [r5, #10]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d100      	bne.n	800c78c <CheckAttachedButtons+0x34>
 800c78a:	e0bb      	b.n	800c904 <CheckAttachedButtons+0x1ac>
			if (delayButtonStateReset == false)
 800c78c:	2366      	movs	r3, #102	; 0x66
 800c78e:	4652      	mov	r2, sl
 800c790:	5cd3      	ldrb	r3, [r2, r3]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d100      	bne.n	800c798 <CheckAttachedButtons+0x40>
				button[i].state = NONE;
 800c796:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c798:	ab02      	add	r3, sp, #8
 800c79a:	469c      	mov	ip, r3
 800c79c:	270e      	movs	r7, #14
 800c79e:	4467      	add	r7, ip
 800c7a0:	ab07      	add	r3, sp, #28
 800c7a2:	aa05      	add	r2, sp, #20
 800c7a4:	a906      	add	r1, sp, #24
 800c7a6:	0020      	movs	r0, r4
 800c7a8:	9700      	str	r7, [sp, #0]
 800c7aa:	f7ff f9b3 	bl	800bb14 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c7ae:	ab02      	add	r3, sp, #8
 800c7b0:	8999      	ldrh	r1, [r3, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	9806      	ldr	r0, [sp, #24]
 800c7b6:	f004 fd67 	bl	8011288 <HAL_GPIO_WritePin>
			Delay_us(10);
 800c7ba:	200a      	movs	r0, #10
 800c7bc:	f000 fdc0 	bl	800d340 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800c7c0:	8839      	ldrh	r1, [r7, #0]
 800c7c2:	9807      	ldr	r0, [sp, #28]
 800c7c4:	f004 fd5a 	bl	801127c <HAL_GPIO_ReadPin>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d100      	bne.n	800c7ce <CheckAttachedButtons+0x76>
 800c7cc:	e0c7      	b.n	800c95e <CheckAttachedButtons+0x206>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800c7ce:	ab02      	add	r3, sp, #8
 800c7d0:	8999      	ldrh	r1, [r3, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	9806      	ldr	r0, [sp, #24]
 800c7d6:	f004 fd57 	bl	8011288 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800c7da:	7aab      	ldrb	r3, [r5, #10]
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d100      	bne.n	800c7e2 <CheckAttachedButtons+0x8a>
 800c7e0:	e19a      	b.n	800cb18 <CheckAttachedButtons+0x3c0>
 800c7e2:	d900      	bls.n	800c7e6 <CheckAttachedButtons+0x8e>
 800c7e4:	e0a2      	b.n	800c92c <CheckAttachedButtons+0x1d4>
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d001      	beq.n	800c7ee <CheckAttachedButtons+0x96>
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d106      	bne.n	800c7fc <CheckAttachedButtons+0xa4>
				if (connected == GPIO_PIN_SET)
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d100      	bne.n	800c7f6 <CheckAttachedButtons+0x9e>
 800c7f4:	e1a6      	b.n	800cb44 <CheckAttachedButtons+0x3ec>
				else if (connected == GPIO_PIN_RESET)
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d100      	bne.n	800c7fc <CheckAttachedButtons+0xa4>
 800c7fa:	e0d1      	b.n	800c9a0 <CheckAttachedButtons+0x248>
			if (state == CLOSED || state == ON) {
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	d100      	bne.n	800c804 <CheckAttachedButtons+0xac>
 800c802:	e0bb      	b.n	800c97c <CheckAttachedButtons+0x224>
 800c804:	2b02      	cmp	r3, #2
 800c806:	d100      	bne.n	800c80a <CheckAttachedButtons+0xb2>
 800c808:	e0b8      	b.n	800c97c <CheckAttachedButtons+0x224>
			if (state == OPEN || state == OFF) {
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	2b03      	cmp	r3, #3
 800c80e:	d002      	beq.n	800c816 <CheckAttachedButtons+0xbe>
 800c810:	2b01      	cmp	r3, #1
 800c812:	d000      	beq.n	800c816 <CheckAttachedButtons+0xbe>
 800c814:	e1d1      	b.n	800cbba <CheckAttachedButtons+0x462>
				if (releaseCounter[i] < 0xFFFF)
 800c816:	6872      	ldr	r2, [r6, #4]
 800c818:	4992      	ldr	r1, [pc, #584]	; (800ca64 <CheckAttachedButtons+0x30c>)
					releaseCounter[i] = 0;		// Reset debounce counter
 800c81a:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 800c81c:	428a      	cmp	r2, r1
 800c81e:	d800      	bhi.n	800c822 <CheckAttachedButtons+0xca>
					++releaseCounter[i];		// Advance the debounce counter
 800c820:	1c53      	adds	r3, r2, #1
				if (clicked == 2
 800c822:	2267      	movs	r2, #103	; 0x67
 800c824:	4651      	mov	r1, sl
 800c826:	5c8a      	ldrb	r2, [r1, r2]
 800c828:	6073      	str	r3, [r6, #4]
 800c82a:	2a02      	cmp	r2, #2
 800c82c:	d100      	bne.n	800c830 <CheckAttachedButtons+0xd8>
 800c82e:	e17c      	b.n	800cb2a <CheckAttachedButtons+0x3d2>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800c830:	464a      	mov	r2, r9
 800c832:	4f8d      	ldr	r7, [pc, #564]	; (800ca68 <CheckAttachedButtons+0x310>)
 800c834:	7851      	ldrb	r1, [r2, #1]
 800c836:	797a      	ldrb	r2, [r7, #5]
 800c838:	4291      	cmp	r1, r2
 800c83a:	d900      	bls.n	800c83e <CheckAttachedButtons+0xe6>
 800c83c:	e0a9      	b.n	800c992 <CheckAttachedButtons+0x23a>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800c83e:	4642      	mov	r2, r8
 800c840:	6852      	ldr	r2, [r2, #4]
 800c842:	8839      	ldrh	r1, [r7, #0]
 800c844:	4291      	cmp	r1, r2
 800c846:	d820      	bhi.n	800c88a <CheckAttachedButtons+0x132>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800c848:	d104      	bne.n	800c854 <CheckAttachedButtons+0xfc>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800c84a:	2007      	movs	r0, #7
 800c84c:	7268      	strb	r0, [r5, #9]
					++pressCounter[i];
 800c84e:	4640      	mov	r0, r8
 800c850:	3201      	adds	r2, #1
 800c852:	6042      	str	r2, [r0, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c854:	4299      	cmp	r1, r3
 800c856:	d201      	bcs.n	800c85c <CheckAttachedButtons+0x104>
					releaseCounter[i] = 0;
 800c858:	2300      	movs	r3, #0
 800c85a:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800c85c:	887b      	ldrh	r3, [r7, #2]
 800c85e:	4293      	cmp	r3, r2
 800c860:	d238      	bcs.n	800c8d4 <CheckAttachedButtons+0x17c>
						&& pressCounter[i] < 500) {
 800c862:	23fa      	movs	r3, #250	; 0xfa
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	429a      	cmp	r2, r3
 800c868:	d234      	bcs.n	800c8d4 <CheckAttachedButtons+0x17c>
					if (clicked == 0)
 800c86a:	4652      	mov	r2, sl
 800c86c:	3b8e      	subs	r3, #142	; 0x8e
 800c86e:	3bff      	subs	r3, #255	; 0xff
 800c870:	5cd2      	ldrb	r2, [r2, r3]
 800c872:	2a00      	cmp	r2, #0
 800c874:	d100      	bne.n	800c878 <CheckAttachedButtons+0x120>
 800c876:	e17f      	b.n	800cb78 <CheckAttachedButtons+0x420>
					else if (clicked == 2) {
 800c878:	2a02      	cmp	r2, #2
 800c87a:	d105      	bne.n	800c888 <CheckAttachedButtons+0x130>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800c87c:	464a      	mov	r2, r9
 800c87e:	7938      	ldrb	r0, [r7, #4]
 800c880:	7852      	ldrb	r2, [r2, #1]
 800c882:	4290      	cmp	r0, r2
 800c884:	d200      	bcs.n	800c888 <CheckAttachedButtons+0x130>
 800c886:	e18d      	b.n	800cba4 <CheckAttachedButtons+0x44c>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c888:	6873      	ldr	r3, [r6, #4]
 800c88a:	4299      	cmp	r1, r3
 800c88c:	d819      	bhi.n	800c8c2 <CheckAttachedButtons+0x16a>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800c88e:	d103      	bne.n	800c898 <CheckAttachedButtons+0x140>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800c890:	2308      	movs	r3, #8
 800c892:	726b      	strb	r3, [r5, #9]
					++releaseCounter[i];
 800c894:	1c4b      	adds	r3, r1, #1
 800c896:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800c898:	4642      	mov	r2, r8
 800c89a:	6852      	ldr	r2, [r2, #4]
 800c89c:	428a      	cmp	r2, r1
 800c89e:	d902      	bls.n	800c8a6 <CheckAttachedButtons+0x14e>
					pressCounter[i] = 0;
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4641      	mov	r1, r8
 800c8a4:	604a      	str	r2, [r1, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800c8a6:	887a      	ldrh	r2, [r7, #2]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d204      	bcs.n	800c8b6 <CheckAttachedButtons+0x15e>
						&& releaseCounter[i] < 500) {
 800c8ac:	22fa      	movs	r2, #250	; 0xfa
 800c8ae:	0052      	lsls	r2, r2, #1
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d200      	bcs.n	800c8b6 <CheckAttachedButtons+0x15e>
 800c8b4:	e077      	b.n	800c9a6 <CheckAttachedButtons+0x24e>
						&& releaseCounter[i] < 0xFFFF) {
 800c8b6:	3bf5      	subs	r3, #245	; 0xf5
				} else if (releaseCounter[i] >= 500
 800c8b8:	4a6c      	ldr	r2, [pc, #432]	; (800ca6c <CheckAttachedButtons+0x314>)
						&& releaseCounter[i] < 0xFFFF) {
 800c8ba:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d800      	bhi.n	800c8c2 <CheckAttachedButtons+0x16a>
 800c8c0:	e14d      	b.n	800cb5e <CheckAttachedButtons+0x406>
			switch (button[i].state) {
 800c8c2:	7a6b      	ldrb	r3, [r5, #9]
 800c8c4:	3b05      	subs	r3, #5
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b09      	cmp	r3, #9
 800c8ca:	d81b      	bhi.n	800c904 <CheckAttachedButtons+0x1ac>
 800c8cc:	4a68      	ldr	r2, [pc, #416]	; (800ca70 <CheckAttachedButtons+0x318>)
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	58d3      	ldr	r3, [r2, r3]
 800c8d2:	469f      	mov	pc, r3
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800c8d4:	3af5      	subs	r2, #245	; 0xf5
 800c8d6:	4b65      	ldr	r3, [pc, #404]	; (800ca6c <CheckAttachedButtons+0x314>)
 800c8d8:	3aff      	subs	r2, #255	; 0xff
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d8d4      	bhi.n	800c888 <CheckAttachedButtons+0x130>
					if (clicked)
 800c8de:	2367      	movs	r3, #103	; 0x67
 800c8e0:	4652      	mov	r2, sl
 800c8e2:	5cd2      	ldrb	r2, [r2, r3]
 800c8e4:	2a00      	cmp	r2, #0
 800c8e6:	d002      	beq.n	800c8ee <CheckAttachedButtons+0x196>
						clicked = 0;						// Cannot be a click
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	4651      	mov	r1, sl
 800c8ec:	54ca      	strb	r2, [r1, r3]
					CheckForTimedButtonPress(i);
 800c8ee:	0020      	movs	r0, r4
 800c8f0:	f7ff f9e6 	bl	800bcc0 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800c8f4:	6873      	ldr	r3, [r6, #4]
 800c8f6:	8839      	ldrh	r1, [r7, #0]
 800c8f8:	e7c7      	b.n	800c88a <CheckAttachedButtons+0x132>
				buttonPressedCallback(i);
 800c8fa:	0020      	movs	r0, r4
 800c8fc:	f7ff f9de 	bl	800bcbc <buttonPressedCallback>
				button[i].state = NONE;
 800c900:	2300      	movs	r3, #0
 800c902:	726b      	strb	r3, [r5, #9]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800c904:	2304      	movs	r3, #4
 800c906:	469c      	mov	ip, r3
 800c908:	3b03      	subs	r3, #3
 800c90a:	44e0      	add	r8, ip
 800c90c:	469c      	mov	ip, r3
 800c90e:	3401      	adds	r4, #1
 800c910:	b2e4      	uxtb	r4, r4
 800c912:	3509      	adds	r5, #9
 800c914:	3604      	adds	r6, #4
 800c916:	44e1      	add	r9, ip
 800c918:	2c06      	cmp	r4, #6
 800c91a:	d000      	beq.n	800c91e <CheckAttachedButtons+0x1c6>
 800c91c:	e732      	b.n	800c784 <CheckAttachedButtons+0x2c>
}
 800c91e:	b009      	add	sp, #36	; 0x24
 800c920:	bcf0      	pop	{r4, r5, r6, r7}
 800c922:	46bb      	mov	fp, r7
 800c924:	46b2      	mov	sl, r6
 800c926:	46a9      	mov	r9, r5
 800c928:	46a0      	mov	r8, r4
 800c92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			switch (button[i].type) {
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d000      	beq.n	800c932 <CheckAttachedButtons+0x1da>
 800c930:	e764      	b.n	800c7fc <CheckAttachedButtons+0xa4>
				if (connected == GPIO_PIN_SET)
 800c932:	465b      	mov	r3, fp
 800c934:	2b01      	cmp	r3, #1
 800c936:	d100      	bne.n	800c93a <CheckAttachedButtons+0x1e2>
 800c938:	e0f4      	b.n	800cb24 <CheckAttachedButtons+0x3cc>
				else if (connected == GPIO_PIN_RESET)
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d000      	beq.n	800c940 <CheckAttachedButtons+0x1e8>
 800c93e:	e75d      	b.n	800c7fc <CheckAttachedButtons+0xa4>
				if (pressCounter[i] < 0xFFFF)
 800c940:	4643      	mov	r3, r8
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	4b47      	ldr	r3, [pc, #284]	; (800ca64 <CheckAttachedButtons+0x30c>)
 800c946:	429a      	cmp	r2, r3
 800c948:	d800      	bhi.n	800c94c <CheckAttachedButtons+0x1f4>
 800c94a:	e123      	b.n	800cb94 <CheckAttachedButtons+0x43c>
					pressCounter[i] = 0;			// Reset debounce counter
 800c94c:	4643      	mov	r3, r8
 800c94e:	465a      	mov	r2, fp
 800c950:	605a      	str	r2, [r3, #4]
					state = ON;
 800c952:	2102      	movs	r1, #2
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c954:	6873      	ldr	r3, [r6, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	4f43      	ldr	r7, [pc, #268]	; (800ca68 <CheckAttachedButtons+0x310>)
					state = ON;
 800c95a:	9103      	str	r1, [sp, #12]
 800c95c:	e771      	b.n	800c842 <CheckAttachedButtons+0xea>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800c95e:	ab02      	add	r3, sp, #8
 800c960:	8999      	ldrh	r1, [r3, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	9806      	ldr	r0, [sp, #24]
 800c966:	f004 fc8f 	bl	8011288 <HAL_GPIO_WritePin>
				Delay_us(10);
 800c96a:	200a      	movs	r0, #10
 800c96c:	f000 fce8 	bl	800d340 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800c970:	8839      	ldrh	r1, [r7, #0]
 800c972:	9807      	ldr	r0, [sp, #28]
 800c974:	f004 fc82 	bl	801127c <HAL_GPIO_ReadPin>
 800c978:	4683      	mov	fp, r0
 800c97a:	e728      	b.n	800c7ce <CheckAttachedButtons+0x76>
				if (pressCounter[i] < 0xFFFF)
 800c97c:	4643      	mov	r3, r8
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	4b38      	ldr	r3, [pc, #224]	; (800ca64 <CheckAttachedButtons+0x30c>)
 800c982:	429a      	cmp	r2, r3
 800c984:	d82d      	bhi.n	800c9e2 <CheckAttachedButtons+0x28a>
					++pressCounter[i];			// Advance the debounce counter
 800c986:	4643      	mov	r3, r8
 800c988:	3201      	adds	r2, #1
 800c98a:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c98c:	6873      	ldr	r3, [r6, #4]
 800c98e:	4f36      	ldr	r7, [pc, #216]	; (800ca68 <CheckAttachedButtons+0x310>)
 800c990:	e757      	b.n	800c842 <CheckAttachedButtons+0xea>
					clicked = 0;
 800c992:	2200      	movs	r2, #0
 800c994:	2167      	movs	r1, #103	; 0x67
 800c996:	4650      	mov	r0, sl
 800c998:	5442      	strb	r2, [r0, r1]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800c99a:	4649      	mov	r1, r9
 800c99c:	704a      	strb	r2, [r1, #1]
 800c99e:	e74e      	b.n	800c83e <CheckAttachedButtons+0xe6>
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	9303      	str	r3, [sp, #12]
 800c9a4:	e737      	b.n	800c816 <CheckAttachedButtons+0xbe>
					if (clicked == 1) {
 800c9a6:	4653      	mov	r3, sl
 800c9a8:	3a8e      	subs	r2, #142	; 0x8e
 800c9aa:	3aff      	subs	r2, #255	; 0xff
 800c9ac:	5c9b      	ldrb	r3, [r3, r2]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d100      	bne.n	800c9b4 <CheckAttachedButtons+0x25c>
 800c9b2:	e089      	b.n	800cac8 <CheckAttachedButtons+0x370>
					} else if (clicked == 3) {
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	d000      	beq.n	800c9ba <CheckAttachedButtons+0x262>
 800c9b8:	e783      	b.n	800c8c2 <CheckAttachedButtons+0x16a>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c9ba:	3303      	adds	r3, #3
						clicked = 0;			// Prepare for a single click
 800c9bc:	4651      	mov	r1, sl
						button[i].state = DBL_CLICKED;// Record a double button click event
 800c9be:	726b      	strb	r3, [r5, #9]
						clicked = 0;			// Prepare for a single click
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800c9c4:	2366      	movs	r3, #102	; 0x66
 800c9c6:	4652      	mov	r2, sl
 800c9c8:	5cd2      	ldrb	r2, [r2, r3]
 800c9ca:	2a00      	cmp	r2, #0
 800c9cc:	d19a      	bne.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800c9ce:	7c6a      	ldrb	r2, [r5, #17]
 800c9d0:	0792      	lsls	r2, r2, #30
 800c9d2:	d597      	bpl.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	4651      	mov	r1, sl
					buttonDblClickedCallback(i);
 800c9d8:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800c9da:	54ca      	strb	r2, [r1, r3]
					buttonDblClickedCallback(i);
 800c9dc:	f7ff feb6 	bl	800c74c <buttonDblClickedCallback>
 800c9e0:	e790      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					pressCounter[i] = 0;			// Reset debounce counter
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	4642      	mov	r2, r8
 800c9e6:	6053      	str	r3, [r2, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800c9e8:	6873      	ldr	r3, [r6, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	4f1e      	ldr	r7, [pc, #120]	; (800ca68 <CheckAttachedButtons+0x310>)
 800c9ee:	e728      	b.n	800c842 <CheckAttachedButtons+0xea>
				if (!delayButtonStateReset
 800c9f0:	2366      	movs	r3, #102	; 0x66
 800c9f2:	4652      	mov	r2, sl
 800c9f4:	5cd2      	ldrb	r2, [r2, r3]
 800c9f6:	2a00      	cmp	r2, #0
 800c9f8:	d000      	beq.n	800c9fc <CheckAttachedButtons+0x2a4>
 800c9fa:	e783      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800c9fc:	7c6a      	ldrb	r2, [r5, #17]
 800c9fe:	0652      	lsls	r2, r2, #25
 800ca00:	d400      	bmi.n	800ca04 <CheckAttachedButtons+0x2ac>
 800ca02:	e77f      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ca04:	4651      	mov	r1, sl
 800ca06:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ca08:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ca0a:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800ca0c:	2102      	movs	r1, #2
 800ca0e:	f7ff fea1 	bl	800c754 <buttonReleasedForYCallback>
 800ca12:	e777      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ca14:	2366      	movs	r3, #102	; 0x66
 800ca16:	4652      	mov	r2, sl
 800ca18:	5cd2      	ldrb	r2, [r2, r3]
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	d000      	beq.n	800ca20 <CheckAttachedButtons+0x2c8>
 800ca1e:	e771      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800ca20:	7c6a      	ldrb	r2, [r5, #17]
 800ca22:	0692      	lsls	r2, r2, #26
 800ca24:	d400      	bmi.n	800ca28 <CheckAttachedButtons+0x2d0>
 800ca26:	e76d      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ca28:	4651      	mov	r1, sl
 800ca2a:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800ca2c:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ca2e:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800ca30:	2101      	movs	r1, #1
 800ca32:	f7ff fe8f 	bl	800c754 <buttonReleasedForYCallback>
 800ca36:	e765      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ca38:	2366      	movs	r3, #102	; 0x66
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	5cd2      	ldrb	r2, [r2, r3]
 800ca3e:	2a00      	cmp	r2, #0
 800ca40:	d000      	beq.n	800ca44 <CheckAttachedButtons+0x2ec>
 800ca42:	e75f      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800ca44:	7c6a      	ldrb	r2, [r5, #17]
 800ca46:	06d2      	lsls	r2, r2, #27
 800ca48:	d400      	bmi.n	800ca4c <CheckAttachedButtons+0x2f4>
 800ca4a:	e75b      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ca4c:	4651      	mov	r1, sl
 800ca4e:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ca50:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ca52:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800ca54:	2103      	movs	r1, #3
 800ca56:	f7ff fe7b 	bl	800c750 <buttonPressedForXCallback>
 800ca5a:	e753      	b.n	800c904 <CheckAttachedButtons+0x1ac>
 800ca5c:	200028bc 	.word	0x200028bc
 800ca60:	2000283c 	.word	0x2000283c
 800ca64:	0000fffe 	.word	0x0000fffe
 800ca68:	20000b54 	.word	0x20000b54
 800ca6c:	0000fe0a 	.word	0x0000fe0a
 800ca70:	080198a8 	.word	0x080198a8
				if (!delayButtonStateReset
 800ca74:	2366      	movs	r3, #102	; 0x66
 800ca76:	4652      	mov	r2, sl
 800ca78:	5cd2      	ldrb	r2, [r2, r3]
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	d000      	beq.n	800ca80 <CheckAttachedButtons+0x328>
 800ca7e:	e741      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800ca80:	7c6a      	ldrb	r2, [r5, #17]
 800ca82:	0712      	lsls	r2, r2, #28
 800ca84:	d400      	bmi.n	800ca88 <CheckAttachedButtons+0x330>
 800ca86:	e73d      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800ca88:	4651      	mov	r1, sl
 800ca8a:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800ca8c:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800ca8e:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800ca90:	2102      	movs	r1, #2
 800ca92:	f7ff fe5d 	bl	800c750 <buttonPressedForXCallback>
 800ca96:	e735      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800ca98:	2366      	movs	r3, #102	; 0x66
 800ca9a:	4652      	mov	r2, sl
 800ca9c:	5cd2      	ldrb	r2, [r2, r3]
 800ca9e:	2a00      	cmp	r2, #0
 800caa0:	d000      	beq.n	800caa4 <CheckAttachedButtons+0x34c>
 800caa2:	e72f      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800caa4:	7c6a      	ldrb	r2, [r5, #17]
 800caa6:	0752      	lsls	r2, r2, #29
 800caa8:	d400      	bmi.n	800caac <CheckAttachedButtons+0x354>
 800caaa:	e72b      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800caac:	4651      	mov	r1, sl
 800caae:	2201      	movs	r2, #1
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800cab0:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cab2:	54ca      	strb	r2, [r1, r3]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800cab4:	2101      	movs	r1, #1
 800cab6:	f7ff fe4b 	bl	800c750 <buttonPressedForXCallback>
 800caba:	e723      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				buttonReleasedCallback(i);
 800cabc:	0020      	movs	r0, r4
 800cabe:	f7ff fe41 	bl	800c744 <buttonReleasedCallback>
				button[i].state = NONE;
 800cac2:	2300      	movs	r3, #0
 800cac4:	726b      	strb	r3, [r5, #9]
				break;
 800cac6:	e71d      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						clicked = 2;			// Prepare for a double click
 800cac8:	4651      	mov	r1, sl
						button[i].state = CLICKED;// Record a single button click event
 800caca:	3304      	adds	r3, #4
 800cacc:	726b      	strb	r3, [r5, #9]
						clicked = 2;			// Prepare for a double click
 800cace:	3b03      	subs	r3, #3
 800cad0:	548b      	strb	r3, [r1, r2]
				if (!delayButtonStateReset
 800cad2:	2366      	movs	r3, #102	; 0x66
 800cad4:	4652      	mov	r2, sl
 800cad6:	5cd2      	ldrb	r2, [r2, r3]
 800cad8:	2a00      	cmp	r2, #0
 800cada:	d000      	beq.n	800cade <CheckAttachedButtons+0x386>
 800cadc:	e712      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800cade:	7c69      	ldrb	r1, [r5, #17]
 800cae0:	3201      	adds	r2, #1
 800cae2:	420a      	tst	r2, r1
 800cae4:	d100      	bne.n	800cae8 <CheckAttachedButtons+0x390>
 800cae6:	e70d      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cae8:	4651      	mov	r1, sl
					buttonClickedCallback(i);
 800caea:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800caec:	54ca      	strb	r2, [r1, r3]
					buttonClickedCallback(i);
 800caee:	f7ff fe2b 	bl	800c748 <buttonClickedCallback>
 800caf2:	e707      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				if (!delayButtonStateReset
 800caf4:	2366      	movs	r3, #102	; 0x66
 800caf6:	4652      	mov	r2, sl
 800caf8:	5cd2      	ldrb	r2, [r2, r3]
 800cafa:	2a00      	cmp	r2, #0
 800cafc:	d000      	beq.n	800cb00 <CheckAttachedButtons+0x3a8>
 800cafe:	e701      	b.n	800c904 <CheckAttachedButtons+0x1ac>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800cb00:	7c6a      	ldrb	r2, [r5, #17]
 800cb02:	2a7f      	cmp	r2, #127	; 0x7f
 800cb04:	d800      	bhi.n	800cb08 <CheckAttachedButtons+0x3b0>
 800cb06:	e6fd      	b.n	800c904 <CheckAttachedButtons+0x1ac>
					delayButtonStateReset = true;
 800cb08:	4651      	mov	r1, sl
 800cb0a:	2201      	movs	r2, #1
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cb0c:	0020      	movs	r0, r4
					delayButtonStateReset = true;
 800cb0e:	54ca      	strb	r2, [r1, r3]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800cb10:	2103      	movs	r1, #3
 800cb12:	f7ff fe1f 	bl	800c754 <buttonReleasedForYCallback>
 800cb16:	e6f5      	b.n	800c904 <CheckAttachedButtons+0x1ac>
				if (connected == GPIO_PIN_SET)
 800cb18:	465b      	mov	r3, fp
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d031      	beq.n	800cb82 <CheckAttachedButtons+0x42a>
				else if (connected == GPIO_PIN_RESET)
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d000      	beq.n	800cb24 <CheckAttachedButtons+0x3cc>
 800cb22:	e66b      	b.n	800c7fc <CheckAttachedButtons+0xa4>
 800cb24:	2301      	movs	r3, #1
 800cb26:	9303      	str	r3, [sp, #12]
 800cb28:	e675      	b.n	800c816 <CheckAttachedButtons+0xbe>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800cb2a:	464a      	mov	r2, r9
 800cb2c:	4f25      	ldr	r7, [pc, #148]	; (800cbc4 <CheckAttachedButtons+0x46c>)
 800cb2e:	7852      	ldrb	r2, [r2, #1]
 800cb30:	7979      	ldrb	r1, [r7, #5]
 800cb32:	4291      	cmp	r1, r2
 800cb34:	d200      	bcs.n	800cb38 <CheckAttachedButtons+0x3e0>
 800cb36:	e72c      	b.n	800c992 <CheckAttachedButtons+0x23a>
					++dblCounter[i];
 800cb38:	4649      	mov	r1, r9
 800cb3a:	3201      	adds	r2, #1
 800cb3c:	704a      	strb	r2, [r1, #1]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cb3e:	4642      	mov	r2, r8
 800cb40:	6852      	ldr	r2, [r2, #4]
					++dblCounter[i];
 800cb42:	e67e      	b.n	800c842 <CheckAttachedButtons+0xea>
				if (pressCounter[i] < 0xFFFF)
 800cb44:	4643      	mov	r3, r8
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	4b1f      	ldr	r3, [pc, #124]	; (800cbc8 <CheckAttachedButtons+0x470>)
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d80b      	bhi.n	800cb66 <CheckAttachedButtons+0x40e>
					++pressCounter[i];			// Advance the debounce counter
 800cb4e:	4643      	mov	r3, r8
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cb50:	2104      	movs	r1, #4
					++pressCounter[i];			// Advance the debounce counter
 800cb52:	3201      	adds	r2, #1
 800cb54:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cb56:	6873      	ldr	r3, [r6, #4]
 800cb58:	4f1a      	ldr	r7, [pc, #104]	; (800cbc4 <CheckAttachedButtons+0x46c>)
 800cb5a:	9103      	str	r1, [sp, #12]
 800cb5c:	e671      	b.n	800c842 <CheckAttachedButtons+0xea>
					CheckForTimedButtonRelease(i);
 800cb5e:	0020      	movs	r0, r4
 800cb60:	f7ff f8d8 	bl	800bd14 <CheckForTimedButtonRelease>
 800cb64:	e6ad      	b.n	800c8c2 <CheckAttachedButtons+0x16a>
					pressCounter[i] = 0;			// Reset debounce counter
 800cb66:	2300      	movs	r3, #0
 800cb68:	4642      	mov	r2, r8
					state = CLOSED;
 800cb6a:	2104      	movs	r1, #4
					pressCounter[i] = 0;			// Reset debounce counter
 800cb6c:	6053      	str	r3, [r2, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cb6e:	6873      	ldr	r3, [r6, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	4f14      	ldr	r7, [pc, #80]	; (800cbc4 <CheckAttachedButtons+0x46c>)
					state = CLOSED;
 800cb74:	9103      	str	r1, [sp, #12]
 800cb76:	e664      	b.n	800c842 <CheckAttachedButtons+0xea>
						clicked = 1;		// Record a possible single click
 800cb78:	4650      	mov	r0, sl
 800cb7a:	3201      	adds	r2, #1
 800cb7c:	54c2      	strb	r2, [r0, r3]
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cb7e:	6873      	ldr	r3, [r6, #4]
 800cb80:	e683      	b.n	800c88a <CheckAttachedButtons+0x132>
				if (pressCounter[i] < 0xFFFF)
 800cb82:	4643      	mov	r3, r8
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	4b10      	ldr	r3, [pc, #64]	; (800cbc8 <CheckAttachedButtons+0x470>)
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d903      	bls.n	800cb94 <CheckAttachedButtons+0x43c>
					pressCounter[i] = 0;			// Reset debounce counter
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4642      	mov	r2, r8
 800cb90:	6053      	str	r3, [r2, #4]
			if (state == OPEN || state == OFF) {
 800cb92:	e6de      	b.n	800c952 <CheckAttachedButtons+0x1fa>
					state = ON;
 800cb94:	2302      	movs	r3, #2
 800cb96:	9303      	str	r3, [sp, #12]
					++pressCounter[i];			// Advance the debounce counter
 800cb98:	4643      	mov	r3, r8
 800cb9a:	3201      	adds	r2, #1
 800cb9c:	605a      	str	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cb9e:	6873      	ldr	r3, [r6, #4]
 800cba0:	4f08      	ldr	r7, [pc, #32]	; (800cbc4 <CheckAttachedButtons+0x46c>)
 800cba2:	e64e      	b.n	800c842 <CheckAttachedButtons+0xea>
								&& dblCounter[i]
 800cba4:	7978      	ldrb	r0, [r7, #5]
 800cba6:	4290      	cmp	r0, r2
 800cba8:	d800      	bhi.n	800cbac <CheckAttachedButtons+0x454>
 800cbaa:	e66d      	b.n	800c888 <CheckAttachedButtons+0x130>
							clicked = 3;	// Record a possible double click
 800cbac:	2203      	movs	r2, #3
 800cbae:	4650      	mov	r0, sl
 800cbb0:	54c2      	strb	r2, [r0, r3]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	464a      	mov	r2, r9
 800cbb6:	7053      	strb	r3, [r2, #1]
 800cbb8:	e666      	b.n	800c888 <CheckAttachedButtons+0x130>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800cbba:	4643      	mov	r3, r8
 800cbbc:	4f01      	ldr	r7, [pc, #4]	; (800cbc4 <CheckAttachedButtons+0x46c>)
 800cbbe:	685a      	ldr	r2, [r3, #4]
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800cbc0:	6873      	ldr	r3, [r6, #4]
 800cbc2:	e63e      	b.n	800c842 <CheckAttachedButtons+0xea>
 800cbc4:	20000b54 	.word	0x20000b54
 800cbc8:	0000fffe 	.word	0x0000fffe

0800cbcc <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	4b03      	ldr	r3, [pc, #12]	; (800cbe0 <NVIC_SystemReset+0x14>)
 800cbd2:	4a04      	ldr	r2, [pc, #16]	; (800cbe4 <NVIC_SystemReset+0x18>)
 800cbd4:	60da      	str	r2, [r3, #12]
 800cbd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800cbda:	46c0      	nop			; (mov r8, r8)
 800cbdc:	e7fd      	b.n	800cbda <NVIC_SystemReset+0xe>
 800cbde:	46c0      	nop			; (mov r8, r8)
 800cbe0:	e000ed00 	.word	0xe000ed00
 800cbe4:	05fa0004 	.word	0x05fa0004

0800cbe8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800cbe8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800cbea:	f002 fddb 	bl	800f7a4 <HAL_IncTick>
  osSystickHandler();  
 800cbee:	f000 ff7f 	bl	800daf0 <osSystickHandler>

}
 800cbf2:	bd10      	pop	{r4, pc}

0800cbf4 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800cbf4:	b530      	push	{r4, r5, lr}
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800cbf6:	24ff      	movs	r4, #255	; 0xff
 800cbf8:	4d09      	ldr	r5, [pc, #36]	; (800cc20 <HardFault_Handler+0x2c>)
{
 800cbfa:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800cbfc:	23ff      	movs	r3, #255	; 0xff
 800cbfe:	2211      	movs	r2, #17
 800cc00:	7828      	ldrb	r0, [r5, #0]
 800cc02:	4908      	ldr	r1, [pc, #32]	; (800cc24 <HardFault_Handler+0x30>)
 800cc04:	9400      	str	r4, [sp, #0]
 800cc06:	f000 fd29 	bl	800d65c <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <HardFault_Handler+0x34>)
 800cc0c:	220f      	movs	r2, #15
 800cc0e:	6819      	ldr	r1, [r3, #0]
 800cc10:	7828      	ldrb	r0, [r5, #0]
 800cc12:	23ff      	movs	r3, #255	; 0xff
 800cc14:	9400      	str	r4, [sp, #0]
 800cc16:	f000 fd21 	bl	800d65c <writePxMutex>
	NVIC_SystemReset();
 800cc1a:	f7ff ffd7 	bl	800cbcc <NVIC_SystemReset>
 800cc1e:	46c0      	nop			; (mov r8, r8)
 800cc20:	20000c60 	.word	0x20000c60
 800cc24:	0801c1f0 	.word	0x0801c1f0
 800cc28:	200000a4 	.word	0x200000a4

0800cc2c <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800cc2c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800cc2e:	4802      	ldr	r0, [pc, #8]	; (800cc38 <USART1_IRQHandler+0xc>)
 800cc30:	f005 ff58 	bl	8012ae4 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	46c0      	nop			; (mov r8, r8)
 800cc38:	200023b4 	.word	0x200023b4

0800cc3c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800cc3c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800cc3e:	4802      	ldr	r0, [pc, #8]	; (800cc48 <USART2_IRQHandler+0xc>)
 800cc40:	f005 ff50 	bl	8012ae4 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	20002344 	.word	0x20002344

0800cc4c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800cc4c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800cc4e:	4805      	ldr	r0, [pc, #20]	; (800cc64 <USART3_8_IRQHandler+0x18>)
 800cc50:	f005 ff48 	bl	8012ae4 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800cc54:	4804      	ldr	r0, [pc, #16]	; (800cc68 <USART3_8_IRQHandler+0x1c>)
 800cc56:	f005 ff45 	bl	8012ae4 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800cc5a:	4804      	ldr	r0, [pc, #16]	; (800cc6c <USART3_8_IRQHandler+0x20>)
 800cc5c:	f005 ff42 	bl	8012ae4 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800cc60:	bd10      	pop	{r4, pc}
 800cc62:	46c0      	nop			; (mov r8, r8)
 800cc64:	200022d4 	.word	0x200022d4
 800cc68:	20002264 	.word	0x20002264
 800cc6c:	200021f4 	.word	0x200021f4

0800cc70 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cc70:	4b0c      	ldr	r3, [pc, #48]	; (800cca4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
{
 800cc72:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	2310      	movs	r3, #16
 800cc78:	4213      	tst	r3, r2
 800cc7a:	d10b      	bne.n	800cc94 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	; (800cca8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800cc7e:	6811      	ldr	r1, [r2, #0]
 800cc80:	05c9      	lsls	r1, r1, #23
 800cc82:	d403      	bmi.n	800cc8c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800cc84:	6812      	ldr	r2, [r2, #0]
 800cc86:	4213      	tst	r3, r2
 800cc88:	d108      	bne.n	800cc9c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800cc8a:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800cc8c:	2002      	movs	r0, #2
 800cc8e:	f7fa fc01 	bl	8007494 <DMA_IRQHandler>
 800cc92:	e7fa      	b.n	800cc8a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P5);
 800cc94:	2005      	movs	r0, #5
 800cc96:	f7fa fbfd 	bl	8007494 <DMA_IRQHandler>
 800cc9a:	e7f6      	b.n	800cc8a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800cc9c:	4803      	ldr	r0, [pc, #12]	; (800ccac <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800cc9e:	f003 fac7 	bl	8010230 <HAL_DMA_IRQHandler>
}
 800cca2:	e7f2      	b.n	800cc8a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800cca4:	40020400 	.word	0x40020400
 800cca8:	40020000 	.word	0x40020000
 800ccac:	20002640 	.word	0x20002640

0800ccb0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4c>)
{
 800ccb2:	b510      	push	{r4, lr}
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	03d2      	lsls	r2, r2, #15
 800ccb8:	d414      	bmi.n	800cce4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x34>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	02d2      	lsls	r2, r2, #11
 800ccbe:	d40d      	bmi.n	800ccdc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x2c>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800ccc0:	4a0f      	ldr	r2, [pc, #60]	; (800cd00 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x50>)
 800ccc2:	6812      	ldr	r2, [r2, #0]
 800ccc4:	05d2      	lsls	r2, r2, #23
 800ccc6:	d411      	bmi.n	800ccec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3c>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	04d2      	lsls	r2, r2, #19
 800cccc:	d412      	bmi.n	800ccf4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x44>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	01db      	lsls	r3, r3, #7
 800ccd2:	d506      	bpl.n	800cce2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800ccd4:	480b      	ldr	r0, [pc, #44]	; (800cd04 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ccd6:	f003 faab 	bl	8010230 <HAL_DMA_IRQHandler>
	}
}
 800ccda:	e002      	b.n	800cce2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P4);
 800ccdc:	2004      	movs	r0, #4
 800ccde:	f7fa fbd9 	bl	8007494 <DMA_IRQHandler>
}
 800cce2:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P3);
 800cce4:	2003      	movs	r0, #3
 800cce6:	f7fa fbd5 	bl	8007494 <DMA_IRQHandler>
 800ccea:	e7fa      	b.n	800cce2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P6);
 800ccec:	2006      	movs	r0, #6
 800ccee:	f7fa fbd1 	bl	8007494 <DMA_IRQHandler>
 800ccf2:	e7f6      	b.n	800cce2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800ccf4:	4804      	ldr	r0, [pc, #16]	; (800cd08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800ccf6:	f003 fa9b 	bl	8010230 <HAL_DMA_IRQHandler>
 800ccfa:	e7f2      	b.n	800cce2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
 800ccfc:	40020000 	.word	0x40020000
 800cd00:	40020400 	.word	0x40020400
 800cd04:	200026b0 	.word	0x200026b0
 800cd08:	20002678 	.word	0x20002678

0800cd0c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800cd0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800cd0e:	4802      	ldr	r0, [pc, #8]	; (800cd18 <ADC1_COMP_IRQHandler+0xc>)
 800cd10:	f002 ff86 	bl	800fc20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800cd14:	bd10      	pop	{r4, pc}
 800cd16:	46c0      	nop			; (mov r8, r8)
 800cd18:	200028a4 	.word	0x200028a4

0800cd1c <HAL_UART_TxCpltCallback>:
/*-----------------------------------------------------------*/


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cd1c:	2300      	movs	r3, #0
{
 800cd1e:	b510      	push	{r4, lr}
 800cd20:	b082      	sub	sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cd22:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800cd24:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 800cd26:	0004      	movs	r4, r0
	if(huart->hdmatx != NULL)
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800cd2c:	f7fd ff34 	bl	800ab98 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800cd30:	0020      	movs	r0, r4
 800cd32:	f7fd fc6d 	bl	800a610 <GetPort>
 800cd36:	4b04      	ldr	r3, [pc, #16]	; (800cd48 <HAL_UART_TxCpltCallback+0x2c>)
 800cd38:	0080      	lsls	r0, r0, #2
 800cd3a:	58c0      	ldr	r0, [r0, r3]
 800cd3c:	a901      	add	r1, sp, #4
 800cd3e:	f001 fa2d 	bl	800e19c <xQueueGiveFromISR>
}
 800cd42:	b002      	add	sp, #8
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	46c0      	nop			; (mov r8, r8)
 800cd48:	20001f08 	.word	0x20001f08

0800cd4c <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cd4c:	b570      	push	{r4, r5, r6, lr}
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800cd4e:	2369      	movs	r3, #105	; 0x69
 800cd50:	2501      	movs	r5, #1
 800cd52:	54c5      	strb	r5, [r0, r3]
{
 800cd54:	0004      	movs	r4, r0
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800cd56:	f7fd fc5b 	bl	800a610 <GetPort>
	if (portStatus[port] == STREAM) {
 800cd5a:	4b0b      	ldr	r3, [pc, #44]	; (800cd88 <HAL_UART_ErrorCallback+0x3c>)
 800cd5c:	5c1b      	ldrb	r3, [r3, r0]
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d004      	beq.n	800cd6c <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800cd62:	4b0a      	ldr	r3, [pc, #40]	; (800cd8c <HAL_UART_ErrorCallback+0x40>)
 800cd64:	1818      	adds	r0, r3, r0
 800cd66:	3801      	subs	r0, #1
 800cd68:	7005      	strb	r5, [r0, #0]
	}	
}
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800cd6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd6e:	4908      	ldr	r1, [pc, #32]	; (800cd90 <HAL_UART_ErrorCallback+0x44>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3801      	subs	r0, #1
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	0083      	lsls	r3, r0, #2
 800cd78:	585b      	ldr	r3, [r3, r1]
 800cd7a:	0020      	movs	r0, r4
 800cd7c:	6819      	ldr	r1, [r3, #0]
 800cd7e:	b292      	uxth	r2, r2
 800cd80:	3128      	adds	r1, #40	; 0x28
 800cd82:	f005 faf7 	bl	8012374 <HAL_UART_Receive_DMA>
 800cd86:	e7f0      	b.n	800cd6a <HAL_UART_ErrorCallback+0x1e>
 800cd88:	20000c64 	.word	0x20000c64
 800cd8c:	200019c8 	.word	0x200019c8
 800cd90:	2000198c 	.word	0x2000198c

0800cd94 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd96:	46de      	mov	lr, fp
 800cd98:	464e      	mov	r6, r9
 800cd9a:	4645      	mov	r5, r8
 800cd9c:	4657      	mov	r7, sl
 800cd9e:	b5e0      	push	{r5, r6, r7, lr}
 800cda0:	b083      	sub	sp, #12
 800cda2:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800cda4:	f7fd fc34 	bl	800a610 <GetPort>
	uint8_t port_index = port_number - 1;
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cda8:	4d63      	ldr	r5, [pc, #396]	; (800cf38 <HAL_UART_RxCpltCallback+0x1a4>)
	uint8_t port_index = port_number - 1;
 800cdaa:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	4963      	ldr	r1, [pc, #396]	; (800cf3c <HAL_UART_RxCpltCallback+0x1a8>)
 800cdb0:	5cea      	ldrb	r2, [r5, r3]
 800cdb2:	5c0e      	ldrb	r6, [r1, r0]
 800cdb4:	2a0d      	cmp	r2, #13
 800cdb6:	d00b      	beq.n	800cdd0 <HAL_UART_RxCpltCallback+0x3c>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800cdb8:	2e03      	cmp	r6, #3
 800cdba:	d00d      	beq.n	800cdd8 <HAL_UART_RxCpltCallback+0x44>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800cdbc:	2a48      	cmp	r2, #72	; 0x48
 800cdbe:	d100      	bne.n	800cdc2 <HAL_UART_RxCpltCallback+0x2e>
 800cdc0:	e09b      	b.n	800cefa <HAL_UART_RxCpltCallback+0x166>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800cdc2:	2a5a      	cmp	r2, #90	; 0x5a
 800cdc4:	d11b      	bne.n	800cdfe <HAL_UART_RxCpltCallback+0x6a>
 800cdc6:	2e07      	cmp	r6, #7
 800cdc8:	d11b      	bne.n	800ce02 <HAL_UART_RxCpltCallback+0x6e>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800cdca:	2308      	movs	r3, #8
 800cdcc:	540b      	strb	r3, [r1, r0]
 800cdce:	e006      	b.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800cdd0:	2e00      	cmp	r6, #0
 800cdd2:	d03b      	beq.n	800ce4c <HAL_UART_RxCpltCallback+0xb8>
	else if(portStatus[port_number] == CLI)
 800cdd4:	2e03      	cmp	r6, #3
 800cdd6:	d112      	bne.n	800cdfe <HAL_UART_RxCpltCallback+0x6a>
		Read_In_CLI_Task_Flag = 1;
 800cdd8:	4b59      	ldr	r3, [pc, #356]	; (800cf40 <HAL_UART_RxCpltCallback+0x1ac>)
 800cdda:	2201      	movs	r2, #1
 800cddc:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_IT(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800cdde:	0020      	movs	r0, r4
 800cde0:	f7fd fc16 	bl	800a610 <GetPort>
 800cde4:	1e41      	subs	r1, r0, #1
 800cde6:	2201      	movs	r2, #1
 800cde8:	0020      	movs	r0, r4
 800cdea:	1869      	adds	r1, r5, r1
 800cdec:	f005 fa62 	bl	80122b4 <HAL_UART_Receive_IT>
}
 800cdf0:	b003      	add	sp, #12
 800cdf2:	bcf0      	pop	{r4, r5, r6, r7}
 800cdf4:	46bb      	mov	fp, r7
 800cdf6:	46b2      	mov	sl, r6
 800cdf8:	46a9      	mov	r9, r5
 800cdfa:	46a0      	mov	r8, r4
 800cdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800cdfe:	2e07      	cmp	r6, #7
 800ce00:	d078      	beq.n	800cef4 <HAL_UART_RxCpltCallback+0x160>
	else if(portStatus[port_number] == Z_Status)
 800ce02:	2e08      	cmp	r6, #8
 800ce04:	d07f      	beq.n	800cf06 <HAL_UART_RxCpltCallback+0x172>
	else if(portStatus[port_number] == MSG)
 800ce06:	2e01      	cmp	r6, #1
 800ce08:	d1e9      	bne.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
		if(temp_length[port_index] > 1)
 800ce0a:	4e4e      	ldr	r6, [pc, #312]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
 800ce0c:	18f6      	adds	r6, r6, r3
 800ce0e:	46b1      	mov	r9, r6
 800ce10:	7a36      	ldrb	r6, [r6, #8]
 800ce12:	9600      	str	r6, [sp, #0]
 800ce14:	2e01      	cmp	r6, #1
 800ce16:	d935      	bls.n	800ce84 <HAL_UART_RxCpltCallback+0xf0>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ce18:	494a      	ldr	r1, [pc, #296]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
			temp_length[port_index]--;
 800ce1a:	3e01      	subs	r6, #1
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ce1c:	5cc9      	ldrb	r1, [r1, r3]
 800ce1e:	468c      	mov	ip, r1
 800ce20:	4949      	ldr	r1, [pc, #292]	; (800cf48 <HAL_UART_RxCpltCallback+0x1b4>)
 800ce22:	5cc8      	ldrb	r0, [r1, r3]
 800ce24:	00c1      	lsls	r1, r0, #3
 800ce26:	1a09      	subs	r1, r1, r0
 800ce28:	4688      	mov	r8, r1
 800ce2a:	0099      	lsls	r1, r3, #2
 800ce2c:	18c9      	adds	r1, r1, r3
 800ce2e:	00c8      	lsls	r0, r1, #3
 800ce30:	1a41      	subs	r1, r0, r1
 800ce32:	4441      	add	r1, r8
 800ce34:	4845      	ldr	r0, [pc, #276]	; (800cf4c <HAL_UART_RxCpltCallback+0x1b8>)
 800ce36:	00c9      	lsls	r1, r1, #3
 800ce38:	1841      	adds	r1, r0, r1
 800ce3a:	4660      	mov	r0, ip
 800ce3c:	540a      	strb	r2, [r1, r0]
			temp_index[port_index]++;
 800ce3e:	4662      	mov	r2, ip
 800ce40:	4940      	ldr	r1, [pc, #256]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
 800ce42:	3201      	adds	r2, #1
 800ce44:	54ca      	strb	r2, [r1, r3]
			temp_length[port_index]--;
 800ce46:	464b      	mov	r3, r9
 800ce48:	721e      	strb	r6, [r3, #8]
 800ce4a:	e7c8      	b.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
 800ce4c:	000b      	movs	r3, r1
				portStatus[i] = FREE;
 800ce4e:	2700      	movs	r7, #0
 800ce50:	1d8e      	adds	r6, r1, #6
			if(portStatus[i] == CLI)
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	2a03      	cmp	r2, #3
 800ce56:	d100      	bne.n	800ce5a <HAL_UART_RxCpltCallback+0xc6>
				portStatus[i] = FREE;
 800ce58:	701f      	strb	r7, [r3, #0]
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	429e      	cmp	r6, r3
 800ce5e:	d1f8      	bne.n	800ce52 <HAL_UART_RxCpltCallback+0xbe>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800ce60:	2303      	movs	r3, #3
 800ce62:	540b      	strb	r3, [r1, r0]
		PcPort = port_number;
 800ce64:	4b3a      	ldr	r3, [pc, #232]	; (800cf50 <HAL_UART_RxCpltCallback+0x1bc>)
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800ce66:	2202      	movs	r2, #2
		PcPort = port_number;
 800ce68:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800ce6a:	4b3a      	ldr	r3, [pc, #232]	; (800cf54 <HAL_UART_RxCpltCallback+0x1c0>)
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	6818      	ldr	r0, [r3, #0]
 800ce70:	2300      	movs	r3, #0
 800ce72:	f002 f901 	bl	800f078 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800ce76:	4b38      	ldr	r3, [pc, #224]	; (800cf58 <HAL_UART_RxCpltCallback+0x1c4>)
 800ce78:	781a      	ldrb	r2, [r3, #0]
 800ce7a:	2a01      	cmp	r2, #1
 800ce7c:	d1ad      	bne.n	800cdda <HAL_UART_RxCpltCallback+0x46>
 800ce7e:	4930      	ldr	r1, [pc, #192]	; (800cf40 <HAL_UART_RxCpltCallback+0x1ac>)
 800ce80:	700a      	strb	r2, [r1, #0]
		Activate_CLI_For_First_Time_Flag = 1;
 800ce82:	e7aa      	b.n	800cdda <HAL_UART_RxCpltCallback+0x46>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800ce84:	4e30      	ldr	r6, [pc, #192]	; (800cf48 <HAL_UART_RxCpltCallback+0x1b4>)
 800ce86:	5cf6      	ldrb	r6, [r6, r3]
 800ce88:	46b4      	mov	ip, r6
 800ce8a:	4e2e      	ldr	r6, [pc, #184]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
 800ce8c:	4667      	mov	r7, ip
 800ce8e:	5cf6      	ldrb	r6, [r6, r3]
 800ce90:	46b2      	mov	sl, r6
 800ce92:	4666      	mov	r6, ip
 800ce94:	00f6      	lsls	r6, r6, #3
 800ce96:	1bf6      	subs	r6, r6, r7
 800ce98:	009f      	lsls	r7, r3, #2
 800ce9a:	46bb      	mov	fp, r7
 800ce9c:	449b      	add	fp, r3
 800ce9e:	465f      	mov	r7, fp
 800cea0:	9601      	str	r6, [sp, #4]
 800cea2:	465e      	mov	r6, fp
 800cea4:	00ff      	lsls	r7, r7, #3
 800cea6:	1bbf      	subs	r7, r7, r6
 800cea8:	9e01      	ldr	r6, [sp, #4]
 800ceaa:	46b8      	mov	r8, r7
 800ceac:	46b3      	mov	fp, r6
 800ceae:	44d8      	add	r8, fp
 800ceb0:	4646      	mov	r6, r8
 800ceb2:	00f6      	lsls	r6, r6, #3
 800ceb4:	46b0      	mov	r8, r6
 800ceb6:	4e25      	ldr	r6, [pc, #148]	; (800cf4c <HAL_UART_RxCpltCallback+0x1b8>)
 800ceb8:	4657      	mov	r7, sl
 800ceba:	46b3      	mov	fp, r6
 800cebc:	44d8      	add	r8, fp
 800cebe:	4646      	mov	r6, r8
 800cec0:	55f2      	strb	r2, [r6, r7]
			temp_index[port_index]++;
 800cec2:	4652      	mov	r2, sl
 800cec4:	4e1f      	ldr	r6, [pc, #124]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
 800cec6:	3201      	adds	r2, #1
 800cec8:	54f2      	strb	r2, [r6, r3]
			temp_length[port_index]--;
 800ceca:	464a      	mov	r2, r9
 800cecc:	9e00      	ldr	r6, [sp, #0]
 800cece:	3e01      	subs	r6, #1
 800ced0:	7216      	strb	r6, [r2, #8]
			MSG_Buffer_Index_End[port_index]++;
 800ced2:	4662      	mov	r2, ip
 800ced4:	3201      	adds	r2, #1
 800ced6:	b2d2      	uxtb	r2, r2
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800ced8:	2a05      	cmp	r2, #5
 800ceda:	d100      	bne.n	800cede <HAL_UART_RxCpltCallback+0x14a>
 800cedc:	2200      	movs	r2, #0
 800cede:	4e1a      	ldr	r6, [pc, #104]	; (800cf48 <HAL_UART_RxCpltCallback+0x1b4>)
 800cee0:	54f2      	strb	r2, [r6, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800cee2:	4a1e      	ldr	r2, [pc, #120]	; (800cf5c <HAL_UART_RxCpltCallback+0x1c8>)
 800cee4:	4e1e      	ldr	r6, [pc, #120]	; (800cf60 <HAL_UART_RxCpltCallback+0x1cc>)
 800cee6:	7813      	ldrb	r3, [r2, #0]
 800cee8:	54f0      	strb	r0, [r6, r3]
			Process_Message_Buffer_Index_End++;
 800ceea:	3301      	adds	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800ceee:	2b05      	cmp	r3, #5
 800cef0:	d01f      	beq.n	800cf32 <HAL_UART_RxCpltCallback+0x19e>
 800cef2:	7013      	strb	r3, [r2, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800cef4:	2300      	movs	r3, #0
 800cef6:	540b      	strb	r3, [r1, r0]
 800cef8:	e771      	b.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	d000      	beq.n	800cf00 <HAL_UART_RxCpltCallback+0x16c>
 800cefe:	e77e      	b.n	800cdfe <HAL_UART_RxCpltCallback+0x6a>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800cf00:	2307      	movs	r3, #7
 800cf02:	540b      	strb	r3, [r1, r0]
 800cf04:	e76b      	b.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
		portStatus[port_number] =MSG; // Receive length byte.
 800cf06:	3e07      	subs	r6, #7
 800cf08:	540e      	strb	r6, [r1, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800cf0a:	490f      	ldr	r1, [pc, #60]	; (800cf48 <HAL_UART_RxCpltCallback+0x1b4>)
 800cf0c:	5ccf      	ldrb	r7, [r1, r3]
 800cf0e:	00f9      	lsls	r1, r7, #3
 800cf10:	1bcf      	subs	r7, r1, r7
 800cf12:	0099      	lsls	r1, r3, #2
 800cf14:	18c9      	adds	r1, r1, r3
 800cf16:	00c8      	lsls	r0, r1, #3
 800cf18:	1a41      	subs	r1, r0, r1
 800cf1a:	19c9      	adds	r1, r1, r7
 800cf1c:	480b      	ldr	r0, [pc, #44]	; (800cf4c <HAL_UART_RxCpltCallback+0x1b8>)
 800cf1e:	00c9      	lsls	r1, r1, #3
 800cf20:	1841      	adds	r1, r0, r1
		temp_index[port_index] = 3;
 800cf22:	2003      	movs	r0, #3
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800cf24:	708a      	strb	r2, [r1, #2]
		temp_index[port_index] = 3;
 800cf26:	4907      	ldr	r1, [pc, #28]	; (800cf44 <HAL_UART_RxCpltCallback+0x1b0>)
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800cf28:	3201      	adds	r2, #1
		temp_index[port_index] = 3;
 800cf2a:	54c8      	strb	r0, [r1, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800cf2c:	18cb      	adds	r3, r1, r3
 800cf2e:	721a      	strb	r2, [r3, #8]
 800cf30:	e755      	b.n	800cdde <HAL_UART_RxCpltCallback+0x4a>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	7013      	strb	r3, [r2, #0]
 800cf36:	e7dd      	b.n	800cef4 <HAL_UART_RxCpltCallback+0x160>
 800cf38:	20001dd0 	.word	0x20001dd0
 800cf3c:	20000c64 	.word	0x20000c64
 800cf40:	200017a9 	.word	0x200017a9
 800cf44:	20002928 	.word	0x20002928
 800cf48:	2000179c 	.word	0x2000179c
 800cf4c:	20001224 	.word	0x20001224
 800cf50:	20000c60 	.word	0x20000c60
 800cf54:	20001ed4 	.word	0x20001ed4
 800cf58:	200017aa 	.word	0x200017aa
 800cf5c:	2000121a 	.word	0x2000121a
 800cf60:	2000121c 	.word	0x2000121c

0800cf64 <vApplicationStackOverflowHook>:

/*-----------------------------------------------------------*/
/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800cf64:	b530      	push	{r4, r5, lr}
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800cf66:	24ff      	movs	r4, #255	; 0xff
 800cf68:	4d09      	ldr	r5, [pc, #36]	; (800cf90 <vApplicationStackOverflowHook+0x2c>)
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800cf6a:	b083      	sub	sp, #12
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800cf6c:	23ff      	movs	r3, #255	; 0xff
 800cf6e:	2210      	movs	r2, #16
 800cf70:	7828      	ldrb	r0, [r5, #0]
 800cf72:	4908      	ldr	r1, [pc, #32]	; (800cf94 <vApplicationStackOverflowHook+0x30>)
 800cf74:	9400      	str	r4, [sp, #0]
 800cf76:	f000 fb71 	bl	800d65c <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cf7a:	4b07      	ldr	r3, [pc, #28]	; (800cf98 <vApplicationStackOverflowHook+0x34>)
 800cf7c:	220f      	movs	r2, #15
 800cf7e:	6819      	ldr	r1, [r3, #0]
 800cf80:	7828      	ldrb	r0, [r5, #0]
 800cf82:	23ff      	movs	r3, #255	; 0xff
 800cf84:	9400      	str	r4, [sp, #0]
 800cf86:	f000 fb69 	bl	800d65c <writePxMutex>
	NVIC_SystemReset();
 800cf8a:	f7ff fe1f 	bl	800cbcc <NVIC_SystemReset>
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	20000c60 	.word	0x20000c60
 800cf94:	0801c204 	.word	0x0801c204
 800cf98:	200000a4 	.word	0x200000a4

0800cf9c <vApplicationMallocFailedHook>:
	 demo application.  If heap_1.c or heap_2.c are used, then the size of the
	 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	 to query the size of free heap space that remains (although it does not
	 provide information on how the remaining heap might be fragmented). */
	void vApplicationMallocFailedHook(void){
 800cf9c:	b530      	push	{r4, r5, lr}
		uint8_t* error_message = "Heap size exceeded\r\n";
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800cf9e:	24ff      	movs	r4, #255	; 0xff
 800cfa0:	4d09      	ldr	r5, [pc, #36]	; (800cfc8 <vApplicationMallocFailedHook+0x2c>)
	void vApplicationMallocFailedHook(void){
 800cfa2:	b083      	sub	sp, #12
		writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800cfa4:	23ff      	movs	r3, #255	; 0xff
 800cfa6:	2214      	movs	r2, #20
 800cfa8:	7828      	ldrb	r0, [r5, #0]
 800cfaa:	4908      	ldr	r1, [pc, #32]	; (800cfcc <vApplicationMallocFailedHook+0x30>)
 800cfac:	9400      	str	r4, [sp, #0]
 800cfae:	f000 fb55 	bl	800d65c <writePxMutex>
		writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800cfb2:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <vApplicationMallocFailedHook+0x34>)
 800cfb4:	220f      	movs	r2, #15
 800cfb6:	6819      	ldr	r1, [r3, #0]
 800cfb8:	7828      	ldrb	r0, [r5, #0]
 800cfba:	23ff      	movs	r3, #255	; 0xff
 800cfbc:	9400      	str	r4, [sp, #0]
 800cfbe:	f000 fb4d 	bl	800d65c <writePxMutex>
		NVIC_SystemReset();
 800cfc2:	f7ff fe03 	bl	800cbcc <NVIC_SystemReset>
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	20000c60 	.word	0x20000c60
 800cfcc:	0801c218 	.word	0x0801c218
 800cfd0:	200000a4 	.word	0x200000a4

0800cfd4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800cfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfd6:	46de      	mov	lr, fp
 800cfd8:	4657      	mov	r7, sl
 800cfda:	464e      	mov	r6, r9
 800cfdc:	4645      	mov	r5, r8
 800cfde:	b5e0      	push	{r5, r6, r7, lr}
 800cfe0:	b08d      	sub	sp, #52	; 0x34
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cfe2:	ae04      	add	r6, sp, #16
 800cfe4:	0032      	movs	r2, r6
 800cfe6:	4b35      	ldr	r3, [pc, #212]	; (800d0bc <RTC_CalendarConfig+0xe8>)
{
 800cfe8:	2700      	movs	r7, #0
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cfea:	cb13      	ldmia	r3!, {r0, r1, r4}
 800cfec:	c213      	stmia	r2!, {r0, r1, r4}
 800cfee:	ab01      	add	r3, sp, #4
 800cff0:	4698      	mov	r8, r3
 800cff2:	4642      	mov	r2, r8
 800cff4:	4b32      	ldr	r3, [pc, #200]	; (800d0c0 <RTC_CalendarConfig+0xec>)
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
  *(comDate + 6) = 0;
  day = atoi(comDate + 4);
  *(comDate + 3) = 0;
 800cff6:	2401      	movs	r4, #1
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cff8:	cb03      	ldmia	r3!, {r0, r1}
 800cffa:	c203      	stmia	r2!, {r0, r1}
  year = atoi(comDate + 9);		// only last 2 digits
 800cffc:	2019      	movs	r0, #25
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800cffe:	781b      	ldrb	r3, [r3, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d000:	4468      	add	r0, sp
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d002:	7013      	strb	r3, [r2, #0]
  year = atoi(comDate + 9);		// only last 2 digits
 800d004:	f005 fdfd 	bl	8012c02 <atoi>
  *(comDate + 6) = 0;
 800d008:	71b7      	strb	r7, [r6, #6]
  year = atoi(comDate + 9);		// only last 2 digits
 800d00a:	b2c3      	uxtb	r3, r0
  day = atoi(comDate + 4);
 800d00c:	a805      	add	r0, sp, #20
  year = atoi(comDate + 9);		// only last 2 digits
 800d00e:	469a      	mov	sl, r3
  day = atoi(comDate + 4);
 800d010:	f005 fdf7 	bl	8012c02 <atoi>
 800d014:	b2c3      	uxtb	r3, r0
 800d016:	4699      	mov	r9, r3
  *(comDate + 3) = 0;
 800d018:	4d2a      	ldr	r5, [pc, #168]	; (800d0c4 <RTC_CalendarConfig+0xf0>)
 800d01a:	70f7      	strb	r7, [r6, #3]
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d01c:	0030      	movs	r0, r6
 800d01e:	6829      	ldr	r1, [r5, #0]
 800d020:	f7f3 f870 	bl	8000104 <strcmp>
 800d024:	2800      	cmp	r0, #0
 800d026:	d100      	bne.n	800d02a <RTC_CalendarConfig+0x56>
			month = i + 1;
 800d028:	0027      	movs	r7, r4
  for (uint8_t i = 0; i < 12; i++)
 800d02a:	3401      	adds	r4, #1
 800d02c:	b2e4      	uxtb	r4, r4
 800d02e:	3504      	adds	r5, #4
 800d030:	2c0d      	cmp	r4, #13
 800d032:	d1f3      	bne.n	800d01c <RTC_CalendarConfig+0x48>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d034:	200a      	movs	r0, #10
 800d036:	4468      	add	r0, sp
 800d038:	f005 fde3 	bl	8012c02 <atoi>
	*(comDate + 5) = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	7173      	strb	r3, [r6, #5]
 800d040:	469b      	mov	fp, r3
	minutes = atoi(comTime + 3);
 800d042:	466b      	mov	r3, sp
	seconds = atoi(comTime + 6);
 800d044:	0004      	movs	r4, r0
	minutes = atoi(comTime + 3);
 800d046:	1dd8      	adds	r0, r3, #7
 800d048:	f005 fddb 	bl	8012c02 <atoi>
	*(comDate + 2) = 0;
 800d04c:	465b      	mov	r3, fp
	minutes = atoi(comTime + 3);
 800d04e:	0005      	movs	r5, r0
	*(comDate + 2) = 0;
 800d050:	70b3      	strb	r3, [r6, #2]
	hours = atoi(comTime);
 800d052:	4640      	mov	r0, r8
 800d054:	f005 fdd5 	bl	8012c02 <atoi>
	
  /* Set Date */
  sdatestructure.Year = year;
 800d058:	466b      	mov	r3, sp
 800d05a:	4652      	mov	r2, sl
 800d05c:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month = month;
  sdatestructure.Date = day;
 800d05e:	464a      	mov	r2, r9
  sdatestructure.Month = month;
 800d060:	705f      	strb	r7, [r3, #1]
  sdatestructure.Date = day;
 800d062:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d064:	2301      	movs	r3, #1
 800d066:	466a      	mov	r2, sp
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d068:	4f17      	ldr	r7, [pc, #92]	; (800d0c8 <RTC_CalendarConfig+0xf4>)
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d06a:	7013      	strb	r3, [r2, #0]
	hours = atoi(comTime);
 800d06c:	0006      	movs	r6, r0
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d06e:	2200      	movs	r2, #0
 800d070:	4669      	mov	r1, sp
 800d072:	0038      	movs	r0, r7
 800d074:	f004 ff4c 	bl	8011f10 <HAL_RTC_SetDate>
 800d078:	1e03      	subs	r3, r0, #0
 800d07a:	d115      	bne.n	800d0a8 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d07c:	a907      	add	r1, sp, #28
  stimestructure.Minutes = minutes;
  stimestructure.Seconds = seconds;
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d07e:	7208      	strb	r0, [r1, #8]
 800d080:	2018      	movs	r0, #24
 800d082:	4a12      	ldr	r2, [pc, #72]	; (800d0cc <RTC_CalendarConfig+0xf8>)
  stimestructure.Seconds = seconds;
 800d084:	708c      	strb	r4, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d086:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d088:	2200      	movs	r2, #0
 800d08a:	0038      	movs	r0, r7
  stimestructure.Hours = hours;
 800d08c:	700e      	strb	r6, [r1, #0]
  stimestructure.Minutes = minutes;
 800d08e:	704d      	strb	r5, [r1, #1]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d090:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d092:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d094:	f004 fe36 	bl	8011d04 <HAL_RTC_SetTime>
 800d098:	1e04      	subs	r4, r0, #0
 800d09a:	d105      	bne.n	800d0a8 <RTC_CalendarConfig+0xd4>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d09c:	2101      	movs	r1, #1
 800d09e:	0038      	movs	r0, r7
 800d0a0:	4a0b      	ldr	r2, [pc, #44]	; (800d0d0 <RTC_CalendarConfig+0xfc>)
 800d0a2:	f005 f81b 	bl	80120dc <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d0a6:	e000      	b.n	800d0aa <RTC_CalendarConfig+0xd6>
		return BOS_ERROR;
 800d0a8:	24ff      	movs	r4, #255	; 0xff
}
 800d0aa:	0020      	movs	r0, r4
 800d0ac:	b00d      	add	sp, #52	; 0x34
 800d0ae:	bcf0      	pop	{r4, r5, r6, r7}
 800d0b0:	46bb      	mov	fp, r7
 800d0b2:	46b2      	mov	sl, r6
 800d0b4:	46a9      	mov	r9, r5
 800d0b6:	46a0      	mov	r8, r4
 800d0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ba:	46c0      	nop			; (mov r8, r8)
 800d0bc:	08019ae4 	.word	0x08019ae4
 800d0c0:	08019b08 	.word	0x08019b08
 800d0c4:	20000064 	.word	0x20000064
 800d0c8:	20002938 	.word	0x20002938
 800d0cc:	20000b54 	.word	0x20000b54
 800d0d0:	000032f2 	.word	0x000032f2

0800d0d4 <RTC_Init>:
  __HAL_RCC_RTC_ENABLE();
 800d0d4:	2380      	movs	r3, #128	; 0x80
{
 800d0d6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_RTC_ENABLE();
 800d0d8:	4e1a      	ldr	r6, [pc, #104]	; (800d144 <RTC_Init+0x70>)
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	6a32      	ldr	r2, [r6, #32]
	RtcHandle.Instance = RTC; 
 800d0de:	4c1a      	ldr	r4, [pc, #104]	; (800d148 <RTC_Init+0x74>)
  __HAL_RCC_RTC_ENABLE();
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	6233      	str	r3, [r6, #32]
  RtcHandle.Init.AsynchPrediv = 124;
 800d0e4:	227c      	movs	r2, #124	; 0x7c
	RtcHandle.Instance = RTC; 
 800d0e6:	4b19      	ldr	r3, [pc, #100]	; (800d14c <RTC_Init+0x78>)
  RtcHandle.Init.AsynchPrediv = 124;
 800d0e8:	60a2      	str	r2, [r4, #8]
	RtcHandle.Instance = RTC; 
 800d0ea:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d0ec:	2300      	movs	r3, #0
  RtcHandle.Init.SynchPrediv = 1999;
 800d0ee:	4a18      	ldr	r2, [pc, #96]	; (800d150 <RTC_Init+0x7c>)
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d0f0:	0020      	movs	r0, r4
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d0f2:	6063      	str	r3, [r4, #4]
  RtcHandle.Init.SynchPrediv = 1999;
 800d0f4:	60e2      	str	r2, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d0f6:	6123      	str	r3, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d0f8:	6163      	str	r3, [r4, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d0fa:	61a3      	str	r3, [r4, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d0fc:	f004 fdaa 	bl	8011c54 <HAL_RTC_Init>
 800d100:	1e05      	subs	r5, r0, #0
 800d102:	d11d      	bne.n	800d140 <RTC_Init+0x6c>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d104:	2101      	movs	r1, #1
 800d106:	0020      	movs	r0, r4
 800d108:	f004 ffee 	bl	80120e8 <HAL_RTCEx_BKUPRead>
 800d10c:	4b11      	ldr	r3, [pc, #68]	; (800d154 <RTC_Init+0x80>)
 800d10e:	4298      	cmp	r0, r3
 800d110:	d10c      	bne.n	800d12c <RTC_Init+0x58>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d112:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	d501      	bpl.n	800d11c <RTC_Init+0x48>
			bootStatus = POWER_ON_BOOT;
 800d118:	2320      	movs	r3, #32
 800d11a:	54e5      	strb	r5, [r4, r3]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <RTC_Init+0x70>)
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	015b      	lsls	r3, r3, #5
 800d122:	d505      	bpl.n	800d130 <RTC_Init+0x5c>
			bootStatus = RESET_BOOT;
 800d124:	2320      	movs	r3, #32
 800d126:	2201      	movs	r2, #1
 800d128:	54e2      	strb	r2, [r4, r3]
 800d12a:	e001      	b.n	800d130 <RTC_Init+0x5c>
    RTC_CalendarConfig();
 800d12c:	f7ff ff52 	bl	800cfd4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d130:	2380      	movs	r3, #128	; 0x80
 800d132:	4a04      	ldr	r2, [pc, #16]	; (800d144 <RTC_Init+0x70>)
 800d134:	045b      	lsls	r3, r3, #17
 800d136:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d138:	430b      	orrs	r3, r1
 800d13a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d13c:	0028      	movs	r0, r5
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d140:	25ff      	movs	r5, #255	; 0xff
 800d142:	e7fb      	b.n	800d13c <RTC_Init+0x68>
 800d144:	40021000 	.word	0x40021000
 800d148:	20002938 	.word	0x20002938
 800d14c:	40002800 	.word	0x40002800
 800d150:	000007cf 	.word	0x000007cf
 800d154:	000032f2 	.word	0x000032f2

0800d158 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15a:	46c6      	mov	lr, r8
 800d15c:	b500      	push	{lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	ad0f      	add	r5, sp, #60	; 0x3c
 800d162:	782e      	ldrb	r6, [r5, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d164:	466d      	mov	r5, sp
{
 800d166:	ac0c      	add	r4, sp, #48	; 0x30
  sdatestructure.Year = year-2000;
 800d168:	3230      	adds	r2, #48	; 0x30
{
 800d16a:	7827      	ldrb	r7, [r4, #0]
 800d16c:	ac0d      	add	r4, sp, #52	; 0x34
 800d16e:	7824      	ldrb	r4, [r4, #0]
  sdatestructure.Year = year-2000;
 800d170:	70ea      	strb	r2, [r5, #3]
  sdatestructure.Month = month;
 800d172:	7068      	strb	r0, [r5, #1]
  sdatestructure.Date = day;
 800d174:	70a9      	strb	r1, [r5, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d176:	702b      	strb	r3, [r5, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d178:	4d23      	ldr	r5, [pc, #140]	; (800d208 <BOS_CalendarConfig+0xb0>)
{
 800d17a:	46a0      	mov	r8, r4
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d17c:	2200      	movs	r2, #0
{
 800d17e:	ac0e      	add	r4, sp, #56	; 0x38
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d180:	4669      	mov	r1, sp
 800d182:	0028      	movs	r0, r5
{
 800d184:	7824      	ldrb	r4, [r4, #0]
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d186:	f004 fec3 	bl	8011f10 <HAL_RTC_SetDate>
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d134      	bne.n	800d1f8 <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
  stimestructure.Minutes = minutes;
 800d18e:	4643      	mov	r3, r8
  stimestructure.Hours = hours;
 800d190:	a901      	add	r1, sp, #4
  stimestructure.Seconds = seconds; 
 800d192:	708f      	strb	r7, [r1, #2]
  stimestructure.Hours = hours;
 800d194:	700c      	strb	r4, [r1, #0]
//	else if (daylightsaving == DAYLIGHT_ADD1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H;
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
 800d196:	4f1d      	ldr	r7, [pc, #116]	; (800d20c <BOS_CalendarConfig+0xb4>)
  stimestructure.Minutes = minutes;
 800d198:	704b      	strb	r3, [r1, #1]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d19a:	6108      	str	r0, [r1, #16]
	if (hours > 12)	BOS.hourformat = 24;
 800d19c:	2c0c      	cmp	r4, #12
 800d19e:	d81d      	bhi.n	800d1dc <BOS_CalendarConfig+0x84>
	
	if (AMPM == RTC_AM) {
 800d1a0:	2e01      	cmp	r6, #1
 800d1a2:	d01f      	beq.n	800d1e4 <BOS_CalendarConfig+0x8c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d1a4:	2e02      	cmp	r6, #2
 800d1a6:	d029      	beq.n	800d1fc <BOS_CalendarConfig+0xa4>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d1a8:	2318      	movs	r3, #24
 800d1aa:	737b      	strb	r3, [r7, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	0028      	movs	r0, r5
 800d1b0:	f004 fda8 	bl	8011d04 <HAL_RTC_SetTime>
 800d1b4:	1e04      	subs	r4, r0, #0
 800d1b6:	d11f      	bne.n	800d1f8 <BOS_CalendarConfig+0xa0>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d1b8:	208d      	movs	r0, #141	; 0x8d
 800d1ba:	7b7b      	ldrb	r3, [r7, #13]
 800d1bc:	7939      	ldrb	r1, [r7, #4]
 800d1be:	021b      	lsls	r3, r3, #8
 800d1c0:	4319      	orrs	r1, r3
 800d1c2:	0040      	lsls	r0, r0, #1
 800d1c4:	f7fe f9f6 	bl	800b5b4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	0028      	movs	r0, r5
 800d1cc:	4a10      	ldr	r2, [pc, #64]	; (800d210 <BOS_CalendarConfig+0xb8>)
 800d1ce:	f004 ff85 	bl	80120dc <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d1d2:	0020      	movs	r0, r4
 800d1d4:	b006      	add	sp, #24
 800d1d6:	bc80      	pop	{r7}
 800d1d8:	46b8      	mov	r8, r7
 800d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hours > 12)	BOS.hourformat = 24;
 800d1dc:	2318      	movs	r3, #24
 800d1de:	737b      	strb	r3, [r7, #13]
	if (AMPM == RTC_AM) {
 800d1e0:	2e01      	cmp	r6, #1
 800d1e2:	d1df      	bne.n	800d1a4 <BOS_CalendarConfig+0x4c>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d1e4:	2300      	movs	r3, #0
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d1e6:	2200      	movs	r2, #0
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d1e8:	720b      	strb	r3, [r1, #8]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d1ea:	0028      	movs	r0, r5
		BOS.hourformat = 12;
 800d1ec:	330c      	adds	r3, #12
 800d1ee:	737b      	strb	r3, [r7, #13]
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d1f0:	f004 fd88 	bl	8011d04 <HAL_RTC_SetTime>
 800d1f4:	1e04      	subs	r4, r0, #0
 800d1f6:	d0df      	beq.n	800d1b8 <BOS_CalendarConfig+0x60>
		return BOS_ERROR;
 800d1f8:	24ff      	movs	r4, #255	; 0xff
 800d1fa:	e7ea      	b.n	800d1d2 <BOS_CalendarConfig+0x7a>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d1fc:	2340      	movs	r3, #64	; 0x40
 800d1fe:	720b      	strb	r3, [r1, #8]
		BOS.hourformat = 12;
 800d200:	3b34      	subs	r3, #52	; 0x34
 800d202:	737b      	strb	r3, [r7, #13]
 800d204:	e7d2      	b.n	800d1ac <BOS_CalendarConfig+0x54>
 800d206:	46c0      	nop			; (mov r8, r8)
 800d208:	20002938 	.word	0x20002938
 800d20c:	20000b54 	.word	0x20000b54
 800d210:	000032f2 	.word	0x000032f2

0800d214 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d214:	b530      	push	{r4, r5, lr}
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d216:	4d16      	ldr	r5, [pc, #88]	; (800d270 <GetTimeDate+0x5c>)
{
 800d218:	b087      	sub	sp, #28
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d21a:	ac01      	add	r4, sp, #4
 800d21c:	0021      	movs	r1, r4
 800d21e:	2200      	movs	r2, #0
 800d220:	0028      	movs	r0, r5
 800d222:	f004 fe45 	bl	8011eb0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d226:	4669      	mov	r1, sp
 800d228:	2200      	movs	r2, #0
 800d22a:	0028      	movs	r0, r5
 800d22c:	f004 ff28 	bl	8012080 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d230:	7a22      	ldrb	r2, [r4, #8]
 800d232:	4b10      	ldr	r3, [pc, #64]	; (800d274 <GetTimeDate+0x60>)
 800d234:	09d2      	lsrs	r2, r2, #7
 800d236:	3201      	adds	r2, #1
 800d238:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d23a:	9a02      	ldr	r2, [sp, #8]
	BOS.time.minutes = stimestructureget.Minutes;
	BOS.time.hours = stimestructureget.Hours;
	BOS.date.day = sdatestructureget.Date;
	BOS.date.month = sdatestructureget.Month;
	BOS.date.weekday = sdatestructureget.WeekDay;
	BOS.date.year = sdatestructureget.Year + 2000;
 800d23c:	21fa      	movs	r1, #250	; 0xfa
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d23e:	0852      	lsrs	r2, r2, #1
 800d240:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d242:	78a2      	ldrb	r2, [r4, #2]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d244:	00c9      	lsls	r1, r1, #3
	BOS.time.seconds = stimestructureget.Seconds;
 800d246:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d248:	7862      	ldrb	r2, [r4, #1]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d24a:	468c      	mov	ip, r1
	BOS.time.minutes = stimestructureget.Minutes;
 800d24c:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d24e:	7822      	ldrb	r2, [r4, #0]
 800d250:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d252:	466a      	mov	r2, sp
 800d254:	7892      	ldrb	r2, [r2, #2]
 800d256:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d258:	466a      	mov	r2, sp
 800d25a:	7852      	ldrb	r2, [r2, #1]
 800d25c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d25e:	466a      	mov	r2, sp
 800d260:	7812      	ldrb	r2, [r2, #0]
 800d262:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d264:	466a      	mov	r2, sp
 800d266:	78d2      	ldrb	r2, [r2, #3]
 800d268:	4462      	add	r2, ip
 800d26a:	831a      	strh	r2, [r3, #24]
}
 800d26c:	b007      	add	sp, #28
 800d26e:	bd30      	pop	{r4, r5, pc}
 800d270:	20002938 	.word	0x20002938
 800d274:	20000b54 	.word	0x20000b54

0800d278 <TIM_USEC_Init>:
void TIM_USEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d278:	2080      	movs	r0, #128	; 0x80
 800d27a:	4a13      	ldr	r2, [pc, #76]	; (800d2c8 <TIM_USEC_Init+0x50>)
{
 800d27c:	b530      	push	{r4, r5, lr}
	__TIM14_CLK_ENABLE();
 800d27e:	69d1      	ldr	r1, [r2, #28]
 800d280:	0040      	lsls	r0, r0, #1
 800d282:	4301      	orrs	r1, r0
 800d284:	61d1      	str	r1, [r2, #28]
 800d286:	69d3      	ldr	r3, [r2, #28]
{
 800d288:	b085      	sub	sp, #20
	__TIM14_CLK_ENABLE();
 800d28a:	4003      	ands	r3, r0
 800d28c:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d28e:	4c0f      	ldr	r4, [pc, #60]	; (800d2cc <TIM_USEC_Init+0x54>)
	__TIM14_CLK_ENABLE();
 800d290:	9b01      	ldr	r3, [sp, #4]
  htim14.Instance = TIM14;
 800d292:	4b0f      	ldr	r3, [pc, #60]	; (800d2d0 <TIM_USEC_Init+0x58>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d294:	2500      	movs	r5, #0
  htim14.Instance = TIM14;
 800d296:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d298:	f004 fc2e 	bl	8011af8 <HAL_RCC_GetPCLK1Freq>
 800d29c:	490d      	ldr	r1, [pc, #52]	; (800d2d4 <TIM_USEC_Init+0x5c>)
 800d29e:	f7f2 ff57 	bl	8000150 <__udivsi3>
  htim14.Init.Period = 0xFFFF;
 800d2a2:	4b0d      	ldr	r3, [pc, #52]	; (800d2d8 <TIM_USEC_Init+0x60>)
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d2a4:	6060      	str	r0, [r4, #4]
  HAL_TIM_Base_Init(&htim14);
 800d2a6:	0020      	movs	r0, r4
  htim14.Init.Period = 0xFFFF;
 800d2a8:	60e3      	str	r3, [r4, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2aa:	60a5      	str	r5, [r4, #8]
  HAL_TIM_Base_Init(&htim14);
 800d2ac:	f004 ff76 	bl	801219c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d2b0:	a902      	add	r1, sp, #8
 800d2b2:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2b4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2b6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d2b8:	f004 ff8a 	bl	80121d0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d2bc:	0020      	movs	r0, r4
 800d2be:	f004 ff1b 	bl	80120f8 <HAL_TIM_Base_Start>
}
 800d2c2:	b005      	add	sp, #20
 800d2c4:	bd30      	pop	{r4, r5, pc}
 800d2c6:	46c0      	nop			; (mov r8, r8)
 800d2c8:	40021000 	.word	0x40021000
 800d2cc:	2000295c 	.word	0x2000295c
 800d2d0:	40002000 	.word	0x40002000
 800d2d4:	000f4240 	.word	0x000f4240
 800d2d8:	0000ffff 	.word	0x0000ffff

0800d2dc <TIM_MSEC_Init>:
void TIM_MSEC_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d2dc:	2080      	movs	r0, #128	; 0x80
 800d2de:	4a14      	ldr	r2, [pc, #80]	; (800d330 <TIM_MSEC_Init+0x54>)
{
 800d2e0:	b530      	push	{r4, r5, lr}
	__TIM15_CLK_ENABLE();
 800d2e2:	6991      	ldr	r1, [r2, #24]
 800d2e4:	0240      	lsls	r0, r0, #9
 800d2e6:	4301      	orrs	r1, r0
 800d2e8:	6191      	str	r1, [r2, #24]
 800d2ea:	6993      	ldr	r3, [r2, #24]
{
 800d2ec:	b085      	sub	sp, #20
	__TIM15_CLK_ENABLE();
 800d2ee:	4003      	ands	r3, r0
 800d2f0:	9301      	str	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d2f2:	4c10      	ldr	r4, [pc, #64]	; (800d334 <TIM_MSEC_Init+0x58>)
	__TIM15_CLK_ENABLE();
 800d2f4:	9b01      	ldr	r3, [sp, #4]
  htim15.Instance = TIM15;
 800d2f6:	4b10      	ldr	r3, [pc, #64]	; (800d338 <TIM_MSEC_Init+0x5c>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d2f8:	2500      	movs	r5, #0
  htim15.Instance = TIM15;
 800d2fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d2fc:	f004 fbfc 	bl	8011af8 <HAL_RCC_GetPCLK1Freq>
 800d300:	21fa      	movs	r1, #250	; 0xfa
 800d302:	0089      	lsls	r1, r1, #2
 800d304:	f7f2 ff24 	bl	8000150 <__udivsi3>
  htim15.Init.Period = 0xFFFF;
 800d308:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <TIM_MSEC_Init+0x60>)
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d30a:	6420      	str	r0, [r4, #64]	; 0x40
  htim15.Init.Period = 0xFFFF;
 800d30c:	64a3      	str	r3, [r4, #72]	; 0x48
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d30e:	6465      	str	r5, [r4, #68]	; 0x44
  HAL_TIM_Base_Init(&htim15);
 800d310:	343c      	adds	r4, #60	; 0x3c
 800d312:	0020      	movs	r0, r4
 800d314:	f004 ff42 	bl	801219c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d318:	a902      	add	r1, sp, #8
 800d31a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d31c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d31e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d320:	f004 ff56 	bl	80121d0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800d324:	0020      	movs	r0, r4
 800d326:	f004 fee7 	bl	80120f8 <HAL_TIM_Base_Start>
}
 800d32a:	b005      	add	sp, #20
 800d32c:	bd30      	pop	{r4, r5, pc}
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	40021000 	.word	0x40021000
 800d334:	2000295c 	.word	0x2000295c
 800d338:	40014000 	.word	0x40014000
 800d33c:	0000ffff 	.word	0x0000ffff

0800d340 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800d340:	b510      	push	{r4, lr}
 800d342:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800d344:	f002 f8f8 	bl	800f538 <vPortEnterCritical>
	
	if (Delay)
 800d348:	2c00      	cmp	r4, #0
 800d34a:	d006      	beq.n	800d35a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800d34c:	4b04      	ldr	r3, [pc, #16]	; (800d360 <StartMicroDelay+0x20>)
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800d352:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d354:	1a5b      	subs	r3, r3, r1
 800d356:	42a3      	cmp	r3, r4
 800d358:	d9fb      	bls.n	800d352 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d35a:	f002 f8f9 	bl	800f550 <vPortExitCritical>
}
 800d35e:	bd10      	pop	{r4, pc}
 800d360:	2000295c 	.word	0x2000295c

0800d364 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800d364:	b510      	push	{r4, lr}
 800d366:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800d368:	f002 f8e6 	bl	800f538 <vPortEnterCritical>
	
	if (Delay)
 800d36c:	2c00      	cmp	r4, #0
 800d36e:	d006      	beq.n	800d37e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800d370:	4b04      	ldr	r3, [pc, #16]	; (800d384 <StartMilliDelay+0x20>)
 800d372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d374:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800d376:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d378:	1a5b      	subs	r3, r3, r1
 800d37a:	42a3      	cmp	r3, r4
 800d37c:	d9fb      	bls.n	800d376 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800d37e:	f002 f8e7 	bl	800f550 <vPortExitCritical>
}
 800d382:	bd10      	pop	{r4, pc}
 800d384:	2000295c 	.word	0x2000295c

0800d388 <MX_USART1_UART_Init>:

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
 800d388:	4809      	ldr	r0, [pc, #36]	; (800d3b0 <MX_USART1_UART_Init+0x28>)
 800d38a:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <MX_USART1_UART_Init+0x2c>)
{
 800d38c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800d38e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d390:	23e1      	movs	r3, #225	; 0xe1
 800d392:	031b      	lsls	r3, r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d394:	220c      	movs	r2, #12
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d396:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d398:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d39a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d39c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d39e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d3a0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3a2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3a4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d3a6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d3a8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800d3aa:	f005 facd 	bl	8012948 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800d3ae:	bd10      	pop	{r4, pc}
 800d3b0:	200023b4 	.word	0x200023b4
 800d3b4:	40013800 	.word	0x40013800

0800d3b8 <MX_USART2_UART_Init>:

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
  huart2.Instance = USART2;
 800d3b8:	4809      	ldr	r0, [pc, #36]	; (800d3e0 <MX_USART2_UART_Init+0x28>)
 800d3ba:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <MX_USART2_UART_Init+0x2c>)
{
 800d3bc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800d3be:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d3c0:	23e1      	movs	r3, #225	; 0xe1
 800d3c2:	031b      	lsls	r3, r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d3c4:	220c      	movs	r2, #12
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d3c6:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d3c8:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d3ca:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d3cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d3ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d3d0:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3d2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d3d4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d3d6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d3d8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800d3da:	f005 fab5 	bl	8012948 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800d3de:	bd10      	pop	{r4, pc}
 800d3e0:	20002344 	.word	0x20002344
 800d3e4:	40004400 	.word	0x40004400

0800d3e8 <MX_USART3_UART_Init>:

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
  huart3.Instance = USART3;
 800d3e8:	4809      	ldr	r0, [pc, #36]	; (800d410 <MX_USART3_UART_Init+0x28>)
 800d3ea:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <MX_USART3_UART_Init+0x2c>)
{
 800d3ec:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800d3ee:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d3f0:	23e1      	movs	r3, #225	; 0xe1
 800d3f2:	031b      	lsls	r3, r3, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d3f4:	220c      	movs	r2, #12
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d3f6:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d3f8:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d3fa:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d3fc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d3fe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d400:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d402:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d404:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d406:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d408:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800d40a:	f005 fa9d 	bl	8012948 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800d40e:	bd10      	pop	{r4, pc}
 800d410:	200022d4 	.word	0x200022d4
 800d414:	40004800 	.word	0x40004800

0800d418 <MX_USART5_UART_Init>:

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
  huart5.Instance = USART5;
 800d418:	4809      	ldr	r0, [pc, #36]	; (800d440 <MX_USART5_UART_Init+0x28>)
 800d41a:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <MX_USART5_UART_Init+0x2c>)
{
 800d41c:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800d41e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d420:	23e1      	movs	r3, #225	; 0xe1
 800d422:	031b      	lsls	r3, r3, #12
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d424:	220c      	movs	r2, #12
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d426:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d428:	2300      	movs	r3, #0
  huart5.Init.Mode = UART_MODE_TX_RX;
 800d42a:	6142      	str	r2, [r0, #20]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800d42c:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800d42e:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800d430:	6103      	str	r3, [r0, #16]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d432:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800d434:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d436:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d438:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800d43a:	f005 fa85 	bl	8012948 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800d43e:	bd10      	pop	{r4, pc}
 800d440:	20002264 	.word	0x20002264
 800d444:	40005000 	.word	0x40005000

0800d448 <MX_USART6_UART_Init>:

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
  huart6.Instance = USART6;
 800d448:	4809      	ldr	r0, [pc, #36]	; (800d470 <MX_USART6_UART_Init+0x28>)
 800d44a:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <MX_USART6_UART_Init+0x2c>)
{
 800d44c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800d44e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d450:	23e1      	movs	r3, #225	; 0xe1
 800d452:	031b      	lsls	r3, r3, #12
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d454:	220c      	movs	r2, #12
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800d456:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d458:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d45a:	6142      	str	r2, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d45c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d45e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d460:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d462:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d464:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800d466:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d468:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800d46a:	f005 fa6d 	bl	8012948 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800d46e:	bd10      	pop	{r4, pc}
 800d470:	200021f4 	.word	0x200021f4
 800d474:	40011400 	.word	0x40011400

0800d478 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d47a:	46c6      	mov	lr, r8
 800d47c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800d47e:	6803      	ldr	r3, [r0, #0]
 800d480:	4a6e      	ldr	r2, [pc, #440]	; (800d63c <HAL_UART_MspInit+0x1c4>)
{
 800d482:	b08a      	sub	sp, #40	; 0x28
  if(huart->Instance==USART1)
 800d484:	4293      	cmp	r3, r2
 800d486:	d041      	beq.n	800d50c <HAL_UART_MspInit+0x94>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800d488:	4a6d      	ldr	r2, [pc, #436]	; (800d640 <HAL_UART_MspInit+0x1c8>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d06c      	beq.n	800d568 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800d48e:	4a6d      	ldr	r2, [pc, #436]	; (800d644 <HAL_UART_MspInit+0x1cc>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d100      	bne.n	800d496 <HAL_UART_MspInit+0x1e>
 800d494:	e094      	b.n	800d5c0 <HAL_UART_MspInit+0x148>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800d496:	4a6c      	ldr	r2, [pc, #432]	; (800d648 <HAL_UART_MspInit+0x1d0>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d006      	beq.n	800d4aa <HAL_UART_MspInit+0x32>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800d49c:	4a6b      	ldr	r2, [pc, #428]	; (800d64c <HAL_UART_MspInit+0x1d4>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d100      	bne.n	800d4a4 <HAL_UART_MspInit+0x2c>
 800d4a2:	e0b0      	b.n	800d606 <HAL_UART_MspInit+0x18e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800d4a4:	4a6a      	ldr	r2, [pc, #424]	; (800d650 <HAL_UART_MspInit+0x1d8>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d003      	beq.n	800d4b2 <HAL_UART_MspInit+0x3a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800d4aa:	b00a      	add	sp, #40	; 0x28
 800d4ac:	bc80      	pop	{r7}
 800d4ae:	46b8      	mov	r8, r7
 800d4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART6_CLK_ENABLE();
 800d4b2:	2420      	movs	r4, #32
 800d4b4:	4b67      	ldr	r3, [pc, #412]	; (800d654 <HAL_UART_MspInit+0x1dc>)
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d4b6:	2090      	movs	r0, #144	; 0x90
    __USART6_CLK_ENABLE();
 800d4b8:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4ba:	2701      	movs	r7, #1
    __USART6_CLK_ENABLE();
 800d4bc:	4322      	orrs	r2, r4
 800d4be:	619a      	str	r2, [r3, #24]
 800d4c0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4c2:	2603      	movs	r6, #3
    __USART6_CLK_ENABLE();
 800d4c4:	4023      	ands	r3, r4
 800d4c6:	9304      	str	r3, [sp, #16]
 800d4c8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800d4ca:	2310      	movs	r3, #16
 800d4cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ce:	3b0e      	subs	r3, #14
 800d4d0:	4698      	mov	r8, r3
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d4d2:	2505      	movs	r5, #5
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d4d4:	a905      	add	r1, sp, #20
 800d4d6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4da:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4dc:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800d4de:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800d4e0:	f003 fd1e 	bl	8010f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4e4:	4643      	mov	r3, r8
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d4e6:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800d4e8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d4ec:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d4ee:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800d4f0:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800d4f2:	a905      	add	r1, sp, #20
 800d4f4:	05c0      	lsls	r0, r0, #23
 800d4f6:	f003 fd13 	bl	8010f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	201d      	movs	r0, #29
 800d500:	f002 fc90 	bl	800fe24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800d504:	201d      	movs	r0, #29
 800d506:	f002 fcbf 	bl	800fe88 <HAL_NVIC_EnableIRQ>
}
 800d50a:	e7ce      	b.n	800d4aa <HAL_UART_MspInit+0x32>
    __USART1_CLK_ENABLE();
 800d50c:	2080      	movs	r0, #128	; 0x80
 800d50e:	4a51      	ldr	r2, [pc, #324]	; (800d654 <HAL_UART_MspInit+0x1dc>)
 800d510:	01c0      	lsls	r0, r0, #7
 800d512:	6991      	ldr	r1, [r2, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d514:	2401      	movs	r4, #1
    __USART1_CLK_ENABLE();
 800d516:	4301      	orrs	r1, r0
 800d518:	6191      	str	r1, [r2, #24]
 800d51a:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d51c:	2602      	movs	r6, #2
    __USART1_CLK_ENABLE();
 800d51e:	4003      	ands	r3, r0
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d524:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d526:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d528:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d52a:	009b      	lsls	r3, r3, #2
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d52c:	a905      	add	r1, sp, #20
 800d52e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800d530:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d532:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d534:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d536:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800d538:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800d53a:	f003 fcf1 	bl	8010f20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d53e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d540:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d542:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d544:	a905      	add	r1, sp, #20
 800d546:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800d548:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d54c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d54e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800d550:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800d552:	f003 fce5 	bl	8010f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800d556:	2200      	movs	r2, #0
 800d558:	2101      	movs	r1, #1
 800d55a:	201b      	movs	r0, #27
 800d55c:	f002 fc62 	bl	800fe24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d560:	201b      	movs	r0, #27
 800d562:	f002 fc91 	bl	800fe88 <HAL_NVIC_EnableIRQ>
 800d566:	e7a0      	b.n	800d4aa <HAL_UART_MspInit+0x32>
    __USART2_CLK_ENABLE();
 800d568:	2080      	movs	r0, #128	; 0x80
 800d56a:	4a3a      	ldr	r2, [pc, #232]	; (800d654 <HAL_UART_MspInit+0x1dc>)
 800d56c:	0280      	lsls	r0, r0, #10
 800d56e:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d570:	2401      	movs	r4, #1
    __USART2_CLK_ENABLE();
 800d572:	4301      	orrs	r1, r0
 800d574:	61d1      	str	r1, [r2, #28]
 800d576:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d578:	2602      	movs	r6, #2
    __USART2_CLK_ENABLE();
 800d57a:	4003      	ands	r3, r0
 800d57c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d57e:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d580:	2503      	movs	r5, #3
    __USART2_CLK_ENABLE();
 800d582:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d584:	2304      	movs	r3, #4
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d586:	a905      	add	r1, sp, #20
 800d588:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800d58a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d58c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d58e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d590:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800d592:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800d594:	f003 fcc4 	bl	8010f20 <HAL_GPIO_Init>
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d598:	2090      	movs	r0, #144	; 0x90
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d59a:	2308      	movs	r3, #8
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d59c:	a905      	add	r1, sp, #20
 800d59e:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800d5a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5a4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5a6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800d5a8:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800d5aa:	f003 fcb9 	bl	8010f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2101      	movs	r1, #1
 800d5b2:	201c      	movs	r0, #28
 800d5b4:	f002 fc36 	bl	800fe24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d5b8:	201c      	movs	r0, #28
 800d5ba:	f002 fc65 	bl	800fe88 <HAL_NVIC_EnableIRQ>
 800d5be:	e774      	b.n	800d4aa <HAL_UART_MspInit+0x32>
    __USART3_CLK_ENABLE();
 800d5c0:	2080      	movs	r0, #128	; 0x80
 800d5c2:	4a24      	ldr	r2, [pc, #144]	; (800d654 <HAL_UART_MspInit+0x1dc>)
 800d5c4:	02c0      	lsls	r0, r0, #11
 800d5c6:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5c8:	2702      	movs	r7, #2
    __USART3_CLK_ENABLE();
 800d5ca:	4301      	orrs	r1, r0
 800d5cc:	61d1      	str	r1, [r2, #28]
 800d5ce:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5d0:	2601      	movs	r6, #1
    __USART3_CLK_ENABLE();
 800d5d2:	4003      	ands	r3, r0
 800d5d4:	9302      	str	r3, [sp, #8]
 800d5d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d5d8:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5da:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d5dc:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d5de:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d5e0:	481d      	ldr	r0, [pc, #116]	; (800d658 <HAL_UART_MspInit+0x1e0>)
 800d5e2:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800d5e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5e6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5e8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5ea:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800d5ec:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800d5ee:	f003 fc97 	bl	8010f20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800d5f2:	2380      	movs	r3, #128	; 0x80
 800d5f4:	011b      	lsls	r3, r3, #4
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d5f6:	4818      	ldr	r0, [pc, #96]	; (800d658 <HAL_UART_MspInit+0x1e0>)
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d5f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5fa:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d5fc:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5fe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;
 800d600:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800d602:	a905      	add	r1, sp, #20
 800d604:	e777      	b.n	800d4f6 <HAL_UART_MspInit+0x7e>
    __USART5_CLK_ENABLE();
 800d606:	2080      	movs	r0, #128	; 0x80
 800d608:	4a12      	ldr	r2, [pc, #72]	; (800d654 <HAL_UART_MspInit+0x1dc>)
 800d60a:	0340      	lsls	r0, r0, #13
 800d60c:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d60e:	2702      	movs	r7, #2
    __USART5_CLK_ENABLE();
 800d610:	4301      	orrs	r1, r0
 800d612:	61d1      	str	r1, [r2, #28]
 800d614:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d616:	2601      	movs	r6, #1
    __USART5_CLK_ENABLE();
 800d618:	4003      	ands	r3, r0
 800d61a:	9303      	str	r3, [sp, #12]
 800d61c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d61e:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d620:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d622:	2404      	movs	r4, #4
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d624:	480c      	ldr	r0, [pc, #48]	; (800d658 <HAL_UART_MspInit+0x1e0>)
 800d626:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800d628:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d62a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d62c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d62e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = USART5_AF;	
 800d630:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800d632:	f003 fc75 	bl	8010f20 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800d636:	2310      	movs	r3, #16
 800d638:	e7dd      	b.n	800d5f6 <HAL_UART_MspInit+0x17e>
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	40013800 	.word	0x40013800
 800d640:	40004400 	.word	0x40004400
 800d644:	40004800 	.word	0x40004800
 800d648:	40004c00 	.word	0x40004c00
 800d64c:	40005000 	.word	0x40005000
 800d650:	40011400 	.word	0x40011400
 800d654:	40021000 	.word	0x40021000
 800d658:	48000400 	.word	0x48000400

0800d65c <writePxMutex>:
}

/* --- Blocking (polling-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout, uint32_t portTimeout)
{
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	46ce      	mov	lr, r9
 800d660:	4647      	mov	r7, r8
 800d662:	1e44      	subs	r4, r0, #1
 800d664:	b2e4      	uxtb	r4, r4
 800d666:	000d      	movs	r5, r1
 800d668:	0016      	movs	r6, r2
 800d66a:	0019      	movs	r1, r3
 800d66c:	b580      	push	{r7, lr}
 800d66e:	2c04      	cmp	r4, #4
 800d670:	d80f      	bhi.n	800d692 <writePxMutex+0x36>
 800d672:	4a13      	ldr	r2, [pc, #76]	; (800d6c0 <writePxMutex+0x64>)
 800d674:	00a4      	lsls	r4, r4, #2
 800d676:	58a7      	ldr	r7, [r4, r2]
	HAL_StatusTypeDef result = HAL_ERROR;
	
	if (GetUart(port) != NULL) {
 800d678:	2f00      	cmp	r7, #0
 800d67a:	d00a      	beq.n	800d692 <writePxMutex+0x36>
		/*/ Wait for the semaphore to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d67c:	4b11      	ldr	r3, [pc, #68]	; (800d6c4 <writePxMutex+0x68>)
 800d67e:	4698      	mov	r8, r3
 800d680:	0083      	lsls	r3, r0, #2
 800d682:	4699      	mov	r9, r3
 800d684:	4643      	mov	r3, r8
 800d686:	464a      	mov	r2, r9
 800d688:	5898      	ldr	r0, [r3, r2]
 800d68a:	f000 f9e5 	bl	800da58 <osSemaphoreWait>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d007      	beq.n	800d6a2 <writePxMutex+0x46>
	HAL_StatusTypeDef result = HAL_ERROR;
 800d692:	2401      	movs	r4, #1
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
		}
	}
	
	return result;
}
 800d694:	0020      	movs	r0, r4
 800d696:	bcc0      	pop	{r6, r7}
 800d698:	46b9      	mov	r9, r7
 800d69a:	46b0      	mov	r8, r6
 800d69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d69e:	2803      	cmp	r0, #3
 800d6a0:	d007      	beq.n	800d6b2 <writePxMutex+0x56>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800d6a2:	0032      	movs	r2, r6
 800d6a4:	0029      	movs	r1, r5
 800d6a6:	0038      	movs	r0, r7
 800d6a8:	9b08      	ldr	r3, [sp, #32]
 800d6aa:	f005 f881 	bl	80127b0 <HAL_UART_Transmit>
 800d6ae:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800d6b0:	d1f5      	bne.n	800d69e <writePxMutex+0x42>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800d6b2:	4643      	mov	r3, r8
 800d6b4:	464a      	mov	r2, r9
 800d6b6:	5898      	ldr	r0, [r3, r2]
 800d6b8:	f000 f9f6 	bl	800daa8 <osSemaphoreRelease>
 800d6bc:	e7ea      	b.n	800d694 <writePxMutex+0x38>
 800d6be:	46c0      	nop			; (mov r8, r8)
 800d6c0:	080198d0 	.word	0x080198d0
 800d6c4:	20001f08 	.word	0x20001f08

0800d6c8 <writePxITMutex>:
}

/* --- Non-blocking (interrupt-based) write protected with a semaphore --- 
*/
HAL_StatusTypeDef writePxITMutex(uint8_t port, char *buffer, uint16_t n, uint32_t mutexTimeout)
{
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	1e44      	subs	r4, r0, #1
 800d6cc:	b2e4      	uxtb	r4, r4
 800d6ce:	000d      	movs	r5, r1
 800d6d0:	0016      	movs	r6, r2
 800d6d2:	0019      	movs	r1, r3
 800d6d4:	2c04      	cmp	r4, #4
 800d6d6:	d80b      	bhi.n	800d6f0 <writePxITMutex+0x28>
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <writePxITMutex+0x38>)
 800d6da:	00a4      	lsls	r4, r4, #2
 800d6dc:	58a4      	ldr	r4, [r4, r2]
	HAL_StatusTypeDef result = HAL_ERROR; 

	if (GetUart(port) != NULL) {	
 800d6de:	2c00      	cmp	r4, #0
 800d6e0:	d006      	beq.n	800d6f0 <writePxITMutex+0x28>
		/* Wait for the mutex to be available. */
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800d6e2:	4a08      	ldr	r2, [pc, #32]	; (800d704 <writePxITMutex+0x3c>)
 800d6e4:	0080      	lsls	r0, r0, #2
 800d6e6:	5880      	ldr	r0, [r0, r2]
 800d6e8:	f000 f9b6 	bl	800da58 <osSemaphoreWait>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d001      	beq.n	800d6f4 <writePxITMutex+0x2c>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800d6f0:	2001      	movs	r0, #1
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
		}
	}
	
	return result;
}
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800d6f4:	0032      	movs	r2, r6
 800d6f6:	0029      	movs	r1, r5
 800d6f8:	0020      	movs	r0, r4
 800d6fa:	f004 fda7 	bl	801224c <HAL_UART_Transmit_IT>
 800d6fe:	e7f8      	b.n	800d6f2 <writePxITMutex+0x2a>
 800d700:	080198d0 	.word	0x080198d0
 800d704:	20001f08 	.word	0x20001f08

0800d708 <UpdateBaudrate>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800d708:	3801      	subs	r0, #1
 800d70a:	b2c0      	uxtb	r0, r0
{
 800d70c:	b510      	push	{r4, lr}
 800d70e:	2804      	cmp	r0, #4
 800d710:	d807      	bhi.n	800d722 <UpdateBaudrate+0x1a>
}
 800d712:	4b05      	ldr	r3, [pc, #20]	; (800d728 <UpdateBaudrate+0x20>)
 800d714:	0080      	lsls	r0, r0, #2
 800d716:	58c0      	ldr	r0, [r0, r3]
	huart->Init.BaudRate = baudrate;
 800d718:	6041      	str	r1, [r0, #4]
	HAL_UART_Init(huart);
 800d71a:	f005 f915 	bl	8012948 <HAL_UART_Init>
}
 800d71e:	2000      	movs	r0, #0
 800d720:	bd10      	pop	{r4, pc}
	huart->Init.BaudRate = baudrate;
 800d722:	2300      	movs	r3, #0
 800d724:	605b      	str	r3, [r3, #4]
 800d726:	deff      	udf	#255	; 0xff
 800d728:	080198d0 	.word	0x080198d0

0800d72c <GetUart>:
	switch (port)
 800d72c:	3801      	subs	r0, #1
 800d72e:	b2c3      	uxtb	r3, r0
{
 800d730:	2000      	movs	r0, #0
 800d732:	2b04      	cmp	r3, #4
 800d734:	d802      	bhi.n	800d73c <GetUart+0x10>
 800d736:	4a02      	ldr	r2, [pc, #8]	; (800d740 <GetUart+0x14>)
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	5898      	ldr	r0, [r3, r2]
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800d73c:	4770      	bx	lr
 800d73e:	46c0      	nop			; (mov r8, r8)
 800d740:	080198d0 	.word	0x080198d0

0800d744 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	0004      	movs	r4, r0
 800d748:	000d      	movs	r5, r1
	if (huart != NULL) {
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d003      	beq.n	800d756 <SwapUartPins+0x12>
		if (direction == REVERSED) {
 800d74e:	2901      	cmp	r1, #1
 800d750:	d017      	beq.n	800d782 <SwapUartPins+0x3e>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800d752:	2900      	cmp	r1, #0
 800d754:	d000      	beq.n	800d758 <SwapUartPins+0x14>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800d756:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d758:	f7fc ff5a 	bl	800a610 <GetPort>
 800d75c:	2180      	movs	r1, #128	; 0x80
 800d75e:	3801      	subs	r0, #1
 800d760:	0209      	lsls	r1, r1, #8
 800d762:	4101      	asrs	r1, r0
 800d764:	4b12      	ldr	r3, [pc, #72]	; (800d7b0 <SwapUartPins+0x6c>)
 800d766:	4e13      	ldr	r6, [pc, #76]	; (800d7b4 <SwapUartPins+0x70>)
 800d768:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);		
 800d76a:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d76c:	3b01      	subs	r3, #1
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	5b9a      	ldrh	r2, [r3, r6]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d772:	6365      	str	r5, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d774:	438a      	bics	r2, r1
 800d776:	539a      	strh	r2, [r3, r6]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d778:	2308      	movs	r3, #8
 800d77a:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);		
 800d77c:	f005 f8e4 	bl	8012948 <HAL_UART_Init>
}
 800d780:	e7e9      	b.n	800d756 <SwapUartPins+0x12>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d782:	f7fc ff45 	bl	800a610 <GetPort>
 800d786:	2180      	movs	r1, #128	; 0x80
 800d788:	0209      	lsls	r1, r1, #8
 800d78a:	000a      	movs	r2, r1
 800d78c:	3801      	subs	r0, #1
 800d78e:	4102      	asrs	r2, r0
 800d790:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <SwapUartPins+0x6c>)
 800d792:	4d08      	ldr	r5, [pc, #32]	; (800d7b4 <SwapUartPins+0x70>)
 800d794:	781b      	ldrb	r3, [r3, #0]
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d796:	6361      	str	r1, [r4, #52]	; 0x34
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d798:	3b01      	subs	r3, #1
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	5b58      	ldrh	r0, [r3, r5]
 800d79e:	4302      	orrs	r2, r0
 800d7a0:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d7a2:	2308      	movs	r3, #8
			HAL_UART_Init(huart);
 800d7a4:	0020      	movs	r0, r4
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d7a6:	6263      	str	r3, [r4, #36]	; 0x24
			HAL_UART_Init(huart);
 800d7a8:	f005 f8ce 	bl	8012948 <HAL_UART_Init>
 800d7ac:	e7d3      	b.n	800d756 <SwapUartPins+0x12>
 800d7ae:	46c0      	nop			; (mov r8, r8)
 800d7b0:	20000aa8 	.word	0x20000aa8
 800d7b4:	200029d4 	.word	0x200029d4

0800d7b8 <ReadPortsDir>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	46c6      	mov	lr, r8
 800d7bc:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800d7be:	4d11      	ldr	r5, [pc, #68]	; (800d804 <ReadPortsDir+0x4c>)
 800d7c0:	782f      	ldrb	r7, [r5, #0]
 800d7c2:	2f00      	cmp	r7, #0
 800d7c4:	d019      	beq.n	800d7fa <ReadPortsDir+0x42>
		if (i != myID) {
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800d7c6:	4b10      	ldr	r3, [pc, #64]	; (800d808 <ReadPortsDir+0x50>)
	for (uint8_t i = 1; i <= N; i++) {
 800d7c8:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800d7ca:	2700      	movs	r7, #0
			if (responseStatus != BOS_OK) {
 800d7cc:	4698      	mov	r8, r3
 800d7ce:	4e0f      	ldr	r6, [pc, #60]	; (800d80c <ReadPortsDir+0x54>)
		if (i != myID) {
 800d7d0:	7833      	ldrb	r3, [r6, #0]
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	d00c      	beq.n	800d7f0 <ReadPortsDir+0x38>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2113      	movs	r1, #19
 800d7da:	0020      	movs	r0, r4
 800d7dc:	f7fa fd1c 	bl	8008218 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800d7e0:	2032      	movs	r0, #50	; 0x32
 800d7e2:	f7ff fdbf 	bl	800d364 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800d7e6:	4643      	mov	r3, r8
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d000      	beq.n	800d7f0 <ReadPortsDir+0x38>
				result = BOS_ERR_NoResponse;
 800d7ee:	2702      	movs	r7, #2
	for (uint8_t i = 1; i <= N; i++) {
 800d7f0:	3401      	adds	r4, #1
 800d7f2:	782b      	ldrb	r3, [r5, #0]
 800d7f4:	b2e4      	uxtb	r4, r4
 800d7f6:	42a3      	cmp	r3, r4
 800d7f8:	d2ea      	bcs.n	800d7d0 <ReadPortsDir+0x18>
			}
		}
	}

	return result;
}
 800d7fa:	0038      	movs	r0, r7
 800d7fc:	bc80      	pop	{r7}
 800d7fe:	46b8      	mov	r8, r7
 800d800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d802:	46c0      	nop			; (mov r8, r8)
 800d804:	20000008 	.word	0x20000008
 800d808:	20000c74 	.word	0x20000c74
 800d80c:	20000aa8 	.word	0x20000aa8

0800d810 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d810:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d812:	2580      	movs	r5, #128	; 0x80
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800d814:	4c0e      	ldr	r4, [pc, #56]	; (800d850 <ReadPortsDirMSG+0x40>)
	for (int p = 1; p <= NumOfPorts; p++) {
 800d816:	2301      	movs	r3, #1
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d818:	6b64      	ldr	r4, [r4, #52]	; 0x34
	uint16_t temp =0;
 800d81a:	2200      	movs	r2, #0
 800d81c:	490d      	ldr	r1, [pc, #52]	; (800d854 <ReadPortsDirMSG+0x44>)
			messageParams[temp++] = p;
 800d81e:	4e0e      	ldr	r6, [pc, #56]	; (800d858 <ReadPortsDirMSG+0x48>)
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d820:	022d      	lsls	r5, r5, #8
 800d822:	42ac      	cmp	r4, r5
 800d824:	d102      	bne.n	800d82c <ReadPortsDirMSG+0x1c>
			messageParams[temp++] = p;
 800d826:	1c54      	adds	r4, r2, #1
 800d828:	54b3      	strb	r3, [r6, r2]
 800d82a:	b2a2      	uxth	r2, r4
	for (int p = 1; p <= NumOfPorts; p++) {
 800d82c:	3301      	adds	r3, #1
 800d82e:	3104      	adds	r1, #4
 800d830:	2b06      	cmp	r3, #6
 800d832:	d007      	beq.n	800d844 <ReadPortsDirMSG+0x34>
 800d834:	680c      	ldr	r4, [r1, #0]
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800d836:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d838:	42ac      	cmp	r4, r5
 800d83a:	d0f4      	beq.n	800d826 <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800d83c:	3301      	adds	r3, #1
 800d83e:	3104      	adds	r1, #4
 800d840:	2b06      	cmp	r3, #6
 800d842:	d1f7      	bne.n	800d834 <ReadPortsDirMSG+0x24>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800d844:	2114      	movs	r1, #20
 800d846:	f7fa fce7 	bl	8008218 <SendMessageToModule>
	return result;
}
 800d84a:	2000      	movs	r0, #0
 800d84c:	bd70      	pop	{r4, r5, r6, pc}
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	20002264 	.word	0x20002264
 800d854:	080198d0 	.word	0x080198d0
 800d858:	20000b74 	.word	0x20000b74

0800d85c <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	4b2c      	ldr	r3, [pc, #176]	; (800d910 <UpdateMyPortsDir+0xb4>)
 800d860:	464e      	mov	r6, r9
 800d862:	4699      	mov	r9, r3
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d864:	2380      	movs	r3, #128	; 0x80
 800d866:	021b      	lsls	r3, r3, #8
{
 800d868:	4657      	mov	r7, sl
 800d86a:	4645      	mov	r5, r8
 800d86c:	46de      	mov	lr, fp
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d86e:	4698      	mov	r8, r3
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d870:	2308      	movs	r3, #8
{
 800d872:	b5e0      	push	{r5, r6, r7, lr}
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d874:	469a      	mov	sl, r3
{
 800d876:	2500      	movs	r5, #0
 800d878:	4e26      	ldr	r6, [pc, #152]	; (800d914 <UpdateMyPortsDir+0xb8>)
 800d87a:	4c27      	ldr	r4, [pc, #156]	; (800d918 <UpdateMyPortsDir+0xbc>)
 800d87c:	4f27      	ldr	r7, [pc, #156]	; (800d91c <UpdateMyPortsDir+0xc0>)
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800d87e:	4642      	mov	r2, r8
 800d880:	412a      	asrs	r2, r5
 800d882:	464b      	mov	r3, r9
 800d884:	0011      	movs	r1, r2
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	3b01      	subs	r3, #1
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	5afb      	ldrh	r3, [r7, r3]
 800d88e:	4019      	ands	r1, r3
 800d890:	468b      	mov	fp, r1
 800d892:	421a      	tst	r2, r3
 800d894:	d11b      	bne.n	800d8ce <UpdateMyPortsDir+0x72>
	if (huart != NULL) {
 800d896:	2c00      	cmp	r4, #0
 800d898:	d013      	beq.n	800d8c2 <UpdateMyPortsDir+0x66>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d89a:	0020      	movs	r0, r4
 800d89c:	f7fc feb8 	bl	800a610 <GetPort>
 800d8a0:	4641      	mov	r1, r8
 800d8a2:	464b      	mov	r3, r9
 800d8a4:	3801      	subs	r0, #1
 800d8a6:	4101      	asrs	r1, r0
 800d8a8:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);		
 800d8aa:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	5afa      	ldrh	r2, [r7, r3]
 800d8b2:	438a      	bics	r2, r1
 800d8b4:	52fa      	strh	r2, [r7, r3]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8b6:	4653      	mov	r3, sl
 800d8b8:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800d8ba:	465b      	mov	r3, fp
 800d8bc:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800d8be:	f005 f843 	bl	8012948 <HAL_UART_Init>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d8c2:	3501      	adds	r5, #1
 800d8c4:	3604      	adds	r6, #4
 800d8c6:	2d05      	cmp	r5, #5
 800d8c8:	d01b      	beq.n	800d902 <UpdateMyPortsDir+0xa6>
 800d8ca:	6834      	ldr	r4, [r6, #0]
 800d8cc:	e7d7      	b.n	800d87e <UpdateMyPortsDir+0x22>
	if (huart != NULL) {
 800d8ce:	2c00      	cmp	r4, #0
 800d8d0:	d0f7      	beq.n	800d8c2 <UpdateMyPortsDir+0x66>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d8d2:	0020      	movs	r0, r4
 800d8d4:	f7fc fe9c 	bl	800a610 <GetPort>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	3801      	subs	r0, #1
 800d8de:	4102      	asrs	r2, r0
 800d8e0:	781b      	ldrb	r3, [r3, #0]
			HAL_UART_Init(huart);
 800d8e2:	0020      	movs	r0, r4
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	5af9      	ldrh	r1, [r7, r3]
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d8ea:	3501      	adds	r5, #1
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	52fa      	strh	r2, [r7, r3]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d8f0:	4653      	mov	r3, sl
 800d8f2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d8f4:	4643      	mov	r3, r8
 800d8f6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800d8f8:	f005 f826 	bl	8012948 <HAL_UART_Init>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800d8fc:	3604      	adds	r6, #4
 800d8fe:	2d05      	cmp	r5, #5
 800d900:	d1e3      	bne.n	800d8ca <UpdateMyPortsDir+0x6e>
			SwapUartPins(GetUart(p), REVERSED);
		}
	}

	return result;
}
 800d902:	2000      	movs	r0, #0
 800d904:	bcf0      	pop	{r4, r5, r6, r7}
 800d906:	46bb      	mov	fp, r7
 800d908:	46b2      	mov	sl, r6
 800d90a:	46a9      	mov	r9, r5
 800d90c:	46a0      	mov	r8, r4
 800d90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d910:	20000aa8 	.word	0x20000aa8
 800d914:	080198d0 	.word	0x080198d0
 800d918:	20002264 	.word	0x20002264
 800d91c:	200029d4 	.word	0x200029d4

0800d920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d920:	4816      	ldr	r0, [pc, #88]	; (800d97c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800d922:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800d924:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800d926:	e003      	b.n	800d930 <LoopCopyDataInit>

0800d928 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800d928:	4b15      	ldr	r3, [pc, #84]	; (800d980 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800d92a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800d92c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800d92e:	3104      	adds	r1, #4

0800d930 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800d930:	4814      	ldr	r0, [pc, #80]	; (800d984 <LoopForever+0xc>)
  ldr r3, =_edata
 800d932:	4b15      	ldr	r3, [pc, #84]	; (800d988 <LoopForever+0x10>)
  adds r2, r0, r1
 800d934:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800d936:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800d938:	d3f6      	bcc.n	800d928 <CopyDataInit>
  ldr r2, =_sbss
 800d93a:	4a14      	ldr	r2, [pc, #80]	; (800d98c <LoopForever+0x14>)
  b LoopFillZerobss
 800d93c:	e002      	b.n	800d944 <LoopFillZerobss>

0800d93e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800d93e:	2300      	movs	r3, #0
  str  r3, [r2]
 800d940:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d942:	3204      	adds	r2, #4

0800d944 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800d944:	4b12      	ldr	r3, [pc, #72]	; (800d990 <LoopForever+0x18>)
  cmp r2, r3
 800d946:	429a      	cmp	r2, r3
  bcc FillZerobss
 800d948:	d3f9      	bcc.n	800d93e <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d94a:	4812      	ldr	r0, [pc, #72]	; (800d994 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800d94c:	4912      	ldr	r1, [pc, #72]	; (800d998 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800d94e:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800d950:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800d952:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800d954:	d005      	beq.n	800d962 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d956:	f000 f82b 	bl	800d9b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d95a:	f005 f9bf 	bl	8012cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d95e:	f005 f945 	bl	8012bec <main>

0800d962 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d962:	480e      	ldr	r0, [pc, #56]	; (800d99c <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d964:	490e      	ldr	r1, [pc, #56]	; (800d9a0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d966:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d968:	480e      	ldr	r0, [pc, #56]	; (800d9a4 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800d96a:	490d      	ldr	r1, [pc, #52]	; (800d9a0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800d96c:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d96e:	480e      	ldr	r0, [pc, #56]	; (800d9a8 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800d970:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800d972:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800d974:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800d976:	4700      	bx	r0

0800d978 <LoopForever>:


LoopForever:
    b LoopForever
 800d978:	e7fe      	b.n	800d978 <LoopForever>
 800d97a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800d97c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800d980:	0801c844 	.word	0x0801c844
  ldr r0, =_sdata
 800d984:	20000008 	.word	0x20000008
  ldr r3, =_edata
 800d988:	20000a84 	.word	0x20000a84
  ldr r2, =_sbss
 800d98c:	20000a88 	.word	0x20000a88
  ldr r3, = _ebss
 800d990:	20006de0 	.word	0x20006de0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800d994:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800d998:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800d99c:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800d9a0:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800d9a4:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800d9a8:	1fffd800 	.word	0x1fffd800

0800d9ac <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d9ac:	e7fe      	b.n	800d9ac <CEC_CAN_IRQHandler>
	...

0800d9b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d9b4:	4811      	ldr	r0, [pc, #68]	; (800d9fc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	4002      	ands	r2, r0
 800d9c0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	480e      	ldr	r0, [pc, #56]	; (800da00 <SystemInit+0x50>)
 800d9c6:	4002      	ands	r2, r0
 800d9c8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	480d      	ldr	r0, [pc, #52]	; (800da04 <SystemInit+0x54>)
 800d9ce:	4002      	ands	r2, r0
 800d9d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	480c      	ldr	r0, [pc, #48]	; (800da08 <SystemInit+0x58>)
 800d9d6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d9d8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800d9da:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800d9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9de:	4382      	bics	r2, r0
 800d9e0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800d9e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9e4:	4809      	ldr	r0, [pc, #36]	; (800da0c <SystemInit+0x5c>)
 800d9e6:	4002      	ands	r2, r0
 800d9e8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800d9ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9ec:	438a      	bics	r2, r1
 800d9ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	609a      	str	r2, [r3, #8]

}
 800d9f4:	4770      	bx	lr
 800d9f6:	46c0      	nop			; (mov r8, r8)
 800d9f8:	40021000 	.word	0x40021000
 800d9fc:	08ffb80c 	.word	0x08ffb80c
 800da00:	fef6ffff 	.word	0xfef6ffff
 800da04:	fffbffff 	.word	0xfffbffff
 800da08:	ffc0ffff 	.word	0xffc0ffff
 800da0c:	fff0feac 	.word	0xfff0feac

0800da10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da10:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800da12:	f000 ff01 	bl	800e818 <vTaskStartScheduler>
  
  return osOK;
}
 800da16:	2000      	movs	r0, #0
 800da18:	bd10      	pop	{r4, pc}
 800da1a:	46c0      	nop			; (mov r8, r8)

0800da1c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da1c:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da1e:	2800      	cmp	r0, #0
 800da20:	d100      	bne.n	800da24 <osDelay+0x8>
 800da22:	3001      	adds	r0, #1
 800da24:	f001 f822 	bl	800ea6c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da28:	2000      	movs	r0, #0
 800da2a:	bd10      	pop	{r4, pc}

0800da2c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800da2c:	0008      	movs	r0, r1
 800da2e:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800da30:	2901      	cmp	r1, #1
 800da32:	d005      	beq.n	800da40 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800da34:	2100      	movs	r1, #0
 800da36:	f000 facd 	bl	800dfd4 <xQueueCreateCountingSemaphore>
 800da3a:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800da3c:	0020      	movs	r0, r4
 800da3e:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800da40:	2203      	movs	r2, #3
 800da42:	2100      	movs	r1, #0
 800da44:	f000 fa8c 	bl	800df60 <xQueueGenericCreate>
 800da48:	1e04      	subs	r4, r0, #0
 800da4a:	d0f7      	beq.n	800da3c <osSemaphoreCreate+0x10>
 800da4c:	2300      	movs	r3, #0
 800da4e:	2200      	movs	r2, #0
 800da50:	2100      	movs	r1, #0
 800da52:	f000 faed 	bl	800e030 <xQueueGenericSend>
 800da56:	e7f1      	b.n	800da3c <osSemaphoreCreate+0x10>

0800da58 <osSemaphoreWait>:
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800da58:	2300      	movs	r3, #0
{
 800da5a:	b500      	push	{lr}
 800da5c:	b083      	sub	sp, #12
 800da5e:	000a      	movs	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800da60:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800da62:	2800      	cmp	r0, #0
 800da64:	d01c      	beq.n	800daa0 <osSemaphoreWait+0x48>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da66:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00b      	beq.n	800da86 <osSemaphoreWait+0x2e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800da6e:	2100      	movs	r1, #0
 800da70:	aa01      	add	r2, sp, #4
 800da72:	f000 fc61 	bl	800e338 <xQueueReceiveFromISR>
 800da76:	2801      	cmp	r0, #1
 800da78:	d10b      	bne.n	800da92 <osSemaphoreWait+0x3a>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800da7a:	9b01      	ldr	r3, [sp, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10a      	bne.n	800da96 <osSemaphoreWait+0x3e>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800da80:	2000      	movs	r0, #0
}
 800da82:	b003      	add	sp, #12
 800da84:	bd00      	pop	{pc}
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800da86:	2300      	movs	r3, #0
 800da88:	2100      	movs	r1, #0
 800da8a:	f000 fbb1 	bl	800e1f0 <xQueueGenericReceive>
 800da8e:	2801      	cmp	r0, #1
 800da90:	d0f6      	beq.n	800da80 <osSemaphoreWait+0x28>
    return osErrorOS;
 800da92:	20ff      	movs	r0, #255	; 0xff
 800da94:	e7f5      	b.n	800da82 <osSemaphoreWait+0x2a>
	portEND_SWITCHING_ISR(taskWoken);
 800da96:	2280      	movs	r2, #128	; 0x80
 800da98:	4b02      	ldr	r3, [pc, #8]	; (800daa4 <osSemaphoreWait+0x4c>)
 800da9a:	0552      	lsls	r2, r2, #21
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	e7ef      	b.n	800da80 <osSemaphoreWait+0x28>
    return osErrorParameter;
 800daa0:	2080      	movs	r0, #128	; 0x80
 800daa2:	e7ee      	b.n	800da82 <osSemaphoreWait+0x2a>
 800daa4:	e000ed04 	.word	0xe000ed04

0800daa8 <osSemaphoreRelease>:
 800daa8:	2300      	movs	r3, #0
 800daaa:	b500      	push	{lr}
 800daac:	b083      	sub	sp, #12
 800daae:	9301      	str	r3, [sp, #4]
 800dab0:	f3ef 8305 	mrs	r3, IPSR
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00a      	beq.n	800dace <osSemaphoreRelease+0x26>
 800dab8:	a901      	add	r1, sp, #4
 800daba:	f000 fb6f 	bl	800e19c <xQueueGiveFromISR>
 800dabe:	2801      	cmp	r0, #1
 800dac0:	d10c      	bne.n	800dadc <osSemaphoreRelease+0x34>
 800dac2:	9b01      	ldr	r3, [sp, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10b      	bne.n	800dae0 <osSemaphoreRelease+0x38>
 800dac8:	2000      	movs	r0, #0
 800daca:	b003      	add	sp, #12
 800dacc:	bd00      	pop	{pc}
 800dace:	2300      	movs	r3, #0
 800dad0:	2200      	movs	r2, #0
 800dad2:	2100      	movs	r1, #0
 800dad4:	f000 faac 	bl	800e030 <xQueueGenericSend>
 800dad8:	2801      	cmp	r0, #1
 800dada:	d0f5      	beq.n	800dac8 <osSemaphoreRelease+0x20>
 800dadc:	20ff      	movs	r0, #255	; 0xff
 800dade:	e7f4      	b.n	800daca <osSemaphoreRelease+0x22>
 800dae0:	2280      	movs	r2, #128	; 0x80
 800dae2:	4b02      	ldr	r3, [pc, #8]	; (800daec <osSemaphoreRelease+0x44>)
 800dae4:	0552      	lsls	r2, r2, #21
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	e7ee      	b.n	800dac8 <osSemaphoreRelease+0x20>
 800daea:	46c0      	nop			; (mov r8, r8)
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800daf0:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800daf2:	f001 f91d 	bl	800ed30 <xTaskGetSchedulerState>
 800daf6:	2801      	cmp	r0, #1
 800daf8:	d001      	beq.n	800dafe <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800dafa:	f001 fd5f 	bl	800f5bc <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800dafe:	bd10      	pop	{r4, pc}

0800db00 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvHelpCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	46ce      	mov	lr, r9
 800db04:	4647      	mov	r7, r8
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db06:	2300      	movs	r3, #0
{
 800db08:	b580      	push	{r7, lr}
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db0a:	56d3      	ldrsb	r3, [r2, r3]
{
 800db0c:	0004      	movs	r4, r0
 800db0e:	000d      	movs	r5, r1
 800db10:	0010      	movs	r0, r2
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db12:	2b00      	cmp	r3, #0
 800db14:	d006      	beq.n	800db24 <prvHelpCommand+0x24>
 800db16:	2b20      	cmp	r3, #32
 800db18:	d02e      	beq.n	800db78 <prvHelpCommand+0x78>
 800db1a:	2300      	movs	r3, #0
			pcCommandString++;
 800db1c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db1e:	56c3      	ldrsb	r3, [r0, r3]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1f8      	bne.n	800db16 <prvHelpCommand+0x16>
		}		
	}
	/* List CLI Commands */
	else if (pcParameterString1 == NULL)
	{		
		if( pxCommand == NULL )
 800db24:	4f3e      	ldr	r7, [pc, #248]	; (800dc20 <prvHelpCommand+0x120>)
 800db26:	687e      	ldr	r6, [r7, #4]
 800db28:	2e00      	cmp	r6, #0
 800db2a:	d100      	bne.n	800db2e <prvHelpCommand+0x2e>
 800db2c:	e06f      	b.n	800dc0e <prvHelpCommand+0x10e>
			counter = 1;
		}

		/* Return the next command help string, before moving the pointer on to
		the next command in the list. */	
		if (counter > numOfBosCommands) {
 800db2e:	7a3b      	ldrb	r3, [r7, #8]
		} else {
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
		}				
				
		pxCommand = pxCommand->pxNext;
		counter++;
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	b2d2      	uxtb	r2, r2
 800db34:	4690      	mov	r8, r2
		if (counter > numOfBosCommands) {
 800db36:	4a3b      	ldr	r2, [pc, #236]	; (800dc24 <prvHelpCommand+0x124>)
 800db38:	7812      	ldrb	r2, [r2, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d260      	bcs.n	800dc00 <prvHelpCommand+0x100>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800db3e:	002a      	movs	r2, r5
 800db40:	0020      	movs	r0, r4
 800db42:	6833      	ldr	r3, [r6, #0]
 800db44:	3a08      	subs	r2, #8
 800db46:	6859      	ldr	r1, [r3, #4]
 800db48:	3008      	adds	r0, #8
 800db4a:	f005 fd6e 	bl	801362a <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800db4e:	4936      	ldr	r1, [pc, #216]	; (800dc28 <prvHelpCommand+0x128>)
 800db50:	1c60      	adds	r0, r4, #1
 800db52:	f005 fd50 	bl	80135f6 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800db56:	2328      	movs	r3, #40	; 0x28
 800db58:	7023      	strb	r3, [r4, #0]
 800db5a:	3301      	adds	r3, #1
 800db5c:	71a3      	strb	r3, [r4, #6]
 800db5e:	3b09      	subs	r3, #9
 800db60:	71e3      	strb	r3, [r4, #7]
		counter++;
 800db62:	4643      	mov	r3, r8
		pxCommand = pxCommand->pxNext;
 800db64:	6876      	ldr	r6, [r6, #4]
		counter++;
 800db66:	723b      	strb	r3, [r7, #8]
		pxCommand = pxCommand->pxNext;
 800db68:	607e      	str	r6, [r7, #4]
			xReturn = pdTRUE;
 800db6a:	1e73      	subs	r3, r6, #1
 800db6c:	419e      	sbcs	r6, r3
			xReturn = pdTRUE;
		}
	}

	return xReturn;
}
 800db6e:	0030      	movs	r0, r6
 800db70:	bcc0      	pop	{r6, r7}
 800db72:	46b9      	mov	r9, r7
 800db74:	46b0      	mov	r8, r6
 800db76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800db78:	2300      	movs	r3, #0
 800db7a:	56c3      	ldrsb	r3, [r0, r3]
 800db7c:	2b20      	cmp	r3, #32
 800db7e:	d104      	bne.n	800db8a <prvHelpCommand+0x8a>
 800db80:	2300      	movs	r3, #0
			pcCommandString++;
 800db82:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800db84:	56c3      	ldrsb	r3, [r0, r3]
 800db86:	2b20      	cmp	r3, #32
 800db88:	d0fa      	beq.n	800db80 <prvHelpCommand+0x80>
		if( *pcCommandString != 0x00 )
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0ca      	beq.n	800db24 <prvHelpCommand+0x24>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db8e:	2300      	movs	r3, #0
 800db90:	56c3      	ldrsb	r3, [r0, r3]
	*pxParameterStringLength = 0;
 800db92:	2200      	movs	r2, #0
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <prvHelpCommand+0xa2>
 800db98:	e7c4      	b.n	800db24 <prvHelpCommand+0x24>
					( *pxParameterStringLength )++;
 800db9a:	3201      	adds	r2, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800db9c:	5683      	ldrsb	r3, [r0, r2]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <prvHelpCommand+0xaa>
 800dba2:	2b20      	cmp	r3, #32
 800dba4:	d1f9      	bne.n	800db9a <prvHelpCommand+0x9a>
				if( *pxParameterStringLength == 0 )
 800dba6:	2a00      	cmp	r2, #0
 800dba8:	d0bc      	beq.n	800db24 <prvHelpCommand+0x24>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800dbaa:	2206      	movs	r2, #6
 800dbac:	491f      	ldr	r1, [pc, #124]	; (800dc2c <prvHelpCommand+0x12c>)
 800dbae:	f005 fd2a 	bl	8013606 <strncmp>
 800dbb2:	1e07      	subs	r7, r0, #0
 800dbb4:	d1db      	bne.n	800db6e <prvHelpCommand+0x6e>
		if( str == NumOfParamsHelpStrings )
 800dbb6:	4b1a      	ldr	r3, [pc, #104]	; (800dc20 <prvHelpCommand+0x120>)
 800dbb8:	4698      	mov	r8, r3
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b07      	cmp	r3, #7
 800dbbe:	d014      	beq.n	800dbea <prvHelpCommand+0xea>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	b2d2      	uxtb	r2, r2
 800dbc4:	4691      	mov	r9, r2
 800dbc6:	4642      	mov	r2, r8
 800dbc8:	4649      	mov	r1, r9
 800dbca:	7011      	strb	r1, [r2, #0]
 800dbcc:	4a18      	ldr	r2, [pc, #96]	; (800dc30 <prvHelpCommand+0x130>)
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	5899      	ldr	r1, [r3, r2]
 800dbd2:	0020      	movs	r0, r4
 800dbd4:	002a      	movs	r2, r5
 800dbd6:	f005 fd28 	bl	801362a <strncpy>
		if( str == NumOfParamsHelpStrings )
 800dbda:	464b      	mov	r3, r9
			xReturn = pdTRUE;
 800dbdc:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800dbde:	2b07      	cmp	r3, #7
 800dbe0:	d1c5      	bne.n	800db6e <prvHelpCommand+0x6e>
			xReturn = pdFALSE; str = 0;
 800dbe2:	4643      	mov	r3, r8
 800dbe4:	2600      	movs	r6, #0
 800dbe6:	701f      	strb	r7, [r3, #0]
 800dbe8:	e7c1      	b.n	800db6e <prvHelpCommand+0x6e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800dbea:	4642      	mov	r2, r8
 800dbec:	3b06      	subs	r3, #6
 800dbee:	7013      	strb	r3, [r2, #0]
 800dbf0:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <prvHelpCommand+0x130>)
 800dbf2:	002a      	movs	r2, r5
 800dbf4:	0020      	movs	r0, r4
 800dbf6:	6819      	ldr	r1, [r3, #0]
 800dbf8:	f005 fd17 	bl	801362a <strncpy>
			xReturn = pdTRUE;
 800dbfc:	2601      	movs	r6, #1
 800dbfe:	e7b6      	b.n	800db6e <prvHelpCommand+0x6e>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800dc00:	6833      	ldr	r3, [r6, #0]
 800dc02:	002a      	movs	r2, r5
 800dc04:	0020      	movs	r0, r4
 800dc06:	6859      	ldr	r1, [r3, #4]
 800dc08:	f005 fd0f 	bl	801362a <strncpy>
 800dc0c:	e7a9      	b.n	800db62 <prvHelpCommand+0x62>
			counter = 1;
 800dc0e:	2301      	movs	r3, #1
			pxCommand = &xRegisteredCommands;
 800dc10:	4e08      	ldr	r6, [pc, #32]	; (800dc34 <prvHelpCommand+0x134>)
			counter = 1;
 800dc12:	723b      	strb	r3, [r7, #8]
 800dc14:	3301      	adds	r3, #1
 800dc16:	4698      	mov	r8, r3
			pxCommand = &xRegisteredCommands;
 800dc18:	607e      	str	r6, [r7, #4]
			counter = 1;
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	e78b      	b.n	800db36 <prvHelpCommand+0x36>
 800dc1e:	46c0      	nop			; (mov r8, r8)
 800dc20:	20002a08 	.word	0x20002a08
 800dc24:	200011ec 	.word	0x200011ec
 800dc28:	080193b0 	.word	0x080193b0
 800dc2c:	0801abd8 	.word	0x0801abd8
 800dc30:	20000034 	.word	0x20000034
 800dc34:	200000bc 	.word	0x200000bc

0800dc38 <FreeRTOS_CLIRegisterCommand>:
{
 800dc38:	b570      	push	{r4, r5, r6, lr}
 800dc3a:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dc3c:	2008      	movs	r0, #8
 800dc3e:	f001 fcf5 	bl	800f62c <pvPortMalloc>
portBASE_TYPE xReturn = pdFAIL;
 800dc42:	2600      	movs	r6, #0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800dc44:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800dc46:	d00a      	beq.n	800dc5e <FreeRTOS_CLIRegisterCommand+0x26>
		taskENTER_CRITICAL();
 800dc48:	f001 fc76 	bl	800f538 <vPortEnterCritical>
			pxLastCommandInList->pxNext = pxNewListItem;
 800dc4c:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <FreeRTOS_CLIRegisterCommand+0x2c>)
			pxNewListItem->pxNext = NULL;
 800dc4e:	6066      	str	r6, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800dc50:	689a      	ldr	r2, [r3, #8]
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800dc52:	6025      	str	r5, [r4, #0]
			pxLastCommandInList->pxNext = pxNewListItem;
 800dc54:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800dc56:	609c      	str	r4, [r3, #8]
		taskEXIT_CRITICAL();
 800dc58:	f001 fc7a 	bl	800f550 <vPortExitCritical>
		xReturn = pdPASS;
 800dc5c:	3601      	adds	r6, #1
}
 800dc5e:	0030      	movs	r0, r6
 800dc60:	bd70      	pop	{r4, r5, r6, pc}
 800dc62:	46c0      	nop			; (mov r8, r8)
 800dc64:	200000bc 	.word	0x200000bc

0800dc68 <FreeRTOS_CLIProcessCommand>:
{
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	4657      	mov	r7, sl
 800dc6c:	464e      	mov	r6, r9
 800dc6e:	4645      	mov	r5, r8
 800dc70:	46de      	mov	lr, fp
 800dc72:	b5e0      	push	{r5, r6, r7, lr}
	if( pxCommand == NULL )
 800dc74:	4b39      	ldr	r3, [pc, #228]	; (800dd5c <FreeRTOS_CLIProcessCommand+0xf4>)
{
 800dc76:	b083      	sub	sp, #12
	if( pxCommand == NULL )
 800dc78:	4698      	mov	r8, r3
 800dc7a:	68db      	ldr	r3, [r3, #12]
{
 800dc7c:	0006      	movs	r6, r0
 800dc7e:	4692      	mov	sl, r2
 800dc80:	9101      	str	r1, [sp, #4]
	if( pxCommand == NULL )
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d011      	beq.n	800dcaa <FreeRTOS_CLIProcessCommand+0x42>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	0032      	movs	r2, r6
 800dc8a:	4651      	mov	r1, sl
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	9801      	ldr	r0, [sp, #4]
 800dc90:	4798      	blx	r3
 800dc92:	1e05      	subs	r5, r0, #0
		if( xReturn == pdFALSE )
 800dc94:	d101      	bne.n	800dc9a <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
 800dc96:	4643      	mov	r3, r8
 800dc98:	60d8      	str	r0, [r3, #12]
}
 800dc9a:	0028      	movs	r0, r5
 800dc9c:	b003      	add	sp, #12
 800dc9e:	bcf0      	pop	{r4, r5, r6, r7}
 800dca0:	46bb      	mov	fp, r7
 800dca2:	46b2      	mov	sl, r6
 800dca4:	46a9      	mov	r9, r5
 800dca6:	46a0      	mov	r8, r4
 800dca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dcaa:	4643      	mov	r3, r8
 800dcac:	4c2c      	ldr	r4, [pc, #176]	; (800dd60 <FreeRTOS_CLIProcessCommand+0xf8>)
 800dcae:	60dc      	str	r4, [r3, #12]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	469b      	mov	fp, r3
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800dcb4:	6827      	ldr	r7, [r4, #0]
 800dcb6:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800dcb8:	0028      	movs	r0, r5
 800dcba:	f7f2 fa2d 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dcbe:	4659      	mov	r1, fp
 800dcc0:	5c33      	ldrb	r3, [r6, r0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800dcc2:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800dcc4:	438b      	bics	r3, r1
 800dcc6:	b259      	sxtb	r1, r3
 800dcc8:	4689      	mov	r9, r1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d105      	bne.n	800dcda <FreeRTOS_CLIProcessCommand+0x72>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800dcce:	0029      	movs	r1, r5
 800dcd0:	0030      	movs	r0, r6
 800dcd2:	f005 fc98 	bl	8013606 <strncmp>
 800dcd6:	1e05      	subs	r5, r0, #0
 800dcd8:	d00b      	beq.n	800dcf2 <FreeRTOS_CLIProcessCommand+0x8a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800dcda:	4643      	mov	r3, r8
 800dcdc:	6864      	ldr	r4, [r4, #4]
 800dcde:	60dc      	str	r4, [r3, #12]
 800dce0:	2c00      	cmp	r4, #0
 800dce2:	d1e7      	bne.n	800dcb4 <FreeRTOS_CLIProcessCommand+0x4c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dce4:	4652      	mov	r2, sl
 800dce6:	491f      	ldr	r1, [pc, #124]	; (800dd64 <FreeRTOS_CLIProcessCommand+0xfc>)
 800dce8:	9801      	ldr	r0, [sp, #4]
 800dcea:	f005 fc9e 	bl	801362a <strncpy>
		xReturn = pdFALSE;
 800dcee:	2500      	movs	r5, #0
	return xReturn;
 800dcf0:	e7d3      	b.n	800dc9a <FreeRTOS_CLIProcessCommand+0x32>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800dcf2:	200c      	movs	r0, #12
 800dcf4:	5638      	ldrsb	r0, [r7, r0]
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	da04      	bge.n	800dd04 <FreeRTOS_CLIProcessCommand+0x9c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dcfa:	4643      	mov	r3, r8
 800dcfc:	68db      	ldr	r3, [r3, #12]
	else if( pxCommand != NULL )
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d0f0      	beq.n	800dce4 <FreeRTOS_CLIProcessCommand+0x7c>
 800dd02:	e7c0      	b.n	800dc86 <FreeRTOS_CLIProcessCommand+0x1e>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800dd04:	2300      	movs	r3, #0
 800dd06:	56f3      	ldrsb	r3, [r6, r3]
 800dd08:	0032      	movs	r2, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800dd0a:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d106      	bne.n	800dd1e <FreeRTOS_CLIProcessCommand+0xb6>
 800dd10:	e015      	b.n	800dd3e <FreeRTOS_CLIProcessCommand+0xd6>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800dd12:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
 800dd14:	2300      	movs	r3, #0
		}

		pcCommandString++;
 800dd16:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800dd18:	56d3      	ldrsb	r3, [r2, r3]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d009      	beq.n	800dd32 <FreeRTOS_CLIProcessCommand+0xca>
		if( ( *pcCommandString ) == ' ' )
 800dd1e:	2b20      	cmp	r3, #32
 800dd20:	d1f7      	bne.n	800dd12 <FreeRTOS_CLIProcessCommand+0xaa>
			if( xLastCharacterWasSpace != pdTRUE )
 800dd22:	2901      	cmp	r1, #1
 800dd24:	d0f6      	beq.n	800dd14 <FreeRTOS_CLIProcessCommand+0xac>
				cParameters++;
 800dd26:	464b      	mov	r3, r9
 800dd28:	3301      	adds	r3, #1
 800dd2a:	b25b      	sxtb	r3, r3
 800dd2c:	4699      	mov	r9, r3
				xLastCharacterWasSpace = pdTRUE;
 800dd2e:	2101      	movs	r1, #1
 800dd30:	e7f0      	b.n	800dd14 <FreeRTOS_CLIProcessCommand+0xac>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800dd32:	2901      	cmp	r1, #1
 800dd34:	d103      	bne.n	800dd3e <FreeRTOS_CLIProcessCommand+0xd6>
	{
		cParameters--;
 800dd36:	464b      	mov	r3, r9
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	b25b      	sxtb	r3, r3
 800dd3c:	4699      	mov	r9, r3
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800dd3e:	4548      	cmp	r0, r9
 800dd40:	d0db      	beq.n	800dcfa <FreeRTOS_CLIProcessCommand+0x92>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800dd42:	4643      	mov	r3, r8
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d0cc      	beq.n	800dce4 <FreeRTOS_CLIProcessCommand+0x7c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	4906      	ldr	r1, [pc, #24]	; (800dd68 <FreeRTOS_CLIProcessCommand+0x100>)
 800dd4e:	9801      	ldr	r0, [sp, #4]
 800dd50:	f005 fc6b 	bl	801362a <strncpy>
		pxCommand = NULL;
 800dd54:	2300      	movs	r3, #0
 800dd56:	4642      	mov	r2, r8
 800dd58:	60d3      	str	r3, [r2, #12]
 800dd5a:	e79e      	b.n	800dc9a <FreeRTOS_CLIProcessCommand+0x32>
 800dd5c:	20002a08 	.word	0x20002a08
 800dd60:	200000bc 	.word	0x200000bc
 800dd64:	0801c298 	.word	0x0801c298
 800dd68:	0801c240 	.word	0x0801c240

0800dd6c <FreeRTOS_CLIGetOutputBuffer>:
}
 800dd6c:	4800      	ldr	r0, [pc, #0]	; (800dd70 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800dd6e:	4770      	bx	lr
 800dd70:	20002a18 	.word	0x20002a18

0800dd74 <FreeRTOS_CLIGetParameter>:
	*pxParameterStringLength = 0;
 800dd74:	2300      	movs	r3, #0
{
 800dd76:	b510      	push	{r4, lr}
 800dd78:	0014      	movs	r4, r2
	*pxParameterStringLength = 0;
 800dd7a:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800dd7c:	2200      	movs	r2, #0
	while( uxParametersFound < uxWantedParameter )
 800dd7e:	428a      	cmp	r2, r1
 800dd80:	d103      	bne.n	800dd8a <FreeRTOS_CLIGetParameter+0x16>
 800dd82:	e006      	b.n	800dd92 <FreeRTOS_CLIGetParameter+0x1e>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd84:	2b20      	cmp	r3, #32
 800dd86:	d007      	beq.n	800dd98 <FreeRTOS_CLIGetParameter+0x24>
			pcCommandString++;
 800dd88:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	56c3      	ldrsb	r3, [r0, r3]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1f8      	bne.n	800dd84 <FreeRTOS_CLIGetParameter+0x10>
const int8_t *pcReturn = NULL;
 800dd92:	2000      	movs	r0, #0
}
 800dd94:	bd10      	pop	{r4, pc}
			pcCommandString++;
 800dd96:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800dd98:	2300      	movs	r3, #0
 800dd9a:	56c3      	ldrsb	r3, [r0, r3]
 800dd9c:	2b20      	cmp	r3, #32
 800dd9e:	d0fa      	beq.n	800dd96 <FreeRTOS_CLIGetParameter+0x22>
		if( *pcCommandString != 0x00 )
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d0f6      	beq.n	800dd92 <FreeRTOS_CLIGetParameter+0x1e>
			uxParametersFound++;
 800dda4:	3201      	adds	r2, #1
			if( uxParametersFound == uxWantedParameter )
 800dda6:	4291      	cmp	r1, r2
 800dda8:	d1e9      	bne.n	800dd7e <FreeRTOS_CLIGetParameter+0xa>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ddaa:	2100      	movs	r1, #0
 800ddac:	5641      	ldrsb	r1, [r0, r1]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2900      	cmp	r1, #0
 800ddb2:	d105      	bne.n	800ddc0 <FreeRTOS_CLIGetParameter+0x4c>
 800ddb4:	e7ed      	b.n	800dd92 <FreeRTOS_CLIGetParameter+0x1e>
					( *pxParameterStringLength )++;
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	6023      	str	r3, [r4, #0]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ddba:	56c1      	ldrsb	r1, [r0, r3]
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	d0e9      	beq.n	800dd94 <FreeRTOS_CLIGetParameter+0x20>
 800ddc0:	2920      	cmp	r1, #32
 800ddc2:	d1f8      	bne.n	800ddb6 <FreeRTOS_CLIGetParameter+0x42>
				if( *pxParameterStringLength == 0 )
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1e5      	bne.n	800dd94 <FreeRTOS_CLIGetParameter+0x20>
 800ddc8:	e7e3      	b.n	800dd92 <FreeRTOS_CLIGetParameter+0x1e>
 800ddca:	46c0      	nop			; (mov r8, r8)

0800ddcc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddcc:	0003      	movs	r3, r0
 800ddce:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddd0:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd2:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddd6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddd8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ddda:	4252      	negs	r2, r2
 800dddc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ddde:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dde0:	4770      	bx	lr
 800dde2:	46c0      	nop			; (mov r8, r8)

0800dde4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dde4:	2300      	movs	r3, #0
 800dde6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dde8:	4770      	bx	lr
 800ddea:	46c0      	nop			; (mov r8, r8)

0800ddec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddec:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddee:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ddf0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddf2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddf4:	689a      	ldr	r2, [r3, #8]
 800ddf6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddf8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800ddfa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ddfc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ddfe:	3301      	adds	r3, #1
 800de00:	6003      	str	r3, [r0, #0]
}
 800de02:	4770      	bx	lr

0800de04 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de04:	0003      	movs	r3, r0
{
 800de06:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de08:	680c      	ldr	r4, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de0a:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800de0c:	1c62      	adds	r2, r4, #1
 800de0e:	d00d      	beq.n	800de2c <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de10:	001a      	movs	r2, r3
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	681d      	ldr	r5, [r3, #0]
 800de16:	42a5      	cmp	r5, r4
 800de18:	d9fa      	bls.n	800de10 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de1a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de1c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800de1e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800de20:	608a      	str	r2, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800de22:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800de24:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800de26:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800de28:	6003      	str	r3, [r0, #0]
}
 800de2a:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800de2c:	6902      	ldr	r2, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800de2e:	6853      	ldr	r3, [r2, #4]
 800de30:	e7f3      	b.n	800de1a <vListInsert+0x16>
 800de32:	46c0      	nop			; (mov r8, r8)

0800de34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800de34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de36:	6841      	ldr	r1, [r0, #4]
 800de38:	6882      	ldr	r2, [r0, #8]
 800de3a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de3c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de3e:	6859      	ldr	r1, [r3, #4]
 800de40:	4281      	cmp	r1, r0
 800de42:	d005      	beq.n	800de50 <uxListRemove+0x1c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800de44:	2200      	movs	r2, #0
 800de46:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	1e50      	subs	r0, r2, #1
 800de4c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800de4e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de50:	605a      	str	r2, [r3, #4]
 800de52:	e7f7      	b.n	800de44 <uxListRemove+0x10>

0800de54 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de58:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800de5a:	0004      	movs	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	d107      	bne.n	800de70 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de60:	6805      	ldr	r5, [r0, #0]
 800de62:	2d00      	cmp	r5, #0
 800de64:	d02d      	beq.n	800dec2 <prvCopyDataToQueue+0x6e>
BaseType_t xReturn = pdFALSE;
 800de66:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800de68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800de6a:	3301      	adds	r3, #1
 800de6c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800de70:	2d00      	cmp	r5, #0
 800de72:	d10e      	bne.n	800de92 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800de74:	6880      	ldr	r0, [r0, #8]
 800de76:	f005 f989 	bl	801318c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800de7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800de7c:	68a3      	ldr	r3, [r4, #8]
 800de7e:	4694      	mov	ip, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de80:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800de82:	4463      	add	r3, ip
 800de84:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de86:	4293      	cmp	r3, r2
 800de88:	d3ed      	bcc.n	800de66 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de8a:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800de8c:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de8e:	60a3      	str	r3, [r4, #8]
 800de90:	e7ea      	b.n	800de68 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de92:	68c0      	ldr	r0, [r0, #12]
 800de94:	f005 f97a 	bl	801318c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800de98:	68e1      	ldr	r1, [r4, #12]
 800de9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de9c:	425a      	negs	r2, r3
 800de9e:	1acb      	subs	r3, r1, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dea0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dea2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dea4:	428b      	cmp	r3, r1
 800dea6:	d203      	bcs.n	800deb0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	469c      	mov	ip, r3
 800deac:	4462      	add	r2, ip
 800deae:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800deb0:	2d02      	cmp	r5, #2
 800deb2:	d1d8      	bne.n	800de66 <prvCopyDataToQueue+0x12>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0d5      	beq.n	800de66 <prvCopyDataToQueue+0x12>
				--( pxQueue->uxMessagesWaiting );
 800deba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800debc:	3b01      	subs	r3, #1
 800debe:	63a3      	str	r3, [r4, #56]	; 0x38
 800dec0:	e7d1      	b.n	800de66 <prvCopyDataToQueue+0x12>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dec2:	6840      	ldr	r0, [r0, #4]
 800dec4:	f000 ff74 	bl	800edb0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800dec8:	6065      	str	r5, [r4, #4]
 800deca:	e7cd      	b.n	800de68 <prvCopyDataToQueue+0x14>

0800decc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ded0:	f001 fb32 	bl	800f538 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ded4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	dd18      	ble.n	800df0c <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deda:	0025      	movs	r5, r4
 800dedc:	3524      	adds	r5, #36	; 0x24
 800dede:	e005      	b.n	800deec <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800dee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dee2:	3b01      	subs	r3, #1
 800dee4:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800dee6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dee8:	2b00      	cmp	r3, #0
 800deea:	dd0f      	ble.n	800df0c <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800deec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00c      	beq.n	800df0c <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800def2:	0028      	movs	r0, r5
 800def4:	f000 fea8 	bl	800ec48 <xTaskRemoveFromEventList>
 800def8:	2800      	cmp	r0, #0
 800defa:	d0f1      	beq.n	800dee0 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800defc:	f000 ff12 	bl	800ed24 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800df00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df02:	3b01      	subs	r3, #1
 800df04:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800df06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dcef      	bgt.n	800deec <prvUnlockQueue+0x20>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800df0c:	2301      	movs	r3, #1
 800df0e:	425b      	negs	r3, r3
 800df10:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800df12:	f001 fb1d 	bl	800f550 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df16:	f001 fb0f 	bl	800f538 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800df1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dd18      	ble.n	800df52 <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df20:	0025      	movs	r5, r4
 800df22:	3510      	adds	r5, #16
 800df24:	e005      	b.n	800df32 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800df26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df28:	3b01      	subs	r3, #1
 800df2a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800df2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df2e:	2b00      	cmp	r3, #0
 800df30:	dd0f      	ble.n	800df52 <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df32:	6923      	ldr	r3, [r4, #16]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00c      	beq.n	800df52 <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df38:	0028      	movs	r0, r5
 800df3a:	f000 fe85 	bl	800ec48 <xTaskRemoveFromEventList>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d0f1      	beq.n	800df26 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800df42:	f000 feef 	bl	800ed24 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800df46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df48:	3b01      	subs	r3, #1
 800df4a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800df4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800df4e:	2b00      	cmp	r3, #0
 800df50:	dcef      	bgt.n	800df32 <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800df52:	2301      	movs	r3, #1
 800df54:	425b      	negs	r3, r3
 800df56:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df58:	f001 fafa 	bl	800f550 <vPortExitCritical>
}
 800df5c:	bd70      	pop	{r4, r5, r6, pc}
 800df5e:	46c0      	nop			; (mov r8, r8)

0800df60 <xQueueGenericCreate>:
{
 800df60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df62:	0007      	movs	r7, r0
 800df64:	000d      	movs	r5, r1
 800df66:	0016      	movs	r6, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800df68:	2900      	cmp	r1, #0
 800df6a:	d009      	beq.n	800df80 <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df6c:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800df6e:	3055      	adds	r0, #85	; 0x55
 800df70:	f001 fb5c 	bl	800f62c <pvPortMalloc>
 800df74:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800df76:	d02b      	beq.n	800dfd0 <xQueueGenericCreate+0x70>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800df78:	0003      	movs	r3, r0
 800df7a:	3354      	adds	r3, #84	; 0x54
 800df7c:	6003      	str	r3, [r0, #0]
 800df7e:	e005      	b.n	800df8c <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800df80:	2054      	movs	r0, #84	; 0x54
 800df82:	f001 fb53 	bl	800f62c <pvPortMalloc>
 800df86:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800df88:	d022      	beq.n	800dfd0 <xQueueGenericCreate+0x70>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df8a:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800df8c:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800df8e:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800df90:	f001 fad2 	bl	800f538 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800df94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800df96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800df98:	6821      	ldr	r1, [r4, #0]
 800df9a:	4353      	muls	r3, r2
 800df9c:	18c8      	adds	r0, r1, r3
 800df9e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dfa0:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dfa2:	1a9b      	subs	r3, r3, r2
 800dfa4:	18cb      	adds	r3, r1, r3
 800dfa6:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800dfa8:	2301      	movs	r3, #1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dfaa:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dfac:	0020      	movs	r0, r4
		pxQueue->xRxLock = queueUNLOCKED;
 800dfae:	425b      	negs	r3, r3
 800dfb0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfb2:	60a1      	str	r1, [r4, #8]
		pxQueue->xTxLock = queueUNLOCKED;
 800dfb4:	64a3      	str	r3, [r4, #72]	; 0x48
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dfb6:	3010      	adds	r0, #16
 800dfb8:	f7ff ff08 	bl	800ddcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dfbc:	0020      	movs	r0, r4
 800dfbe:	3024      	adds	r0, #36	; 0x24
 800dfc0:	f7ff ff04 	bl	800ddcc <vListInitialise>
	taskEXIT_CRITICAL();
 800dfc4:	f001 fac4 	bl	800f550 <vPortExitCritical>
			pxNewQueue->ucQueueType = ucQueueType;
 800dfc8:	2350      	movs	r3, #80	; 0x50
 800dfca:	54e6      	strb	r6, [r4, r3]
}
 800dfcc:	0020      	movs	r0, r4
 800dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
QueueHandle_t xReturn = NULL;
 800dfd0:	2400      	movs	r4, #0
 800dfd2:	e7fb      	b.n	800dfcc <xQueueGenericCreate+0x6c>

0800dfd4 <xQueueCreateCountingSemaphore>:
	{
 800dfd4:	b570      	push	{r4, r5, r6, lr}
 800dfd6:	0006      	movs	r6, r0
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dfd8:	2054      	movs	r0, #84	; 0x54
	{
 800dfda:	000d      	movs	r5, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800dfdc:	f001 fb26 	bl	800f62c <pvPortMalloc>
 800dfe0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800dfe2:	d022      	beq.n	800e02a <xQueueCreateCountingSemaphore+0x56>
		pxNewQueue->uxLength = uxQueueLength;
 800dfe4:	63c6      	str	r6, [r0, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800dfe6:	2600      	movs	r6, #0
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfe8:	6000      	str	r0, [r0, #0]
		pxNewQueue->uxItemSize = uxItemSize;
 800dfea:	6406      	str	r6, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
 800dfec:	f001 faa4 	bl	800f538 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800dff0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dff2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dff4:	6822      	ldr	r2, [r4, #0]
 800dff6:	434b      	muls	r3, r1
 800dff8:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800dffa:	1a5b      	subs	r3, r3, r1
 800dffc:	18d3      	adds	r3, r2, r3
 800dffe:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e000:	2301      	movs	r3, #1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e002:	6060      	str	r0, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e004:	0020      	movs	r0, r4
		pxQueue->xRxLock = queueUNLOCKED;
 800e006:	425b      	negs	r3, r3
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e008:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e00a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e00c:	3010      	adds	r0, #16
		pxQueue->xRxLock = queueUNLOCKED;
 800e00e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e010:	64a3      	str	r3, [r4, #72]	; 0x48
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e012:	f7ff fedb 	bl	800ddcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e016:	0020      	movs	r0, r4
 800e018:	3024      	adds	r0, #36	; 0x24
 800e01a:	f7ff fed7 	bl	800ddcc <vListInitialise>
	taskEXIT_CRITICAL();
 800e01e:	f001 fa97 	bl	800f550 <vPortExitCritical>
			pxNewQueue->ucQueueType = ucQueueType;
 800e022:	2350      	movs	r3, #80	; 0x50
 800e024:	2202      	movs	r2, #2
 800e026:	54e2      	strb	r2, [r4, r3]
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e028:	63a5      	str	r5, [r4, #56]	; 0x38
	}
 800e02a:	0020      	movs	r0, r4
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
 800e02e:	46c0      	nop			; (mov r8, r8)

0800e030 <xQueueGenericSend>:
{
 800e030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e032:	46c6      	mov	lr, r8
 800e034:	0004      	movs	r4, r0
 800e036:	b500      	push	{lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	001e      	movs	r6, r3
 800e03c:	4688      	mov	r8, r1
 800e03e:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800e040:	f001 fa7a 	bl	800f538 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e044:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e048:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e04a:	2700      	movs	r7, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e04c:	4298      	cmp	r0, r3
 800e04e:	d330      	bcc.n	800e0b2 <xQueueGenericSend+0x82>
 800e050:	2e02      	cmp	r6, #2
 800e052:	d02e      	beq.n	800e0b2 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d052      	beq.n	800e100 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	d04c      	beq.n	800e0f8 <xQueueGenericSend+0xc8>
		taskEXIT_CRITICAL();
 800e05e:	f001 fa77 	bl	800f550 <vPortExitCritical>
		vTaskSuspendAll();
 800e062:	f000 fc01 	bl	800e868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e066:	f001 fa67 	bl	800f538 <vPortEnterCritical>
 800e06a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e06c:	3301      	adds	r3, #1
 800e06e:	d100      	bne.n	800e072 <xQueueGenericSend+0x42>
 800e070:	6467      	str	r7, [r4, #68]	; 0x44
 800e072:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	d100      	bne.n	800e07a <xQueueGenericSend+0x4a>
 800e078:	64a7      	str	r7, [r4, #72]	; 0x48
 800e07a:	f001 fa69 	bl	800f550 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e07e:	a901      	add	r1, sp, #4
 800e080:	a802      	add	r0, sp, #8
 800e082:	f000 fe23 	bl	800eccc <xTaskCheckForTimeOut>
 800e086:	2800      	cmp	r0, #0
 800e088:	d13e      	bne.n	800e108 <xQueueGenericSend+0xd8>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e08a:	f001 fa55 	bl	800f538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e08e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e090:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e092:	4293      	cmp	r3, r2
 800e094:	d01e      	beq.n	800e0d4 <xQueueGenericSend+0xa4>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e096:	f001 fa5b 	bl	800f550 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e09a:	0020      	movs	r0, r4
 800e09c:	f7ff ff16 	bl	800decc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0a0:	f000 fc86 	bl	800e9b0 <xTaskResumeAll>
{
 800e0a4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e0a6:	f001 fa47 	bl	800f538 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800e0ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e0ae:	4298      	cmp	r0, r3
 800e0b0:	d2ce      	bcs.n	800e050 <xQueueGenericSend+0x20>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0b2:	0032      	movs	r2, r6
 800e0b4:	4641      	mov	r1, r8
 800e0b6:	0020      	movs	r0, r4
 800e0b8:	f7ff fecc 	bl	800de54 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d129      	bne.n	800e116 <xQueueGenericSend+0xe6>
					else if( xYieldRequired != pdFALSE )
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d12d      	bne.n	800e122 <xQueueGenericSend+0xf2>
				taskEXIT_CRITICAL();
 800e0c6:	f001 fa43 	bl	800f550 <vPortExitCritical>
				return pdPASS;
 800e0ca:	2001      	movs	r0, #1
}
 800e0cc:	b004      	add	sp, #16
 800e0ce:	bc80      	pop	{r7}
 800e0d0:	46b8      	mov	r8, r7
 800e0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 800e0d4:	f001 fa3c 	bl	800f550 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e0d8:	0020      	movs	r0, r4
 800e0da:	9901      	ldr	r1, [sp, #4]
 800e0dc:	3010      	adds	r0, #16
 800e0de:	f000 fd85 	bl	800ebec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	f7ff fef2 	bl	800decc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0e8:	f000 fc62 	bl	800e9b0 <xTaskResumeAll>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d1d9      	bne.n	800e0a4 <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
 800e0f0:	f001 fa16 	bl	800f520 <vPortYield>
{
 800e0f4:	2501      	movs	r5, #1
 800e0f6:	e7d6      	b.n	800e0a6 <xQueueGenericSend+0x76>
					vTaskSetTimeOutState( &xTimeOut );
 800e0f8:	a802      	add	r0, sp, #8
 800e0fa:	f000 fddb 	bl	800ecb4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0fe:	e7ae      	b.n	800e05e <xQueueGenericSend+0x2e>
					taskEXIT_CRITICAL();
 800e100:	f001 fa26 	bl	800f550 <vPortExitCritical>
					return errQUEUE_FULL;
 800e104:	2000      	movs	r0, #0
 800e106:	e7e1      	b.n	800e0cc <xQueueGenericSend+0x9c>
			prvUnlockQueue( pxQueue );
 800e108:	0020      	movs	r0, r4
 800e10a:	f7ff fedf 	bl	800decc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e10e:	f000 fc4f 	bl	800e9b0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e112:	2000      	movs	r0, #0
 800e114:	e7da      	b.n	800e0cc <xQueueGenericSend+0x9c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e116:	0020      	movs	r0, r4
 800e118:	3024      	adds	r0, #36	; 0x24
 800e11a:	f000 fd95 	bl	800ec48 <xTaskRemoveFromEventList>
 800e11e:	2801      	cmp	r0, #1
 800e120:	d1d1      	bne.n	800e0c6 <xQueueGenericSend+0x96>
							queueYIELD_IF_USING_PREEMPTION();
 800e122:	f001 f9fd 	bl	800f520 <vPortYield>
 800e126:	e7ce      	b.n	800e0c6 <xQueueGenericSend+0x96>

0800e128 <xQueueGenericSendFromISR>:
{
 800e128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12a:	4647      	mov	r7, r8
 800e12c:	46ce      	mov	lr, r9
 800e12e:	0004      	movs	r4, r0
 800e130:	b580      	push	{r7, lr}
 800e132:	4690      	mov	r8, r2
 800e134:	001d      	movs	r5, r3
 800e136:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e138:	f001 fa14 	bl	800f564 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e13c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e13e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e140:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e142:	4293      	cmp	r3, r2
 800e144:	d30b      	bcc.n	800e15e <xQueueGenericSendFromISR+0x36>
			xReturn = errQUEUE_FULL;
 800e146:	2300      	movs	r3, #0
 800e148:	4699      	mov	r9, r3
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e14a:	2d02      	cmp	r5, #2
 800e14c:	d007      	beq.n	800e15e <xQueueGenericSendFromISR+0x36>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e14e:	0030      	movs	r0, r6
 800e150:	f001 fa0e 	bl	800f570 <vClearInterruptMaskFromISR>
}
 800e154:	4648      	mov	r0, r9
 800e156:	bcc0      	pop	{r6, r7}
 800e158:	46b9      	mov	r9, r7
 800e15a:	46b0      	mov	r8, r6
 800e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e15e:	002a      	movs	r2, r5
 800e160:	0039      	movs	r1, r7
 800e162:	0020      	movs	r0, r4
 800e164:	f7ff fe76 	bl	800de54 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e168:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e16a:	3301      	adds	r3, #1
 800e16c:	d005      	beq.n	800e17a <xQueueGenericSendFromISR+0x52>
				++( pxQueue->xTxLock );
 800e16e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e170:	3301      	adds	r3, #1
 800e172:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e174:	2301      	movs	r3, #1
 800e176:	4699      	mov	r9, r3
 800e178:	e7e9      	b.n	800e14e <xQueueGenericSendFromISR+0x26>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0f9      	beq.n	800e174 <xQueueGenericSendFromISR+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e180:	0020      	movs	r0, r4
 800e182:	3024      	adds	r0, #36	; 0x24
 800e184:	f000 fd60 	bl	800ec48 <xTaskRemoveFromEventList>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d0f3      	beq.n	800e174 <xQueueGenericSendFromISR+0x4c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e18c:	4643      	mov	r3, r8
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d0f0      	beq.n	800e174 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e192:	2301      	movs	r3, #1
 800e194:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e196:	4699      	mov	r9, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e198:	6013      	str	r3, [r2, #0]
 800e19a:	e7d8      	b.n	800e14e <xQueueGenericSendFromISR+0x26>

0800e19c <xQueueGiveFromISR>:
{
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	0004      	movs	r4, r0
 800e1a0:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1a2:	f001 f9df 	bl	800f564 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e1a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1aa:	0005      	movs	r5, r0
			xReturn = errQUEUE_FULL;
 800e1ac:	2600      	movs	r6, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d209      	bcs.n	800e1c6 <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800e1b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e1b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	d008      	beq.n	800e1d0 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800e1be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e1c4:	2601      	movs	r6, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e1c6:	0028      	movs	r0, r5
 800e1c8:	f001 f9d2 	bl	800f570 <vClearInterruptMaskFromISR>
}
 800e1cc:	0030      	movs	r0, r6
 800e1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d0f6      	beq.n	800e1c4 <xQueueGiveFromISR+0x28>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1d6:	0020      	movs	r0, r4
 800e1d8:	3024      	adds	r0, #36	; 0x24
 800e1da:	f000 fd35 	bl	800ec48 <xTaskRemoveFromEventList>
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d0f0      	beq.n	800e1c4 <xQueueGiveFromISR+0x28>
							if( pxHigherPriorityTaskWoken != NULL )
 800e1e2:	2f00      	cmp	r7, #0
 800e1e4:	d0ee      	beq.n	800e1c4 <xQueueGiveFromISR+0x28>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1e6:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800e1e8:	2601      	movs	r6, #1
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	e7eb      	b.n	800e1c6 <xQueueGiveFromISR+0x2a>
 800e1ee:	46c0      	nop			; (mov r8, r8)

0800e1f0 <xQueueGenericReceive>:
{
 800e1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1f2:	46c6      	mov	lr, r8
 800e1f4:	0004      	movs	r4, r0
 800e1f6:	b500      	push	{lr}
 800e1f8:	b084      	sub	sp, #16
 800e1fa:	001f      	movs	r7, r3
 800e1fc:	4688      	mov	r8, r1
 800e1fe:	9201      	str	r2, [sp, #4]
		taskENTER_CRITICAL();
 800e200:	f001 f99a 	bl	800f538 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e204:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e206:	2b00      	cmp	r3, #0
 800e208:	d148      	bne.n	800e29c <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e20a:	9b01      	ldr	r3, [sp, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d072      	beq.n	800e2f6 <xQueueGenericReceive+0x106>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e210:	0026      	movs	r6, r4
					vTaskSetTimeOutState( &xTimeOut );
 800e212:	a802      	add	r0, sp, #8
 800e214:	f000 fd4e 	bl	800ecb4 <vTaskSetTimeOutState>
		prvLockQueue( pxQueue );
 800e218:	2500      	movs	r5, #0
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e21a:	3624      	adds	r6, #36	; 0x24
 800e21c:	e017      	b.n	800e24e <xQueueGenericReceive+0x5e>
	taskEXIT_CRITICAL();
 800e21e:	f001 f997 	bl	800f550 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d05e      	beq.n	800e2e6 <xQueueGenericReceive+0xf6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e228:	0030      	movs	r0, r6
 800e22a:	9901      	ldr	r1, [sp, #4]
 800e22c:	f000 fcde 	bl	800ebec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e230:	0020      	movs	r0, r4
 800e232:	f7ff fe4b 	bl	800decc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e236:	f000 fbbb 	bl	800e9b0 <xTaskResumeAll>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d050      	beq.n	800e2e0 <xQueueGenericReceive+0xf0>
		taskENTER_CRITICAL();
 800e23e:	f001 f97b 	bl	800f538 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e244:	2b00      	cmp	r3, #0
 800e246:	d129      	bne.n	800e29c <xQueueGenericReceive+0xac>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e248:	9b01      	ldr	r3, [sp, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d053      	beq.n	800e2f6 <xQueueGenericReceive+0x106>
		taskEXIT_CRITICAL();
 800e24e:	f001 f97f 	bl	800f550 <vPortExitCritical>
		vTaskSuspendAll();
 800e252:	f000 fb09 	bl	800e868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e256:	f001 f96f 	bl	800f538 <vPortEnterCritical>
 800e25a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e25c:	1c53      	adds	r3, r2, #1
 800e25e:	d100      	bne.n	800e262 <xQueueGenericReceive+0x72>
 800e260:	6465      	str	r5, [r4, #68]	; 0x44
 800e262:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e264:	1c53      	adds	r3, r2, #1
 800e266:	d100      	bne.n	800e26a <xQueueGenericReceive+0x7a>
 800e268:	64a5      	str	r5, [r4, #72]	; 0x48
 800e26a:	f001 f971 	bl	800f550 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e26e:	a901      	add	r1, sp, #4
 800e270:	a802      	add	r0, sp, #8
 800e272:	f000 fd2b 	bl	800eccc <xTaskCheckForTimeOut>
 800e276:	2800      	cmp	r0, #0
 800e278:	d144      	bne.n	800e304 <xQueueGenericReceive+0x114>
	taskENTER_CRITICAL();
 800e27a:	f001 f95d 	bl	800f538 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e27e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0cc      	beq.n	800e21e <xQueueGenericReceive+0x2e>
	taskEXIT_CRITICAL();
 800e284:	f001 f964 	bl	800f550 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e288:	0020      	movs	r0, r4
 800e28a:	f7ff fe1f 	bl	800decc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e28e:	f000 fb8f 	bl	800e9b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e292:	f001 f951 	bl	800f538 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0d5      	beq.n	800e248 <xQueueGenericReceive+0x58>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e29c:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e29e:	68e5      	ldr	r5, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2a0:	2a00      	cmp	r2, #0
 800e2a2:	d009      	beq.n	800e2b8 <xQueueGenericReceive+0xc8>
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2a4:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e2a6:	18a9      	adds	r1, r5, r2
 800e2a8:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2aa:	4299      	cmp	r1, r3
 800e2ac:	d301      	bcc.n	800e2b2 <xQueueGenericReceive+0xc2>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e2ae:	6821      	ldr	r1, [r4, #0]
 800e2b0:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e2b2:	4640      	mov	r0, r8
 800e2b4:	f004 ff6a 	bl	801318c <memcpy>
				if( xJustPeeking == pdFALSE )
 800e2b8:	2f00      	cmp	r7, #0
 800e2ba:	d12a      	bne.n	800e312 <xQueueGenericReceive+0x122>
					--( pxQueue->uxMessagesWaiting );
 800e2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d033      	beq.n	800e330 <xQueueGenericReceive+0x140>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d025      	beq.n	800e31a <xQueueGenericReceive+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e2ce:	0020      	movs	r0, r4
 800e2d0:	3010      	adds	r0, #16
 800e2d2:	f000 fcb9 	bl	800ec48 <xTaskRemoveFromEventList>
 800e2d6:	2801      	cmp	r0, #1
 800e2d8:	d11f      	bne.n	800e31a <xQueueGenericReceive+0x12a>
							queueYIELD_IF_USING_PREEMPTION();
 800e2da:	f001 f921 	bl	800f520 <vPortYield>
 800e2de:	e01c      	b.n	800e31a <xQueueGenericReceive+0x12a>
					portYIELD_WITHIN_API();
 800e2e0:	f001 f91e 	bl	800f520 <vPortYield>
 800e2e4:	e7ab      	b.n	800e23e <xQueueGenericReceive+0x4e>
						taskENTER_CRITICAL();
 800e2e6:	f001 f927 	bl	800f538 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e2ea:	6860      	ldr	r0, [r4, #4]
 800e2ec:	f000 fd2c 	bl	800ed48 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e2f0:	f001 f92e 	bl	800f550 <vPortExitCritical>
 800e2f4:	e798      	b.n	800e228 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
 800e2f6:	f001 f92b 	bl	800f550 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e2fa:	2000      	movs	r0, #0
}
 800e2fc:	b004      	add	sp, #16
 800e2fe:	bc80      	pop	{r7}
 800e300:	46b8      	mov	r8, r7
 800e302:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvUnlockQueue( pxQueue );
 800e304:	0020      	movs	r0, r4
 800e306:	f7ff fde1 	bl	800decc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e30a:	f000 fb51 	bl	800e9b0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e30e:	2000      	movs	r0, #0
 800e310:	e7f4      	b.n	800e2fc <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e312:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e314:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e316:	2b00      	cmp	r3, #0
 800e318:	d103      	bne.n	800e322 <xQueueGenericReceive+0x132>
				taskEXIT_CRITICAL();
 800e31a:	f001 f919 	bl	800f550 <vPortExitCritical>
				return pdPASS;
 800e31e:	2001      	movs	r0, #1
 800e320:	e7ec      	b.n	800e2fc <xQueueGenericReceive+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e322:	0020      	movs	r0, r4
 800e324:	3024      	adds	r0, #36	; 0x24
 800e326:	f000 fc8f 	bl	800ec48 <xTaskRemoveFromEventList>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d0f5      	beq.n	800e31a <xQueueGenericReceive+0x12a>
 800e32e:	e7d4      	b.n	800e2da <xQueueGenericReceive+0xea>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e330:	f000 fe56 	bl	800efe0 <pvTaskIncrementMutexHeldCount>
 800e334:	6060      	str	r0, [r4, #4]
 800e336:	e7c7      	b.n	800e2c8 <xQueueGenericReceive+0xd8>

0800e338 <xQueueReceiveFromISR>:
{
 800e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33a:	46c6      	mov	lr, r8
 800e33c:	0004      	movs	r4, r0
 800e33e:	b500      	push	{lr}
 800e340:	000f      	movs	r7, r1
 800e342:	4690      	mov	r8, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e344:	f001 f90e 	bl	800f564 <ulSetInterruptMaskFromISR>
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e34a:	0005      	movs	r5, r0
			xReturn = pdFAIL;
 800e34c:	2600      	movs	r6, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <xQueueReceiveFromISR+0x28>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e352:	0028      	movs	r0, r5
 800e354:	f001 f90c 	bl	800f570 <vClearInterruptMaskFromISR>
}
 800e358:	0030      	movs	r0, r6
 800e35a:	bc80      	pop	{r7}
 800e35c:	46b8      	mov	r8, r7
 800e35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e360:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e362:	2a00      	cmp	r2, #0
 800e364:	d00a      	beq.n	800e37c <xQueueReceiveFromISR+0x44>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	1899      	adds	r1, r3, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e36a:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e36c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e36e:	4299      	cmp	r1, r3
 800e370:	d301      	bcc.n	800e376 <xQueueReceiveFromISR+0x3e>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e372:	6821      	ldr	r1, [r4, #0]
 800e374:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e376:	0038      	movs	r0, r7
 800e378:	f004 ff08 	bl	801318c <memcpy>
			--( pxQueue->uxMessagesWaiting );
 800e37c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e37e:	3b01      	subs	r3, #1
 800e380:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e382:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e384:	3301      	adds	r3, #1
 800e386:	d004      	beq.n	800e392 <xQueueReceiveFromISR+0x5a>
				++( pxQueue->xRxLock );
 800e388:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e38a:	3301      	adds	r3, #1
 800e38c:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e38e:	2601      	movs	r6, #1
 800e390:	e7df      	b.n	800e352 <xQueueReceiveFromISR+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d0fa      	beq.n	800e38e <xQueueReceiveFromISR+0x56>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e398:	0020      	movs	r0, r4
 800e39a:	3010      	adds	r0, #16
 800e39c:	f000 fc54 	bl	800ec48 <xTaskRemoveFromEventList>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d0f4      	beq.n	800e38e <xQueueReceiveFromISR+0x56>
						if( pxHigherPriorityTaskWoken != NULL )
 800e3a4:	4643      	mov	r3, r8
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0f1      	beq.n	800e38e <xQueueReceiveFromISR+0x56>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4642      	mov	r2, r8
			xReturn = pdPASS;
 800e3ae:	2601      	movs	r6, #1
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e3b0:	6013      	str	r3, [r2, #0]
 800e3b2:	e7ce      	b.n	800e352 <xQueueReceiveFromISR+0x1a>

0800e3b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e3b4:	b530      	push	{r4, r5, lr}
 800e3b6:	4c08      	ldr	r4, [pc, #32]	; (800e3d8 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	0022      	movs	r2, r4
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3bc:	6815      	ldr	r5, [r2, #0]
 800e3be:	2d00      	cmp	r5, #0
 800e3c0:	d004      	beq.n	800e3cc <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	3208      	adds	r2, #8
 800e3c6:	2b08      	cmp	r3, #8
 800e3c8:	d1f8      	bne.n	800e3bc <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e3ca:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3cc:	00db      	lsls	r3, r3, #3
 800e3ce:	50e1      	str	r1, [r4, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e3d0:	18e3      	adds	r3, r4, r3
 800e3d2:	6058      	str	r0, [r3, #4]
				break;
 800e3d4:	e7f9      	b.n	800e3ca <vQueueAddToRegistry+0x16>
 800e3d6:	46c0      	nop			; (mov r8, r8)
 800e3d8:	20002c7c 	.word	0x20002c7c

0800e3dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	0004      	movs	r4, r0
 800e3e0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3e2:	f001 f8a9 	bl	800f538 <vPortEnterCritical>
 800e3e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	d101      	bne.n	800e3f0 <vQueueWaitForMessageRestricted+0x14>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	6463      	str	r3, [r4, #68]	; 0x44
 800e3f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	d101      	bne.n	800e3fa <vQueueWaitForMessageRestricted+0x1e>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800e3fa:	f001 f8a9 	bl	800f550 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e400:	2b00      	cmp	r3, #0
 800e402:	d003      	beq.n	800e40c <vQueueWaitForMessageRestricted+0x30>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e404:	0020      	movs	r0, r4
 800e406:	f7ff fd61 	bl	800decc <prvUnlockQueue>
	}
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e40c:	0020      	movs	r0, r4
 800e40e:	0029      	movs	r1, r5
 800e410:	3024      	adds	r0, #36	; 0x24
 800e412:	f000 fc07 	bl	800ec24 <vTaskPlaceOnEventListRestricted>
 800e416:	e7f5      	b.n	800e404 <vQueueWaitForMessageRestricted+0x28>

0800e418 <prvListTaskWithinSingleList.part.0>:
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e418:	684b      	ldr	r3, [r1, #4]
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e41a:	b5f0      	push	{r4, r5, r6, r7, lr}
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e41c:	685d      	ldr	r5, [r3, #4]
 800e41e:	2308      	movs	r3, #8
 800e420:	469c      	mov	ip, r3
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e422:	46d6      	mov	lr, sl
 800e424:	464f      	mov	r7, r9
 800e426:	4646      	mov	r6, r8
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e428:	448c      	add	ip, r1
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
 800e42a:	b5c0      	push	{r6, r7, lr}
 800e42c:	4692      	mov	sl, r2
 800e42e:	000f      	movs	r7, r1
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e430:	4565      	cmp	r5, ip
 800e432:	d043      	beq.n	800e4bc <prvListTaskWithinSingleList.part.0+0xa4>
 800e434:	68eb      	ldr	r3, [r5, #12]
 800e436:	0001      	movs	r1, r0
 800e438:	4698      	mov	r8, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e43a:	2302      	movs	r3, #2
	UBaseType_t uxTask = 0;
 800e43c:	2000      	movs	r0, #0
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e43e:	4699      	mov	r9, r3
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e440:	686d      	ldr	r5, [r5, #4]
 800e442:	607d      	str	r5, [r7, #4]
 800e444:	45ac      	cmp	ip, r5
 800e446:	d035      	beq.n	800e4b4 <prvListTaskWithinSingleList.part.0+0x9c>
 800e448:	68ec      	ldr	r4, [r5, #12]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e44a:	0023      	movs	r3, r4
 800e44c:	3334      	adds	r3, #52	; 0x34
 800e44e:	604b      	str	r3, [r1, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e450:	6c63      	ldr	r3, [r4, #68]	; 0x44
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e452:	600c      	str	r4, [r1, #0]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e454:	608b      	str	r3, [r1, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800e456:	4653      	mov	r3, sl
 800e458:	730b      	strb	r3, [r1, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800e45a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e45c:	610b      	str	r3, [r1, #16]
					if( eState == eSuspended )
 800e45e:	4653      	mov	r3, sl
 800e460:	2b03      	cmp	r3, #3
 800e462:	d018      	beq.n	800e496 <prvListTaskWithinSingleList.part.0+0x7e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e464:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e466:	614b      	str	r3, [r1, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e468:	6d63      	ldr	r3, [r4, #84]	; 0x54
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e46a:	6b26      	ldr	r6, [r4, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e46c:	618b      	str	r3, [r1, #24]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e46e:	7833      	ldrb	r3, [r6, #0]
 800e470:	2ba5      	cmp	r3, #165	; 0xa5
 800e472:	d11d      	bne.n	800e4b0 <prvListTaskWithinSingleList.part.0+0x98>
	uint32_t ulCount = 0U;
 800e474:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800e476:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e478:	5cf2      	ldrb	r2, [r6, r3]
 800e47a:	2aa5      	cmp	r2, #165	; 0xa5
 800e47c:	d0fb      	beq.n	800e476 <prvListTaskWithinSingleList.part.0+0x5e>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e47e:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e480:	b29b      	uxth	r3, r3
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e482:	838b      	strh	r3, [r1, #28]
				uxTask++;
 800e484:	3001      	adds	r0, #1
			} while( pxNextTCB != pxFirstTCB );
 800e486:	3120      	adds	r1, #32
 800e488:	45a0      	cmp	r8, r4
 800e48a:	d1d9      	bne.n	800e440 <prvListTaskWithinSingleList.part.0+0x28>
	}
 800e48c:	bce0      	pop	{r5, r6, r7}
 800e48e:	46ba      	mov	sl, r7
 800e490:	46b1      	mov	r9, r6
 800e492:	46a8      	mov	r8, r5
 800e494:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800e496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d0e3      	beq.n	800e464 <prvListTaskWithinSingleList.part.0+0x4c>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800e49c:	464b      	mov	r3, r9
 800e49e:	730b      	strb	r3, [r1, #12]
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e4a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e4a2:	614b      	str	r3, [r1, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e4a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e4a6:	6b26      	ldr	r6, [r4, #48]	; 0x30
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e4a8:	618b      	str	r3, [r1, #24]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e4aa:	7833      	ldrb	r3, [r6, #0]
 800e4ac:	2ba5      	cmp	r3, #165	; 0xa5
 800e4ae:	d0e1      	beq.n	800e474 <prvListTaskWithinSingleList.part.0+0x5c>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	e7e6      	b.n	800e482 <prvListTaskWithinSingleList.part.0+0x6a>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e4b4:	4663      	mov	r3, ip
 800e4b6:	685d      	ldr	r5, [r3, #4]
 800e4b8:	607d      	str	r5, [r7, #4]
 800e4ba:	e7c5      	b.n	800e448 <prvListTaskWithinSingleList.part.0+0x30>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e4bc:	68cd      	ldr	r5, [r1, #12]
 800e4be:	e7b9      	b.n	800e434 <prvListTaskWithinSingleList.part.0+0x1c>

0800e4c0 <prvAddCurrentTaskToDelayedList>:
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e4c0:	4b0c      	ldr	r3, [pc, #48]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0x34>)
{
 800e4c2:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e4c4:	681a      	ldr	r2, [r3, #0]
{
 800e4c6:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800e4c8:	6050      	str	r0, [r2, #4]
	if( xTimeToWake < xTickCount )
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	4282      	cmp	r2, r0
 800e4ce:	d905      	bls.n	800e4dc <prvAddCurrentTaskToDelayedList+0x1c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e4d0:	6898      	ldr	r0, [r3, #8]
 800e4d2:	6819      	ldr	r1, [r3, #0]
 800e4d4:	3104      	adds	r1, #4
 800e4d6:	f7ff fc95 	bl	800de04 <vListInsert>
}
 800e4da:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800e4dc:	68d8      	ldr	r0, [r3, #12]
 800e4de:	6819      	ldr	r1, [r3, #0]
 800e4e0:	3104      	adds	r1, #4
 800e4e2:	f7ff fc8f 	bl	800de04 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800e4e6:	4b04      	ldr	r3, [pc, #16]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x38>)
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	4294      	cmp	r4, r2
 800e4ec:	d2f5      	bcs.n	800e4da <prvAddCurrentTaskToDelayedList+0x1a>
			xNextTaskUnblockTime = xTimeToWake;
 800e4ee:	601c      	str	r4, [r3, #0]
}
 800e4f0:	e7f3      	b.n	800e4da <prvAddCurrentTaskToDelayedList+0x1a>
 800e4f2:	46c0      	nop			; (mov r8, r8)
 800e4f4:	20002cbc 	.word	0x20002cbc
 800e4f8:	200000c8 	.word	0x200000c8

0800e4fc <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 800e4fc:	2300      	movs	r3, #0
void vTaskSwitchContext( void )
 800e4fe:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 800e500:	4c26      	ldr	r4, [pc, #152]	; (800e59c <vTaskSwitchContext.part.0+0xa0>)
 800e502:	6123      	str	r3, [r4, #16]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e504:	f7f9 faf4 	bl	8007af0 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e508:	6963      	ldr	r3, [r4, #20]
 800e50a:	4298      	cmp	r0, r3
 800e50c:	d904      	bls.n	800e518 <vTaskSwitchContext.part.0+0x1c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800e512:	1acb      	subs	r3, r1, r3
 800e514:	181b      	adds	r3, r3, r0
 800e516:	6553      	str	r3, [r2, #84]	; 0x54
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e518:	6822      	ldr	r2, [r4, #0]
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	6812      	ldr	r2, [r2, #0]
 800e51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				ulTaskSwitchedInTime = ulTotalRunTime;
 800e520:	6160      	str	r0, [r4, #20]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e522:	429a      	cmp	r2, r3
 800e524:	d923      	bls.n	800e56e <vTaskSwitchContext.part.0+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	2214      	movs	r2, #20
 800e52a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e52c:	491c      	ldr	r1, [pc, #112]	; (800e5a0 <vTaskSwitchContext.part.0+0xa4>)
 800e52e:	f004 fe1f 	bl	8013170 <memcmp>
 800e532:	2800      	cmp	r0, #0
 800e534:	d128      	bne.n	800e588 <vTaskSwitchContext.part.0+0x8c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e536:	69a2      	ldr	r2, [r4, #24]
 800e538:	491a      	ldr	r1, [pc, #104]	; (800e5a4 <vTaskSwitchContext.part.0+0xa8>)
 800e53a:	e003      	b.n	800e544 <vTaskSwitchContext.part.0+0x48>
 800e53c:	69a3      	ldr	r3, [r4, #24]
 800e53e:	3b01      	subs	r3, #1
 800e540:	61a3      	str	r3, [r4, #24]
 800e542:	69a2      	ldr	r2, [r4, #24]
 800e544:	0093      	lsls	r3, r2, #2
 800e546:	189b      	adds	r3, r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	58cb      	ldr	r3, [r1, r3]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d0f5      	beq.n	800e53c <vTaskSwitchContext.part.0+0x40>
 800e550:	69a2      	ldr	r2, [r4, #24]
 800e552:	0093      	lsls	r3, r2, #2
 800e554:	189b      	adds	r3, r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	18c8      	adds	r0, r1, r3
 800e55a:	6842      	ldr	r2, [r0, #4]
 800e55c:	3308      	adds	r3, #8
 800e55e:	6852      	ldr	r2, [r2, #4]
 800e560:	18c9      	adds	r1, r1, r3
 800e562:	6042      	str	r2, [r0, #4]
 800e564:	428a      	cmp	r2, r1
 800e566:	d015      	beq.n	800e594 <vTaskSwitchContext.part.0+0x98>
 800e568:	68d3      	ldr	r3, [r2, #12]
 800e56a:	6023      	str	r3, [r4, #0]
}
 800e56c:	bd10      	pop	{r4, pc}
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800e56e:	6820      	ldr	r0, [r4, #0]
 800e570:	6821      	ldr	r1, [r4, #0]
 800e572:	3134      	adds	r1, #52	; 0x34
 800e574:	f7fe fcf6 	bl	800cf64 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	2214      	movs	r2, #20
 800e57c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e57e:	4908      	ldr	r1, [pc, #32]	; (800e5a0 <vTaskSwitchContext.part.0+0xa4>)
 800e580:	f004 fdf6 	bl	8013170 <memcmp>
 800e584:	2800      	cmp	r0, #0
 800e586:	d0d6      	beq.n	800e536 <vTaskSwitchContext.part.0+0x3a>
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	6821      	ldr	r1, [r4, #0]
 800e58c:	3134      	adds	r1, #52	; 0x34
 800e58e:	f7fe fce9 	bl	800cf64 <vApplicationStackOverflowHook>
 800e592:	e7d0      	b.n	800e536 <vTaskSwitchContext.part.0+0x3a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e594:	6852      	ldr	r2, [r2, #4]
 800e596:	6042      	str	r2, [r0, #4]
 800e598:	e7e6      	b.n	800e568 <vTaskSwitchContext.part.0+0x6c>
 800e59a:	46c0      	nop			; (mov r8, r8)
 800e59c:	20002cbc 	.word	0x20002cbc
 800e5a0:	080198f4 	.word	0x080198f4
 800e5a4:	20002d58 	.word	0x20002d58

0800e5a8 <xTaskGenericCreate>:
{
 800e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5aa:	464f      	mov	r7, r9
 800e5ac:	4646      	mov	r6, r8
 800e5ae:	46d6      	mov	lr, sl
 800e5b0:	b5c0      	push	{r6, r7, lr}
 800e5b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	000f      	movs	r7, r1
 800e5b8:	0014      	movs	r4, r2
 800e5ba:	4699      	mov	r9, r3
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5bc:	2e00      	cmp	r6, #0
 800e5be:	d100      	bne.n	800e5c2 <xTaskGenericCreate+0x1a>
 800e5c0:	e074      	b.n	800e6ac <xTaskGenericCreate+0x104>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800e5c2:	2060      	movs	r0, #96	; 0x60
 800e5c4:	f001 f832 	bl	800f62c <pvPortMalloc>
 800e5c8:	1e05      	subs	r5, r0, #0
			if( pxNewTCB != NULL )
 800e5ca:	d100      	bne.n	800e5ce <xTaskGenericCreate+0x26>
 800e5cc:	e089      	b.n	800e6e2 <xTaskGenericCreate+0x13a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e5ce:	00a4      	lsls	r4, r4, #2
 800e5d0:	0022      	movs	r2, r4
				pxNewTCB->pxStack = pxStack;
 800e5d2:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800e5d4:	21a5      	movs	r1, #165	; 0xa5
 800e5d6:	0030      	movs	r0, r6
 800e5d8:	f004 fde1 	bl	801319e <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e5dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e5de:	3c04      	subs	r4, #4
 800e5e0:	469c      	mov	ip, r3
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e5e2:	2307      	movs	r3, #7
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800e5e4:	4464      	add	r4, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e5e6:	439c      	bics	r4, r3
 800e5e8:	002b      	movs	r3, r5
 800e5ea:	46a2      	mov	sl, r4
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5ec:	2400      	movs	r4, #0
 800e5ee:	3334      	adds	r3, #52	; 0x34
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800e5f0:	5d3e      	ldrb	r6, [r7, r4]
 800e5f2:	551e      	strb	r6, [r3, r4]
		if( pcName[ x ] == 0x00 )
 800e5f4:	2e00      	cmp	r6, #0
 800e5f6:	d002      	beq.n	800e5fe <xTaskGenericCreate+0x56>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5f8:	3401      	adds	r4, #1
 800e5fa:	2c0d      	cmp	r4, #13
 800e5fc:	d1f8      	bne.n	800e5f0 <xTaskGenericCreate+0x48>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5fe:	2340      	movs	r3, #64	; 0x40
 800e600:	2200      	movs	r2, #0
 800e602:	9f08      	ldr	r7, [sp, #32]
 800e604:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e606:	2f06      	cmp	r7, #6
 800e608:	d84e      	bhi.n	800e6a8 <xTaskGenericCreate+0x100>
		pxTCB->uxMutexesHeld = 0;
 800e60a:	2400      	movs	r4, #0
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e60c:	1d2e      	adds	r6, r5, #4
 800e60e:	0030      	movs	r0, r6
	pxTCB->uxPriority = uxPriority;
 800e610:	62ef      	str	r7, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800e612:	64ef      	str	r7, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800e614:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800e616:	f7ff fbe5 	bl	800dde4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800e61a:	0028      	movs	r0, r5
 800e61c:	3018      	adds	r0, #24
 800e61e:	f7ff fbe1 	bl	800dde4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e622:	2307      	movs	r3, #7
 800e624:	1bdb      	subs	r3, r3, r7
 800e626:	61ab      	str	r3, [r5, #24]
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e628:	235c      	movs	r3, #92	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800e62a:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800e62c:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800e62e:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800e630:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e632:	464a      	mov	r2, r9
		pxTCB->eNotifyState = eNotWaitingNotification;
 800e634:	54ec      	strb	r4, [r5, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e636:	4641      	mov	r1, r8
 800e638:	4650      	mov	r0, sl
 800e63a:	f000 ff35 	bl	800f4a8 <pxPortInitialiseStack>
		if( ( void * ) pxCreatedTask != NULL )
 800e63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e640:	6028      	str	r0, [r5, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800e642:	2b00      	cmp	r3, #0
 800e644:	d000      	beq.n	800e648 <xTaskGenericCreate+0xa0>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e646:	601d      	str	r5, [r3, #0]
		taskENTER_CRITICAL();
 800e648:	f000 ff76 	bl	800f538 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800e64c:	4c3c      	ldr	r4, [pc, #240]	; (800e740 <xTaskGenericCreate+0x198>)
 800e64e:	69e3      	ldr	r3, [r4, #28]
 800e650:	3301      	adds	r3, #1
 800e652:	61e3      	str	r3, [r4, #28]
			if( pxCurrentTCB == NULL )
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d038      	beq.n	800e6cc <xTaskGenericCreate+0x124>
				if( xSchedulerRunning == pdFALSE )
 800e65a:	4f3a      	ldr	r7, [pc, #232]	; (800e744 <xTaskGenericCreate+0x19c>)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d02d      	beq.n	800e6be <xTaskGenericCreate+0x116>
 800e662:	4b39      	ldr	r3, [pc, #228]	; (800e748 <xTaskGenericCreate+0x1a0>)
 800e664:	4698      	mov	r8, r3
			uxTaskNumber++;
 800e666:	68bb      	ldr	r3, [r7, #8]
			prvAddTaskToReadyList( pxNewTCB );
 800e668:	69a2      	ldr	r2, [r4, #24]
			uxTaskNumber++;
 800e66a:	3301      	adds	r3, #1
 800e66c:	60bb      	str	r3, [r7, #8]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e66e:	646b      	str	r3, [r5, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800e670:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e672:	4293      	cmp	r3, r2
 800e674:	d900      	bls.n	800e678 <xTaskGenericCreate+0xd0>
 800e676:	61a3      	str	r3, [r4, #24]
 800e678:	0098      	lsls	r0, r3, #2
 800e67a:	18c0      	adds	r0, r0, r3
 800e67c:	0080      	lsls	r0, r0, #2
 800e67e:	0031      	movs	r1, r6
 800e680:	4440      	add	r0, r8
 800e682:	f7ff fbb3 	bl	800ddec <vListInsertEnd>
		taskEXIT_CRITICAL();
 800e686:	f000 ff63 	bl	800f550 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800e68a:	687b      	ldr	r3, [r7, #4]
			xReturn = pdPASS;
 800e68c:	2501      	movs	r5, #1
		if( xSchedulerRunning != pdFALSE )
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d004      	beq.n	800e69c <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	9a08      	ldr	r2, [sp, #32]
 800e696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e698:	4293      	cmp	r3, r2
 800e69a:	d31f      	bcc.n	800e6dc <xTaskGenericCreate+0x134>
}
 800e69c:	0028      	movs	r0, r5
 800e69e:	bce0      	pop	{r5, r6, r7}
 800e6a0:	46ba      	mov	sl, r7
 800e6a2:	46b1      	mov	r9, r6
 800e6a4:	46a8      	mov	r8, r5
 800e6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6a8:	2706      	movs	r7, #6
 800e6aa:	e7ae      	b.n	800e60a <xTaskGenericCreate+0x62>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6ac:	0090      	lsls	r0, r2, #2
 800e6ae:	f000 ffbd 	bl	800f62c <pvPortMalloc>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6b2:	2501      	movs	r5, #1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b4:	0006      	movs	r6, r0
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6b6:	426d      	negs	r5, r5
		if( pxStack != NULL )
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d0ef      	beq.n	800e69c <xTaskGenericCreate+0xf4>
 800e6bc:	e781      	b.n	800e5c2 <xTaskGenericCreate+0x1a>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	9a08      	ldr	r2, [sp, #32]
 800e6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d8cc      	bhi.n	800e662 <xTaskGenericCreate+0xba>
						pxCurrentTCB = pxNewTCB;
 800e6c8:	6025      	str	r5, [r4, #0]
 800e6ca:	e7ca      	b.n	800e662 <xTaskGenericCreate+0xba>
				pxCurrentTCB =  pxNewTCB;
 800e6cc:	6025      	str	r5, [r4, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6ce:	69e3      	ldr	r3, [r4, #28]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d00c      	beq.n	800e6ee <xTaskGenericCreate+0x146>
 800e6d4:	4b1c      	ldr	r3, [pc, #112]	; (800e748 <xTaskGenericCreate+0x1a0>)
 800e6d6:	4f1b      	ldr	r7, [pc, #108]	; (800e744 <xTaskGenericCreate+0x19c>)
 800e6d8:	4698      	mov	r8, r3
 800e6da:	e7c4      	b.n	800e666 <xTaskGenericCreate+0xbe>
				taskYIELD_IF_USING_PREEMPTION();
 800e6dc:	f000 ff20 	bl	800f520 <vPortYield>
 800e6e0:	e7dc      	b.n	800e69c <xTaskGenericCreate+0xf4>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6e2:	2501      	movs	r5, #1
				vPortFree( pxStack );
 800e6e4:	0030      	movs	r0, r6
 800e6e6:	f001 f81b 	bl	800f720 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6ea:	426d      	negs	r5, r5
 800e6ec:	e7d6      	b.n	800e69c <xTaskGenericCreate+0xf4>
 800e6ee:	4b16      	ldr	r3, [pc, #88]	; (800e748 <xTaskGenericCreate+0x1a0>)
 800e6f0:	4698      	mov	r8, r3
 800e6f2:	001f      	movs	r7, r3
 800e6f4:	238c      	movs	r3, #140	; 0x8c
 800e6f6:	4443      	add	r3, r8
 800e6f8:	4699      	mov	r9, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6fa:	0038      	movs	r0, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6fc:	3714      	adds	r7, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6fe:	f7ff fb65 	bl	800ddcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e702:	454f      	cmp	r7, r9
 800e704:	d1f9      	bne.n	800e6fa <xTaskGenericCreate+0x152>
	vListInitialise( &xDelayedTaskList1 );
 800e706:	2320      	movs	r3, #32
 800e708:	4699      	mov	r9, r3
	vListInitialise( &xDelayedTaskList2 );
 800e70a:	0027      	movs	r7, r4
	vListInitialise( &xDelayedTaskList1 );
 800e70c:	44a1      	add	r9, r4
	vListInitialise( &xDelayedTaskList2 );
 800e70e:	3734      	adds	r7, #52	; 0x34
	vListInitialise( &xDelayedTaskList1 );
 800e710:	4648      	mov	r0, r9
 800e712:	f7ff fb5b 	bl	800ddcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e716:	0038      	movs	r0, r7
 800e718:	f7ff fb58 	bl	800ddcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e71c:	0020      	movs	r0, r4
 800e71e:	3048      	adds	r0, #72	; 0x48
 800e720:	f7ff fb54 	bl	800ddcc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e724:	0020      	movs	r0, r4
 800e726:	305c      	adds	r0, #92	; 0x5c
 800e728:	f7ff fb50 	bl	800ddcc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e72c:	0020      	movs	r0, r4
 800e72e:	3070      	adds	r0, #112	; 0x70
 800e730:	f7ff fb4c 	bl	800ddcc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e734:	464b      	mov	r3, r9
 800e736:	60e3      	str	r3, [r4, #12]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e738:	60a7      	str	r7, [r4, #8]
 800e73a:	4f02      	ldr	r7, [pc, #8]	; (800e744 <xTaskGenericCreate+0x19c>)
}
 800e73c:	e793      	b.n	800e666 <xTaskGenericCreate+0xbe>
 800e73e:	46c0      	nop			; (mov r8, r8)
 800e740:	20002cbc 	.word	0x20002cbc
 800e744:	20002d3c 	.word	0x20002d3c
 800e748:	20002d58 	.word	0x20002d58

0800e74c <uxTaskPriorityGet>:
	{
 800e74c:	b510      	push	{r4, lr}
 800e74e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800e750:	f000 fef2 	bl	800f538 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e754:	2c00      	cmp	r4, #0
 800e756:	d004      	beq.n	800e762 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800e758:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800e75a:	f000 fef9 	bl	800f550 <vPortExitCritical>
	}
 800e75e:	0020      	movs	r0, r4
 800e760:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800e762:	4b01      	ldr	r3, [pc, #4]	; (800e768 <uxTaskPriorityGet+0x1c>)
 800e764:	681c      	ldr	r4, [r3, #0]
 800e766:	e7f7      	b.n	800e758 <uxTaskPriorityGet+0xc>
 800e768:	20002cbc 	.word	0x20002cbc

0800e76c <vTaskPrioritySet>:
	{
 800e76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e76e:	46c6      	mov	lr, r8
 800e770:	0004      	movs	r4, r0
 800e772:	000d      	movs	r5, r1
 800e774:	b500      	push	{lr}
 800e776:	2906      	cmp	r1, #6
 800e778:	d900      	bls.n	800e77c <vTaskPrioritySet+0x10>
 800e77a:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800e77c:	f000 fedc 	bl	800f538 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e780:	2c00      	cmp	r4, #0
 800e782:	d02b      	beq.n	800e7dc <vTaskPrioritySet+0x70>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e784:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800e786:	4295      	cmp	r5, r2
 800e788:	d01a      	beq.n	800e7c0 <vTaskPrioritySet+0x54>
					if( pxTCB != pxCurrentTCB )
 800e78a:	4f21      	ldr	r7, [pc, #132]	; (800e810 <vTaskPrioritySet+0xa4>)
				if( uxNewPriority > uxCurrentBasePriority )
 800e78c:	d81d      	bhi.n	800e7ca <vTaskPrioritySet+0x5e>
				else if( pxTCB == pxCurrentTCB )
 800e78e:	683e      	ldr	r6, [r7, #0]
 800e790:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800e792:	4273      	negs	r3, r6
 800e794:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e796:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800e798:	4282      	cmp	r2, r0
 800e79a:	d100      	bne.n	800e79e <vTaskPrioritySet+0x32>
						pxTCB->uxPriority = uxNewPriority;
 800e79c:	62e5      	str	r5, [r4, #44]	; 0x2c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e79e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxBasePriority = uxNewPriority;
 800e7a0:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	db02      	blt.n	800e7ac <vTaskPrioritySet+0x40>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7a6:	2107      	movs	r1, #7
 800e7a8:	1b4d      	subs	r5, r1, r5
 800e7aa:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800e7ac:	0083      	lsls	r3, r0, #2
 800e7ae:	4d19      	ldr	r5, [pc, #100]	; (800e814 <vTaskPrioritySet+0xa8>)
 800e7b0:	181b      	adds	r3, r3, r0
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	6962      	ldr	r2, [r4, #20]
 800e7b6:	18eb      	adds	r3, r5, r3
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d015      	beq.n	800e7e8 <vTaskPrioritySet+0x7c>
				if( xYieldRequired == pdTRUE )
 800e7bc:	2e01      	cmp	r6, #1
 800e7be:	d010      	beq.n	800e7e2 <vTaskPrioritySet+0x76>
		taskEXIT_CRITICAL();
 800e7c0:	f000 fec6 	bl	800f550 <vPortExitCritical>
	}
 800e7c4:	bc80      	pop	{r7}
 800e7c6:	46b8      	mov	r8, r7
 800e7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( pxTCB != pxCurrentTCB )
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	42a3      	cmp	r3, r4
 800e7ce:	d01d      	beq.n	800e80c <vTaskPrioritySet+0xa0>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800e7d0:	2600      	movs	r6, #0
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	4176      	adcs	r6, r6
 800e7da:	e7dc      	b.n	800e796 <vTaskPrioritySet+0x2a>
			pxTCB = prvGetTCBFromHandle( xTask );
 800e7dc:	4b0c      	ldr	r3, [pc, #48]	; (800e810 <vTaskPrioritySet+0xa4>)
 800e7de:	681c      	ldr	r4, [r3, #0]
 800e7e0:	e7d0      	b.n	800e784 <vTaskPrioritySet+0x18>
					taskYIELD_IF_USING_PREEMPTION();
 800e7e2:	f000 fe9d 	bl	800f520 <vPortYield>
 800e7e6:	e7eb      	b.n	800e7c0 <vTaskPrioritySet+0x54>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800e7e8:	1d23      	adds	r3, r4, #4
 800e7ea:	0018      	movs	r0, r3
 800e7ec:	4698      	mov	r8, r3
 800e7ee:	f7ff fb21 	bl	800de34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e7f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d900      	bls.n	800e7fc <vTaskPrioritySet+0x90>
 800e7fa:	61bb      	str	r3, [r7, #24]
 800e7fc:	0098      	lsls	r0, r3, #2
 800e7fe:	18c0      	adds	r0, r0, r3
 800e800:	0080      	lsls	r0, r0, #2
 800e802:	4641      	mov	r1, r8
 800e804:	1828      	adds	r0, r5, r0
 800e806:	f7ff faf1 	bl	800ddec <vListInsertEnd>
 800e80a:	e7d7      	b.n	800e7bc <vTaskPrioritySet+0x50>
	BaseType_t xYieldRequired = pdFALSE;
 800e80c:	2600      	movs	r6, #0
 800e80e:	e7c2      	b.n	800e796 <vTaskPrioritySet+0x2a>
 800e810:	20002cbc 	.word	0x20002cbc
 800e814:	20002d58 	.word	0x20002d58

0800e818 <vTaskStartScheduler>:
{
 800e818:	b510      	push	{r4, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e81a:	2400      	movs	r4, #0
{
 800e81c:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800e81e:	2300      	movs	r3, #0
 800e820:	2296      	movs	r2, #150	; 0x96
 800e822:	490d      	ldr	r1, [pc, #52]	; (800e858 <vTaskStartScheduler+0x40>)
 800e824:	480d      	ldr	r0, [pc, #52]	; (800e85c <vTaskStartScheduler+0x44>)
 800e826:	9403      	str	r4, [sp, #12]
 800e828:	9402      	str	r4, [sp, #8]
 800e82a:	9401      	str	r4, [sp, #4]
 800e82c:	9400      	str	r4, [sp, #0]
 800e82e:	f7ff febb 	bl	800e5a8 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800e832:	2801      	cmp	r0, #1
 800e834:	d001      	beq.n	800e83a <vTaskStartScheduler+0x22>
}
 800e836:	b004      	add	sp, #16
 800e838:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
 800e83a:	f000 fc91 	bl	800f160 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e83e:	2801      	cmp	r0, #1
 800e840:	d1f9      	bne.n	800e836 <vTaskStartScheduler+0x1e>
		portDISABLE_INTERRUPTS();
 800e842:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800e844:	4b06      	ldr	r3, [pc, #24]	; (800e860 <vTaskStartScheduler+0x48>)
 800e846:	6058      	str	r0, [r3, #4]
		xTickCount = ( TickType_t ) 0U;
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <vTaskStartScheduler+0x4c>)
 800e84a:	605c      	str	r4, [r3, #4]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e84c:	f7f9 f940 	bl	8007ad0 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800e850:	f000 fe3c 	bl	800f4cc <xPortStartScheduler>
}
 800e854:	e7ef      	b.n	800e836 <vTaskStartScheduler+0x1e>
 800e856:	46c0      	nop			; (mov r8, r8)
 800e858:	0801c36c 	.word	0x0801c36c
 800e85c:	0800eaa5 	.word	0x0800eaa5
 800e860:	20002d3c 	.word	0x20002d3c
 800e864:	20002cbc 	.word	0x20002cbc

0800e868 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e868:	4a02      	ldr	r2, [pc, #8]	; (800e874 <vTaskSuspendAll+0xc>)
 800e86a:	6913      	ldr	r3, [r2, #16]
 800e86c:	3301      	adds	r3, #1
 800e86e:	6113      	str	r3, [r2, #16]
}
 800e870:	4770      	bx	lr
 800e872:	46c0      	nop			; (mov r8, r8)
 800e874:	20002d3c 	.word	0x20002d3c

0800e878 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e878:	4b01      	ldr	r3, [pc, #4]	; (800e880 <xTaskGetTickCount+0x8>)
 800e87a:	6858      	ldr	r0, [r3, #4]
}
 800e87c:	4770      	bx	lr
 800e87e:	46c0      	nop			; (mov r8, r8)
 800e880:	20002cbc 	.word	0x20002cbc

0800e884 <xTaskGetTickCountFromISR>:
 800e884:	4b01      	ldr	r3, [pc, #4]	; (800e88c <xTaskGetTickCountFromISR+0x8>)
 800e886:	6858      	ldr	r0, [r3, #4]
 800e888:	4770      	bx	lr
 800e88a:	46c0      	nop			; (mov r8, r8)
 800e88c:	20002cbc 	.word	0x20002cbc

0800e890 <xTaskIncrementTick>:
{
 800e890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e892:	46d6      	mov	lr, sl
 800e894:	464f      	mov	r7, r9
 800e896:	4646      	mov	r6, r8
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e898:	4b41      	ldr	r3, [pc, #260]	; (800e9a0 <xTaskIncrementTick+0x110>)
{
 800e89a:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e89c:	691a      	ldr	r2, [r3, #16]
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	d13f      	bne.n	800e922 <xTaskIncrementTick+0x92>
		++xTickCount;
 800e8a2:	4c40      	ldr	r4, [pc, #256]	; (800e9a4 <xTaskIncrementTick+0x114>)
 800e8a4:	6862      	ldr	r2, [r4, #4]
 800e8a6:	3201      	adds	r2, #1
 800e8a8:	6062      	str	r2, [r4, #4]
			const TickType_t xConstTickCount = xTickCount;
 800e8aa:	6862      	ldr	r2, [r4, #4]
 800e8ac:	4690      	mov	r8, r2
			if( xConstTickCount == ( TickType_t ) 0U )
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	d054      	beq.n	800e95c <xTaskIncrementTick+0xcc>
 800e8b2:	4b3d      	ldr	r3, [pc, #244]	; (800e9a8 <xTaskIncrementTick+0x118>)
 800e8b4:	469a      	mov	sl, r3
			if( xConstTickCount >= xNextTaskUnblockTime )
 800e8b6:	4653      	mov	r3, sl
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4543      	cmp	r3, r8
 800e8bc:	d840      	bhi.n	800e940 <xTaskIncrementTick+0xb0>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8be:	68e3      	ldr	r3, [r4, #12]
BaseType_t xSwitchRequired = pdFALSE;
 800e8c0:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d05b      	beq.n	800e980 <xTaskIncrementTick+0xf0>
 800e8c8:	4b38      	ldr	r3, [pc, #224]	; (800e9ac <xTaskIncrementTick+0x11c>)
 800e8ca:	4699      	mov	r9, r3
 800e8cc:	e020      	b.n	800e910 <xTaskIncrementTick+0x80>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e8ce:	1d2e      	adds	r6, r5, #4
 800e8d0:	0030      	movs	r0, r6
 800e8d2:	f7ff faaf 	bl	800de34 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e8d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d003      	beq.n	800e8e4 <xTaskIncrementTick+0x54>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e8dc:	0028      	movs	r0, r5
 800e8de:	3018      	adds	r0, #24
 800e8e0:	f7ff faa8 	bl	800de34 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e8e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e8e6:	69a2      	ldr	r2, [r4, #24]
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d900      	bls.n	800e8ee <xTaskIncrementTick+0x5e>
 800e8ec:	61a3      	str	r3, [r4, #24]
 800e8ee:	0098      	lsls	r0, r3, #2
 800e8f0:	18c0      	adds	r0, r0, r3
 800e8f2:	0080      	lsls	r0, r0, #2
 800e8f4:	0031      	movs	r1, r6
 800e8f6:	4448      	add	r0, r9
 800e8f8:	f7ff fa78 	bl	800ddec <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e902:	429a      	cmp	r2, r3
 800e904:	d300      	bcc.n	800e908 <xTaskIncrementTick+0x78>
								xSwitchRequired = pdTRUE;
 800e906:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e908:	68e3      	ldr	r3, [r4, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d039      	beq.n	800e984 <xTaskIncrementTick+0xf4>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e910:	68e3      	ldr	r3, [r4, #12]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800e916:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
 800e918:	4598      	cmp	r8, r3
 800e91a:	d2d8      	bcs.n	800e8ce <xTaskIncrementTick+0x3e>
							xNextTaskUnblockTime = xItemValue;
 800e91c:	4652      	mov	r2, sl
 800e91e:	6013      	str	r3, [r2, #0]
							break;
 800e920:	e011      	b.n	800e946 <xTaskIncrementTick+0xb6>
BaseType_t xSwitchRequired = pdFALSE;
 800e922:	2700      	movs	r7, #0
		++uxPendedTicks;
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	4c1f      	ldr	r4, [pc, #124]	; (800e9a4 <xTaskIncrementTick+0x114>)
 800e928:	3201      	adds	r2, #1
 800e92a:	619a      	str	r2, [r3, #24]
		if( xYieldPending != pdFALSE )
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d000      	beq.n	800e934 <xTaskIncrementTick+0xa4>
			xSwitchRequired = pdTRUE;
 800e932:	2701      	movs	r7, #1
}
 800e934:	0038      	movs	r0, r7
 800e936:	bce0      	pop	{r5, r6, r7}
 800e938:	46ba      	mov	sl, r7
 800e93a:	46b1      	mov	r9, r6
 800e93c:	46a8      	mov	r8, r5
 800e93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e940:	4b1a      	ldr	r3, [pc, #104]	; (800e9ac <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800e942:	2700      	movs	r7, #0
 800e944:	4699      	mov	r9, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94a:	0093      	lsls	r3, r2, #2
 800e94c:	189b      	adds	r3, r3, r2
 800e94e:	464a      	mov	r2, r9
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	58d3      	ldr	r3, [r2, r3]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d9e9      	bls.n	800e92c <xTaskIncrementTick+0x9c>
				xSwitchRequired = pdTRUE;
 800e958:	2701      	movs	r7, #1
 800e95a:	e7e7      	b.n	800e92c <xTaskIncrementTick+0x9c>
				taskSWITCH_DELAYED_LISTS();
 800e95c:	68e2      	ldr	r2, [r4, #12]
 800e95e:	68a1      	ldr	r1, [r4, #8]
 800e960:	60e1      	str	r1, [r4, #12]
 800e962:	60a2      	str	r2, [r4, #8]
 800e964:	695a      	ldr	r2, [r3, #20]
 800e966:	3201      	adds	r2, #1
 800e968:	615a      	str	r2, [r3, #20]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e96a:	68e3      	ldr	r3, [r4, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d10d      	bne.n	800e98e <xTaskIncrementTick+0xfe>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e972:	4b0d      	ldr	r3, [pc, #52]	; (800e9a8 <xTaskIncrementTick+0x118>)
 800e974:	469a      	mov	sl, r3
 800e976:	2301      	movs	r3, #1
 800e978:	4652      	mov	r2, sl
 800e97a:	425b      	negs	r3, r3
 800e97c:	6013      	str	r3, [r2, #0]
 800e97e:	e79a      	b.n	800e8b6 <xTaskIncrementTick+0x26>
 800e980:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <xTaskIncrementTick+0x11c>)
 800e982:	4699      	mov	r9, r3
						xNextTaskUnblockTime = portMAX_DELAY;
 800e984:	2301      	movs	r3, #1
 800e986:	4652      	mov	r2, sl
 800e988:	425b      	negs	r3, r3
 800e98a:	6013      	str	r3, [r2, #0]
						break;
 800e98c:	e7db      	b.n	800e946 <xTaskIncrementTick+0xb6>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e98e:	68e3      	ldr	r3, [r4, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e990:	4a05      	ldr	r2, [pc, #20]	; (800e9a8 <xTaskIncrementTick+0x118>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e992:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800e994:	4692      	mov	sl, r2
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	6013      	str	r3, [r2, #0]
	}
}
 800e99c:	e78b      	b.n	800e8b6 <xTaskIncrementTick+0x26>
 800e99e:	46c0      	nop			; (mov r8, r8)
 800e9a0:	20002d3c 	.word	0x20002d3c
 800e9a4:	20002cbc 	.word	0x20002cbc
 800e9a8:	200000c8 	.word	0x200000c8
 800e9ac:	20002d58 	.word	0x20002d58

0800e9b0 <xTaskResumeAll>:
{
 800e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b2:	46ce      	mov	lr, r9
 800e9b4:	4647      	mov	r7, r8
 800e9b6:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800e9b8:	f000 fdbe 	bl	800f538 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e9bc:	4f28      	ldr	r7, [pc, #160]	; (800ea60 <xTaskResumeAll+0xb0>)
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	3b01      	subs	r3, #1
 800e9c2:	613b      	str	r3, [r7, #16]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d13b      	bne.n	800ea42 <xTaskResumeAll+0x92>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e9ca:	4c26      	ldr	r4, [pc, #152]	; (800ea64 <xTaskResumeAll+0xb4>)
 800e9cc:	69e3      	ldr	r3, [r4, #28]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d037      	beq.n	800ea42 <xTaskResumeAll+0x92>
					prvAddTaskToReadyList( pxTCB );
 800e9d2:	4b25      	ldr	r3, [pc, #148]	; (800ea68 <xTaskResumeAll+0xb8>)
 800e9d4:	4698      	mov	r8, r3
						xYieldPending = pdTRUE;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	4699      	mov	r9, r3
 800e9da:	e01a      	b.n	800ea12 <xTaskResumeAll+0x62>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e9dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e9de:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9e0:	0028      	movs	r0, r5
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e9e2:	1d2e      	adds	r6, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9e4:	3018      	adds	r0, #24
 800e9e6:	f7ff fa25 	bl	800de34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800e9ea:	0030      	movs	r0, r6
 800e9ec:	f7ff fa22 	bl	800de34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e9f2:	69a2      	ldr	r2, [r4, #24]
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d900      	bls.n	800e9fa <xTaskResumeAll+0x4a>
 800e9f8:	61a3      	str	r3, [r4, #24]
 800e9fa:	0098      	lsls	r0, r3, #2
 800e9fc:	18c0      	adds	r0, r0, r3
 800e9fe:	0080      	lsls	r0, r0, #2
 800ea00:	0031      	movs	r1, r6
 800ea02:	4440      	add	r0, r8
 800ea04:	f7ff f9f2 	bl	800ddec <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ea0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d21f      	bcs.n	800ea52 <xTaskResumeAll+0xa2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e1      	bne.n	800e9dc <xTaskResumeAll+0x2c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00e      	beq.n	800ea3c <xTaskResumeAll+0x8c>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d00b      	beq.n	800ea3c <xTaskResumeAll+0x8c>
							xYieldPending = pdTRUE;
 800ea24:	2501      	movs	r5, #1
						if( xTaskIncrementTick() != pdFALSE )
 800ea26:	f7ff ff33 	bl	800e890 <xTaskIncrementTick>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d000      	beq.n	800ea30 <xTaskResumeAll+0x80>
							xYieldPending = pdTRUE;
 800ea2e:	6125      	str	r5, [r4, #16]
						--uxPendedTicks;
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	61bb      	str	r3, [r7, #24]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d1f4      	bne.n	800ea26 <xTaskResumeAll+0x76>
				if( xYieldPending == pdTRUE )
 800ea3c:	6924      	ldr	r4, [r4, #16]
 800ea3e:	2c01      	cmp	r4, #1
 800ea40:	d00a      	beq.n	800ea58 <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 800ea42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ea44:	f000 fd84 	bl	800f550 <vPortExitCritical>
}
 800ea48:	0020      	movs	r0, r4
 800ea4a:	bcc0      	pop	{r6, r7}
 800ea4c:	46b9      	mov	r9, r7
 800ea4e:	46b0      	mov	r8, r6
 800ea50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xYieldPending = pdTRUE;
 800ea52:	464b      	mov	r3, r9
 800ea54:	6123      	str	r3, [r4, #16]
 800ea56:	e7dc      	b.n	800ea12 <xTaskResumeAll+0x62>
					taskYIELD_IF_USING_PREEMPTION();
 800ea58:	f000 fd62 	bl	800f520 <vPortYield>
 800ea5c:	e7f2      	b.n	800ea44 <xTaskResumeAll+0x94>
 800ea5e:	46c0      	nop			; (mov r8, r8)
 800ea60:	20002d3c 	.word	0x20002d3c
 800ea64:	20002cbc 	.word	0x20002cbc
 800ea68:	20002d58 	.word	0x20002d58

0800ea6c <vTaskDelay>:
	{
 800ea6c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d011      	beq.n	800ea96 <vTaskDelay+0x2a>
	++uxSchedulerSuspended;
 800ea72:	4a0a      	ldr	r2, [pc, #40]	; (800ea9c <vTaskDelay+0x30>)
 800ea74:	6913      	ldr	r3, [r2, #16]
 800ea76:	3301      	adds	r3, #1
 800ea78:	6113      	str	r3, [r2, #16]
				xTimeToWake = xTickCount + xTicksToDelay;
 800ea7a:	4b09      	ldr	r3, [pc, #36]	; (800eaa0 <vTaskDelay+0x34>)
 800ea7c:	685c      	ldr	r4, [r3, #4]
 800ea7e:	1824      	adds	r4, r4, r0
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	3004      	adds	r0, #4
 800ea84:	f7ff f9d6 	bl	800de34 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ea88:	0020      	movs	r0, r4
 800ea8a:	f7ff fd19 	bl	800e4c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ea8e:	f7ff ff8f 	bl	800e9b0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ea92:	2800      	cmp	r0, #0
 800ea94:	d101      	bne.n	800ea9a <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800ea96:	f000 fd43 	bl	800f520 <vPortYield>
	}
 800ea9a:	bd10      	pop	{r4, pc}
 800ea9c:	20002d3c 	.word	0x20002d3c
 800eaa0:	20002cbc 	.word	0x20002cbc

0800eaa4 <prvIdleTask>:
{
 800eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa6:	4e15      	ldr	r6, [pc, #84]	; (800eafc <prvIdleTask+0x58>)
 800eaa8:	4c15      	ldr	r4, [pc, #84]	; (800eb00 <prvIdleTask+0x5c>)
 800eaaa:	4f16      	ldr	r7, [pc, #88]	; (800eb04 <prvIdleTask+0x60>)
 800eaac:	e007      	b.n	800eabe <prvIdleTask+0x1a>
	++uxSchedulerSuspended;
 800eaae:	6923      	ldr	r3, [r4, #16]
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800eab0:	6df5      	ldr	r5, [r6, #92]	; 0x5c
	++uxSchedulerSuspended;
 800eab2:	3301      	adds	r3, #1
 800eab4:	6123      	str	r3, [r4, #16]
			( void ) xTaskResumeAll();
 800eab6:	f7ff ff7b 	bl	800e9b0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800eaba:	2d00      	cmp	r5, #0
 800eabc:	d108      	bne.n	800ead0 <prvIdleTask+0x2c>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800eabe:	68e3      	ldr	r3, [r4, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1f4      	bne.n	800eaae <prvIdleTask+0xa>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d9f9      	bls.n	800eabe <prvIdleTask+0x1a>
				taskYIELD();
 800eaca:	f000 fd29 	bl	800f520 <vPortYield>
 800eace:	e7f6      	b.n	800eabe <prvIdleTask+0x1a>
				taskENTER_CRITICAL();
 800ead0:	f000 fd32 	bl	800f538 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ead4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800ead6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ead8:	1d28      	adds	r0, r5, #4
 800eada:	f7ff f9ab 	bl	800de34 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800eade:	69f3      	ldr	r3, [r6, #28]
 800eae0:	3b01      	subs	r3, #1
 800eae2:	61f3      	str	r3, [r6, #28]
					--uxTasksDeleted;
 800eae4:	68e3      	ldr	r3, [r4, #12]
 800eae6:	3b01      	subs	r3, #1
 800eae8:	60e3      	str	r3, [r4, #12]
				taskEXIT_CRITICAL();
 800eaea:	f000 fd31 	bl	800f550 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800eaee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800eaf0:	f000 fe16 	bl	800f720 <vPortFree>
		vPortFree( pxTCB );
 800eaf4:	0028      	movs	r0, r5
 800eaf6:	f000 fe13 	bl	800f720 <vPortFree>
	}
 800eafa:	e7e0      	b.n	800eabe <prvIdleTask+0x1a>
 800eafc:	20002cbc 	.word	0x20002cbc
 800eb00:	20002d3c 	.word	0x20002d3c
 800eb04:	20002d58 	.word	0x20002d58

0800eb08 <uxTaskGetSystemState>:
	{
 800eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb0a:	46ce      	mov	lr, r9
 800eb0c:	4647      	mov	r7, r8
 800eb0e:	4691      	mov	r9, r2
	++uxSchedulerSuspended;
 800eb10:	4a2b      	ldr	r2, [pc, #172]	; (800ebc0 <uxTaskGetSystemState+0xb8>)
	{
 800eb12:	b580      	push	{r7, lr}
	++uxSchedulerSuspended;
 800eb14:	6913      	ldr	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800eb16:	4f2b      	ldr	r7, [pc, #172]	; (800ebc4 <uxTaskGetSystemState+0xbc>)
	++uxSchedulerSuspended;
 800eb18:	3301      	adds	r3, #1
 800eb1a:	6113      	str	r3, [r2, #16]
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800eb1c:	69fb      	ldr	r3, [r7, #28]
	{
 800eb1e:	0006      	movs	r6, r0
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800eb20:	2500      	movs	r5, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800eb22:	428b      	cmp	r3, r1
 800eb24:	d845      	bhi.n	800ebb2 <uxTaskGetSystemState+0xaa>
 800eb26:	2378      	movs	r3, #120	; 0x78
 800eb28:	425b      	negs	r3, r3
 800eb2a:	4698      	mov	r8, r3
 800eb2c:	4c26      	ldr	r4, [pc, #152]	; (800ebc8 <uxTaskGetSystemState+0xc0>)
 800eb2e:	2300      	movs	r3, #0
 800eb30:	44a0      	add	r8, r4
 800eb32:	e000      	b.n	800eb36 <uxTaskGetSystemState+0x2e>
 800eb34:	0014      	movs	r4, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb36:	6822      	ldr	r2, [r4, #0]
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800eb38:	18f0      	adds	r0, r6, r3
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	d006      	beq.n	800eb4c <uxTaskGetSystemState+0x44>
 800eb3e:	2201      	movs	r2, #1
 800eb40:	0021      	movs	r1, r4
 800eb42:	f7ff fc69 	bl	800e418 <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800eb46:	182d      	adds	r5, r5, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800eb48:	016b      	lsls	r3, r5, #5
 800eb4a:	18f0      	adds	r0, r6, r3
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb4c:	0022      	movs	r2, r4
 800eb4e:	3a14      	subs	r2, #20
 800eb50:	4544      	cmp	r4, r8
 800eb52:	d1ef      	bne.n	800eb34 <uxTaskGetSystemState+0x2c>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800eb54:	68f9      	ldr	r1, [r7, #12]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb56:	680b      	ldr	r3, [r1, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <uxTaskGetSystemState+0x60>
 800eb5c:	2202      	movs	r2, #2
 800eb5e:	f7ff fc5b 	bl	800e418 <prvListTaskWithinSingleList.part.0>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800eb62:	182d      	adds	r5, r5, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800eb64:	0168      	lsls	r0, r5, #5
 800eb66:	1830      	adds	r0, r6, r0
 800eb68:	68b9      	ldr	r1, [r7, #8]
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb6a:	680b      	ldr	r3, [r1, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <uxTaskGetSystemState+0x74>
 800eb70:	2202      	movs	r2, #2
 800eb72:	f7ff fc51 	bl	800e418 <prvListTaskWithinSingleList.part.0>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800eb76:	182d      	adds	r5, r5, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800eb78:	0168      	lsls	r0, r5, #5
 800eb7a:	1830      	adds	r0, r6, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d007      	beq.n	800eb92 <uxTaskGetSystemState+0x8a>
 800eb82:	0039      	movs	r1, r7
 800eb84:	2204      	movs	r2, #4
 800eb86:	315c      	adds	r1, #92	; 0x5c
 800eb88:	f7ff fc46 	bl	800e418 <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800eb8c:	182d      	adds	r5, r5, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800eb8e:	0168      	lsls	r0, r5, #5
 800eb90:	1830      	adds	r0, r6, r0
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eb92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d005      	beq.n	800eba4 <uxTaskGetSystemState+0x9c>
 800eb98:	0039      	movs	r1, r7
 800eb9a:	2203      	movs	r2, #3
 800eb9c:	3170      	adds	r1, #112	; 0x70
 800eb9e:	f7ff fc3b 	bl	800e418 <prvListTaskWithinSingleList.part.0>
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800eba2:	182d      	adds	r5, r5, r0
					if( pulTotalRunTime != NULL )
 800eba4:	464b      	mov	r3, r9
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <uxTaskGetSystemState+0xaa>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ebaa:	f7f8 ffa1 	bl	8007af0 <ulMainGetRunTimeCounterValue>
 800ebae:	464b      	mov	r3, r9
 800ebb0:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800ebb2:	f7ff fefd 	bl	800e9b0 <xTaskResumeAll>
	}
 800ebb6:	0028      	movs	r0, r5
 800ebb8:	bcc0      	pop	{r6, r7}
 800ebba:	46b9      	mov	r9, r7
 800ebbc:	46b0      	mov	r8, r6
 800ebbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebc0:	20002d3c 	.word	0x20002d3c
 800ebc4:	20002cbc 	.word	0x20002cbc
 800ebc8:	20002dd0 	.word	0x20002dd0

0800ebcc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ebcc:	4b05      	ldr	r3, [pc, #20]	; (800ebe4 <vTaskSwitchContext+0x18>)
{
 800ebce:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ebd0:	691b      	ldr	r3, [r3, #16]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	4b03      	ldr	r3, [pc, #12]	; (800ebe8 <vTaskSwitchContext+0x1c>)
 800ebda:	611a      	str	r2, [r3, #16]
}
 800ebdc:	bd10      	pop	{r4, pc}
 800ebde:	f7ff fc8d 	bl	800e4fc <vTaskSwitchContext.part.0>
 800ebe2:	e7fb      	b.n	800ebdc <vTaskSwitchContext+0x10>
 800ebe4:	20002d3c 	.word	0x20002d3c
 800ebe8:	20002cbc 	.word	0x20002cbc

0800ebec <vTaskPlaceOnEventList>:
{
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ebf0:	4c0b      	ldr	r4, [pc, #44]	; (800ec20 <vTaskPlaceOnEventList+0x34>)
 800ebf2:	6821      	ldr	r1, [r4, #0]
 800ebf4:	3118      	adds	r1, #24
 800ebf6:	f7ff f905 	bl	800de04 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ebfa:	6820      	ldr	r0, [r4, #0]
 800ebfc:	3004      	adds	r0, #4
 800ebfe:	f7ff f919 	bl	800de34 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800ec02:	1c6b      	adds	r3, r5, #1
 800ec04:	d004      	beq.n	800ec10 <vTaskPlaceOnEventList+0x24>
			xTimeToWake = xTickCount + xTicksToWait;
 800ec06:	6860      	ldr	r0, [r4, #4]
 800ec08:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ec0a:	f7ff fc59 	bl	800e4c0 <prvAddCurrentTaskToDelayedList>
}
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ec10:	0020      	movs	r0, r4
 800ec12:	6821      	ldr	r1, [r4, #0]
 800ec14:	3070      	adds	r0, #112	; 0x70
 800ec16:	3104      	adds	r1, #4
 800ec18:	f7ff f8e8 	bl	800ddec <vListInsertEnd>
 800ec1c:	e7f7      	b.n	800ec0e <vTaskPlaceOnEventList+0x22>
 800ec1e:	46c0      	nop			; (mov r8, r8)
 800ec20:	20002cbc 	.word	0x20002cbc

0800ec24 <vTaskPlaceOnEventListRestricted>:
	{
 800ec24:	b570      	push	{r4, r5, r6, lr}
 800ec26:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec28:	4d06      	ldr	r5, [pc, #24]	; (800ec44 <vTaskPlaceOnEventListRestricted+0x20>)
 800ec2a:	6829      	ldr	r1, [r5, #0]
 800ec2c:	3118      	adds	r1, #24
 800ec2e:	f7ff f8dd 	bl	800ddec <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ec32:	6828      	ldr	r0, [r5, #0]
 800ec34:	3004      	adds	r0, #4
 800ec36:	f7ff f8fd 	bl	800de34 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ec3a:	6868      	ldr	r0, [r5, #4]
 800ec3c:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ec3e:	f7ff fc3f 	bl	800e4c0 <prvAddCurrentTaskToDelayedList>
	}
 800ec42:	bd70      	pop	{r4, r5, r6, pc}
 800ec44:	20002cbc 	.word	0x20002cbc

0800ec48 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ec48:	68c3      	ldr	r3, [r0, #12]
{
 800ec4a:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ec4c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ec4e:	0026      	movs	r6, r4
 800ec50:	3618      	adds	r6, #24
 800ec52:	0030      	movs	r0, r6
 800ec54:	f7ff f8ee 	bl	800de34 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec58:	4b13      	ldr	r3, [pc, #76]	; (800eca8 <xTaskRemoveFromEventList+0x60>)
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d11a      	bne.n	800ec96 <xTaskRemoveFromEventList+0x4e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ec60:	1d26      	adds	r6, r4, #4
 800ec62:	0030      	movs	r0, r6
 800ec64:	f7ff f8e6 	bl	800de34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ec68:	4d10      	ldr	r5, [pc, #64]	; (800ecac <xTaskRemoveFromEventList+0x64>)
 800ec6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec6c:	69aa      	ldr	r2, [r5, #24]
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d818      	bhi.n	800eca4 <xTaskRemoveFromEventList+0x5c>
 800ec72:	0098      	lsls	r0, r3, #2
 800ec74:	18c0      	adds	r0, r0, r3
 800ec76:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <xTaskRemoveFromEventList+0x68>)
 800ec78:	0080      	lsls	r0, r0, #2
 800ec7a:	0031      	movs	r1, r6
 800ec7c:	18c0      	adds	r0, r0, r3
 800ec7e:	f7ff f8b5 	bl	800ddec <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ec88:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d902      	bls.n	800ec94 <xTaskRemoveFromEventList+0x4c>
		xYieldPending = pdTRUE;
 800ec8e:	2301      	movs	r3, #1
		xReturn = pdTRUE;
 800ec90:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800ec92:	612b      	str	r3, [r5, #16]
}
 800ec94:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec96:	4d05      	ldr	r5, [pc, #20]	; (800ecac <xTaskRemoveFromEventList+0x64>)
 800ec98:	0031      	movs	r1, r6
 800ec9a:	0028      	movs	r0, r5
 800ec9c:	3048      	adds	r0, #72	; 0x48
 800ec9e:	f7ff f8a5 	bl	800ddec <vListInsertEnd>
 800eca2:	e7ee      	b.n	800ec82 <xTaskRemoveFromEventList+0x3a>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eca4:	61ab      	str	r3, [r5, #24]
 800eca6:	e7e4      	b.n	800ec72 <xTaskRemoveFromEventList+0x2a>
 800eca8:	20002d3c 	.word	0x20002d3c
 800ecac:	20002cbc 	.word	0x20002cbc
 800ecb0:	20002d58 	.word	0x20002d58

0800ecb4 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ecb4:	4b03      	ldr	r3, [pc, #12]	; (800ecc4 <vTaskSetTimeOutState+0x10>)
 800ecb6:	695b      	ldr	r3, [r3, #20]
 800ecb8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ecba:	4b03      	ldr	r3, [pc, #12]	; (800ecc8 <vTaskSetTimeOutState+0x14>)
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	6043      	str	r3, [r0, #4]
}
 800ecc0:	4770      	bx	lr
 800ecc2:	46c0      	nop			; (mov r8, r8)
 800ecc4:	20002d3c 	.word	0x20002d3c
 800ecc8:	20002cbc 	.word	0x20002cbc

0800eccc <xTaskCheckForTimeOut>:
{
 800eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecce:	000d      	movs	r5, r1
 800ecd0:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800ecd2:	f000 fc31 	bl	800f538 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ecd6:	4a11      	ldr	r2, [pc, #68]	; (800ed1c <xTaskCheckForTimeOut+0x50>)
			if( *pxTicksToWait == portMAX_DELAY )
 800ecd8:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800ecda:	6851      	ldr	r1, [r2, #4]
			if( *pxTicksToWait == portMAX_DELAY )
 800ecdc:	1c58      	adds	r0, r3, #1
 800ecde:	d01a      	beq.n	800ed16 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ece0:	480f      	ldr	r0, [pc, #60]	; (800ed20 <xTaskCheckForTimeOut+0x54>)
 800ece2:	6826      	ldr	r6, [r4, #0]
 800ece4:	4684      	mov	ip, r0
 800ece6:	6940      	ldr	r0, [r0, #20]
 800ece8:	6867      	ldr	r7, [r4, #4]
 800ecea:	4286      	cmp	r6, r0
 800ecec:	d002      	beq.n	800ecf4 <xTaskCheckForTimeOut+0x28>
			xReturn = pdTRUE;
 800ecee:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ecf0:	428f      	cmp	r7, r1
 800ecf2:	d90c      	bls.n	800ed0e <xTaskCheckForTimeOut+0x42>
			xReturn = pdTRUE;
 800ecf4:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ecf6:	1bc8      	subs	r0, r1, r7
 800ecf8:	4283      	cmp	r3, r0
 800ecfa:	d908      	bls.n	800ed0e <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ecfc:	1a5b      	subs	r3, r3, r1
 800ecfe:	19db      	adds	r3, r3, r7
 800ed00:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed02:	4663      	mov	r3, ip
			xReturn = pdFALSE;
 800ed04:	2600      	movs	r6, #0
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed0a:	6853      	ldr	r3, [r2, #4]
 800ed0c:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800ed0e:	f000 fc1f 	bl	800f550 <vPortExitCritical>
}
 800ed12:	0030      	movs	r0, r6
 800ed14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800ed16:	2600      	movs	r6, #0
 800ed18:	e7f9      	b.n	800ed0e <xTaskCheckForTimeOut+0x42>
 800ed1a:	46c0      	nop			; (mov r8, r8)
 800ed1c:	20002cbc 	.word	0x20002cbc
 800ed20:	20002d3c 	.word	0x20002d3c

0800ed24 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ed24:	2201      	movs	r2, #1
 800ed26:	4b01      	ldr	r3, [pc, #4]	; (800ed2c <vTaskMissedYield+0x8>)
 800ed28:	611a      	str	r2, [r3, #16]
}
 800ed2a:	4770      	bx	lr
 800ed2c:	20002cbc 	.word	0x20002cbc

0800ed30 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed30:	4b04      	ldr	r3, [pc, #16]	; (800ed44 <xTaskGetSchedulerState+0x14>)
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed32:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	d003      	beq.n	800ed42 <xTaskGetSchedulerState+0x12>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed3a:	6918      	ldr	r0, [r3, #16]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed3c:	4243      	negs	r3, r0
 800ed3e:	4158      	adcs	r0, r3
 800ed40:	0040      	lsls	r0, r0, #1
			}
		}

		return xReturn;
	}
 800ed42:	4770      	bx	lr
 800ed44:	20002d3c 	.word	0x20002d3c

0800ed48 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed4a:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800ed4c:	d018      	beq.n	800ed80 <vTaskPriorityInherit+0x38>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed4e:	4d16      	ldr	r5, [pc, #88]	; (800eda8 <vTaskPriorityInherit+0x60>)
 800ed50:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ed52:	682b      	ldr	r3, [r5, #0]
 800ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d212      	bcs.n	800ed80 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed5a:	6983      	ldr	r3, [r0, #24]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	db04      	blt.n	800ed6a <vTaskPriorityInherit+0x22>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ed64:	2307      	movs	r3, #7
 800ed66:	1a5b      	subs	r3, r3, r1
 800ed68:	6183      	str	r3, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ed6a:	0093      	lsls	r3, r2, #2
 800ed6c:	189b      	adds	r3, r3, r2
 800ed6e:	4e0f      	ldr	r6, [pc, #60]	; (800edac <vTaskPriorityInherit+0x64>)
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	6962      	ldr	r2, [r4, #20]
 800ed74:	18f3      	adds	r3, r6, r3
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d003      	beq.n	800ed82 <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed7a:	682b      	ldr	r3, [r5, #0]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7e:	62e3      	str	r3, [r4, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed82:	1d27      	adds	r7, r4, #4
 800ed84:	0038      	movs	r0, r7
 800ed86:	f7ff f855 	bl	800de34 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed8a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 800ed8c:	69aa      	ldr	r2, [r5, #24]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed90:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d900      	bls.n	800ed98 <vTaskPriorityInherit+0x50>
 800ed96:	61ab      	str	r3, [r5, #24]
 800ed98:	0098      	lsls	r0, r3, #2
 800ed9a:	18c0      	adds	r0, r0, r3
 800ed9c:	0080      	lsls	r0, r0, #2
 800ed9e:	0039      	movs	r1, r7
 800eda0:	1830      	adds	r0, r6, r0
 800eda2:	f7ff f823 	bl	800ddec <vListInsertEnd>
	}
 800eda6:	e7eb      	b.n	800ed80 <vTaskPriorityInherit+0x38>
 800eda8:	20002cbc 	.word	0x20002cbc
 800edac:	20002d58 	.word	0x20002d58

0800edb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edb0:	b570      	push	{r4, r5, r6, lr}
 800edb2:	1e04      	subs	r4, r0, #0
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 800edb4:	d008      	beq.n	800edc8 <xTaskPriorityDisinherit+0x18>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800edb6:	6d03      	ldr	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edb8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800edba:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800edbc:	3b01      	subs	r3, #1
 800edbe:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edc0:	428a      	cmp	r2, r1
 800edc2:	d001      	beq.n	800edc8 <xTaskPriorityDisinherit+0x18>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800edc8:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800edca:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800edcc:	1d05      	adds	r5, r0, #4
 800edce:	0028      	movs	r0, r5
 800edd0:	f7ff f830 	bl	800de34 <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edd4:	2207      	movs	r2, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edd8:	1ad2      	subs	r2, r2, r3
 800edda:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800eddc:	4a07      	ldr	r2, [pc, #28]	; (800edfc <xTaskPriorityDisinherit+0x4c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edde:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ede0:	6991      	ldr	r1, [r2, #24]
 800ede2:	428b      	cmp	r3, r1
 800ede4:	d900      	bls.n	800ede8 <xTaskPriorityDisinherit+0x38>
 800ede6:	6193      	str	r3, [r2, #24]
 800ede8:	0098      	lsls	r0, r3, #2
 800edea:	18c0      	adds	r0, r0, r3
 800edec:	4b04      	ldr	r3, [pc, #16]	; (800ee00 <xTaskPriorityDisinherit+0x50>)
 800edee:	0080      	lsls	r0, r0, #2
 800edf0:	18c0      	adds	r0, r0, r3
 800edf2:	0029      	movs	r1, r5
 800edf4:	f7fe fffa 	bl	800ddec <vListInsertEnd>
					xReturn = pdTRUE;
 800edf8:	2001      	movs	r0, #1
		return xReturn;
 800edfa:	e7e6      	b.n	800edca <xTaskPriorityDisinherit+0x1a>
 800edfc:	20002cbc 	.word	0x20002cbc
 800ee00:	20002d58 	.word	0x20002d58

0800ee04 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	46d6      	mov	lr, sl
 800ee08:	4646      	mov	r6, r8
 800ee0a:	464f      	mov	r7, r9
 800ee0c:	b5c0      	push	{r6, r7, lr}
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ee0e:	2600      	movs	r6, #0

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ee10:	4b31      	ldr	r3, [pc, #196]	; (800eed8 <vTaskList+0xd4>)
	{
 800ee12:	b084      	sub	sp, #16
		uxArraySize = uxCurrentNumberOfTasks;
 800ee14:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800ee16:	7006      	strb	r6, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800ee18:	9202      	str	r2, [sp, #8]
	{
 800ee1a:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ee1c:	69d8      	ldr	r0, [r3, #28]
 800ee1e:	0140      	lsls	r0, r0, #5
 800ee20:	f000 fc04 	bl	800f62c <pvPortMalloc>
 800ee24:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ee26:	d051      	beq.n	800eecc <vTaskList+0xc8>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ee28:	2200      	movs	r2, #0
 800ee2a:	9902      	ldr	r1, [sp, #8]
 800ee2c:	f7ff fe6c 	bl	800eb08 <uxTaskGetSystemState>
 800ee30:	9002      	str	r0, [sp, #8]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ee32:	9603      	str	r6, [sp, #12]
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	9a02      	ldr	r2, [sp, #8]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d944      	bls.n	800eec6 <vTaskList+0xc2>
 800ee3c:	4b27      	ldr	r3, [pc, #156]	; (800eedc <vTaskList+0xd8>)
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee3e:	2700      	movs	r7, #0
 800ee40:	4698      	mov	r8, r3
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee42:	4b27      	ldr	r3, [pc, #156]	; (800eee0 <vTaskList+0xdc>)
 800ee44:	469a      	mov	sl, r3
			pcBuffer[ x ] = ' ';
 800ee46:	230c      	movs	r3, #12
 800ee48:	4699      	mov	r9, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	2600      	movs	r6, #0
 800ee4e:	015b      	lsls	r3, r3, #5
 800ee50:	18eb      	adds	r3, r5, r3
 800ee52:	7b1b      	ldrb	r3, [r3, #12]
 800ee54:	3b01      	subs	r3, #1
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d801      	bhi.n	800ee60 <vTaskList+0x5c>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee5c:	4453      	add	r3, sl
 800ee5e:	7d1e      	ldrb	r6, [r3, #20]
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee60:	9b03      	ldr	r3, [sp, #12]
		strcpy( pcBuffer, pcTaskName );
 800ee62:	0020      	movs	r0, r4
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ee64:	015b      	lsls	r3, r3, #5
 800ee66:	18eb      	adds	r3, r5, r3
		strcpy( pcBuffer, pcTaskName );
 800ee68:	6859      	ldr	r1, [r3, #4]
 800ee6a:	f004 fbc4 	bl	80135f6 <strcpy>
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee6e:	0020      	movs	r0, r4
 800ee70:	f7f1 f952 	bl	8000118 <strlen>
 800ee74:	280b      	cmp	r0, #11
 800ee76:	d806      	bhi.n	800ee86 <vTaskList+0x82>
			pcBuffer[ x ] = ' ';
 800ee78:	464b      	mov	r3, r9
 800ee7a:	2120      	movs	r1, #32
 800ee7c:	1a1a      	subs	r2, r3, r0
 800ee7e:	1820      	adds	r0, r4, r0
 800ee80:	f004 f98d 	bl	801319e <memset>
 800ee84:	200c      	movs	r0, #12
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	9a03      	ldr	r2, [sp, #12]
 800ee8a:	9903      	ldr	r1, [sp, #12]
		pcBuffer[ x ] = 0x00;
 800ee8c:	1824      	adds	r4, r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee8e:	0149      	lsls	r1, r1, #5
		pcBuffer[ x ] = 0x00;
 800ee90:	7027      	strb	r7, [r4, #0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ee92:	1869      	adds	r1, r5, r1
 800ee94:	6889      	ldr	r1, [r1, #8]
 800ee96:	015b      	lsls	r3, r3, #5
 800ee98:	18eb      	adds	r3, r5, r3
 800ee9a:	0152      	lsls	r2, r2, #5
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	18aa      	adds	r2, r5, r2
 800eea0:	9101      	str	r1, [sp, #4]
 800eea2:	8b92      	ldrh	r2, [r2, #28]
 800eea4:	4641      	mov	r1, r8
 800eea6:	0020      	movs	r0, r4
 800eea8:	9200      	str	r2, [sp, #0]
 800eeaa:	0032      	movs	r2, r6
 800eeac:	f004 fb68 	bl	8013580 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800eeb0:	0020      	movs	r0, r4
 800eeb2:	f7f1 f931 	bl	8000118 <strlen>
			for( x = 0; x < uxArraySize; x++ )
 800eeb6:	9b03      	ldr	r3, [sp, #12]
				pcWriteBuffer += strlen( pcWriteBuffer );
 800eeb8:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800eeba:	3301      	adds	r3, #1
 800eebc:	9303      	str	r3, [sp, #12]
 800eebe:	9a03      	ldr	r2, [sp, #12]
 800eec0:	9b02      	ldr	r3, [sp, #8]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d3c1      	bcc.n	800ee4a <vTaskList+0x46>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800eec6:	0028      	movs	r0, r5
 800eec8:	f000 fc2a 	bl	800f720 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eecc:	b004      	add	sp, #16
 800eece:	bce0      	pop	{r5, r6, r7}
 800eed0:	46ba      	mov	sl, r7
 800eed2:	46b1      	mov	r9, r6
 800eed4:	46a8      	mov	r8, r5
 800eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed8:	20002cbc 	.word	0x20002cbc
 800eedc:	0801c374 	.word	0x0801c374
 800eee0:	080198f4 	.word	0x080198f4

0800eee4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800eee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee6:	46de      	mov	lr, fp
 800eee8:	4657      	mov	r7, sl
 800eeea:	4645      	mov	r5, r8
 800eeec:	464e      	mov	r6, r9
 800eeee:	b5e0      	push	{r5, r6, r7, lr}
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800eef0:	2700      	movs	r7, #0

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800eef2:	4b38      	ldr	r3, [pc, #224]	; (800efd4 <vTaskGetRunTimeStats+0xf0>)
	{
 800eef4:	b085      	sub	sp, #20
		uxArraySize = uxCurrentNumberOfTasks;
 800eef6:	69da      	ldr	r2, [r3, #28]
		*pcWriteBuffer = 0x00;
 800eef8:	7007      	strb	r7, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 800eefa:	9201      	str	r2, [sp, #4]
	{
 800eefc:	0004      	movs	r4, r0

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800eefe:	69d8      	ldr	r0, [r3, #28]
 800ef00:	0140      	lsls	r0, r0, #5
 800ef02:	f000 fb93 	bl	800f62c <pvPortMalloc>
 800ef06:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800ef08:	d05d      	beq.n	800efc6 <vTaskGetRunTimeStats+0xe2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ef0a:	9901      	ldr	r1, [sp, #4]
 800ef0c:	aa03      	add	r2, sp, #12
 800ef0e:	f7ff fdfb 	bl	800eb08 <uxTaskGetSystemState>

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ef12:	9b03      	ldr	r3, [sp, #12]
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ef14:	9001      	str	r0, [sp, #4]
			ulTotalTime /= 100UL;
 800ef16:	4698      	mov	r8, r3
 800ef18:	0018      	movs	r0, r3
 800ef1a:	2164      	movs	r1, #100	; 0x64
 800ef1c:	f7f1 f918 	bl	8000150 <__udivsi3>

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800ef20:	4643      	mov	r3, r8
			ulTotalTime /= 100UL;
 800ef22:	0006      	movs	r6, r0
 800ef24:	9003      	str	r0, [sp, #12]
			if( ulTotalTime > 0 )
 800ef26:	2b63      	cmp	r3, #99	; 0x63
 800ef28:	d94a      	bls.n	800efc0 <vTaskGetRunTimeStats+0xdc>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800ef2a:	9702      	str	r7, [sp, #8]
 800ef2c:	9b02      	ldr	r3, [sp, #8]
 800ef2e:	9a01      	ldr	r2, [sp, #4]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d945      	bls.n	800efc0 <vTaskGetRunTimeStats+0xdc>
			pcBuffer[ x ] = ' ';
 800ef34:	230c      	movs	r3, #12
 800ef36:	4698      	mov	r8, r3
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800ef38:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <vTaskGetRunTimeStats+0xf4>)
 800ef3a:	469a      	mov	sl, r3
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ef3c:	4b27      	ldr	r3, [pc, #156]	; (800efdc <vTaskGetRunTimeStats+0xf8>)
 800ef3e:	4699      	mov	r9, r3
 800ef40:	e019      	b.n	800ef76 <vTaskGetRunTimeStats+0x92>
 800ef42:	469b      	mov	fp, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ef44:	0031      	movs	r1, r6
 800ef46:	0038      	movs	r0, r7
 800ef48:	f7f1 f902 	bl	8000150 <__udivsi3>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ef4c:	465a      	mov	r2, fp
 800ef4e:	0152      	lsls	r2, r2, #5
 800ef50:	18aa      	adds	r2, r5, r2
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ef52:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800ef54:	4649      	mov	r1, r9
 800ef56:	0020      	movs	r0, r4
 800ef58:	6992      	ldr	r2, [r2, #24]
 800ef5a:	f004 fb11 	bl	8013580 <sprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800ef5e:	0020      	movs	r0, r4
 800ef60:	f7f1 f8da 	bl	8000118 <strlen>
				for( x = 0; x < uxArraySize; x++ )
 800ef64:	9b02      	ldr	r3, [sp, #8]
					pcWriteBuffer += strlen( pcWriteBuffer );
 800ef66:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800ef68:	3301      	adds	r3, #1
 800ef6a:	9302      	str	r3, [sp, #8]
 800ef6c:	9a02      	ldr	r2, [sp, #8]
 800ef6e:	9b01      	ldr	r3, [sp, #4]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d225      	bcs.n	800efc0 <vTaskGetRunTimeStats+0xdc>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ef74:	9e03      	ldr	r6, [sp, #12]
 800ef76:	9b02      	ldr	r3, [sp, #8]
		strcpy( pcBuffer, pcTaskName );
 800ef78:	0020      	movs	r0, r4
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800ef7a:	015b      	lsls	r3, r3, #5
 800ef7c:	18eb      	adds	r3, r5, r3
 800ef7e:	699f      	ldr	r7, [r3, #24]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ef80:	9b02      	ldr	r3, [sp, #8]
 800ef82:	015b      	lsls	r3, r3, #5
 800ef84:	18eb      	adds	r3, r5, r3
		strcpy( pcBuffer, pcTaskName );
 800ef86:	6859      	ldr	r1, [r3, #4]
 800ef88:	f004 fb35 	bl	80135f6 <strcpy>
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ef8c:	0020      	movs	r0, r4
 800ef8e:	f7f1 f8c3 	bl	8000118 <strlen>
 800ef92:	280b      	cmp	r0, #11
 800ef94:	d806      	bhi.n	800efa4 <vTaskGetRunTimeStats+0xc0>
			pcBuffer[ x ] = ' ';
 800ef96:	4643      	mov	r3, r8
 800ef98:	2120      	movs	r1, #32
 800ef9a:	1a1a      	subs	r2, r3, r0
 800ef9c:	1820      	adds	r0, r4, r0
 800ef9e:	f004 f8fe 	bl	801319e <memset>
 800efa2:	200c      	movs	r0, #12
		pcBuffer[ x ] = 0x00;
 800efa4:	2300      	movs	r3, #0
 800efa6:	1824      	adds	r4, r4, r0
 800efa8:	7023      	strb	r3, [r4, #0]
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800efaa:	9b02      	ldr	r3, [sp, #8]
					if( ulStatsAsPercentage > 0UL )
 800efac:	42b7      	cmp	r7, r6
 800efae:	d2c8      	bcs.n	800ef42 <vTaskGetRunTimeStats+0x5e>
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800efb0:	015b      	lsls	r3, r3, #5
 800efb2:	18eb      	adds	r3, r5, r3
 800efb4:	4651      	mov	r1, sl
 800efb6:	0020      	movs	r0, r4
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	f004 fae1 	bl	8013580 <sprintf>
 800efbe:	e7ce      	b.n	800ef5e <vTaskGetRunTimeStats+0x7a>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800efc0:	0028      	movs	r0, r5
 800efc2:	f000 fbad 	bl	800f720 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efc6:	b005      	add	sp, #20
 800efc8:	bcf0      	pop	{r4, r5, r6, r7}
 800efca:	46bb      	mov	fp, r7
 800efcc:	46b2      	mov	sl, r6
 800efce:	46a9      	mov	r9, r5
 800efd0:	46a0      	mov	r8, r4
 800efd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd4:	20002cbc 	.word	0x20002cbc
 800efd8:	0801c390 	.word	0x0801c390
 800efdc:	0801c384 	.word	0x0801c384

0800efe0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efe0:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <pvTaskIncrementMutexHeldCount+0x14>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	d003      	beq.n	800eff0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800efe8:	6819      	ldr	r1, [r3, #0]
 800efea:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800efec:	3201      	adds	r2, #1
 800efee:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eff0:	6818      	ldr	r0, [r3, #0]
	}
 800eff2:	4770      	bx	lr
 800eff4:	20002cbc 	.word	0x20002cbc

0800eff8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	0006      	movs	r6, r0
 800effc:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800effe:	f000 fa9b 	bl	800f538 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f002:	4c1c      	ldr	r4, [pc, #112]	; (800f074 <ulTaskNotifyTake+0x7c>)
 800f004:	6823      	ldr	r3, [r4, #0]
 800f006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d105      	bne.n	800f018 <ulTaskNotifyTake+0x20>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f00c:	2101      	movs	r1, #1
 800f00e:	6822      	ldr	r2, [r4, #0]
 800f010:	335c      	adds	r3, #92	; 0x5c
 800f012:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f014:	2d00      	cmp	r5, #0
 800f016:	d119      	bne.n	800f04c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f018:	f000 fa9a 	bl	800f550 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f01c:	f000 fa8c 	bl	800f538 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f024:	2d00      	cmp	r5, #0
 800f026:	d004      	beq.n	800f032 <ulTaskNotifyTake+0x3a>
			{
				if( xClearCountOnExit != pdFALSE )
 800f028:	2e00      	cmp	r6, #0
 800f02a:	d00a      	beq.n	800f042 <ulTaskNotifyTake+0x4a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f02c:	2200      	movs	r2, #0
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f032:	235c      	movs	r3, #92	; 0x5c
 800f034:	2100      	movs	r1, #0
 800f036:	6822      	ldr	r2, [r4, #0]
 800f038:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f03a:	f000 fa89 	bl	800f550 <vPortExitCritical>

		return ulReturn;
	}
 800f03e:	0028      	movs	r0, r5
 800f040:	bd70      	pop	{r4, r5, r6, pc}
					( pxCurrentTCB->ulNotifiedValue )--;
 800f042:	6822      	ldr	r2, [r4, #0]
 800f044:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f046:	3b01      	subs	r3, #1
 800f048:	6593      	str	r3, [r2, #88]	; 0x58
 800f04a:	e7f2      	b.n	800f032 <ulTaskNotifyTake+0x3a>
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	3004      	adds	r0, #4
 800f050:	f7fe fef0 	bl	800de34 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f054:	1c6b      	adds	r3, r5, #1
 800f056:	d006      	beq.n	800f066 <ulTaskNotifyTake+0x6e>
							xTimeToWake = xTickCount + xTicksToWait;
 800f058:	6860      	ldr	r0, [r4, #4]
 800f05a:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f05c:	f7ff fa30 	bl	800e4c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f060:	f000 fa5e 	bl	800f520 <vPortYield>
 800f064:	e7d8      	b.n	800f018 <ulTaskNotifyTake+0x20>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f066:	0020      	movs	r0, r4
 800f068:	6821      	ldr	r1, [r4, #0]
 800f06a:	3070      	adds	r0, #112	; 0x70
 800f06c:	3104      	adds	r1, #4
 800f06e:	f7fe febd 	bl	800ddec <vListInsertEnd>
 800f072:	e7f5      	b.n	800f060 <ulTaskNotifyTake+0x68>
 800f074:	20002cbc 	.word	0x20002cbc

0800f078 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07a:	001e      	movs	r6, r3
 800f07c:	0005      	movs	r5, r0
 800f07e:	000f      	movs	r7, r1
 800f080:	0014      	movs	r4, r2
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f082:	f000 fa59 	bl	800f538 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f086:	2e00      	cmp	r6, #0
 800f088:	d001      	beq.n	800f08e <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f08a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f08c:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f08e:	225c      	movs	r2, #92	; 0x5c

			pxTCB->eNotifyState = eNotified;
 800f090:	2102      	movs	r1, #2
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f092:	5cab      	ldrb	r3, [r5, r2]
			pxTCB->eNotifyState = eNotified;
 800f094:	54a9      	strb	r1, [r5, r2]
			eOriginalNotifyState = pxTCB->eNotifyState;
 800f096:	b2db      	uxtb	r3, r3

			switch( eAction )
 800f098:	2c03      	cmp	r4, #3
 800f09a:	d012      	beq.n	800f0c2 <xTaskGenericNotify+0x4a>
 800f09c:	d80d      	bhi.n	800f0ba <xTaskGenericNotify+0x42>
 800f09e:	2c01      	cmp	r4, #1
 800f0a0:	d02c      	beq.n	800f0fc <xTaskGenericNotify+0x84>
 800f0a2:	2c02      	cmp	r4, #2
 800f0a4:	d102      	bne.n	800f0ac <xTaskGenericNotify+0x34>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f0a6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f0a8:	3201      	adds	r2, #1
 800f0aa:	65aa      	str	r2, [r5, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d00b      	beq.n	800f0c8 <xTaskGenericNotify+0x50>
 800f0b0:	2401      	movs	r4, #1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f0b2:	f000 fa4d 	bl	800f550 <vPortExitCritical>

		return xReturn;
	}
 800f0b6:	0020      	movs	r0, r4
 800f0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch( eAction )
 800f0ba:	2c04      	cmp	r4, #4
 800f0bc:	d1f6      	bne.n	800f0ac <xTaskGenericNotify+0x34>
					if( eOriginalNotifyState != eNotified )
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d022      	beq.n	800f108 <xTaskGenericNotify+0x90>
						pxTCB->ulNotifiedValue = ulValue;
 800f0c2:	65af      	str	r7, [r5, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d1f3      	bne.n	800f0b0 <xTaskGenericNotify+0x38>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f0c8:	1d2e      	adds	r6, r5, #4
 800f0ca:	0030      	movs	r0, r6
 800f0cc:	f7fe feb2 	bl	800de34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f0d0:	4c0e      	ldr	r4, [pc, #56]	; (800f10c <xTaskGenericNotify+0x94>)
 800f0d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f0d4:	69a2      	ldr	r2, [r4, #24]
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d900      	bls.n	800f0dc <xTaskGenericNotify+0x64>
 800f0da:	61a3      	str	r3, [r4, #24]
 800f0dc:	0098      	lsls	r0, r3, #2
 800f0de:	18c0      	adds	r0, r0, r3
 800f0e0:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <xTaskGenericNotify+0x98>)
 800f0e2:	0080      	lsls	r0, r0, #2
 800f0e4:	18c0      	adds	r0, r0, r3
 800f0e6:	0031      	movs	r1, r6
 800f0e8:	f7fe fe80 	bl	800ddec <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f0ec:	6823      	ldr	r3, [r4, #0]
 800f0ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d9dc      	bls.n	800f0b0 <xTaskGenericNotify+0x38>
					taskYIELD_IF_USING_PREEMPTION();
 800f0f6:	f000 fa13 	bl	800f520 <vPortYield>
 800f0fa:	e7d9      	b.n	800f0b0 <xTaskGenericNotify+0x38>
					pxTCB->ulNotifiedValue |= ulValue;
 800f0fc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f0fe:	430f      	orrs	r7, r1
 800f100:	65af      	str	r7, [r5, #88]	; 0x58
			if( eOriginalNotifyState == eWaitingNotification )
 800f102:	2b01      	cmp	r3, #1
 800f104:	d1d4      	bne.n	800f0b0 <xTaskGenericNotify+0x38>
 800f106:	e7df      	b.n	800f0c8 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 800f108:	2400      	movs	r4, #0
 800f10a:	e7d2      	b.n	800f0b2 <xTaskGenericNotify+0x3a>
 800f10c:	20002cbc 	.word	0x20002cbc
 800f110:	20002d58 	.word	0x20002d58

0800f114 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f114:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f116:	f000 fa0f 	bl	800f538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f11a:	4c0f      	ldr	r4, [pc, #60]	; (800f158 <prvCheckForValidListAndQueue+0x44>)
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d002      	beq.n	800f128 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f122:	f000 fa15 	bl	800f550 <vPortExitCritical>
}
 800f126:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList2 );
 800f128:	0025      	movs	r5, r4
			vListInitialise( &xActiveTimerList1 );
 800f12a:	1d26      	adds	r6, r4, #4
 800f12c:	0030      	movs	r0, r6
			vListInitialise( &xActiveTimerList2 );
 800f12e:	3518      	adds	r5, #24
			vListInitialise( &xActiveTimerList1 );
 800f130:	f7fe fe4c 	bl	800ddcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f134:	0028      	movs	r0, r5
 800f136:	f7fe fe49 	bl	800ddcc <vListInitialise>
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f13a:	2200      	movs	r2, #0
 800f13c:	2110      	movs	r1, #16
 800f13e:	2004      	movs	r0, #4
			pxCurrentTimerList = &xActiveTimerList1;
 800f140:	62e6      	str	r6, [r4, #44]	; 0x2c
			pxOverflowTimerList = &xActiveTimerList2;
 800f142:	6325      	str	r5, [r4, #48]	; 0x30
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f144:	f7fe ff0c 	bl	800df60 <xQueueGenericCreate>
 800f148:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800f14a:	2800      	cmp	r0, #0
 800f14c:	d0e9      	beq.n	800f122 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f14e:	4903      	ldr	r1, [pc, #12]	; (800f15c <prvCheckForValidListAndQueue+0x48>)
 800f150:	f7ff f930 	bl	800e3b4 <vQueueAddToRegistry>
 800f154:	e7e5      	b.n	800f122 <prvCheckForValidListAndQueue+0xe>
 800f156:	46c0      	nop			; (mov r8, r8)
 800f158:	20002de4 	.word	0x20002de4
 800f15c:	0801c39c 	.word	0x0801c39c

0800f160 <xTimerCreateTimerTask>:
{
 800f160:	b500      	push	{lr}
 800f162:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f164:	f7ff ffd6 	bl	800f114 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f168:	4b08      	ldr	r3, [pc, #32]	; (800f18c <xTimerCreateTimerTask+0x2c>)
BaseType_t xReturn = pdFAIL;
 800f16a:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00a      	beq.n	800f188 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f172:	2303      	movs	r3, #3
 800f174:	9003      	str	r0, [sp, #12]
 800f176:	9002      	str	r0, [sp, #8]
 800f178:	9001      	str	r0, [sp, #4]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	2296      	movs	r2, #150	; 0x96
 800f17e:	2300      	movs	r3, #0
 800f180:	4903      	ldr	r1, [pc, #12]	; (800f190 <xTimerCreateTimerTask+0x30>)
 800f182:	4804      	ldr	r0, [pc, #16]	; (800f194 <xTimerCreateTimerTask+0x34>)
 800f184:	f7ff fa10 	bl	800e5a8 <xTaskGenericCreate>
}
 800f188:	b005      	add	sp, #20
 800f18a:	bd00      	pop	{pc}
 800f18c:	20002de4 	.word	0x20002de4
 800f190:	0801c3a4 	.word	0x0801c3a4
 800f194:	0800f299 	.word	0x0800f299

0800f198 <xTimerCreate>:
{
 800f198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f19a:	46c6      	mov	lr, r8
 800f19c:	0007      	movs	r7, r0
 800f19e:	000d      	movs	r5, r1
 800f1a0:	4690      	mov	r8, r2
 800f1a2:	001e      	movs	r6, r3
		pxNewTimer = NULL;
 800f1a4:	2400      	movs	r4, #0
{
 800f1a6:	b500      	push	{lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f1a8:	2900      	cmp	r1, #0
 800f1aa:	d010      	beq.n	800f1ce <xTimerCreate+0x36>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f1ac:	202c      	movs	r0, #44	; 0x2c
 800f1ae:	f000 fa3d 	bl	800f62c <pvPortMalloc>
 800f1b2:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f1b4:	d00b      	beq.n	800f1ce <xTimerCreate+0x36>
			prvCheckForValidListAndQueue();
 800f1b6:	f7ff ffad 	bl	800f114 <prvCheckForValidListAndQueue>
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f1ba:	4643      	mov	r3, r8
 800f1bc:	61e3      	str	r3, [r4, #28]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f1be:	9b06      	ldr	r3, [sp, #24]
			pxNewTimer->pcTimerName = pcTimerName;
 800f1c0:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f1c2:	61a5      	str	r5, [r4, #24]
			pxNewTimer->pvTimerID = pvTimerID;
 800f1c4:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f1c6:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f1c8:	1d20      	adds	r0, r4, #4
 800f1ca:	f7fe fe0b 	bl	800dde4 <vListInitialiseItem>
}
 800f1ce:	0020      	movs	r0, r4
 800f1d0:	bc80      	pop	{r7}
 800f1d2:	46b8      	mov	r8, r7
 800f1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1d6:	46c0      	nop			; (mov r8, r8)

0800f1d8 <xTimerGenericCommand>:
{
 800f1d8:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800f1da:	4e13      	ldr	r6, [pc, #76]	; (800f228 <xTimerGenericCommand+0x50>)
{
 800f1dc:	001c      	movs	r4, r3
	if( xTimerQueue != NULL )
 800f1de:	6835      	ldr	r5, [r6, #0]
{
 800f1e0:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800f1e2:	2d00      	cmp	r5, #0
 800f1e4:	d017      	beq.n	800f216 <xTimerGenericCommand+0x3e>
		xMessage.xMessageID = xCommandID;
 800f1e6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f1e8:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f1ea:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f1ec:	2905      	cmp	r1, #5
 800f1ee:	dc0a      	bgt.n	800f206 <xTimerGenericCommand+0x2e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1f0:	f7ff fd9e 	bl	800ed30 <xTaskGetSchedulerState>
 800f1f4:	2802      	cmp	r0, #2
 800f1f6:	d010      	beq.n	800f21a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	4669      	mov	r1, sp
 800f1fe:	6830      	ldr	r0, [r6, #0]
 800f200:	f7fe ff16 	bl	800e030 <xQueueGenericSend>
 800f204:	e005      	b.n	800f212 <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f206:	2300      	movs	r3, #0
 800f208:	0022      	movs	r2, r4
 800f20a:	4669      	mov	r1, sp
 800f20c:	0028      	movs	r0, r5
 800f20e:	f7fe ff8b 	bl	800e128 <xQueueGenericSendFromISR>
}
 800f212:	b004      	add	sp, #16
 800f214:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 800f216:	2000      	movs	r0, #0
	return xReturn;
 800f218:	e7fb      	b.n	800f212 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f21a:	2300      	movs	r3, #0
 800f21c:	4669      	mov	r1, sp
 800f21e:	6830      	ldr	r0, [r6, #0]
 800f220:	9a08      	ldr	r2, [sp, #32]
 800f222:	f7fe ff05 	bl	800e030 <xQueueGenericSend>
 800f226:	e7f4      	b.n	800f212 <xTimerGenericCommand+0x3a>
 800f228:	20002de4 	.word	0x20002de4

0800f22c <prvSwitchTimerLists>:
{
 800f22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f22e:	46c6      	mov	lr, r8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f230:	2300      	movs	r3, #0
{
 800f232:	b500      	push	{lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f234:	4698      	mov	r8, r3
 800f236:	4e17      	ldr	r6, [pc, #92]	; (800f294 <prvSwitchTimerLists+0x68>)
{
 800f238:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f23a:	e00c      	b.n	800f256 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f23c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f23e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f240:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f242:	1d25      	adds	r5, r4, #4
 800f244:	0028      	movs	r0, r5
 800f246:	f7fe fdf5 	bl	800de34 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f24c:	0020      	movs	r0, r4
 800f24e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f250:	69e3      	ldr	r3, [r4, #28]
 800f252:	2b01      	cmp	r3, #1
 800f254:	d00a      	beq.n	800f26c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f256:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	2a00      	cmp	r2, #0
 800f25c:	d1ee      	bne.n	800f23c <prvSwitchTimerLists+0x10>
	pxCurrentTimerList = pxOverflowTimerList;
 800f25e:	6b32      	ldr	r2, [r6, #48]	; 0x30
	pxOverflowTimerList = pxTemp;
 800f260:	6333      	str	r3, [r6, #48]	; 0x30
	pxCurrentTimerList = pxOverflowTimerList;
 800f262:	62f2      	str	r2, [r6, #44]	; 0x2c
}
 800f264:	b002      	add	sp, #8
 800f266:	bc80      	pop	{r7}
 800f268:	46b8      	mov	r8, r7
 800f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f26c:	69a3      	ldr	r3, [r4, #24]
 800f26e:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
 800f270:	429f      	cmp	r7, r3
 800f272:	d206      	bcs.n	800f282 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f274:	0029      	movs	r1, r5
 800f276:	6af0      	ldr	r0, [r6, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f278:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f27a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f27c:	f7fe fdc2 	bl	800de04 <vListInsert>
 800f280:	e7e9      	b.n	800f256 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f282:	4643      	mov	r3, r8
 800f284:	003a      	movs	r2, r7
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	2100      	movs	r1, #0
 800f28a:	2300      	movs	r3, #0
 800f28c:	0020      	movs	r0, r4
 800f28e:	f7ff ffa3 	bl	800f1d8 <xTimerGenericCommand>
 800f292:	e7e0      	b.n	800f256 <prvSwitchTimerLists+0x2a>
 800f294:	20002de4 	.word	0x20002de4

0800f298 <prvTimerTask>:
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f298:	2300      	movs	r3, #0
{
 800f29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f29c:	4646      	mov	r6, r8
 800f29e:	46d6      	mov	lr, sl
 800f2a0:	464f      	mov	r7, r9
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2a2:	4698      	mov	r8, r3
{
 800f2a4:	b5c0      	push	{r6, r7, lr}
 800f2a6:	4c6a      	ldr	r4, [pc, #424]	; (800f450 <prvTimerTask+0x1b8>)
 800f2a8:	4e6a      	ldr	r6, [pc, #424]	; (800f454 <prvTimerTask+0x1bc>)
 800f2aa:	b08a      	sub	sp, #40	; 0x28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f2ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2ae:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f2b0:	2f00      	cmp	r7, #0
 800f2b2:	d073      	beq.n	800f39c <prvTimerTask+0x104>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f2b4:	68db      	ldr	r3, [r3, #12]
 800f2b6:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800f2b8:	f7ff fad6 	bl	800e868 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f2bc:	f7ff fadc 	bl	800e878 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f2c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f2c2:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 800f2c4:	4298      	cmp	r0, r3
 800f2c6:	d371      	bcc.n	800f3ac <prvTimerTask+0x114>
	xLastTime = xTimeNow;
 800f2c8:	6360      	str	r0, [r4, #52]	; 0x34
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2ca:	42b8      	cmp	r0, r7
 800f2cc:	d300      	bcc.n	800f2d0 <prvTimerTask+0x38>
 800f2ce:	e08b      	b.n	800f3e8 <prvTimerTask+0x150>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f2d0:	6820      	ldr	r0, [r4, #0]
 800f2d2:	1b79      	subs	r1, r7, r5
 800f2d4:	f7ff f882 	bl	800e3dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2d8:	f7ff fb6a 	bl	800e9b0 <xTaskResumeAll>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d077      	beq.n	800f3d0 <prvTimerTask+0x138>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	6820      	ldr	r0, [r4, #0]
 800f2e6:	a906      	add	r1, sp, #24
 800f2e8:	f7fe ff82 	bl	800e1f0 <xQueueGenericReceive>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d0dd      	beq.n	800f2ac <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f2f0:	9b06      	ldr	r3, [sp, #24]
 800f2f2:	9303      	str	r3, [sp, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	db43      	blt.n	800f380 <prvTimerTask+0xe8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f2f8:	9d08      	ldr	r5, [sp, #32]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f2fa:	696b      	ldr	r3, [r5, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <prvTimerTask+0x6e>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f300:	1d28      	adds	r0, r5, #4
 800f302:	f7fe fd97 	bl	800de34 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800f306:	f7ff fab7 	bl	800e878 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f30a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f30c:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800f30e:	4298      	cmp	r0, r3
 800f310:	d352      	bcc.n	800f3b8 <prvTimerTask+0x120>
			switch( xMessage.xMessageID )
 800f312:	9b06      	ldr	r3, [sp, #24]
	xLastTime = xTimeNow;
 800f314:	6367      	str	r7, [r4, #52]	; 0x34
			switch( xMessage.xMessageID )
 800f316:	2b09      	cmp	r3, #9
 800f318:	d8e2      	bhi.n	800f2e0 <prvTimerTask+0x48>
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	58f3      	ldr	r3, [r6, r3]
 800f31e:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f320:	9807      	ldr	r0, [sp, #28]
 800f322:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f324:	612d      	str	r5, [r5, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800f326:	1842      	adds	r2, r0, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f328:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f32a:	42ba      	cmp	r2, r7
 800f32c:	d853      	bhi.n	800f3d6 <prvTimerTask+0x13e>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f32e:	1a38      	subs	r0, r7, r0
 800f330:	4281      	cmp	r1, r0
 800f332:	d81c      	bhi.n	800f36e <prvTimerTask+0xd6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f334:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f336:	0028      	movs	r0, r5
 800f338:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f33a:	69eb      	ldr	r3, [r5, #28]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d1cf      	bne.n	800f2e0 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f340:	9b07      	ldr	r3, [sp, #28]
 800f342:	2100      	movs	r1, #0
 800f344:	001a      	movs	r2, r3
 800f346:	9303      	str	r3, [sp, #12]
 800f348:	69ab      	ldr	r3, [r5, #24]
 800f34a:	0028      	movs	r0, r5
 800f34c:	469c      	mov	ip, r3
 800f34e:	4643      	mov	r3, r8
 800f350:	4462      	add	r2, ip
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	2300      	movs	r3, #0
 800f356:	f7ff ff3f 	bl	800f1d8 <xTimerGenericCommand>
							( void ) xResult;
 800f35a:	e7c1      	b.n	800f2e0 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f35c:	9b07      	ldr	r3, [sp, #28]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f35e:	612d      	str	r5, [r5, #16]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f360:	19da      	adds	r2, r3, r7
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f362:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f364:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f366:	42ba      	cmp	r2, r7
 800f368:	d839      	bhi.n	800f3de <prvTimerTask+0x146>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d0b8      	beq.n	800f2e0 <prvTimerTask+0x48>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f36e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f370:	1d29      	adds	r1, r5, #4
 800f372:	f7fe fd47 	bl	800de04 <vListInsert>
	return xProcessTimerNow;
 800f376:	e7b3      	b.n	800f2e0 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 800f378:	0028      	movs	r0, r5
 800f37a:	f000 f9d1 	bl	800f720 <vPortFree>
					break;
 800f37e:	e7af      	b.n	800f2e0 <prvTimerTask+0x48>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f382:	9303      	str	r3, [sp, #12]
 800f384:	9b08      	ldr	r3, [sp, #32]
 800f386:	9903      	ldr	r1, [sp, #12]
 800f388:	9304      	str	r3, [sp, #16]
 800f38a:	9b07      	ldr	r3, [sp, #28]
 800f38c:	9804      	ldr	r0, [sp, #16]
 800f38e:	9305      	str	r3, [sp, #20]
 800f390:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f392:	9b06      	ldr	r3, [sp, #24]
 800f394:	9303      	str	r3, [sp, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	dba2      	blt.n	800f2e0 <prvTimerTask+0x48>
 800f39a:	e7ad      	b.n	800f2f8 <prvTimerTask+0x60>
	vTaskSuspendAll();
 800f39c:	f7ff fa64 	bl	800e868 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800f3a0:	f7ff fa6a 	bl	800e878 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800f3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	xTimeNow = xTaskGetTickCount();
 800f3a6:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
 800f3a8:	4298      	cmp	r0, r3
 800f3aa:	d208      	bcs.n	800f3be <prvTimerTask+0x126>
		prvSwitchTimerLists();
 800f3ac:	f7ff ff3e 	bl	800f22c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800f3b0:	6365      	str	r5, [r4, #52]	; 0x34
			( void ) xTaskResumeAll();
 800f3b2:	f7ff fafd 	bl	800e9b0 <xTaskResumeAll>
 800f3b6:	e793      	b.n	800f2e0 <prvTimerTask+0x48>
		prvSwitchTimerLists();
 800f3b8:	f7ff ff38 	bl	800f22c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3bc:	e7a9      	b.n	800f312 <prvTimerTask+0x7a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f3be:	6820      	ldr	r0, [r4, #0]
 800f3c0:	1b79      	subs	r1, r7, r5
	xLastTime = xTimeNow;
 800f3c2:	6365      	str	r5, [r4, #52]	; 0x34
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800f3c4:	f7ff f80a 	bl	800e3dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f3c8:	f7ff faf2 	bl	800e9b0 <xTaskResumeAll>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d187      	bne.n	800f2e0 <prvTimerTask+0x48>
					portYIELD_WITHIN_API();
 800f3d0:	f000 f8a6 	bl	800f520 <vPortYield>
 800f3d4:	e784      	b.n	800f2e0 <prvTimerTask+0x48>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3d6:	42b8      	cmp	r0, r7
 800f3d8:	d901      	bls.n	800f3de <prvTimerTask+0x146>
 800f3da:	4290      	cmp	r0, r2
 800f3dc:	d9aa      	bls.n	800f334 <prvTimerTask+0x9c>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f3e0:	1d29      	adds	r1, r5, #4
 800f3e2:	f7fe fd0f 	bl	800de04 <vListInsert>
 800f3e6:	e77b      	b.n	800f2e0 <prvTimerTask+0x48>
				( void ) xTaskResumeAll();
 800f3e8:	f7ff fae2 	bl	800e9b0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	4699      	mov	r9, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3f4:	2304      	movs	r3, #4
 800f3f6:	444b      	add	r3, r9
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	469a      	mov	sl, r3
 800f3fc:	f7fe fd1a 	bl	800de34 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f400:	464b      	mov	r3, r9
 800f402:	69db      	ldr	r3, [r3, #28]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d004      	beq.n	800f412 <prvTimerTask+0x17a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f408:	464b      	mov	r3, r9
 800f40a:	4648      	mov	r0, r9
 800f40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f40e:	4798      	blx	r3
}
 800f410:	e766      	b.n	800f2e0 <prvTimerTask+0x48>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f412:	464b      	mov	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f414:	4649      	mov	r1, r9
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f416:	699b      	ldr	r3, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f418:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f41a:	18fa      	adds	r2, r7, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f41c:	604a      	str	r2, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800f41e:	4295      	cmp	r5, r2
 800f420:	d204      	bcs.n	800f42c <prvTimerTask+0x194>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f422:	4651      	mov	r1, sl
 800f424:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f426:	f7fe fced 	bl	800de04 <vListInsert>
	return xProcessTimerNow;
 800f42a:	e7ed      	b.n	800f408 <prvTimerTask+0x170>
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f42c:	1bed      	subs	r5, r5, r7
 800f42e:	42ab      	cmp	r3, r5
 800f430:	d808      	bhi.n	800f444 <prvTimerTask+0x1ac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f432:	4643      	mov	r3, r8
 800f434:	003a      	movs	r2, r7
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	2100      	movs	r1, #0
 800f43a:	2300      	movs	r3, #0
 800f43c:	4648      	mov	r0, r9
 800f43e:	f7ff fecb 	bl	800f1d8 <xTimerGenericCommand>
			( void ) xResult;
 800f442:	e7e1      	b.n	800f408 <prvTimerTask+0x170>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f444:	4651      	mov	r1, sl
 800f446:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f448:	f7fe fcdc 	bl	800de04 <vListInsert>
	return xProcessTimerNow;
 800f44c:	e7dc      	b.n	800f408 <prvTimerTask+0x170>
 800f44e:	46c0      	nop			; (mov r8, r8)
 800f450:	20002de4 	.word	0x20002de4
 800f454:	0801990c 	.word	0x0801990c

0800f458 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800f458:	b510      	push	{r4, lr}
 800f45a:	0004      	movs	r4, r0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800f45c:	f000 f86c 	bl	800f538 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f460:	6964      	ldr	r4, [r4, #20]
	}
	taskEXIT_CRITICAL();
 800f462:	f000 f875 	bl	800f550 <vPortExitCritical>
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 800f466:	1e63      	subs	r3, r4, #1
 800f468:	419c      	sbcs	r4, r3

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800f46a:	0020      	movs	r0, r4
 800f46c:	bd10      	pop	{r4, pc}
 800f46e:	46c0      	nop			; (mov r8, r8)

0800f470 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800f470:	b510      	push	{r4, lr}
 800f472:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800f474:	f000 f860 	bl	800f538 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800f478:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800f47a:	f000 f869 	bl	800f550 <vPortExitCritical>

	return pvReturn;
}
 800f47e:	0020      	movs	r0, r4
 800f480:	bd10      	pop	{r4, pc}
 800f482:	46c0      	nop			; (mov r8, r8)

0800f484 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800f484:	b672      	cpsid	i
	for( ;; );
 800f486:	e7fe      	b.n	800f486 <prvTaskExitError+0x2>

0800f488 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800f488:	4a06      	ldr	r2, [pc, #24]	; (800f4a4 <pxCurrentTCBConst2>)
 800f48a:	6813      	ldr	r3, [r2, #0]
 800f48c:	6818      	ldr	r0, [r3, #0]
 800f48e:	3020      	adds	r0, #32
 800f490:	f380 8809 	msr	PSP, r0
 800f494:	2002      	movs	r0, #2
 800f496:	f380 8814 	msr	CONTROL, r0
 800f49a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800f49c:	46ae      	mov	lr, r5
 800f49e:	b662      	cpsie	i
 800f4a0:	bd00      	pop	{pc}
 800f4a2:	46c0      	nop			; (mov r8, r8)

0800f4a4 <pxCurrentTCBConst2>:
 800f4a4:	20002cbc 	.word	0x20002cbc

0800f4a8 <pxPortInitialiseStack>:
{
 800f4a8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4aa:	2480      	movs	r4, #128	; 0x80
 800f4ac:	1f03      	subs	r3, r0, #4
 800f4ae:	0464      	lsls	r4, r4, #17
 800f4b0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800f4b2:	3b04      	subs	r3, #4
 800f4b4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4b6:	4903      	ldr	r1, [pc, #12]	; (800f4c4 <pxPortInitialiseStack+0x1c>)
 800f4b8:	3b04      	subs	r3, #4
 800f4ba:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4bc:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800f4be:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4c0:	601a      	str	r2, [r3, #0]
}
 800f4c2:	bd10      	pop	{r4, pc}
 800f4c4:	0800f485 	.word	0x0800f485

0800f4c8 <SVC_Handler>:
 800f4c8:	4770      	bx	lr
 800f4ca:	46c0      	nop			; (mov r8, r8)

0800f4cc <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f4cc:	22ff      	movs	r2, #255	; 0xff
 800f4ce:	4b0f      	ldr	r3, [pc, #60]	; (800f50c <xPortStartScheduler+0x40>)
 800f4d0:	0412      	lsls	r2, r2, #16
 800f4d2:	6819      	ldr	r1, [r3, #0]
{
 800f4d4:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800f4d6:	430a      	orrs	r2, r1
 800f4d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f4da:	22ff      	movs	r2, #255	; 0xff
 800f4dc:	6819      	ldr	r1, [r3, #0]
 800f4de:	0612      	lsls	r2, r2, #24
 800f4e0:	430a      	orrs	r2, r1
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4e2:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800f4e4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4e6:	4b0a      	ldr	r3, [pc, #40]	; (800f510 <xPortStartScheduler+0x44>)
 800f4e8:	0089      	lsls	r1, r1, #2
 800f4ea:	6818      	ldr	r0, [r3, #0]
 800f4ec:	f7f0 fe30 	bl	8000150 <__udivsi3>
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f4f0:	2207      	movs	r2, #7
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4f2:	4b08      	ldr	r3, [pc, #32]	; (800f514 <xPortStartScheduler+0x48>)
 800f4f4:	3801      	subs	r0, #1
 800f4f6:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800f4f8:	4b07      	ldr	r3, [pc, #28]	; (800f518 <xPortStartScheduler+0x4c>)
 800f4fa:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	4b07      	ldr	r3, [pc, #28]	; (800f51c <xPortStartScheduler+0x50>)
 800f500:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800f502:	f7ff ffc1 	bl	800f488 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800f506:	b672      	cpsid	i
	for( ;; );
 800f508:	e7fe      	b.n	800f508 <xPortStartScheduler+0x3c>
 800f50a:	46c0      	nop			; (mov r8, r8)
 800f50c:	e000ed20 	.word	0xe000ed20
 800f510:	200000b8 	.word	0x200000b8
 800f514:	e000e014 	.word	0xe000e014
 800f518:	e000e010 	.word	0xe000e010
 800f51c:	200000cc 	.word	0x200000cc

0800f520 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800f520:	2280      	movs	r2, #128	; 0x80
 800f522:	4b04      	ldr	r3, [pc, #16]	; (800f534 <vPortYield+0x14>)
 800f524:	0552      	lsls	r2, r2, #21
 800f526:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800f528:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f52c:	f3bf 8f6f 	isb	sy
}
 800f530:	4770      	bx	lr
 800f532:	46c0      	nop			; (mov r8, r8)
 800f534:	e000ed04 	.word	0xe000ed04

0800f538 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800f538:	b672      	cpsid	i
    uxCriticalNesting++;
 800f53a:	4a04      	ldr	r2, [pc, #16]	; (800f54c <vPortEnterCritical+0x14>)
 800f53c:	6813      	ldr	r3, [r2, #0]
 800f53e:	3301      	adds	r3, #1
 800f540:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800f542:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800f546:	f3bf 8f6f 	isb	sy
}
 800f54a:	4770      	bx	lr
 800f54c:	200000cc 	.word	0x200000cc

0800f550 <vPortExitCritical>:
    uxCriticalNesting--;
 800f550:	4a03      	ldr	r2, [pc, #12]	; (800f560 <vPortExitCritical+0x10>)
 800f552:	6813      	ldr	r3, [r2, #0]
 800f554:	3b01      	subs	r3, #1
 800f556:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d100      	bne.n	800f55e <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800f55c:	b662      	cpsie	i
}
 800f55e:	4770      	bx	lr
 800f560:	200000cc 	.word	0x200000cc

0800f564 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800f564:	f3ef 8010 	mrs	r0, PRIMASK
 800f568:	b672      	cpsid	i
 800f56a:	4770      	bx	lr
}
 800f56c:	2000      	movs	r0, #0
 800f56e:	46c0      	nop			; (mov r8, r8)

0800f570 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800f570:	f380 8810 	msr	PRIMASK, r0
 800f574:	4770      	bx	lr
 800f576:	46c0      	nop			; (mov r8, r8)

0800f578 <PendSV_Handler>:
	__asm volatile
 800f578:	f3ef 8009 	mrs	r0, PSP
 800f57c:	4b0e      	ldr	r3, [pc, #56]	; (800f5b8 <pxCurrentTCBConst>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	3820      	subs	r0, #32
 800f582:	6010      	str	r0, [r2, #0]
 800f584:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f586:	4644      	mov	r4, r8
 800f588:	464d      	mov	r5, r9
 800f58a:	4656      	mov	r6, sl
 800f58c:	465f      	mov	r7, fp
 800f58e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800f590:	b508      	push	{r3, lr}
 800f592:	b672      	cpsid	i
 800f594:	f7ff fb1a 	bl	800ebcc <vTaskSwitchContext>
 800f598:	b662      	cpsie	i
 800f59a:	bc0c      	pop	{r2, r3}
 800f59c:	6811      	ldr	r1, [r2, #0]
 800f59e:	6808      	ldr	r0, [r1, #0]
 800f5a0:	3010      	adds	r0, #16
 800f5a2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f5a4:	46a0      	mov	r8, r4
 800f5a6:	46a9      	mov	r9, r5
 800f5a8:	46b2      	mov	sl, r6
 800f5aa:	46bb      	mov	fp, r7
 800f5ac:	f380 8809 	msr	PSP, r0
 800f5b0:	3820      	subs	r0, #32
 800f5b2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800f5b4:	4718      	bx	r3
 800f5b6:	46c0      	nop			; (mov r8, r8)

0800f5b8 <pxCurrentTCBConst>:
 800f5b8:	20002cbc 	.word	0x20002cbc

0800f5bc <xPortSysTickHandler>:
{
 800f5bc:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5be:	f7ff ffd1 	bl	800f564 <ulSetInterruptMaskFromISR>
 800f5c2:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800f5c4:	f7ff f964 	bl	800e890 <xTaskIncrementTick>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d003      	beq.n	800f5d4 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800f5cc:	2280      	movs	r2, #128	; 0x80
 800f5ce:	4b03      	ldr	r3, [pc, #12]	; (800f5dc <xPortSysTickHandler+0x20>)
 800f5d0:	0552      	lsls	r2, r2, #21
 800f5d2:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800f5d4:	0020      	movs	r0, r4
 800f5d6:	f7ff ffcb 	bl	800f570 <vClearInterruptMaskFromISR>
}
 800f5da:	bd10      	pop	{r4, pc}
 800f5dc:	e000ed04 	.word	0xe000ed04

0800f5e0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f5e0:	b530      	push	{r4, r5, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5e2:	4c11      	ldr	r4, [pc, #68]	; (800f628 <prvInsertBlockIntoFreeList+0x48>)
 800f5e4:	0023      	movs	r3, r4
 800f5e6:	001a      	movs	r2, r3
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4283      	cmp	r3, r0
 800f5ec:	d3fb      	bcc.n	800f5e6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5ee:	6851      	ldr	r1, [r2, #4]
 800f5f0:	1855      	adds	r5, r2, r1
 800f5f2:	42a8      	cmp	r0, r5
 800f5f4:	d012      	beq.n	800f61c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f5f6:	6841      	ldr	r1, [r0, #4]
 800f5f8:	1845      	adds	r5, r0, r1
 800f5fa:	42ab      	cmp	r3, r5
 800f5fc:	d004      	beq.n	800f608 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f5fe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f600:	4290      	cmp	r0, r2
 800f602:	d000      	beq.n	800f606 <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f604:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f606:	bd30      	pop	{r4, r5, pc}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f608:	68a4      	ldr	r4, [r4, #8]
 800f60a:	42a3      	cmp	r3, r4
 800f60c:	d0f7      	beq.n	800f5fe <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f60e:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f610:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f612:	46a4      	mov	ip, r4
 800f614:	4461      	add	r1, ip
 800f616:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f618:	6003      	str	r3, [r0, #0]
 800f61a:	e7f1      	b.n	800f600 <prvInsertBlockIntoFreeList+0x20>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f61c:	6840      	ldr	r0, [r0, #4]
 800f61e:	1809      	adds	r1, r1, r0
 800f620:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800f622:	0010      	movs	r0, r2
 800f624:	e7e8      	b.n	800f5f8 <prvInsertBlockIntoFreeList+0x18>
 800f626:	46c0      	nop			; (mov r8, r8)
 800f628:	20002e1c 	.word	0x20002e1c

0800f62c <pvPortMalloc>:
{
 800f62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62e:	46ce      	mov	lr, r9
 800f630:	4647      	mov	r7, r8
 800f632:	b580      	push	{r7, lr}
 800f634:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800f636:	f7ff f917 	bl	800e868 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f63a:	4d36      	ldr	r5, [pc, #216]	; (800f714 <pvPortMalloc+0xe8>)
 800f63c:	68ab      	ldr	r3, [r5, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d049      	beq.n	800f6d6 <pvPortMalloc+0xaa>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f642:	68ee      	ldr	r6, [r5, #12]
 800f644:	4226      	tst	r6, r4
 800f646:	d134      	bne.n	800f6b2 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 800f648:	2c00      	cmp	r4, #0
 800f64a:	d032      	beq.n	800f6b2 <pvPortMalloc+0x86>
				xWantedSize += xHeapStructSize;
 800f64c:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f64e:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800f650:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f652:	420b      	tst	r3, r1
 800f654:	d001      	beq.n	800f65a <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f656:	4399      	bics	r1, r3
 800f658:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f65a:	2900      	cmp	r1, #0
 800f65c:	d029      	beq.n	800f6b2 <pvPortMalloc+0x86>
 800f65e:	696b      	ldr	r3, [r5, #20]
 800f660:	4699      	mov	r9, r3
 800f662:	428b      	cmp	r3, r1
 800f664:	d325      	bcc.n	800f6b2 <pvPortMalloc+0x86>
				pxPreviousBlock = &xStart;
 800f666:	0028      	movs	r0, r5
				pxBlock = xStart.pxNextFreeBlock;
 800f668:	682c      	ldr	r4, [r5, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f66a:	e004      	b.n	800f676 <pvPortMalloc+0x4a>
 800f66c:	6823      	ldr	r3, [r4, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d004      	beq.n	800f67c <pvPortMalloc+0x50>
 800f672:	0020      	movs	r0, r4
 800f674:	001c      	movs	r4, r3
 800f676:	6862      	ldr	r2, [r4, #4]
 800f678:	428a      	cmp	r2, r1
 800f67a:	d3f7      	bcc.n	800f66c <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 800f67c:	68ab      	ldr	r3, [r5, #8]
 800f67e:	42a3      	cmp	r3, r4
 800f680:	d017      	beq.n	800f6b2 <pvPortMalloc+0x86>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f682:	2708      	movs	r7, #8
 800f684:	46bc      	mov	ip, r7
 800f686:	6803      	ldr	r3, [r0, #0]
 800f688:	4463      	add	r3, ip
 800f68a:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f68c:	6823      	ldr	r3, [r4, #0]
 800f68e:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f690:	1a53      	subs	r3, r2, r1
 800f692:	2b10      	cmp	r3, #16
 800f694:	d818      	bhi.n	800f6c8 <pvPortMalloc+0x9c>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f696:	464b      	mov	r3, r9
 800f698:	1a9f      	subs	r7, r3, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f69a:	692b      	ldr	r3, [r5, #16]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f69c:	616f      	str	r7, [r5, #20]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f69e:	429f      	cmp	r7, r3
 800f6a0:	d200      	bcs.n	800f6a4 <pvPortMalloc+0x78>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6a2:	612f      	str	r7, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 800f6a4:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6a6:	4332      	orrs	r2, r6
 800f6a8:	6062      	str	r2, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6aa:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800f6ac:	f7ff f980 	bl	800e9b0 <xTaskResumeAll>
	return pvReturn;
 800f6b0:	e005      	b.n	800f6be <pvPortMalloc+0x92>
	( void ) xTaskResumeAll();
 800f6b2:	f7ff f97d 	bl	800e9b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 800f6b6:	f7fd fc71 	bl	800cf9c <vApplicationMallocFailedHook>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	4698      	mov	r8, r3
}
 800f6be:	4640      	mov	r0, r8
 800f6c0:	bcc0      	pop	{r6, r7}
 800f6c2:	46b9      	mov	r9, r7
 800f6c4:	46b0      	mov	r8, r6
 800f6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6c8:	1860      	adds	r0, r4, r1
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6ca:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6cc:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800f6ce:	f7ff ff87 	bl	800f5e0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6d2:	6862      	ldr	r2, [r4, #4]
 800f6d4:	e7df      	b.n	800f696 <pvPortMalloc+0x6a>
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6d6:	2307      	movs	r3, #7
	ulAddress = ( uint32_t ) ucHeap;
 800f6d8:	490f      	ldr	r1, [pc, #60]	; (800f718 <pvPortMalloc+0xec>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6da:	420b      	tst	r3, r1
 800f6dc:	d114      	bne.n	800f708 <pvPortMalloc+0xdc>
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6de:	000a      	movs	r2, r1
 800f6e0:	4b0e      	ldr	r3, [pc, #56]	; (800f71c <pvPortMalloc+0xf0>)
 800f6e2:	18cb      	adds	r3, r1, r3
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f6e4:	2607      	movs	r6, #7
	ulAddress -= xHeapStructSize;
 800f6e6:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f6e8:	43b3      	bics	r3, r6
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6ea:	2680      	movs	r6, #128	; 0x80
	xStart.xBlockSize = ( size_t ) 0;
 800f6ec:	2000      	movs	r0, #0
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f6ee:	1a9a      	subs	r2, r3, r2
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6f0:	0636      	lsls	r6, r6, #24
	xStart.xBlockSize = ( size_t ) 0;
 800f6f2:	6068      	str	r0, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6f4:	6029      	str	r1, [r5, #0]
	pxEnd->xBlockSize = 0;
 800f6f6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f6f8:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) ulAddress;
 800f6fa:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800f6fc:	604a      	str	r2, [r1, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6fe:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f700:	612a      	str	r2, [r5, #16]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f702:	616a      	str	r2, [r5, #20]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f704:	60ee      	str	r6, [r5, #12]
}
 800f706:	e79d      	b.n	800f644 <pvPortMalloc+0x18>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800f708:	1dca      	adds	r2, r1, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800f70a:	439a      	bics	r2, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800f70c:	4b03      	ldr	r3, [pc, #12]	; (800f71c <pvPortMalloc+0xf0>)
 800f70e:	18cb      	adds	r3, r1, r3
	pucAlignedHeap = ( uint8_t * ) ulAddress;
 800f710:	0011      	movs	r1, r2
 800f712:	e7e7      	b.n	800f6e4 <pvPortMalloc+0xb8>
 800f714:	20002e1c 	.word	0x20002e1c
 800f718:	20002e34 	.word	0x20002e34
 800f71c:	00003f48 	.word	0x00003f48

0800f720 <vPortFree>:
{
 800f720:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800f722:	2800      	cmp	r0, #0
 800f724:	d009      	beq.n	800f73a <vPortFree+0x1a>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f726:	4d0d      	ldr	r5, [pc, #52]	; (800f75c <vPortFree+0x3c>)
 800f728:	3808      	subs	r0, #8
 800f72a:	6843      	ldr	r3, [r0, #4]
 800f72c:	68ea      	ldr	r2, [r5, #12]
 800f72e:	0004      	movs	r4, r0
 800f730:	421a      	tst	r2, r3
 800f732:	d002      	beq.n	800f73a <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800f734:	6801      	ldr	r1, [r0, #0]
 800f736:	2900      	cmp	r1, #0
 800f738:	d000      	beq.n	800f73c <vPortFree+0x1c>
}
 800f73a:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f73c:	4393      	bics	r3, r2
 800f73e:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800f740:	f7ff f892 	bl	800e868 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f744:	696a      	ldr	r2, [r5, #20]
 800f746:	6863      	ldr	r3, [r4, #4]
 800f748:	4694      	mov	ip, r2
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f74a:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f74c:	4463      	add	r3, ip
 800f74e:	616b      	str	r3, [r5, #20]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f750:	f7ff ff46 	bl	800f5e0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800f754:	f7ff f92c 	bl	800e9b0 <xTaskResumeAll>
}
 800f758:	e7ef      	b.n	800f73a <vPortFree+0x1a>
 800f75a:	46c0      	nop			; (mov r8, r8)
 800f75c:	20002e1c 	.word	0x20002e1c

0800f760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f760:	b510      	push	{r4, lr}
 800f762:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800f764:	f002 f9b4 	bl	8011ad0 <HAL_RCC_GetHCLKFreq>
 800f768:	21fa      	movs	r1, #250	; 0xfa
 800f76a:	0089      	lsls	r1, r1, #2
 800f76c:	f7f0 fcf0 	bl	8000150 <__udivsi3>
 800f770:	f000 fb9e 	bl	800feb0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800f774:	2001      	movs	r0, #1
 800f776:	2200      	movs	r2, #0
 800f778:	0021      	movs	r1, r4
 800f77a:	4240      	negs	r0, r0
 800f77c:	f000 fb52 	bl	800fe24 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800f780:	2000      	movs	r0, #0
 800f782:	bd10      	pop	{r4, pc}

0800f784 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f784:	2110      	movs	r1, #16
 800f786:	4a06      	ldr	r2, [pc, #24]	; (800f7a0 <HAL_Init+0x1c>)
{
 800f788:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f78a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f78c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f78e:	430b      	orrs	r3, r1
 800f790:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800f792:	f7ff ffe5 	bl	800f760 <HAL_InitTick>
  HAL_MspInit();
 800f796:	f001 fd81 	bl	801129c <HAL_MspInit>
}
 800f79a:	2000      	movs	r0, #0
 800f79c:	bd10      	pop	{r4, pc}
 800f79e:	46c0      	nop			; (mov r8, r8)
 800f7a0:	40022000 	.word	0x40022000

0800f7a4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800f7a4:	4a02      	ldr	r2, [pc, #8]	; (800f7b0 <HAL_IncTick+0xc>)
 800f7a6:	6813      	ldr	r3, [r2, #0]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	6013      	str	r3, [r2, #0]
}
 800f7ac:	4770      	bx	lr
 800f7ae:	46c0      	nop			; (mov r8, r8)
 800f7b0:	20006d7c 	.word	0x20006d7c

0800f7b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800f7b4:	4b01      	ldr	r3, [pc, #4]	; (800f7bc <HAL_GetTick+0x8>)
 800f7b6:	6818      	ldr	r0, [r3, #0]
}
 800f7b8:	4770      	bx	lr
 800f7ba:	46c0      	nop			; (mov r8, r8)
 800f7bc:	20006d7c 	.word	0x20006d7c

0800f7c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800f7c0:	b510      	push	{r4, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800f7c6:	f7ff fff5 	bl	800f7b4 <HAL_GetTick>
 800f7ca:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800f7cc:	f7ff fff2 	bl	800f7b4 <HAL_GetTick>
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	1b00      	subs	r0, r0, r4
 800f7d4:	4298      	cmp	r0, r3
 800f7d6:	d3f9      	bcc.n	800f7cc <HAL_Delay+0xc>
  {
  }
}
 800f7d8:	b002      	add	sp, #8
 800f7da:	bd10      	pop	{r4, pc}

0800f7dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800f7dc:	4b01      	ldr	r3, [pc, #4]	; (800f7e4 <HAL_GetREVID+0x8>)
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	0c00      	lsrs	r0, r0, #16
}
 800f7e2:	4770      	bx	lr
 800f7e4:	40015800 	.word	0x40015800

0800f7e8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800f7e8:	4b02      	ldr	r3, [pc, #8]	; (800f7f4 <HAL_GetDEVID+0xc>)
 800f7ea:	6818      	ldr	r0, [r3, #0]
 800f7ec:	0500      	lsls	r0, r0, #20
 800f7ee:	0d00      	lsrs	r0, r0, #20
}
 800f7f0:	4770      	bx	lr
 800f7f2:	46c0      	nop			; (mov r8, r8)
 800f7f4:	40015800 	.word	0x40015800

0800f7f8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	6802      	ldr	r2, [r0, #0]
{
 800f7fc:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f7fe:	6891      	ldr	r1, [r2, #8]
{
 800f800:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f802:	400b      	ands	r3, r1
 800f804:	2b01      	cmp	r3, #1
 800f806:	d001      	beq.n	800f80c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f808:	2000      	movs	r0, #0
}
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f80c:	6811      	ldr	r1, [r2, #0]
 800f80e:	420b      	tst	r3, r1
 800f810:	d00e      	beq.n	800f830 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800f812:	2305      	movs	r3, #5
 800f814:	6891      	ldr	r1, [r2, #8]
 800f816:	400b      	ands	r3, r1
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d00d      	beq.n	800f838 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f81c:	2210      	movs	r2, #16
 800f81e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f820:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f822:	4313      	orrs	r3, r2
 800f824:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f826:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f828:	3a0f      	subs	r2, #15
 800f82a:	4313      	orrs	r3, r2
 800f82c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f82e:	e7ec      	b.n	800f80a <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f830:	68d3      	ldr	r3, [r2, #12]
 800f832:	041b      	lsls	r3, r3, #16
 800f834:	d5e8      	bpl.n	800f808 <ADC_Disable+0x10>
 800f836:	e7ec      	b.n	800f812 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 800f838:	2102      	movs	r1, #2
 800f83a:	6893      	ldr	r3, [r2, #8]
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f83c:	2601      	movs	r6, #1
      __HAL_ADC_DISABLE(hadc);
 800f83e:	430b      	orrs	r3, r1
 800f840:	6093      	str	r3, [r2, #8]
 800f842:	2303      	movs	r3, #3
 800f844:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f846:	f7ff ffb5 	bl	800f7b4 <HAL_GetTick>
 800f84a:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f84c:	e004      	b.n	800f858 <ADC_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f84e:	f7ff ffb1 	bl	800f7b4 <HAL_GetTick>
 800f852:	1b40      	subs	r0, r0, r5
 800f854:	2802      	cmp	r0, #2
 800f856:	d804      	bhi.n	800f862 <ADC_Disable+0x6a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800f858:	6823      	ldr	r3, [r4, #0]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	421e      	tst	r6, r3
 800f85e:	d1f6      	bne.n	800f84e <ADC_Disable+0x56>
 800f860:	e7d2      	b.n	800f808 <ADC_Disable+0x10>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f862:	2210      	movs	r2, #16
 800f864:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f866:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f868:	4313      	orrs	r3, r2
 800f86a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f86c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f86e:	431e      	orrs	r6, r3
 800f870:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f872:	e7ca      	b.n	800f80a <ADC_Disable+0x12>

0800f874 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0;
 800f874:	2300      	movs	r3, #0
{
 800f876:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f878:	6802      	ldr	r2, [r0, #0]
{
 800f87a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800f87c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f87e:	6891      	ldr	r1, [r2, #8]
 800f880:	3303      	adds	r3, #3
{
 800f882:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f884:	400b      	ands	r3, r1
 800f886:	2b01      	cmp	r3, #1
 800f888:	d031      	beq.n	800f8ee <ADC_Enable+0x7a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f88a:	6891      	ldr	r1, [r2, #8]
 800f88c:	4b20      	ldr	r3, [pc, #128]	; (800f910 <ADC_Enable+0x9c>)
 800f88e:	4219      	tst	r1, r3
 800f890:	d123      	bne.n	800f8da <ADC_Enable+0x66>
    __HAL_ADC_ENABLE(hadc);
 800f892:	2101      	movs	r1, #1
 800f894:	6893      	ldr	r3, [r2, #8]
 800f896:	430b      	orrs	r3, r1
 800f898:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800f89a:	4b1e      	ldr	r3, [pc, #120]	; (800f914 <ADC_Enable+0xa0>)
 800f89c:	491e      	ldr	r1, [pc, #120]	; (800f918 <ADC_Enable+0xa4>)
 800f89e:	6818      	ldr	r0, [r3, #0]
 800f8a0:	f7f0 fc56 	bl	8000150 <__udivsi3>
 800f8a4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800f8a6:	9b01      	ldr	r3, [sp, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d005      	beq.n	800f8b8 <ADC_Enable+0x44>
      wait_loop_index--;
 800f8ac:	9b01      	ldr	r3, [sp, #4]
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1f9      	bne.n	800f8ac <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 800f8b8:	f7ff ff7c 	bl	800f7b4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8bc:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 800f8be:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8c0:	e004      	b.n	800f8cc <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f8c2:	f7ff ff77 	bl	800f7b4 <HAL_GetTick>
 800f8c6:	1b40      	subs	r0, r0, r5
 800f8c8:	2802      	cmp	r0, #2
 800f8ca:	d817      	bhi.n	800f8fc <ADC_Enable+0x88>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	421e      	tst	r6, r3
 800f8d2:	d0f6      	beq.n	800f8c2 <ADC_Enable+0x4e>
  return HAL_OK;
 800f8d4:	2000      	movs	r0, #0
}
 800f8d6:	b002      	add	sp, #8
 800f8d8:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8da:	2210      	movs	r2, #16
 800f8dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800f8de:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f8e6:	3a0f      	subs	r2, #15
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800f8ec:	e7f3      	b.n	800f8d6 <ADC_Enable+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f8ee:	6811      	ldr	r1, [r2, #0]
 800f8f0:	420b      	tst	r3, r1
 800f8f2:	d1ef      	bne.n	800f8d4 <ADC_Enable+0x60>
 800f8f4:	68d3      	ldr	r3, [r2, #12]
 800f8f6:	041b      	lsls	r3, r3, #16
 800f8f8:	d4ec      	bmi.n	800f8d4 <ADC_Enable+0x60>
 800f8fa:	e7c6      	b.n	800f88a <ADC_Enable+0x16>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8fc:	2210      	movs	r2, #16
 800f8fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f900:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f902:	4313      	orrs	r3, r2
 800f904:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f906:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f908:	431e      	orrs	r6, r3
 800f90a:	64a6      	str	r6, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f90c:	e7e3      	b.n	800f8d6 <ADC_Enable+0x62>
 800f90e:	46c0      	nop			; (mov r8, r8)
 800f910:	80000017 	.word	0x80000017
 800f914:	200000b8 	.word	0x200000b8
 800f918:	000f4240 	.word	0x000f4240

0800f91c <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f91c:	2204      	movs	r2, #4
 800f91e:	6803      	ldr	r3, [r0, #0]
{
 800f920:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f922:	6899      	ldr	r1, [r3, #8]
{
 800f924:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800f926:	420a      	tst	r2, r1
 800f928:	d010      	beq.n	800f94c <ADC_ConversionStop+0x30>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f92a:	6899      	ldr	r1, [r3, #8]
 800f92c:	420a      	tst	r2, r1
 800f92e:	d10f      	bne.n	800f950 <ADC_ConversionStop+0x34>
      hadc->Instance->CR |= ADC_CR_ADSTP;
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f930:	f7ff ff40 	bl	800f7b4 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f934:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800f936:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f938:	e004      	b.n	800f944 <ADC_ConversionStop+0x28>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800f93a:	f7ff ff3b 	bl	800f7b4 <HAL_GetTick>
 800f93e:	1b40      	subs	r0, r0, r5
 800f940:	2802      	cmp	r0, #2
 800f942:	d80d      	bhi.n	800f960 <ADC_ConversionStop+0x44>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	421e      	tst	r6, r3
 800f94a:	d1f6      	bne.n	800f93a <ADC_ConversionStop+0x1e>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f94c:	2000      	movs	r0, #0
}
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800f950:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800f952:	0792      	lsls	r2, r2, #30
 800f954:	d4ec      	bmi.n	800f930 <ADC_ConversionStop+0x14>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800f956:	2110      	movs	r1, #16
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	430a      	orrs	r2, r1
 800f95c:	609a      	str	r2, [r3, #8]
 800f95e:	e7e7      	b.n	800f930 <ADC_ConversionStop+0x14>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f960:	2210      	movs	r2, #16
 800f962:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 800f964:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f966:	4313      	orrs	r3, r2
 800f968:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f96a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f96c:	3a0f      	subs	r2, #15
 800f96e:	4313      	orrs	r3, r2
 800f970:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800f972:	e7ec      	b.n	800f94e <ADC_ConversionStop+0x32>

0800f974 <HAL_ADC_Init>:
{
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800f978:	d100      	bne.n	800f97c <HAL_ADC_Init+0x8>
 800f97a:	e083      	b.n	800fa84 <HAL_ADC_Init+0x110>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f97c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d06a      	beq.n	800fa58 <HAL_ADC_Init+0xe4>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800f982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f984:	06db      	lsls	r3, r3, #27
 800f986:	d461      	bmi.n	800fa4c <HAL_ADC_Init+0xd8>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800f988:	2104      	movs	r1, #4
 800f98a:	000d      	movs	r5, r1
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	4015      	ands	r5, r2
      (tmp_hal_status == HAL_OK)                                &&
 800f992:	4211      	tst	r1, r2
 800f994:	d15a      	bne.n	800fa4c <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800f996:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f998:	4943      	ldr	r1, [pc, #268]	; (800faa8 <HAL_ADC_Init+0x134>)
 800f99a:	400a      	ands	r2, r1
 800f99c:	3106      	adds	r1, #6
 800f99e:	31ff      	adds	r1, #255	; 0xff
 800f9a0:	430a      	orrs	r2, r1
 800f9a2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800f9a4:	2203      	movs	r2, #3
 800f9a6:	6899      	ldr	r1, [r3, #8]
 800f9a8:	400a      	ands	r2, r1
 800f9aa:	2a01      	cmp	r2, #1
 800f9ac:	d05a      	beq.n	800fa64 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800f9ae:	2118      	movs	r1, #24
 800f9b0:	68da      	ldr	r2, [r3, #12]
 800f9b2:	438a      	bics	r2, r1
 800f9b4:	68a1      	ldr	r1, [r4, #8]
 800f9b6:	430a      	orrs	r2, r1
 800f9b8:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800f9ba:	691a      	ldr	r2, [r3, #16]
 800f9bc:	6861      	ldr	r1, [r4, #4]
 800f9be:	0092      	lsls	r2, r2, #2
 800f9c0:	0892      	lsrs	r2, r2, #2
 800f9c2:	430a      	orrs	r2, r1
 800f9c4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f9c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f9c8:	68da      	ldr	r2, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f9ca:	3801      	subs	r0, #1
 800f9cc:	1e47      	subs	r7, r0, #1
 800f9ce:	41b8      	sbcs	r0, r7
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f9d0:	4936      	ldr	r1, [pc, #216]	; (800faac <HAL_ADC_Init+0x138>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f9d2:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800f9d4:	400a      	ands	r2, r1
 800f9d6:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f9d8:	69a2      	ldr	r2, [r4, #24]
 800f9da:	68e7      	ldr	r7, [r4, #12]
 800f9dc:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f9de:	69e2      	ldr	r2, [r4, #28]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800f9e0:	0300      	lsls	r0, r0, #12
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800f9e2:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800f9e4:	4311      	orrs	r1, r2
 800f9e6:	4339      	orrs	r1, r7
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800f9e8:	0372      	lsls	r2, r6, #13
 800f9ea:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f9ec:	6922      	ldr	r2, [r4, #16]
 800f9ee:	2a02      	cmp	r2, #2
 800f9f0:	d100      	bne.n	800f9f4 <HAL_ADC_Init+0x80>
 800f9f2:	2504      	movs	r5, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800f9f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f9f6:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f9f8:	430a      	orrs	r2, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800f9fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800f9fc:	4302      	orrs	r2, r0
 800f9fe:	432a      	orrs	r2, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fa00:	2901      	cmp	r1, #1
 800fa02:	d04b      	beq.n	800fa9c <HAL_ADC_Init+0x128>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fa04:	20c2      	movs	r0, #194	; 0xc2
 800fa06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fa08:	30ff      	adds	r0, #255	; 0xff
 800fa0a:	4281      	cmp	r1, r0
 800fa0c:	d002      	beq.n	800fa14 <HAL_ADC_Init+0xa0>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800fa0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fa10:	4301      	orrs	r1, r0
 800fa12:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fa14:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fa16:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800fa18:	4311      	orrs	r1, r2
 800fa1a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fa1c:	2180      	movs	r1, #128	; 0x80
 800fa1e:	0549      	lsls	r1, r1, #21
 800fa20:	428d      	cmp	r5, r1
 800fa22:	d026      	beq.n	800fa72 <HAL_ADC_Init+0xfe>
 800fa24:	1e69      	subs	r1, r5, #1
 800fa26:	2906      	cmp	r1, #6
 800fa28:	d923      	bls.n	800fa72 <HAL_ADC_Init+0xfe>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	4920      	ldr	r1, [pc, #128]	; (800fab0 <HAL_ADC_Init+0x13c>)
 800fa2e:	400b      	ands	r3, r1
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d029      	beq.n	800fa88 <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800fa34:	2212      	movs	r2, #18
 800fa36:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 800fa38:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800fa3a:	4393      	bics	r3, r2
 800fa3c:	3a02      	subs	r2, #2
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fa44:	3a0f      	subs	r2, #15
 800fa46:	4313      	orrs	r3, r2
 800fa48:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800fa4a:	e004      	b.n	800fa56 <HAL_ADC_Init+0xe2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa4c:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 800fa4e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fa50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fa52:	4313      	orrs	r3, r2
 800fa54:	6463      	str	r3, [r4, #68]	; 0x44
}
 800fa56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 800fa58:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800fa5a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 800fa5c:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800fa5e:	f7fc fba3 	bl	800c1a8 <HAL_ADC_MspInit>
 800fa62:	e78e      	b.n	800f982 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800fa64:	6819      	ldr	r1, [r3, #0]
 800fa66:	420a      	tst	r2, r1
 800fa68:	d1ad      	bne.n	800f9c6 <HAL_ADC_Init+0x52>
 800fa6a:	68da      	ldr	r2, [r3, #12]
 800fa6c:	0412      	lsls	r2, r2, #16
 800fa6e:	d4aa      	bmi.n	800f9c6 <HAL_ADC_Init+0x52>
 800fa70:	e79d      	b.n	800f9ae <HAL_ADC_Init+0x3a>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fa72:	2107      	movs	r1, #7
 800fa74:	6958      	ldr	r0, [r3, #20]
 800fa76:	4388      	bics	r0, r1
 800fa78:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800fa7a:	6958      	ldr	r0, [r3, #20]
 800fa7c:	4029      	ands	r1, r5
 800fa7e:	4301      	orrs	r1, r0
 800fa80:	6159      	str	r1, [r3, #20]
 800fa82:	e7d2      	b.n	800fa2a <HAL_ADC_Init+0xb6>
    return HAL_ERROR;
 800fa84:	2001      	movs	r0, #1
 800fa86:	e7e6      	b.n	800fa56 <HAL_ADC_Init+0xe2>
      ADC_CLEAR_ERRORCODE(hadc);
 800fa88:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fa8a:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800fa8c:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800fa8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa90:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fa92:	4393      	bics	r3, r2
 800fa94:	3a02      	subs	r2, #2
 800fa96:	4313      	orrs	r3, r2
 800fa98:	6463      	str	r3, [r4, #68]	; 0x44
 800fa9a:	e7dc      	b.n	800fa56 <HAL_ADC_Init+0xe2>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 800fa9c:	2e00      	cmp	r6, #0
 800fa9e:	d1b1      	bne.n	800fa04 <HAL_ADC_Init+0x90>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800faa0:	2180      	movs	r1, #128	; 0x80
 800faa2:	0249      	lsls	r1, r1, #9
 800faa4:	430a      	orrs	r2, r1
 800faa6:	e7ad      	b.n	800fa04 <HAL_ADC_Init+0x90>
 800faa8:	fffffefd 	.word	0xfffffefd
 800faac:	fffe0219 	.word	0xfffe0219
 800fab0:	833fffe7 	.word	0x833fffe7

0800fab4 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fab4:	6803      	ldr	r3, [r0, #0]
{
 800fab6:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fab8:	689a      	ldr	r2, [r3, #8]
{
 800faba:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fabc:	0752      	lsls	r2, r2, #29
 800fabe:	d421      	bmi.n	800fb04 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800fac0:	2240      	movs	r2, #64	; 0x40
 800fac2:	5c81      	ldrb	r1, [r0, r2]
 800fac4:	2901      	cmp	r1, #1
 800fac6:	d01d      	beq.n	800fb04 <HAL_ADC_Start+0x50>
 800fac8:	2101      	movs	r1, #1
 800faca:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800facc:	69c2      	ldr	r2, [r0, #28]
 800face:	2a01      	cmp	r2, #1
 800fad0:	d112      	bne.n	800faf8 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 800fad2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fad4:	490c      	ldr	r1, [pc, #48]	; (800fb08 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fad6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800fad8:	4011      	ands	r1, r2
 800fada:	2280      	movs	r2, #128	; 0x80
 800fadc:	0052      	lsls	r2, r2, #1
 800fade:	430a      	orrs	r2, r1
 800fae0:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fae2:	2140      	movs	r1, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 800fae4:	2200      	movs	r2, #0
 800fae6:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800fae8:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800faea:	321c      	adds	r2, #28
 800faec:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800faee:	689a      	ldr	r2, [r3, #8]
 800faf0:	393c      	subs	r1, #60	; 0x3c
 800faf2:	430a      	orrs	r2, r1
 800faf4:	609a      	str	r2, [r3, #8]
}
 800faf6:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800faf8:	f7ff febc 	bl	800f874 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d1fa      	bne.n	800faf6 <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fb00:	6823      	ldr	r3, [r4, #0]
 800fb02:	e7e6      	b.n	800fad2 <HAL_ADC_Start+0x1e>
    tmp_hal_status = HAL_BUSY;
 800fb04:	2002      	movs	r0, #2
 800fb06:	e7f6      	b.n	800faf6 <HAL_ADC_Start+0x42>
 800fb08:	fffff0fe 	.word	0xfffff0fe

0800fb0c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800fb0c:	2340      	movs	r3, #64	; 0x40
{ 
 800fb0e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800fb10:	5cc2      	ldrb	r2, [r0, r3]
{ 
 800fb12:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800fb14:	2a01      	cmp	r2, #1
 800fb16:	d014      	beq.n	800fb42 <HAL_ADC_Stop+0x36>
 800fb18:	2501      	movs	r5, #1
 800fb1a:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800fb1c:	f7ff fefe 	bl	800f91c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d003      	beq.n	800fb2c <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800fb24:	2340      	movs	r3, #64	; 0x40
 800fb26:	2200      	movs	r2, #0
 800fb28:	54e2      	strb	r2, [r4, r3]
}
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800fb2c:	0020      	movs	r0, r4
 800fb2e:	f7ff fe63 	bl	800f7f8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1f6      	bne.n	800fb24 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800fb36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb38:	4a03      	ldr	r2, [pc, #12]	; (800fb48 <HAL_ADC_Stop+0x3c>)
 800fb3a:	4013      	ands	r3, r2
 800fb3c:	431d      	orrs	r5, r3
 800fb3e:	6465      	str	r5, [r4, #68]	; 0x44
 800fb40:	e7f0      	b.n	800fb24 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 800fb42:	2002      	movs	r0, #2
 800fb44:	e7f1      	b.n	800fb2a <HAL_ADC_Stop+0x1e>
 800fb46:	46c0      	nop			; (mov r8, r8)
 800fb48:	fffffefe 	.word	0xfffffefe

0800fb4c <HAL_ADC_PollForConversion>:
{
 800fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fb4e:	6945      	ldr	r5, [r0, #20]
{
 800fb50:	0006      	movs	r6, r0
 800fb52:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fb54:	2d08      	cmp	r5, #8
 800fb56:	d004      	beq.n	800fb62 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fb58:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fb5a:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	07db      	lsls	r3, r3, #31
 800fb60:	d43e      	bmi.n	800fbe0 <HAL_ADC_PollForConversion+0x94>
  tickstart = HAL_GetTick();
 800fb62:	f7ff fe27 	bl	800f7b4 <HAL_GetTick>
 800fb66:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fb68:	6832      	ldr	r2, [r6, #0]
 800fb6a:	e001      	b.n	800fb70 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 800fb6c:	1c63      	adds	r3, r4, #1
 800fb6e:	d127      	bne.n	800fbc0 <HAL_ADC_PollForConversion+0x74>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fb70:	6813      	ldr	r3, [r2, #0]
 800fb72:	421d      	tst	r5, r3
 800fb74:	d0fa      	beq.n	800fb6c <HAL_ADC_PollForConversion+0x20>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fb76:	2380      	movs	r3, #128	; 0x80
 800fb78:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	430b      	orrs	r3, r1
 800fb7e:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fb80:	23c0      	movs	r3, #192	; 0xc0
 800fb82:	68d1      	ldr	r1, [r2, #12]
 800fb84:	011b      	lsls	r3, r3, #4
 800fb86:	4219      	tst	r1, r3
 800fb88:	d113      	bne.n	800fbb2 <HAL_ADC_PollForConversion+0x66>
 800fb8a:	6a33      	ldr	r3, [r6, #32]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d110      	bne.n	800fbb2 <HAL_ADC_PollForConversion+0x66>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fb90:	6813      	ldr	r3, [r2, #0]
 800fb92:	071b      	lsls	r3, r3, #28
 800fb94:	d50d      	bpl.n	800fbb2 <HAL_ADC_PollForConversion+0x66>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fb96:	6893      	ldr	r3, [r2, #8]
 800fb98:	075b      	lsls	r3, r3, #29
 800fb9a:	d42a      	bmi.n	800fbf2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fb9c:	210c      	movs	r1, #12
 800fb9e:	6853      	ldr	r3, [r2, #4]
 800fba0:	438b      	bics	r3, r1
 800fba2:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800fba4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fba6:	4917      	ldr	r1, [pc, #92]	; (800fc04 <HAL_ADC_PollForConversion+0xb8>)
 800fba8:	400b      	ands	r3, r1
 800fbaa:	3104      	adds	r1, #4
 800fbac:	31ff      	adds	r1, #255	; 0xff
 800fbae:	430b      	orrs	r3, r1
 800fbb0:	6473      	str	r3, [r6, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fbb2:	69b3      	ldr	r3, [r6, #24]
  return HAL_OK;
 800fbb4:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d101      	bne.n	800fbbe <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fbba:	330c      	adds	r3, #12
 800fbbc:	6013      	str	r3, [r2, #0]
}
 800fbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800fbc0:	2c00      	cmp	r4, #0
 800fbc2:	d004      	beq.n	800fbce <HAL_ADC_PollForConversion+0x82>
 800fbc4:	f7ff fdf6 	bl	800f7b4 <HAL_GetTick>
 800fbc8:	1bc0      	subs	r0, r0, r7
 800fbca:	42a0      	cmp	r0, r4
 800fbcc:	d9cc      	bls.n	800fb68 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fbce:	2204      	movs	r2, #4
 800fbd0:	6c73      	ldr	r3, [r6, #68]	; 0x44
        return HAL_TIMEOUT;
 800fbd2:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2340      	movs	r3, #64	; 0x40
 800fbdc:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800fbde:	e7ee      	b.n	800fbbe <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fbe0:	2220      	movs	r2, #32
 800fbe2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2340      	movs	r3, #64	; 0x40
 800fbec:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800fbee:	2001      	movs	r0, #1
 800fbf0:	e7e5      	b.n	800fbbe <HAL_ADC_PollForConversion+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fbf2:	2120      	movs	r1, #32
 800fbf4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800fbf6:	430b      	orrs	r3, r1
 800fbf8:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fbfa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fbfc:	391f      	subs	r1, #31
 800fbfe:	430b      	orrs	r3, r1
 800fc00:	64b3      	str	r3, [r6, #72]	; 0x48
 800fc02:	e7d6      	b.n	800fbb2 <HAL_ADC_PollForConversion+0x66>
 800fc04:	fffffefe 	.word	0xfffffefe

0800fc08 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800fc08:	2208      	movs	r2, #8
 800fc0a:	6803      	ldr	r3, [r0, #0]
 800fc0c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 800fc0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800fc10:	4770      	bx	lr
 800fc12:	46c0      	nop			; (mov r8, r8)

0800fc14 <HAL_ADC_ConvCpltCallback>:
 800fc14:	4770      	bx	lr
 800fc16:	46c0      	nop			; (mov r8, r8)

0800fc18 <HAL_ADC_LevelOutOfWindowCallback>:
 800fc18:	4770      	bx	lr
 800fc1a:	46c0      	nop			; (mov r8, r8)

0800fc1c <HAL_ADC_ErrorCallback>:
 800fc1c:	4770      	bx	lr
 800fc1e:	46c0      	nop			; (mov r8, r8)

0800fc20 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fc20:	2204      	movs	r2, #4
 800fc22:	6803      	ldr	r3, [r0, #0]
{
 800fc24:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fc26:	6819      	ldr	r1, [r3, #0]
{
 800fc28:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fc2a:	420a      	tst	r2, r1
 800fc2c:	d04a      	beq.n	800fcc4 <HAL_ADC_IRQHandler+0xa4>
 800fc2e:	6859      	ldr	r1, [r3, #4]
 800fc30:	420a      	tst	r2, r1
 800fc32:	d047      	beq.n	800fcc4 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fc34:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fc36:	06d2      	lsls	r2, r2, #27
 800fc38:	d404      	bmi.n	800fc44 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800fc3a:	2280      	movs	r2, #128	; 0x80
 800fc3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fc3e:	0092      	lsls	r2, r2, #2
 800fc40:	430a      	orrs	r2, r1
 800fc42:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800fc44:	22c0      	movs	r2, #192	; 0xc0
 800fc46:	68d9      	ldr	r1, [r3, #12]
 800fc48:	0112      	lsls	r2, r2, #4
 800fc4a:	4211      	tst	r1, r2
 800fc4c:	d113      	bne.n	800fc76 <HAL_ADC_IRQHandler+0x56>
 800fc4e:	6a22      	ldr	r2, [r4, #32]
 800fc50:	2a00      	cmp	r2, #0
 800fc52:	d110      	bne.n	800fc76 <HAL_ADC_IRQHandler+0x56>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	0712      	lsls	r2, r2, #28
 800fc58:	d50d      	bpl.n	800fc76 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc5a:	689a      	ldr	r2, [r3, #8]
 800fc5c:	0752      	lsls	r2, r2, #29
 800fc5e:	d444      	bmi.n	800fcea <HAL_ADC_IRQHandler+0xca>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fc60:	210c      	movs	r1, #12
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	438a      	bics	r2, r1
 800fc66:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800fc68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fc6a:	4a24      	ldr	r2, [pc, #144]	; (800fcfc <HAL_ADC_IRQHandler+0xdc>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	3204      	adds	r2, #4
 800fc70:	32ff      	adds	r2, #255	; 0xff
 800fc72:	4313      	orrs	r3, r2
 800fc74:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800fc76:	0020      	movs	r0, r4
 800fc78:	f7ff ffcc 	bl	800fc14 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800fc7c:	220c      	movs	r2, #12
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800fc82:	2580      	movs	r5, #128	; 0x80
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	4215      	tst	r5, r2
 800fc88:	d002      	beq.n	800fc90 <HAL_ADC_IRQHandler+0x70>
 800fc8a:	685a      	ldr	r2, [r3, #4]
 800fc8c:	4215      	tst	r5, r2
 800fc8e:	d121      	bne.n	800fcd4 <HAL_ADC_IRQHandler+0xb4>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800fc90:	2210      	movs	r2, #16
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	420a      	tst	r2, r1
 800fc96:	d014      	beq.n	800fcc2 <HAL_ADC_IRQHandler+0xa2>
 800fc98:	6859      	ldr	r1, [r3, #4]
 800fc9a:	420a      	tst	r2, r1
 800fc9c:	d011      	beq.n	800fcc2 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800fc9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fca0:	2a01      	cmp	r2, #1
 800fca2:	d002      	beq.n	800fcaa <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800fca4:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800fca6:	07d2      	lsls	r2, r2, #31
 800fca8:	d509      	bpl.n	800fcbe <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800fcaa:	2102      	movs	r1, #2
 800fcac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800fcae:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800fcb4:	2210      	movs	r2, #16
 800fcb6:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800fcb8:	f7ff ffb0 	bl	800fc1c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800fcbc:	6823      	ldr	r3, [r4, #0]
 800fcbe:	2210      	movs	r2, #16
 800fcc0:	601a      	str	r2, [r3, #0]
}
 800fcc2:	bd70      	pop	{r4, r5, r6, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fcc4:	2208      	movs	r2, #8
 800fcc6:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800fcc8:	420a      	tst	r2, r1
 800fcca:	d0da      	beq.n	800fc82 <HAL_ADC_IRQHandler+0x62>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800fccc:	6859      	ldr	r1, [r3, #4]
 800fcce:	420a      	tst	r2, r1
 800fcd0:	d0d7      	beq.n	800fc82 <HAL_ADC_IRQHandler+0x62>
 800fcd2:	e7af      	b.n	800fc34 <HAL_ADC_IRQHandler+0x14>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800fcd4:	2380      	movs	r3, #128	; 0x80
 800fcd6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fcd8:	025b      	lsls	r3, r3, #9
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800fcde:	0020      	movs	r0, r4
 800fce0:	f7ff ff9a 	bl	800fc18 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800fce4:	6823      	ldr	r3, [r4, #0]
 800fce6:	601d      	str	r5, [r3, #0]
 800fce8:	e7d2      	b.n	800fc90 <HAL_ADC_IRQHandler+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fcea:	2220      	movs	r2, #32
 800fcec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800fcf4:	3a1f      	subs	r2, #31
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	64a3      	str	r3, [r4, #72]	; 0x48
 800fcfa:	e7bc      	b.n	800fc76 <HAL_ADC_IRQHandler+0x56>
 800fcfc:	fffffefe 	.word	0xfffffefe

0800fd00 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0;
 800fd00:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800fd02:	2240      	movs	r2, #64	; 0x40
{
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 800fd08:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800fd0a:	5c83      	ldrb	r3, [r0, r2]
{
 800fd0c:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fd0e:	6b85      	ldr	r5, [r0, #56]	; 0x38
  __HAL_LOCK(hadc);
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d05f      	beq.n	800fdd4 <HAL_ADC_ConfigChannel+0xd4>
 800fd14:	2301      	movs	r3, #1
 800fd16:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fd18:	6802      	ldr	r2, [r0, #0]
 800fd1a:	6890      	ldr	r0, [r2, #8]
 800fd1c:	0740      	lsls	r0, r0, #29
 800fd1e:	d509      	bpl.n	800fd34 <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd20:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800fd22:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fd26:	4313      	orrs	r3, r2
 800fd28:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800fd2a:	2340      	movs	r3, #64	; 0x40
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	54e2      	strb	r2, [r4, r3]
}
 800fd30:	b002      	add	sp, #8
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 800fd34:	4835      	ldr	r0, [pc, #212]	; (800fe0c <HAL_ADC_ConfigChannel+0x10c>)
 800fd36:	684e      	ldr	r6, [r1, #4]
 800fd38:	4286      	cmp	r6, r0
 800fd3a:	d02f      	beq.n	800fd9c <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fd3c:	6808      	ldr	r0, [r1, #0]
 800fd3e:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800fd40:	4083      	lsls	r3, r0
 800fd42:	4333      	orrs	r3, r6
 800fd44:	6293      	str	r3, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800fd46:	2380      	movs	r3, #128	; 0x80
 800fd48:	055b      	lsls	r3, r3, #21
 800fd4a:	429d      	cmp	r5, r3
 800fd4c:	d00f      	beq.n	800fd6e <HAL_ADC_ConfigChannel+0x6e>
 800fd4e:	3d01      	subs	r5, #1
 800fd50:	2d06      	cmp	r5, #6
 800fd52:	d90c      	bls.n	800fd6e <HAL_ADC_ConfigChannel+0x6e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800fd54:	2307      	movs	r3, #7
 800fd56:	688d      	ldr	r5, [r1, #8]
 800fd58:	6951      	ldr	r1, [r2, #20]
 800fd5a:	4019      	ands	r1, r3
 800fd5c:	428d      	cmp	r5, r1
 800fd5e:	d006      	beq.n	800fd6e <HAL_ADC_ConfigChannel+0x6e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800fd60:	6951      	ldr	r1, [r2, #20]
 800fd62:	4399      	bics	r1, r3
 800fd64:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800fd66:	6951      	ldr	r1, [r2, #20]
 800fd68:	402b      	ands	r3, r5
 800fd6a:	430b      	orrs	r3, r1
 800fd6c:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fd6e:	0003      	movs	r3, r0
 800fd70:	3b10      	subs	r3, #16
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	d810      	bhi.n	800fd98 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fd76:	4a26      	ldr	r2, [pc, #152]	; (800fe10 <HAL_ADC_ConfigChannel+0x110>)
 800fd78:	6813      	ldr	r3, [r2, #0]
 800fd7a:	2810      	cmp	r0, #16
 800fd7c:	d02e      	beq.n	800fddc <HAL_ADC_ConfigChannel+0xdc>
 800fd7e:	3811      	subs	r0, #17
 800fd80:	1e41      	subs	r1, r0, #1
 800fd82:	4188      	sbcs	r0, r1
 800fd84:	21c0      	movs	r1, #192	; 0xc0
 800fd86:	4240      	negs	r0, r0
 800fd88:	0409      	lsls	r1, r1, #16
 800fd8a:	4008      	ands	r0, r1
 800fd8c:	2180      	movs	r1, #128	; 0x80
 800fd8e:	03c9      	lsls	r1, r1, #15
 800fd90:	468c      	mov	ip, r1
 800fd92:	4460      	add	r0, ip
 800fd94:	4318      	orrs	r0, r3
 800fd96:	6010      	str	r0, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fd98:	2000      	movs	r0, #0
 800fd9a:	e7c6      	b.n	800fd2a <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fd9c:	6809      	ldr	r1, [r1, #0]
 800fd9e:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800fda0:	408b      	lsls	r3, r1
 800fda2:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fda4:	000b      	movs	r3, r1
 800fda6:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800fda8:	6290      	str	r0, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	d8f4      	bhi.n	800fd98 <HAL_ADC_ConfigChannel+0x98>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fdae:	4b18      	ldr	r3, [pc, #96]	; (800fe10 <HAL_ADC_ConfigChannel+0x110>)
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	2910      	cmp	r1, #16
 800fdb4:	d010      	beq.n	800fdd8 <HAL_ADC_ConfigChannel+0xd8>
 800fdb6:	3911      	subs	r1, #17
 800fdb8:	424b      	negs	r3, r1
 800fdba:	414b      	adcs	r3, r1
 800fdbc:	4259      	negs	r1, r3
 800fdbe:	23c0      	movs	r3, #192	; 0xc0
 800fdc0:	041b      	lsls	r3, r3, #16
 800fdc2:	4019      	ands	r1, r3
 800fdc4:	4b13      	ldr	r3, [pc, #76]	; (800fe14 <HAL_ADC_ConfigChannel+0x114>)
 800fdc6:	469c      	mov	ip, r3
 800fdc8:	4461      	add	r1, ip
 800fdca:	4b11      	ldr	r3, [pc, #68]	; (800fe10 <HAL_ADC_ConfigChannel+0x110>)
 800fdcc:	4011      	ands	r1, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fdce:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fdd0:	6019      	str	r1, [r3, #0]
 800fdd2:	e7aa      	b.n	800fd2a <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 800fdd4:	2002      	movs	r0, #2
 800fdd6:	e7ab      	b.n	800fd30 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fdd8:	490f      	ldr	r1, [pc, #60]	; (800fe18 <HAL_ADC_ConfigChannel+0x118>)
 800fdda:	e7f6      	b.n	800fdca <HAL_ADC_ConfigChannel+0xca>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800fddc:	2180      	movs	r1, #128	; 0x80
 800fdde:	0409      	lsls	r1, r1, #16
 800fde0:	430b      	orrs	r3, r1
 800fde2:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800fde4:	4b0d      	ldr	r3, [pc, #52]	; (800fe1c <HAL_ADC_ConfigChannel+0x11c>)
 800fde6:	490e      	ldr	r1, [pc, #56]	; (800fe20 <HAL_ADC_ConfigChannel+0x120>)
 800fde8:	6818      	ldr	r0, [r3, #0]
 800fdea:	f7f0 f9b1 	bl	8000150 <__udivsi3>
 800fdee:	0083      	lsls	r3, r0, #2
 800fdf0:	181b      	adds	r3, r3, r0
 800fdf2:	005b      	lsls	r3, r3, #1
 800fdf4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0cd      	beq.n	800fd98 <HAL_ADC_ConfigChannel+0x98>
            wait_loop_index--;
 800fdfc:	9b01      	ldr	r3, [sp, #4]
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800fe02:	9b01      	ldr	r3, [sp, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d1f9      	bne.n	800fdfc <HAL_ADC_ConfigChannel+0xfc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fe08:	2000      	movs	r0, #0
 800fe0a:	e78e      	b.n	800fd2a <HAL_ADC_ConfigChannel+0x2a>
 800fe0c:	00001001 	.word	0x00001001
 800fe10:	40012708 	.word	0x40012708
 800fe14:	feffffff 	.word	0xfeffffff
 800fe18:	ff7fffff 	.word	0xff7fffff
 800fe1c:	200000b8 	.word	0x200000b8
 800fe20:	000f4240 	.word	0x000f4240

0800fe24 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fe24:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 800fe26:	2800      	cmp	r0, #0
 800fe28:	db14      	blt.n	800fe54 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe2a:	4b15      	ldr	r3, [pc, #84]	; (800fe80 <HAL_NVIC_SetPriority+0x5c>)
 800fe2c:	2203      	movs	r2, #3
 800fe2e:	469c      	mov	ip, r3
 800fe30:	23ff      	movs	r3, #255	; 0xff
 800fe32:	0884      	lsrs	r4, r0, #2
 800fe34:	4010      	ands	r0, r2
 800fe36:	001a      	movs	r2, r3
 800fe38:	26c0      	movs	r6, #192	; 0xc0
 800fe3a:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe3c:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe3e:	4082      	lsls	r2, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe40:	400b      	ands	r3, r1
 800fe42:	4083      	lsls	r3, r0
 800fe44:	00a4      	lsls	r4, r4, #2
 800fe46:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe48:	00b6      	lsls	r6, r6, #2
 800fe4a:	59a5      	ldr	r5, [r4, r6]
 800fe4c:	4395      	bics	r5, r2
 800fe4e:	432b      	orrs	r3, r5
 800fe50:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800fe52:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe54:	4a0b      	ldr	r2, [pc, #44]	; (800fe84 <HAL_NVIC_SetPriority+0x60>)
 800fe56:	2403      	movs	r4, #3
 800fe58:	4694      	mov	ip, r2
 800fe5a:	230f      	movs	r3, #15
 800fe5c:	22ff      	movs	r2, #255	; 0xff
 800fe5e:	4003      	ands	r3, r0
 800fe60:	4020      	ands	r0, r4
 800fe62:	0014      	movs	r4, r2
 800fe64:	00c0      	lsls	r0, r0, #3
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe66:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe68:	4084      	lsls	r4, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fe6a:	400a      	ands	r2, r1
 800fe6c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fe6e:	3b08      	subs	r3, #8
 800fe70:	089b      	lsrs	r3, r3, #2
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	4463      	add	r3, ip
 800fe76:	69dd      	ldr	r5, [r3, #28]
 800fe78:	43a5      	bics	r5, r4
 800fe7a:	432a      	orrs	r2, r5
 800fe7c:	61da      	str	r2, [r3, #28]
}
 800fe7e:	e7e8      	b.n	800fe52 <HAL_NVIC_SetPriority+0x2e>
 800fe80:	e000e100 	.word	0xe000e100
 800fe84:	e000ed00 	.word	0xe000ed00

0800fe88 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fe88:	231f      	movs	r3, #31
 800fe8a:	4018      	ands	r0, r3
 800fe8c:	3b1e      	subs	r3, #30
 800fe8e:	4083      	lsls	r3, r0
 800fe90:	4a01      	ldr	r2, [pc, #4]	; (800fe98 <HAL_NVIC_EnableIRQ+0x10>)
 800fe92:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800fe94:	4770      	bx	lr
 800fe96:	46c0      	nop			; (mov r8, r8)
 800fe98:	e000e100 	.word	0xe000e100

0800fe9c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800fe9c:	231f      	movs	r3, #31
 800fe9e:	4018      	ands	r0, r3
 800fea0:	3b1e      	subs	r3, #30
 800fea2:	4083      	lsls	r3, r0
 800fea4:	2280      	movs	r2, #128	; 0x80
 800fea6:	4901      	ldr	r1, [pc, #4]	; (800feac <HAL_NVIC_DisableIRQ+0x10>)
 800fea8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800feaa:	4770      	bx	lr
 800feac:	e000e100 	.word	0xe000e100

0800feb0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800feb0:	2280      	movs	r2, #128	; 0x80
 800feb2:	1e43      	subs	r3, r0, #1
 800feb4:	0452      	lsls	r2, r2, #17
 800feb6:	2001      	movs	r0, #1
 800feb8:	4293      	cmp	r3, r2
 800feba:	d20e      	bcs.n	800feda <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800febc:	21c0      	movs	r1, #192	; 0xc0

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800febe:	4a07      	ldr	r2, [pc, #28]	; (800fedc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fec0:	4807      	ldr	r0, [pc, #28]	; (800fee0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fec2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fec4:	6a03      	ldr	r3, [r0, #32]
 800fec6:	0609      	lsls	r1, r1, #24
 800fec8:	021b      	lsls	r3, r3, #8
 800feca:	0a1b      	lsrs	r3, r3, #8
 800fecc:	430b      	orrs	r3, r1
 800fece:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fed0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fed2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800fed4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fed6:	3307      	adds	r3, #7
 800fed8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800feda:	4770      	bx	lr
 800fedc:	e000e010 	.word	0xe000e010
 800fee0:	e000ed00 	.word	0xe000ed00

0800fee4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fee4:	4a05      	ldr	r2, [pc, #20]	; (800fefc <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800fee6:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800fee8:	2804      	cmp	r0, #4
 800feea:	d003      	beq.n	800fef4 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800feec:	2104      	movs	r1, #4
 800feee:	438b      	bics	r3, r1
 800fef0:	6013      	str	r3, [r2, #0]
  }
}
 800fef2:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800fef4:	4318      	orrs	r0, r3
 800fef6:	6010      	str	r0, [r2, #0]
 800fef8:	e7fb      	b.n	800fef2 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800fefa:	46c0      	nop			; (mov r8, r8)
 800fefc:	e000e010 	.word	0xe000e010

0800ff00 <CRC_Handle_8>:
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 800ff00:	0893      	lsrs	r3, r2, #2
{
 800ff02:	b5f0      	push	{r4, r5, r6, r7, lr}
   for(i = 0; i < (BufferLength/4); i++)
 800ff04:	469c      	mov	ip, r3
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ff06:	6806      	ldr	r6, [r0, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d010      	beq.n	800ff2e <CRC_Handle_8+0x2e>
 800ff0c:	000c      	movs	r4, r1
 800ff0e:	009f      	lsls	r7, r3, #2
 800ff10:	187f      	adds	r7, r7, r1
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ff12:	7823      	ldrb	r3, [r4, #0]
 800ff14:	7865      	ldrb	r5, [r4, #1]
 800ff16:	061b      	lsls	r3, r3, #24
 800ff18:	042d      	lsls	r5, r5, #16
 800ff1a:	432b      	orrs	r3, r5
 800ff1c:	78e5      	ldrb	r5, [r4, #3]
 800ff1e:	432b      	orrs	r3, r5
 800ff20:	78a5      	ldrb	r5, [r4, #2]
   for(i = 0; i < (BufferLength/4); i++)
 800ff22:	3404      	adds	r4, #4
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 800ff24:	022d      	lsls	r5, r5, #8
 800ff26:	432b      	orrs	r3, r5
 800ff28:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 800ff2a:	42a7      	cmp	r7, r4
 800ff2c:	d1f1      	bne.n	800ff12 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 800ff2e:	2303      	movs	r3, #3
 800ff30:	001c      	movs	r4, r3
 800ff32:	4014      	ands	r4, r2
 800ff34:	4213      	tst	r3, r2
 800ff36:	d00b      	beq.n	800ff50 <CRC_Handle_8+0x50>
   {
     if  (BufferLength%4 == 1)
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800ff38:	4663      	mov	r3, ip
 800ff3a:	009b      	lsls	r3, r3, #2
     if  (BufferLength%4 == 1)
 800ff3c:	2c01      	cmp	r4, #1
 800ff3e:	d009      	beq.n	800ff54 <CRC_Handle_8+0x54>
     }
     if  (BufferLength%4 == 2)
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ff40:	5cca      	ldrb	r2, [r1, r3]
 800ff42:	18c9      	adds	r1, r1, r3
 800ff44:	784b      	ldrb	r3, [r1, #1]
 800ff46:	0212      	lsls	r2, r2, #8
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	8033      	strh	r3, [r6, #0]
     if  (BufferLength%4 == 2)
 800ff4c:	2c02      	cmp	r4, #2
 800ff4e:	d105      	bne.n	800ff5c <CRC_Handle_8+0x5c>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ff50:	6830      	ldr	r0, [r6, #0]
}
 800ff52:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 800ff54:	5c5b      	ldrb	r3, [r3, r1]
 800ff56:	7033      	strb	r3, [r6, #0]
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 800ff58:	6806      	ldr	r6, [r0, #0]
     if  (BufferLength%4 == 3)
 800ff5a:	e7f9      	b.n	800ff50 <CRC_Handle_8+0x50>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 800ff5c:	788b      	ldrb	r3, [r1, #2]
 800ff5e:	7033      	strb	r3, [r6, #0]
  return hcrc->Instance->DR;
 800ff60:	6806      	ldr	r6, [r0, #0]
 800ff62:	e7f5      	b.n	800ff50 <CRC_Handle_8+0x50>

0800ff64 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ff64:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ff66:	6806      	ldr	r6, [r0, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800ff68:	0857      	lsrs	r7, r2, #1
 800ff6a:	d00a      	beq.n	800ff82 <CRC_Handle_16+0x1e>
 800ff6c:	0008      	movs	r0, r1
 800ff6e:	00bd      	lsls	r5, r7, #2
 800ff70:	186d      	adds	r5, r5, r1
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ff72:	8803      	ldrh	r3, [r0, #0]
 800ff74:	8844      	ldrh	r4, [r0, #2]
 800ff76:	041b      	lsls	r3, r3, #16
 800ff78:	4323      	orrs	r3, r4
  for(i = 0; i < (BufferLength/2); i++)
 800ff7a:	3004      	adds	r0, #4
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 800ff7c:	6033      	str	r3, [r6, #0]
  for(i = 0; i < (BufferLength/2); i++)
 800ff7e:	4285      	cmp	r5, r0
 800ff80:	d1f7      	bne.n	800ff72 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 800ff82:	07d3      	lsls	r3, r2, #31
 800ff84:	d502      	bpl.n	800ff8c <CRC_Handle_16+0x28>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 800ff86:	00bf      	lsls	r7, r7, #2
 800ff88:	5a7b      	ldrh	r3, [r7, r1]
 800ff8a:	8033      	strh	r3, [r6, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 800ff8c:	6830      	ldr	r0, [r6, #0]
}
 800ff8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff90 <HAL_CRC_Init>:
{
 800ff90:	b510      	push	{r4, lr}
 800ff92:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 800ff94:	d024      	beq.n	800ffe0 <HAL_CRC_Init+0x50>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 800ff96:	7f43      	ldrb	r3, [r0, #29]
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d022      	beq.n	800ffe4 <HAL_CRC_Init+0x54>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ff9e:	2302      	movs	r3, #2
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ffa0:	0020      	movs	r0, r4
  hcrc->State = HAL_CRC_STATE_BUSY; 
 800ffa2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 800ffa4:	f000 f8aa 	bl	80100fc <HAL_CRCEx_Init>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d119      	bne.n	800ffe0 <HAL_CRC_Init+0x50>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ffac:	7963      	ldrb	r3, [r4, #5]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d011      	beq.n	800ffd6 <HAL_CRC_Init+0x46>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ffb2:	6823      	ldr	r3, [r4, #0]
 800ffb4:	6922      	ldr	r2, [r4, #16]
 800ffb6:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ffb8:	2160      	movs	r1, #96	; 0x60
 800ffba:	689a      	ldr	r2, [r3, #8]
 800ffbc:	438a      	bics	r2, r1
 800ffbe:	6961      	ldr	r1, [r4, #20]
 800ffc0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ffc2:	2180      	movs	r1, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800ffc4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800ffc6:	689a      	ldr	r2, [r3, #8]
 800ffc8:	438a      	bics	r2, r1
 800ffca:	69a1      	ldr	r1, [r4, #24]
 800ffcc:	430a      	orrs	r2, r1
 800ffce:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	7763      	strb	r3, [r4, #29]
}
 800ffd4:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	6823      	ldr	r3, [r4, #0]
 800ffda:	4252      	negs	r2, r2
 800ffdc:	611a      	str	r2, [r3, #16]
 800ffde:	e7eb      	b.n	800ffb8 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800ffe0:	2001      	movs	r0, #1
 800ffe2:	e7f7      	b.n	800ffd4 <HAL_CRC_Init+0x44>
    hcrc->Lock = HAL_UNLOCKED;
 800ffe4:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ffe6:	f7fb fa07 	bl	800b3f8 <HAL_CRC_MspInit>
 800ffea:	e7d8      	b.n	800ff9e <HAL_CRC_Init+0xe>

0800ffec <HAL_CRC_Accumulate>:
{
 800ffec:	b510      	push	{r4, lr}
  __HAL_LOCK(hcrc); 
 800ffee:	7f03      	ldrb	r3, [r0, #28]
{
 800fff0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d021      	beq.n	801003a <HAL_CRC_Accumulate+0x4e>
 800fff6:	2301      	movs	r3, #1
 800fff8:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800fffa:	3301      	adds	r3, #1
 800fffc:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 800fffe:	6a03      	ldr	r3, [r0, #32]
 8010000:	2b02      	cmp	r3, #2
 8010002:	d009      	beq.n	8010018 <HAL_CRC_Accumulate+0x2c>
 8010004:	2b03      	cmp	r3, #3
 8010006:	d00d      	beq.n	8010024 <HAL_CRC_Accumulate+0x38>
 8010008:	2b01      	cmp	r3, #1
 801000a:	d008      	beq.n	801001e <HAL_CRC_Accumulate+0x32>
 801000c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801000e:	2301      	movs	r3, #1
 8010010:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010012:	2300      	movs	r3, #0
 8010014:	7723      	strb	r3, [r4, #28]
}
 8010016:	bd10      	pop	{r4, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010018:	f7ff ffa4 	bl	800ff64 <CRC_Handle_16>
      break;
 801001c:	e7f7      	b.n	801000e <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801001e:	f7ff ff6f 	bl	800ff00 <CRC_Handle_8>
      break;
 8010022:	e7f4      	b.n	801000e <HAL_CRC_Accumulate+0x22>
        hcrc->Instance->DR = pBuffer[index];
 8010024:	6800      	ldr	r0, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010026:	2a00      	cmp	r2, #0
 8010028:	d005      	beq.n	8010036 <HAL_CRC_Accumulate+0x4a>
 801002a:	0092      	lsls	r2, r2, #2
 801002c:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801002e:	c908      	ldmia	r1!, {r3}
 8010030:	6003      	str	r3, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010032:	4291      	cmp	r1, r2
 8010034:	d1fb      	bne.n	801002e <HAL_CRC_Accumulate+0x42>
      temp = hcrc->Instance->DR;
 8010036:	6800      	ldr	r0, [r0, #0]
      break;
 8010038:	e7e9      	b.n	801000e <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801003a:	2002      	movs	r0, #2
 801003c:	e7eb      	b.n	8010016 <HAL_CRC_Accumulate+0x2a>
 801003e:	46c0      	nop			; (mov r8, r8)

08010040 <HAL_CRC_Calculate>:
{
 8010040:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hcrc); 
 8010042:	7f03      	ldrb	r3, [r0, #28]
{
 8010044:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010046:	2b01      	cmp	r3, #1
 8010048:	d026      	beq.n	8010098 <HAL_CRC_Calculate+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 801004a:	2302      	movs	r3, #2
  __HAL_LOCK(hcrc); 
 801004c:	2501      	movs	r5, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 801004e:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010050:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hcrc); 
 8010052:	7705      	strb	r5, [r0, #28]
  __HAL_CRC_DR_RESET(hcrc);
 8010054:	6898      	ldr	r0, [r3, #8]
 8010056:	4328      	orrs	r0, r5
 8010058:	6098      	str	r0, [r3, #8]
  switch (hcrc->InputDataFormat)
 801005a:	6a20      	ldr	r0, [r4, #32]
 801005c:	2802      	cmp	r0, #2
 801005e:	d009      	beq.n	8010074 <HAL_CRC_Calculate+0x34>
 8010060:	2803      	cmp	r0, #3
 8010062:	d00f      	beq.n	8010084 <HAL_CRC_Calculate+0x44>
 8010064:	2801      	cmp	r0, #1
 8010066:	d009      	beq.n	801007c <HAL_CRC_Calculate+0x3c>
 8010068:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801006a:	2301      	movs	r3, #1
 801006c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801006e:	2300      	movs	r3, #0
 8010070:	7723      	strb	r3, [r4, #28]
}
 8010072:	bd70      	pop	{r4, r5, r6, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010074:	0020      	movs	r0, r4
 8010076:	f7ff ff75 	bl	800ff64 <CRC_Handle_16>
      break;
 801007a:	e7f6      	b.n	801006a <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801007c:	0020      	movs	r0, r4
 801007e:	f7ff ff3f 	bl	800ff00 <CRC_Handle_8>
      break;
 8010082:	e7f2      	b.n	801006a <HAL_CRC_Calculate+0x2a>
      for(index = 0; index < BufferLength; index++)
 8010084:	2a00      	cmp	r2, #0
 8010086:	d005      	beq.n	8010094 <HAL_CRC_Calculate+0x54>
 8010088:	0092      	lsls	r2, r2, #2
 801008a:	188a      	adds	r2, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801008c:	c901      	ldmia	r1!, {r0}
 801008e:	6018      	str	r0, [r3, #0]
      for(index = 0; index < BufferLength; index++)
 8010090:	4291      	cmp	r1, r2
 8010092:	d1fb      	bne.n	801008c <HAL_CRC_Calculate+0x4c>
      temp = hcrc->Instance->DR;
 8010094:	6818      	ldr	r0, [r3, #0]
      break;
 8010096:	e7e8      	b.n	801006a <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010098:	2002      	movs	r0, #2
 801009a:	e7ea      	b.n	8010072 <HAL_CRC_Calculate+0x32>

0801009c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801009c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801009e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80100a0:	2501      	movs	r5, #1
 80100a2:	e001      	b.n	80100a8 <HAL_CRCEx_Polynomial_Set+0xc>
 80100a4:	3b01      	subs	r3, #1
 80100a6:	d312      	bcc.n	80100ce <HAL_CRCEx_Polynomial_Set+0x32>
 80100a8:	002c      	movs	r4, r5
 80100aa:	409c      	lsls	r4, r3
 80100ac:	4221      	tst	r1, r4
 80100ae:	d0f9      	beq.n	80100a4 <HAL_CRCEx_Polynomial_Set+0x8>
  {}

  switch (PolyLength)
 80100b0:	2a10      	cmp	r2, #16
 80100b2:	d01c      	beq.n	80100ee <HAL_CRCEx_Polynomial_Set+0x52>
 80100b4:	2a18      	cmp	r2, #24
 80100b6:	d012      	beq.n	80100de <HAL_CRCEx_Polynomial_Set+0x42>
 80100b8:	2a08      	cmp	r2, #8
 80100ba:	d014      	beq.n	80100e6 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80100bc:	6800      	ldr	r0, [r0, #0]
 80100be:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80100c0:	2118      	movs	r1, #24
 80100c2:	6883      	ldr	r3, [r0, #8]
 80100c4:	438b      	bics	r3, r1
 80100c6:	431a      	orrs	r2, r3
 80100c8:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 80100ca:	2000      	movs	r0, #0
}
 80100cc:	bd30      	pop	{r4, r5, pc}
  switch (PolyLength)
 80100ce:	2a18      	cmp	r2, #24
 80100d0:	d8f4      	bhi.n	80100bc <HAL_CRCEx_Polynomial_Set+0x20>
 80100d2:	4095      	lsls	r5, r2
 80100d4:	4b08      	ldr	r3, [pc, #32]	; (80100f8 <HAL_CRCEx_Polynomial_Set+0x5c>)
 80100d6:	421d      	tst	r5, r3
 80100d8:	d0f0      	beq.n	80100bc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80100da:	2001      	movs	r0, #1
 80100dc:	e7f6      	b.n	80100cc <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_7B)
 80100de:	2b06      	cmp	r3, #6
 80100e0:	d9ec      	bls.n	80100bc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80100e2:	2001      	movs	r0, #1
 80100e4:	e7f2      	b.n	80100cc <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_16B)
 80100e6:	2b0f      	cmp	r3, #15
 80100e8:	d9e8      	bls.n	80100bc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80100ea:	2001      	movs	r0, #1
 80100ec:	e7ee      	b.n	80100cc <HAL_CRCEx_Polynomial_Set+0x30>
      if (msb >= HAL_CRC_LENGTH_8B)
 80100ee:	2b07      	cmp	r3, #7
 80100f0:	d9e4      	bls.n	80100bc <HAL_CRCEx_Polynomial_Set+0x20>
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80100f2:	2001      	movs	r0, #1
 80100f4:	e7ea      	b.n	80100cc <HAL_CRCEx_Polynomial_Set+0x30>
 80100f6:	46c0      	nop			; (mov r8, r8)
 80100f8:	01010100 	.word	0x01010100

080100fc <HAL_CRCEx_Init>:
{
 80100fc:	b510      	push	{r4, lr}
 80100fe:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010100:	7900      	ldrb	r0, [r0, #4]
 8010102:	2800      	cmp	r0, #0
 8010104:	d107      	bne.n	8010116 <HAL_CRCEx_Init+0x1a>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010106:	2118      	movs	r1, #24
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a07      	ldr	r2, [pc, #28]	; (8010128 <HAL_CRCEx_Init+0x2c>)
 801010c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801010e:	689a      	ldr	r2, [r3, #8]
 8010110:	438a      	bics	r2, r1
 8010112:	609a      	str	r2, [r3, #8]
}
 8010114:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010116:	0018      	movs	r0, r3
 8010118:	68da      	ldr	r2, [r3, #12]
 801011a:	6899      	ldr	r1, [r3, #8]
 801011c:	f7ff ffbe 	bl	801009c <HAL_CRCEx_Polynomial_Set>
 8010120:	1e43      	subs	r3, r0, #1
 8010122:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010124:	b2c0      	uxtb	r0, r0
 8010126:	e7f5      	b.n	8010114 <HAL_CRCEx_Init+0x18>
 8010128:	04c11db7 	.word	0x04c11db7

0801012c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 801012c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801012e:	2800      	cmp	r0, #0
 8010130:	d023      	beq.n	801017a <HAL_DMA_Init+0x4e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010132:	2321      	movs	r3, #33	; 0x21
 8010134:	5cc3      	ldrb	r3, [r0, r3]
 8010136:	b2da      	uxtb	r2, r3
 8010138:	2b00      	cmp	r3, #0
 801013a:	d01b      	beq.n	8010174 <HAL_DMA_Init+0x48>
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801013c:	2121      	movs	r1, #33	; 0x21
 801013e:	2302      	movs	r3, #2
 8010140:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010142:	6804      	ldr	r4, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010144:	4a0e      	ldr	r2, [pc, #56]	; (8010180 <HAL_DMA_Init+0x54>)
  tmp = hdma->Instance->CCR;
 8010146:	6823      	ldr	r3, [r4, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010148:	6885      	ldr	r5, [r0, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801014a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 801014c:	6843      	ldr	r3, [r0, #4]
 801014e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010150:	68c5      	ldr	r5, [r0, #12]
 8010152:	432b      	orrs	r3, r5
 8010154:	6905      	ldr	r5, [r0, #16]
 8010156:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010158:	6945      	ldr	r5, [r0, #20]
 801015a:	432b      	orrs	r3, r5
 801015c:	6985      	ldr	r5, [r0, #24]
 801015e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010160:	69c5      	ldr	r5, [r0, #28]
 8010162:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010164:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010166:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010168:	2300      	movs	r3, #0
 801016a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801016c:	3301      	adds	r3, #1
 801016e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010170:	2000      	movs	r0, #0
}  
 8010172:	bd30      	pop	{r4, r5, pc}
    hdma->Lock = HAL_UNLOCKED;
 8010174:	3320      	adds	r3, #32
 8010176:	54c2      	strb	r2, [r0, r3]
 8010178:	e7e0      	b.n	801013c <HAL_DMA_Init+0x10>
    return HAL_ERROR;
 801017a:	2001      	movs	r0, #1
 801017c:	e7f9      	b.n	8010172 <HAL_DMA_Init+0x46>
 801017e:	46c0      	nop			; (mov r8, r8)
 8010180:	ffffc00f 	.word	0xffffc00f

08010184 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010184:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010186:	2420      	movs	r4, #32
 8010188:	5d05      	ldrb	r5, [r0, r4]
 801018a:	2d01      	cmp	r5, #1
 801018c:	d023      	beq.n	80101d6 <HAL_DMA_Start_IT+0x52>
 801018e:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010190:	2502      	movs	r5, #2
  __HAL_LOCK(hdma);
 8010192:	5506      	strb	r6, [r0, r4]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010194:	3401      	adds	r4, #1
 8010196:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010198:	6804      	ldr	r4, [r0, #0]
 801019a:	6825      	ldr	r5, [r4, #0]
 801019c:	43b5      	bics	r5, r6
 801019e:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80101a0:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80101a2:	6843      	ldr	r3, [r0, #4]
 80101a4:	2b10      	cmp	r3, #16
 80101a6:	d013      	beq.n	80101d0 <HAL_DMA_Start_IT+0x4c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80101a8:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80101aa:	60e2      	str	r2, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80101ac:	2202      	movs	r2, #2
  return HAL_OK;    
 80101ae:	2000      	movs	r0, #0
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	4313      	orrs	r3, r2
 80101b4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80101b6:	6823      	ldr	r3, [r4, #0]
 80101b8:	3202      	adds	r2, #2
 80101ba:	4313      	orrs	r3, r2
 80101bc:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80101be:	6823      	ldr	r3, [r4, #0]
 80101c0:	3204      	adds	r2, #4
 80101c2:	4313      	orrs	r3, r2
 80101c4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	3a07      	subs	r2, #7
 80101ca:	4313      	orrs	r3, r2
 80101cc:	6023      	str	r3, [r4, #0]
} 
 80101ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80101d0:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80101d2:	60e1      	str	r1, [r4, #12]
 80101d4:	e7ea      	b.n	80101ac <HAL_DMA_Start_IT+0x28>
  __HAL_LOCK(hdma);
 80101d6:	2002      	movs	r0, #2
 80101d8:	e7f9      	b.n	80101ce <HAL_DMA_Start_IT+0x4a>
 80101da:	46c0      	nop			; (mov r8, r8)

080101dc <HAL_DMA_Abort>:
  __HAL_DMA_DISABLE(hdma);
 80101dc:	2101      	movs	r1, #1
 80101de:	6802      	ldr	r2, [r0, #0]
{
 80101e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 80101e2:	6813      	ldr	r3, [r2, #0]
{
 80101e4:	0005      	movs	r5, r0
  __HAL_DMA_DISABLE(hdma);
 80101e6:	438b      	bics	r3, r1
 80101e8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80101ea:	f7ff fae3 	bl	800f7b4 <HAL_GetTick>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80101ee:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80101f0:	0006      	movs	r6, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80101f2:	2401      	movs	r4, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80101f4:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80101f6:	e004      	b.n	8010202 <HAL_DMA_Abort+0x26>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80101f8:	f7ff fadc 	bl	800f7b4 <HAL_GetTick>
 80101fc:	1b80      	subs	r0, r0, r6
 80101fe:	42b8      	cmp	r0, r7
 8010200:	d80b      	bhi.n	801021a <HAL_DMA_Abort+0x3e>
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010202:	0022      	movs	r2, r4
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	401a      	ands	r2, r3
 801020a:	421c      	tst	r4, r3
 801020c:	d1f4      	bne.n	80101f8 <HAL_DMA_Abort+0x1c>
  hdma->State = HAL_DMA_STATE_READY; 
 801020e:	2321      	movs	r3, #33	; 0x21
  return HAL_OK; 
 8010210:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8010212:	54ec      	strb	r4, [r5, r3]
  __HAL_UNLOCK(hdma);
 8010214:	3b01      	subs	r3, #1
 8010216:	54ea      	strb	r2, [r5, r3]
}
 8010218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 801021a:	2220      	movs	r2, #32
 801021c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801021e:	2103      	movs	r1, #3
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010220:	4313      	orrs	r3, r2
 8010222:	636b      	str	r3, [r5, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010224:	2321      	movs	r3, #33	; 0x21
 8010226:	54e9      	strb	r1, [r5, r3]
      __HAL_UNLOCK(hdma);
 8010228:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 801022a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdma);
 801022c:	54ab      	strb	r3, [r5, r2]
      return HAL_TIMEOUT;
 801022e:	e7f3      	b.n	8010218 <HAL_DMA_Abort+0x3c>

08010230 <HAL_DMA_IRQHandler>:
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010230:	6803      	ldr	r3, [r0, #0]
 8010232:	49a4      	ldr	r1, [pc, #656]	; (80104c4 <HAL_DMA_IRQHandler+0x294>)
{        
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010238:	0018      	movs	r0, r3
 801023a:	428b      	cmp	r3, r1
 801023c:	d931      	bls.n	80102a2 <HAL_DMA_IRQHandler+0x72>
 801023e:	4aa2      	ldr	r2, [pc, #648]	; (80104c8 <HAL_DMA_IRQHandler+0x298>)
 8010240:	6815      	ldr	r5, [r2, #0]
 8010242:	4aa2      	ldr	r2, [pc, #648]	; (80104cc <HAL_DMA_IRQHandler+0x29c>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d031      	beq.n	80102ac <HAL_DMA_IRQHandler+0x7c>
 8010248:	4aa1      	ldr	r2, [pc, #644]	; (80104d0 <HAL_DMA_IRQHandler+0x2a0>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d06e      	beq.n	801032c <HAL_DMA_IRQHandler+0xfc>
 801024e:	4aa1      	ldr	r2, [pc, #644]	; (80104d4 <HAL_DMA_IRQHandler+0x2a4>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d100      	bne.n	8010256 <HAL_DMA_IRQHandler+0x26>
 8010254:	e2a7      	b.n	80107a6 <HAL_DMA_IRQHandler+0x576>
 8010256:	4aa0      	ldr	r2, [pc, #640]	; (80104d8 <HAL_DMA_IRQHandler+0x2a8>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d100      	bne.n	801025e <HAL_DMA_IRQHandler+0x2e>
 801025c:	e333      	b.n	80108c6 <HAL_DMA_IRQHandler+0x696>
 801025e:	4a9f      	ldr	r2, [pc, #636]	; (80104dc <HAL_DMA_IRQHandler+0x2ac>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d100      	bne.n	8010266 <HAL_DMA_IRQHandler+0x36>
 8010264:	e12b      	b.n	80104be <HAL_DMA_IRQHandler+0x28e>
 8010266:	4a9e      	ldr	r2, [pc, #632]	; (80104e0 <HAL_DMA_IRQHandler+0x2b0>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d100      	bne.n	801026e <HAL_DMA_IRQHandler+0x3e>
 801026c:	e34e      	b.n	801090c <HAL_DMA_IRQHandler+0x6dc>
 801026e:	428b      	cmp	r3, r1
 8010270:	d101      	bne.n	8010276 <HAL_DMA_IRQHandler+0x46>
 8010272:	f000 fbed 	bl	8010a50 <HAL_DMA_IRQHandler+0x820>
 8010276:	4a9b      	ldr	r2, [pc, #620]	; (80104e4 <HAL_DMA_IRQHandler+0x2b4>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d017      	beq.n	80102ac <HAL_DMA_IRQHandler+0x7c>
 801027c:	4a9a      	ldr	r2, [pc, #616]	; (80104e8 <HAL_DMA_IRQHandler+0x2b8>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d054      	beq.n	801032c <HAL_DMA_IRQHandler+0xfc>
 8010282:	4a9a      	ldr	r2, [pc, #616]	; (80104ec <HAL_DMA_IRQHandler+0x2bc>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d100      	bne.n	801028a <HAL_DMA_IRQHandler+0x5a>
 8010288:	e28d      	b.n	80107a6 <HAL_DMA_IRQHandler+0x576>
 801028a:	4a99      	ldr	r2, [pc, #612]	; (80104f0 <HAL_DMA_IRQHandler+0x2c0>)
 801028c:	1899      	adds	r1, r3, r2
 801028e:	424a      	negs	r2, r1
 8010290:	4151      	adcs	r1, r2
 8010292:	4a98      	ldr	r2, [pc, #608]	; (80104f4 <HAL_DMA_IRQHandler+0x2c4>)
 8010294:	4249      	negs	r1, r1
 8010296:	400a      	ands	r2, r1
 8010298:	2180      	movs	r1, #128	; 0x80
 801029a:	0309      	lsls	r1, r1, #12
 801029c:	468c      	mov	ip, r1
 801029e:	4462      	add	r2, ip
 80102a0:	e045      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
 80102a2:	4a95      	ldr	r2, [pc, #596]	; (80104f8 <HAL_DMA_IRQHandler+0x2c8>)
 80102a4:	6815      	ldr	r5, [r2, #0]
 80102a6:	4a89      	ldr	r2, [pc, #548]	; (80104cc <HAL_DMA_IRQHandler+0x29c>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d1cd      	bne.n	8010248 <HAL_DMA_IRQHandler+0x18>
 80102ac:	2208      	movs	r2, #8
 80102ae:	402a      	ands	r2, r5
 80102b0:	1e51      	subs	r1, r2, #1
 80102b2:	418a      	sbcs	r2, r1
 80102b4:	b2d2      	uxtb	r2, r2
 80102b6:	2a00      	cmp	r2, #0
 80102b8:	d13f      	bne.n	801033a <HAL_DMA_IRQHandler+0x10a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80102ba:	4a82      	ldr	r2, [pc, #520]	; (80104c4 <HAL_DMA_IRQHandler+0x294>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d800      	bhi.n	80102c2 <HAL_DMA_IRQHandler+0x92>
 80102c0:	e086      	b.n	80103d0 <HAL_DMA_IRQHandler+0x1a0>
 80102c2:	4981      	ldr	r1, [pc, #516]	; (80104c8 <HAL_DMA_IRQHandler+0x298>)
 80102c4:	4d81      	ldr	r5, [pc, #516]	; (80104cc <HAL_DMA_IRQHandler+0x29c>)
 80102c6:	6809      	ldr	r1, [r1, #0]
 80102c8:	42ab      	cmp	r3, r5
 80102ca:	d100      	bne.n	80102ce <HAL_DMA_IRQHandler+0x9e>
 80102cc:	e255      	b.n	801077a <HAL_DMA_IRQHandler+0x54a>
 80102ce:	4d80      	ldr	r5, [pc, #512]	; (80104d0 <HAL_DMA_IRQHandler+0x2a0>)
 80102d0:	42ab      	cmp	r3, r5
 80102d2:	d100      	bne.n	80102d6 <HAL_DMA_IRQHandler+0xa6>
 80102d4:	e2e1      	b.n	801089a <HAL_DMA_IRQHandler+0x66a>
 80102d6:	4d7f      	ldr	r5, [pc, #508]	; (80104d4 <HAL_DMA_IRQHandler+0x2a4>)
 80102d8:	42ab      	cmp	r3, r5
 80102da:	d100      	bne.n	80102de <HAL_DMA_IRQHandler+0xae>
 80102dc:	e16f      	b.n	80105be <HAL_DMA_IRQHandler+0x38e>
 80102de:	4d7e      	ldr	r5, [pc, #504]	; (80104d8 <HAL_DMA_IRQHandler+0x2a8>)
 80102e0:	42ab      	cmp	r3, r5
 80102e2:	d100      	bne.n	80102e6 <HAL_DMA_IRQHandler+0xb6>
 80102e4:	e38f      	b.n	8010a06 <HAL_DMA_IRQHandler+0x7d6>
 80102e6:	4d7d      	ldr	r5, [pc, #500]	; (80104dc <HAL_DMA_IRQHandler+0x2ac>)
 80102e8:	42ab      	cmp	r3, r5
 80102ea:	d06e      	beq.n	80103ca <HAL_DMA_IRQHandler+0x19a>
 80102ec:	4d7c      	ldr	r5, [pc, #496]	; (80104e0 <HAL_DMA_IRQHandler+0x2b0>)
 80102ee:	42ab      	cmp	r3, r5
 80102f0:	d101      	bne.n	80102f6 <HAL_DMA_IRQHandler+0xc6>
 80102f2:	f000 fc0d 	bl	8010b10 <HAL_DMA_IRQHandler+0x8e0>
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d100      	bne.n	80102fc <HAL_DMA_IRQHandler+0xcc>
 80102fa:	e356      	b.n	80109aa <HAL_DMA_IRQHandler+0x77a>
 80102fc:	4a79      	ldr	r2, [pc, #484]	; (80104e4 <HAL_DMA_IRQHandler+0x2b4>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d100      	bne.n	8010304 <HAL_DMA_IRQHandler+0xd4>
 8010302:	e23a      	b.n	801077a <HAL_DMA_IRQHandler+0x54a>
 8010304:	4a78      	ldr	r2, [pc, #480]	; (80104e8 <HAL_DMA_IRQHandler+0x2b8>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d100      	bne.n	801030c <HAL_DMA_IRQHandler+0xdc>
 801030a:	e2c6      	b.n	801089a <HAL_DMA_IRQHandler+0x66a>
 801030c:	4a77      	ldr	r2, [pc, #476]	; (80104ec <HAL_DMA_IRQHandler+0x2bc>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d100      	bne.n	8010314 <HAL_DMA_IRQHandler+0xe4>
 8010312:	e154      	b.n	80105be <HAL_DMA_IRQHandler+0x38e>
 8010314:	4a76      	ldr	r2, [pc, #472]	; (80104f0 <HAL_DMA_IRQHandler+0x2c0>)
 8010316:	189a      	adds	r2, r3, r2
 8010318:	4255      	negs	r5, r2
 801031a:	416a      	adcs	r2, r5
 801031c:	4d77      	ldr	r5, [pc, #476]	; (80104fc <HAL_DMA_IRQHandler+0x2cc>)
 801031e:	4252      	negs	r2, r2
 8010320:	402a      	ands	r2, r5
 8010322:	2580      	movs	r5, #128	; 0x80
 8010324:	02ed      	lsls	r5, r5, #11
 8010326:	46ac      	mov	ip, r5
 8010328:	4462      	add	r2, ip
 801032a:	e14a      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801032c:	2280      	movs	r2, #128	; 0x80
 801032e:	402a      	ands	r2, r5
 8010330:	1e51      	subs	r1, r2, #1
 8010332:	418a      	sbcs	r2, r1
 8010334:	b2d2      	uxtb	r2, r2
 8010336:	2a00      	cmp	r2, #0
 8010338:	d0bf      	beq.n	80102ba <HAL_DMA_IRQHandler+0x8a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801033a:	2208      	movs	r2, #8
 801033c:	6819      	ldr	r1, [r3, #0]
 801033e:	420a      	tst	r2, r1
 8010340:	d0bb      	beq.n	80102ba <HAL_DMA_IRQHandler+0x8a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010342:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010344:	4d61      	ldr	r5, [pc, #388]	; (80104cc <HAL_DMA_IRQHandler+0x29c>)
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010346:	4391      	bics	r1, r2
 8010348:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801034a:	495e      	ldr	r1, [pc, #376]	; (80104c4 <HAL_DMA_IRQHandler+0x294>)
 801034c:	428b      	cmp	r3, r1
 801034e:	d973      	bls.n	8010438 <HAL_DMA_IRQHandler+0x208>
 8010350:	42ab      	cmp	r3, r5
 8010352:	d100      	bne.n	8010356 <HAL_DMA_IRQHandler+0x126>
 8010354:	e200      	b.n	8010758 <HAL_DMA_IRQHandler+0x528>
 8010356:	4a5e      	ldr	r2, [pc, #376]	; (80104d0 <HAL_DMA_IRQHandler+0x2a0>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d100      	bne.n	801035e <HAL_DMA_IRQHandler+0x12e>
 801035c:	e398      	b.n	8010a90 <HAL_DMA_IRQHandler+0x860>
 801035e:	4a5d      	ldr	r2, [pc, #372]	; (80104d4 <HAL_DMA_IRQHandler+0x2a4>)
 8010360:	4293      	cmp	r3, r2
 8010362:	d100      	bne.n	8010366 <HAL_DMA_IRQHandler+0x136>
 8010364:	e2f8      	b.n	8010958 <HAL_DMA_IRQHandler+0x728>
 8010366:	4a5c      	ldr	r2, [pc, #368]	; (80104d8 <HAL_DMA_IRQHandler+0x2a8>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d100      	bne.n	801036e <HAL_DMA_IRQHandler+0x13e>
 801036c:	e3d3      	b.n	8010b16 <HAL_DMA_IRQHandler+0x8e6>
 801036e:	4a5b      	ldr	r2, [pc, #364]	; (80104dc <HAL_DMA_IRQHandler+0x2ac>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d018      	beq.n	80103a6 <HAL_DMA_IRQHandler+0x176>
 8010374:	4a5a      	ldr	r2, [pc, #360]	; (80104e0 <HAL_DMA_IRQHandler+0x2b0>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d100      	bne.n	801037c <HAL_DMA_IRQHandler+0x14c>
 801037a:	e3b5      	b.n	8010ae8 <HAL_DMA_IRQHandler+0x8b8>
 801037c:	428b      	cmp	r3, r1
 801037e:	d100      	bne.n	8010382 <HAL_DMA_IRQHandler+0x152>
 8010380:	e300      	b.n	8010984 <HAL_DMA_IRQHandler+0x754>
 8010382:	4a58      	ldr	r2, [pc, #352]	; (80104e4 <HAL_DMA_IRQHandler+0x2b4>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d101      	bne.n	801038c <HAL_DMA_IRQHandler+0x15c>
 8010388:	f000 fc0b 	bl	8010ba2 <HAL_DMA_IRQHandler+0x972>
 801038c:	4a56      	ldr	r2, [pc, #344]	; (80104e8 <HAL_DMA_IRQHandler+0x2b8>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d100      	bne.n	8010394 <HAL_DMA_IRQHandler+0x164>
 8010392:	e26f      	b.n	8010874 <HAL_DMA_IRQHandler+0x644>
 8010394:	4a55      	ldr	r2, [pc, #340]	; (80104ec <HAL_DMA_IRQHandler+0x2bc>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d101      	bne.n	801039e <HAL_DMA_IRQHandler+0x16e>
 801039a:	f000 fc49 	bl	8010c30 <HAL_DMA_IRQHandler+0xa00>
 801039e:	4a58      	ldr	r2, [pc, #352]	; (8010500 <HAL_DMA_IRQHandler+0x2d0>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d100      	bne.n	80103a6 <HAL_DMA_IRQHandler+0x176>
 80103a4:	e31b      	b.n	80109de <HAL_DMA_IRQHandler+0x7ae>
 80103a6:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80103a8:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80103aa:	4947      	ldr	r1, [pc, #284]	; (80104c8 <HAL_DMA_IRQHandler+0x298>)
 80103ac:	0312      	lsls	r2, r2, #12
 80103ae:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80103b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80103b2:	432a      	orrs	r2, r5
 80103b4:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80103b6:	2221      	movs	r2, #33	; 0x21
 80103b8:	3503      	adds	r5, #3
 80103ba:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80103bc:	2500      	movs	r5, #0
 80103be:	3a01      	subs	r2, #1
 80103c0:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80103c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80103c4:	2a00      	cmp	r2, #0
 80103c6:	d175      	bne.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80103c8:	6809      	ldr	r1, [r1, #0]
 80103ca:	2280      	movs	r2, #128	; 0x80
 80103cc:	02d2      	lsls	r2, r2, #11
 80103ce:	e0f8      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
 80103d0:	4949      	ldr	r1, [pc, #292]	; (80104f8 <HAL_DMA_IRQHandler+0x2c8>)
 80103d2:	4d3e      	ldr	r5, [pc, #248]	; (80104cc <HAL_DMA_IRQHandler+0x29c>)
 80103d4:	6809      	ldr	r1, [r1, #0]
 80103d6:	42ab      	cmp	r3, r5
 80103d8:	d100      	bne.n	80103dc <HAL_DMA_IRQHandler+0x1ac>
 80103da:	e1e2      	b.n	80107a2 <HAL_DMA_IRQHandler+0x572>
 80103dc:	4d3c      	ldr	r5, [pc, #240]	; (80104d0 <HAL_DMA_IRQHandler+0x2a0>)
 80103de:	42ab      	cmp	r3, r5
 80103e0:	d100      	bne.n	80103e4 <HAL_DMA_IRQHandler+0x1b4>
 80103e2:	e26e      	b.n	80108c2 <HAL_DMA_IRQHandler+0x692>
 80103e4:	4d3b      	ldr	r5, [pc, #236]	; (80104d4 <HAL_DMA_IRQHandler+0x2a4>)
 80103e6:	42ab      	cmp	r3, r5
 80103e8:	d100      	bne.n	80103ec <HAL_DMA_IRQHandler+0x1bc>
 80103ea:	e08b      	b.n	8010504 <HAL_DMA_IRQHandler+0x2d4>
 80103ec:	4d3a      	ldr	r5, [pc, #232]	; (80104d8 <HAL_DMA_IRQHandler+0x2a8>)
 80103ee:	42ab      	cmp	r3, r5
 80103f0:	d100      	bne.n	80103f4 <HAL_DMA_IRQHandler+0x1c4>
 80103f2:	e285      	b.n	8010900 <HAL_DMA_IRQHandler+0x6d0>
 80103f4:	4d39      	ldr	r5, [pc, #228]	; (80104dc <HAL_DMA_IRQHandler+0x2ac>)
 80103f6:	42ab      	cmp	r3, r5
 80103f8:	d100      	bne.n	80103fc <HAL_DMA_IRQHandler+0x1cc>
 80103fa:	e323      	b.n	8010a44 <HAL_DMA_IRQHandler+0x814>
 80103fc:	4d38      	ldr	r5, [pc, #224]	; (80104e0 <HAL_DMA_IRQHandler+0x2b0>)
 80103fe:	42ab      	cmp	r3, r5
 8010400:	d100      	bne.n	8010404 <HAL_DMA_IRQHandler+0x1d4>
 8010402:	e36e      	b.n	8010ae2 <HAL_DMA_IRQHandler+0x8b2>
 8010404:	4293      	cmp	r3, r2
 8010406:	d100      	bne.n	801040a <HAL_DMA_IRQHandler+0x1da>
 8010408:	e2e6      	b.n	80109d8 <HAL_DMA_IRQHandler+0x7a8>
 801040a:	4a36      	ldr	r2, [pc, #216]	; (80104e4 <HAL_DMA_IRQHandler+0x2b4>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d100      	bne.n	8010412 <HAL_DMA_IRQHandler+0x1e2>
 8010410:	e1c7      	b.n	80107a2 <HAL_DMA_IRQHandler+0x572>
 8010412:	4a35      	ldr	r2, [pc, #212]	; (80104e8 <HAL_DMA_IRQHandler+0x2b8>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d100      	bne.n	801041a <HAL_DMA_IRQHandler+0x1ea>
 8010418:	e253      	b.n	80108c2 <HAL_DMA_IRQHandler+0x692>
 801041a:	4a34      	ldr	r2, [pc, #208]	; (80104ec <HAL_DMA_IRQHandler+0x2bc>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d071      	beq.n	8010504 <HAL_DMA_IRQHandler+0x2d4>
 8010420:	4a33      	ldr	r2, [pc, #204]	; (80104f0 <HAL_DMA_IRQHandler+0x2c0>)
 8010422:	189a      	adds	r2, r3, r2
 8010424:	4255      	negs	r5, r2
 8010426:	416a      	adcs	r2, r5
 8010428:	4d34      	ldr	r5, [pc, #208]	; (80104fc <HAL_DMA_IRQHandler+0x2cc>)
 801042a:	4252      	negs	r2, r2
 801042c:	402a      	ands	r2, r5
 801042e:	2580      	movs	r5, #128	; 0x80
 8010430:	02ed      	lsls	r5, r5, #11
 8010432:	46ac      	mov	ip, r5
 8010434:	4462      	add	r2, ip
 8010436:	e067      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010438:	42ab      	cmp	r3, r5
 801043a:	d100      	bne.n	801043e <HAL_DMA_IRQHandler+0x20e>
 801043c:	e19f      	b.n	801077e <HAL_DMA_IRQHandler+0x54e>
 801043e:	4a24      	ldr	r2, [pc, #144]	; (80104d0 <HAL_DMA_IRQHandler+0x2a0>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d100      	bne.n	8010446 <HAL_DMA_IRQHandler+0x216>
 8010444:	e30f      	b.n	8010a66 <HAL_DMA_IRQHandler+0x836>
 8010446:	4a23      	ldr	r2, [pc, #140]	; (80104d4 <HAL_DMA_IRQHandler+0x2a4>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d100      	bne.n	801044e <HAL_DMA_IRQHandler+0x21e>
 801044c:	e26d      	b.n	801092a <HAL_DMA_IRQHandler+0x6fa>
 801044e:	4a22      	ldr	r2, [pc, #136]	; (80104d8 <HAL_DMA_IRQHandler+0x2a8>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d100      	bne.n	8010456 <HAL_DMA_IRQHandler+0x226>
 8010454:	e240      	b.n	80108d8 <HAL_DMA_IRQHandler+0x6a8>
 8010456:	4a21      	ldr	r2, [pc, #132]	; (80104dc <HAL_DMA_IRQHandler+0x2ac>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d100      	bne.n	801045e <HAL_DMA_IRQHandler+0x22e>
 801045c:	e2de      	b.n	8010a1c <HAL_DMA_IRQHandler+0x7ec>
 801045e:	4a20      	ldr	r2, [pc, #128]	; (80104e0 <HAL_DMA_IRQHandler+0x2b0>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d100      	bne.n	8010466 <HAL_DMA_IRQHandler+0x236>
 8010464:	e328      	b.n	8010ab8 <HAL_DMA_IRQHandler+0x888>
 8010466:	428b      	cmp	r3, r1
 8010468:	d100      	bne.n	801046c <HAL_DMA_IRQHandler+0x23c>
 801046a:	e2a1      	b.n	80109b0 <HAL_DMA_IRQHandler+0x780>
 801046c:	4a1d      	ldr	r2, [pc, #116]	; (80104e4 <HAL_DMA_IRQHandler+0x2b4>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d100      	bne.n	8010474 <HAL_DMA_IRQHandler+0x244>
 8010472:	e3b3      	b.n	8010bdc <HAL_DMA_IRQHandler+0x9ac>
 8010474:	4a1c      	ldr	r2, [pc, #112]	; (80104e8 <HAL_DMA_IRQHandler+0x2b8>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d100      	bne.n	801047c <HAL_DMA_IRQHandler+0x24c>
 801047a:	e210      	b.n	801089e <HAL_DMA_IRQHandler+0x66e>
 801047c:	4a1b      	ldr	r2, [pc, #108]	; (80104ec <HAL_DMA_IRQHandler+0x2bc>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d100      	bne.n	8010484 <HAL_DMA_IRQHandler+0x254>
 8010482:	e3bf      	b.n	8010c04 <HAL_DMA_IRQHandler+0x9d4>
 8010484:	4a1e      	ldr	r2, [pc, #120]	; (8010500 <HAL_DMA_IRQHandler+0x2d0>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d101      	bne.n	801048e <HAL_DMA_IRQHandler+0x25e>
 801048a:	f000 fbe8 	bl	8010c5e <HAL_DMA_IRQHandler+0xa2e>
 801048e:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010490:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010492:	4919      	ldr	r1, [pc, #100]	; (80104f8 <HAL_DMA_IRQHandler+0x2c8>)
 8010494:	0312      	lsls	r2, r2, #12
 8010496:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010498:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801049a:	432a      	orrs	r2, r5
 801049c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801049e:	2221      	movs	r2, #33	; 0x21
 80104a0:	3503      	adds	r5, #3
 80104a2:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80104a4:	2500      	movs	r5, #0
 80104a6:	3a01      	subs	r2, #1
 80104a8:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80104aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80104ac:	2a00      	cmp	r2, #0
 80104ae:	d101      	bne.n	80104b4 <HAL_DMA_IRQHandler+0x284>
 80104b0:	f000 fbec 	bl	8010c8c <HAL_DMA_IRQHandler+0xa5c>
        hdma->XferErrorCallback(hdma);
 80104b4:	0020      	movs	r0, r4
 80104b6:	4790      	blx	r2
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	0018      	movs	r0, r3
 80104bc:	e6fd      	b.n	80102ba <HAL_DMA_IRQHandler+0x8a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80104be:	2280      	movs	r2, #128	; 0x80
 80104c0:	0312      	lsls	r2, r2, #12
 80104c2:	e734      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
 80104c4:	40020080 	.word	0x40020080
 80104c8:	40020400 	.word	0x40020400
 80104cc:	40020008 	.word	0x40020008
 80104d0:	4002001c 	.word	0x4002001c
 80104d4:	40020030 	.word	0x40020030
 80104d8:	40020044 	.word	0x40020044
 80104dc:	40020058 	.word	0x40020058
 80104e0:	4002006c 	.word	0x4002006c
 80104e4:	40020408 	.word	0x40020408
 80104e8:	4002041c 	.word	0x4002041c
 80104ec:	40020430 	.word	0x40020430
 80104f0:	bffdfbbc 	.word	0xbffdfbbc
 80104f4:	fff88000 	.word	0xfff88000
 80104f8:	40020000 	.word	0x40020000
 80104fc:	fffc4000 	.word	0xfffc4000
 8010500:	40020444 	.word	0x40020444
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010504:	2280      	movs	r2, #128	; 0x80
 8010506:	00d2      	lsls	r2, r2, #3
 8010508:	4211      	tst	r1, r2
 801050a:	d100      	bne.n	801050e <HAL_DMA_IRQHandler+0x2de>
 801050c:	e0a4      	b.n	8010658 <HAL_DMA_IRQHandler+0x428>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	0752      	lsls	r2, r2, #29
 8010512:	d400      	bmi.n	8010516 <HAL_DMA_IRQHandler+0x2e6>
 8010514:	e0a0      	b.n	8010658 <HAL_DMA_IRQHandler+0x428>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	0692      	lsls	r2, r2, #26
 801051a:	d45b      	bmi.n	80105d4 <HAL_DMA_IRQHandler+0x3a4>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801051c:	2104      	movs	r1, #4
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	438a      	bics	r2, r1
 8010522:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010524:	4ac5      	ldr	r2, [pc, #788]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 8010526:	4290      	cmp	r0, r2
 8010528:	d954      	bls.n	80105d4 <HAL_DMA_IRQHandler+0x3a4>
 801052a:	4ac5      	ldr	r2, [pc, #788]	; (8010840 <HAL_DMA_IRQHandler+0x610>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d100      	bne.n	8010532 <HAL_DMA_IRQHandler+0x302>
 8010530:	e26c      	b.n	8010a0c <HAL_DMA_IRQHandler+0x7dc>
 8010532:	4ac4      	ldr	r2, [pc, #784]	; (8010844 <HAL_DMA_IRQHandler+0x614>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d100      	bne.n	801053a <HAL_DMA_IRQHandler+0x30a>
 8010538:	e28d      	b.n	8010a56 <HAL_DMA_IRQHandler+0x826>
 801053a:	4ac3      	ldr	r2, [pc, #780]	; (8010848 <HAL_DMA_IRQHandler+0x618>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d100      	bne.n	8010542 <HAL_DMA_IRQHandler+0x312>
 8010540:	e1ea      	b.n	8010918 <HAL_DMA_IRQHandler+0x6e8>
 8010542:	4ac2      	ldr	r2, [pc, #776]	; (801084c <HAL_DMA_IRQHandler+0x61c>)
 8010544:	4293      	cmp	r3, r2
 8010546:	d100      	bne.n	801054a <HAL_DMA_IRQHandler+0x31a>
 8010548:	e2fb      	b.n	8010b42 <HAL_DMA_IRQHandler+0x912>
 801054a:	4ac1      	ldr	r2, [pc, #772]	; (8010850 <HAL_DMA_IRQHandler+0x620>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d100      	bne.n	8010552 <HAL_DMA_IRQHandler+0x322>
 8010550:	e303      	b.n	8010b5a <HAL_DMA_IRQHandler+0x92a>
 8010552:	4ac0      	ldr	r2, [pc, #768]	; (8010854 <HAL_DMA_IRQHandler+0x624>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d100      	bne.n	801055a <HAL_DMA_IRQHandler+0x32a>
 8010558:	e311      	b.n	8010b7e <HAL_DMA_IRQHandler+0x94e>
 801055a:	4ab8      	ldr	r2, [pc, #736]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 801055c:	4293      	cmp	r3, r2
 801055e:	d100      	bne.n	8010562 <HAL_DMA_IRQHandler+0x332>
 8010560:	e319      	b.n	8010b96 <HAL_DMA_IRQHandler+0x966>
 8010562:	4abd      	ldr	r2, [pc, #756]	; (8010858 <HAL_DMA_IRQHandler+0x628>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d100      	bne.n	801056a <HAL_DMA_IRQHandler+0x33a>
 8010568:	e250      	b.n	8010a0c <HAL_DMA_IRQHandler+0x7dc>
 801056a:	4abc      	ldr	r2, [pc, #752]	; (801085c <HAL_DMA_IRQHandler+0x62c>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d100      	bne.n	8010572 <HAL_DMA_IRQHandler+0x342>
 8010570:	e271      	b.n	8010a56 <HAL_DMA_IRQHandler+0x826>
 8010572:	4abb      	ldr	r2, [pc, #748]	; (8010860 <HAL_DMA_IRQHandler+0x630>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d100      	bne.n	801057a <HAL_DMA_IRQHandler+0x34a>
 8010578:	e1ce      	b.n	8010918 <HAL_DMA_IRQHandler+0x6e8>
 801057a:	4aba      	ldr	r2, [pc, #744]	; (8010864 <HAL_DMA_IRQHandler+0x634>)
 801057c:	189a      	adds	r2, r3, r2
 801057e:	1e51      	subs	r1, r2, #1
 8010580:	418a      	sbcs	r2, r1
 8010582:	21f0      	movs	r1, #240	; 0xf0
 8010584:	4252      	negs	r2, r2
 8010586:	0289      	lsls	r1, r1, #10
 8010588:	400a      	ands	r2, r1
 801058a:	2180      	movs	r1, #128	; 0x80
 801058c:	01c9      	lsls	r1, r1, #7
 801058e:	468c      	mov	ip, r1
 8010590:	4462      	add	r2, ip
 8010592:	49b5      	ldr	r1, [pc, #724]	; (8010868 <HAL_DMA_IRQHandler+0x638>)
 8010594:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010596:	2221      	movs	r2, #33	; 0x21
 8010598:	2111      	movs	r1, #17
 801059a:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801059c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801059e:	2a00      	cmp	r2, #0
 80105a0:	d154      	bne.n	801064c <HAL_DMA_IRQHandler+0x41c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80105a2:	4ab1      	ldr	r2, [pc, #708]	; (8010868 <HAL_DMA_IRQHandler+0x638>)
 80105a4:	6810      	ldr	r0, [r2, #0]
 80105a6:	4aa6      	ldr	r2, [pc, #664]	; (8010840 <HAL_DMA_IRQHandler+0x610>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d15a      	bne.n	8010662 <HAL_DMA_IRQHandler+0x432>
 80105ac:	2202      	movs	r2, #2
 80105ae:	4002      	ands	r2, r0
 80105b0:	1e51      	subs	r1, r2, #1
 80105b2:	418a      	sbcs	r2, r1
 80105b4:	b2d2      	uxtb	r2, r2
 80105b6:	2a00      	cmp	r2, #0
 80105b8:	d000      	beq.n	80105bc <HAL_DMA_IRQHandler+0x38c>
 80105ba:	e088      	b.n	80106ce <HAL_DMA_IRQHandler+0x49e>
}  
 80105bc:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80105be:	2280      	movs	r2, #128	; 0x80
 80105c0:	00d2      	lsls	r2, r2, #3
 80105c2:	4211      	tst	r1, r2
 80105c4:	d0ed      	beq.n	80105a2 <HAL_DMA_IRQHandler+0x372>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	0752      	lsls	r2, r2, #29
 80105ca:	d5ea      	bpl.n	80105a2 <HAL_DMA_IRQHandler+0x372>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	0692      	lsls	r2, r2, #26
 80105d0:	d5a4      	bpl.n	801051c <HAL_DMA_IRQHandler+0x2ec>
 80105d2:	e7aa      	b.n	801052a <HAL_DMA_IRQHandler+0x2fa>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80105d4:	4a9a      	ldr	r2, [pc, #616]	; (8010840 <HAL_DMA_IRQHandler+0x610>)
 80105d6:	4293      	cmp	r3, r2
 80105d8:	d100      	bne.n	80105dc <HAL_DMA_IRQHandler+0x3ac>
 80105da:	e21b      	b.n	8010a14 <HAL_DMA_IRQHandler+0x7e4>
 80105dc:	4a99      	ldr	r2, [pc, #612]	; (8010844 <HAL_DMA_IRQHandler+0x614>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d100      	bne.n	80105e4 <HAL_DMA_IRQHandler+0x3b4>
 80105e2:	e23c      	b.n	8010a5e <HAL_DMA_IRQHandler+0x82e>
 80105e4:	4a98      	ldr	r2, [pc, #608]	; (8010848 <HAL_DMA_IRQHandler+0x618>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d100      	bne.n	80105ec <HAL_DMA_IRQHandler+0x3bc>
 80105ea:	e198      	b.n	801091e <HAL_DMA_IRQHandler+0x6ee>
 80105ec:	4a97      	ldr	r2, [pc, #604]	; (801084c <HAL_DMA_IRQHandler+0x61c>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d100      	bne.n	80105f4 <HAL_DMA_IRQHandler+0x3c4>
 80105f2:	e2a9      	b.n	8010b48 <HAL_DMA_IRQHandler+0x918>
 80105f4:	4a96      	ldr	r2, [pc, #600]	; (8010850 <HAL_DMA_IRQHandler+0x620>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d100      	bne.n	80105fc <HAL_DMA_IRQHandler+0x3cc>
 80105fa:	e2b4      	b.n	8010b66 <HAL_DMA_IRQHandler+0x936>
 80105fc:	4a95      	ldr	r2, [pc, #596]	; (8010854 <HAL_DMA_IRQHandler+0x624>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d100      	bne.n	8010604 <HAL_DMA_IRQHandler+0x3d4>
 8010602:	e2bf      	b.n	8010b84 <HAL_DMA_IRQHandler+0x954>
 8010604:	4a8d      	ldr	r2, [pc, #564]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d100      	bne.n	801060c <HAL_DMA_IRQHandler+0x3dc>
 801060a:	e2be      	b.n	8010b8a <HAL_DMA_IRQHandler+0x95a>
 801060c:	4a92      	ldr	r2, [pc, #584]	; (8010858 <HAL_DMA_IRQHandler+0x628>)
 801060e:	4293      	cmp	r3, r2
 8010610:	d100      	bne.n	8010614 <HAL_DMA_IRQHandler+0x3e4>
 8010612:	e1ff      	b.n	8010a14 <HAL_DMA_IRQHandler+0x7e4>
 8010614:	4a91      	ldr	r2, [pc, #580]	; (801085c <HAL_DMA_IRQHandler+0x62c>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d100      	bne.n	801061c <HAL_DMA_IRQHandler+0x3ec>
 801061a:	e220      	b.n	8010a5e <HAL_DMA_IRQHandler+0x82e>
 801061c:	4a90      	ldr	r2, [pc, #576]	; (8010860 <HAL_DMA_IRQHandler+0x630>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d100      	bne.n	8010624 <HAL_DMA_IRQHandler+0x3f4>
 8010622:	e17c      	b.n	801091e <HAL_DMA_IRQHandler+0x6ee>
 8010624:	4a8f      	ldr	r2, [pc, #572]	; (8010864 <HAL_DMA_IRQHandler+0x634>)
 8010626:	189a      	adds	r2, r3, r2
 8010628:	1e51      	subs	r1, r2, #1
 801062a:	418a      	sbcs	r2, r1
 801062c:	21f0      	movs	r1, #240	; 0xf0
 801062e:	4252      	negs	r2, r2
 8010630:	0289      	lsls	r1, r1, #10
 8010632:	400a      	ands	r2, r1
 8010634:	2180      	movs	r1, #128	; 0x80
 8010636:	01c9      	lsls	r1, r1, #7
 8010638:	468c      	mov	ip, r1
 801063a:	4462      	add	r2, ip
 801063c:	498b      	ldr	r1, [pc, #556]	; (801086c <HAL_DMA_IRQHandler+0x63c>)
 801063e:	604a      	str	r2, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010640:	2221      	movs	r2, #33	; 0x21
 8010642:	2111      	movs	r1, #17
 8010644:	54a1      	strb	r1, [r4, r2]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010646:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010648:	2a00      	cmp	r2, #0
 801064a:	d005      	beq.n	8010658 <HAL_DMA_IRQHandler+0x428>
        hdma->XferHalfCpltCallback(hdma);
 801064c:	0020      	movs	r0, r4
 801064e:	4790      	blx	r2
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010650:	6823      	ldr	r3, [r4, #0]
 8010652:	4a7a      	ldr	r2, [pc, #488]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d8a4      	bhi.n	80105a2 <HAL_DMA_IRQHandler+0x372>
 8010658:	4a84      	ldr	r2, [pc, #528]	; (801086c <HAL_DMA_IRQHandler+0x63c>)
 801065a:	6810      	ldr	r0, [r2, #0]
 801065c:	4a78      	ldr	r2, [pc, #480]	; (8010840 <HAL_DMA_IRQHandler+0x610>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d0a4      	beq.n	80105ac <HAL_DMA_IRQHandler+0x37c>
 8010662:	4a78      	ldr	r2, [pc, #480]	; (8010844 <HAL_DMA_IRQHandler+0x614>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d02a      	beq.n	80106be <HAL_DMA_IRQHandler+0x48e>
 8010668:	4a77      	ldr	r2, [pc, #476]	; (8010848 <HAL_DMA_IRQHandler+0x618>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d100      	bne.n	8010670 <HAL_DMA_IRQHandler+0x440>
 801066e:	e09d      	b.n	80107ac <HAL_DMA_IRQHandler+0x57c>
 8010670:	4a76      	ldr	r2, [pc, #472]	; (801084c <HAL_DMA_IRQHandler+0x61c>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d100      	bne.n	8010678 <HAL_DMA_IRQHandler+0x448>
 8010676:	e129      	b.n	80108cc <HAL_DMA_IRQHandler+0x69c>
 8010678:	4a75      	ldr	r2, [pc, #468]	; (8010850 <HAL_DMA_IRQHandler+0x620>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d100      	bne.n	8010680 <HAL_DMA_IRQHandler+0x450>
 801067e:	e128      	b.n	80108d2 <HAL_DMA_IRQHandler+0x6a2>
 8010680:	4a74      	ldr	r2, [pc, #464]	; (8010854 <HAL_DMA_IRQHandler+0x624>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d100      	bne.n	8010688 <HAL_DMA_IRQHandler+0x458>
 8010686:	e13e      	b.n	8010906 <HAL_DMA_IRQHandler+0x6d6>
 8010688:	4a6c      	ldr	r2, [pc, #432]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d100      	bne.n	8010690 <HAL_DMA_IRQHandler+0x460>
 801068e:	e1dc      	b.n	8010a4a <HAL_DMA_IRQHandler+0x81a>
 8010690:	4a71      	ldr	r2, [pc, #452]	; (8010858 <HAL_DMA_IRQHandler+0x628>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d100      	bne.n	8010698 <HAL_DMA_IRQHandler+0x468>
 8010696:	e789      	b.n	80105ac <HAL_DMA_IRQHandler+0x37c>
 8010698:	4a70      	ldr	r2, [pc, #448]	; (801085c <HAL_DMA_IRQHandler+0x62c>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d00f      	beq.n	80106be <HAL_DMA_IRQHandler+0x48e>
 801069e:	4a70      	ldr	r2, [pc, #448]	; (8010860 <HAL_DMA_IRQHandler+0x630>)
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d100      	bne.n	80106a6 <HAL_DMA_IRQHandler+0x476>
 80106a4:	e082      	b.n	80107ac <HAL_DMA_IRQHandler+0x57c>
 80106a6:	4a6f      	ldr	r2, [pc, #444]	; (8010864 <HAL_DMA_IRQHandler+0x634>)
 80106a8:	1899      	adds	r1, r3, r2
 80106aa:	424a      	negs	r2, r1
 80106ac:	4151      	adcs	r1, r2
 80106ae:	4a70      	ldr	r2, [pc, #448]	; (8010870 <HAL_DMA_IRQHandler+0x640>)
 80106b0:	4249      	negs	r1, r1
 80106b2:	400a      	ands	r2, r1
 80106b4:	2180      	movs	r1, #128	; 0x80
 80106b6:	0289      	lsls	r1, r1, #10
 80106b8:	468c      	mov	ip, r1
 80106ba:	4462      	add	r2, ip
 80106bc:	e000      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
 80106be:	2220      	movs	r2, #32
 80106c0:	4002      	ands	r2, r0
 80106c2:	1e51      	subs	r1, r2, #1
 80106c4:	418a      	sbcs	r2, r1
 80106c6:	b2d2      	uxtb	r2, r2
 80106c8:	2a00      	cmp	r2, #0
 80106ca:	d100      	bne.n	80106ce <HAL_DMA_IRQHandler+0x49e>
 80106cc:	e776      	b.n	80105bc <HAL_DMA_IRQHandler+0x38c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80106ce:	2202      	movs	r2, #2
 80106d0:	6819      	ldr	r1, [r3, #0]
 80106d2:	420a      	tst	r2, r1
 80106d4:	d100      	bne.n	80106d8 <HAL_DMA_IRQHandler+0x4a8>
 80106d6:	e771      	b.n	80105bc <HAL_DMA_IRQHandler+0x38c>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80106d8:	6819      	ldr	r1, [r3, #0]
 80106da:	0689      	lsls	r1, r1, #26
 80106dc:	d402      	bmi.n	80106e4 <HAL_DMA_IRQHandler+0x4b4>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80106de:	6819      	ldr	r1, [r3, #0]
 80106e0:	4391      	bics	r1, r2
 80106e2:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80106e4:	4a55      	ldr	r2, [pc, #340]	; (801083c <HAL_DMA_IRQHandler+0x60c>)
 80106e6:	4956      	ldr	r1, [pc, #344]	; (8010840 <HAL_DMA_IRQHandler+0x610>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d962      	bls.n	80107b2 <HAL_DMA_IRQHandler+0x582>
 80106ec:	428b      	cmp	r3, r1
 80106ee:	d100      	bne.n	80106f2 <HAL_DMA_IRQHandler+0x4c2>
 80106f0:	e18e      	b.n	8010a10 <HAL_DMA_IRQHandler+0x7e0>
 80106f2:	4954      	ldr	r1, [pc, #336]	; (8010844 <HAL_DMA_IRQHandler+0x614>)
 80106f4:	428b      	cmp	r3, r1
 80106f6:	d100      	bne.n	80106fa <HAL_DMA_IRQHandler+0x4ca>
 80106f8:	e1af      	b.n	8010a5a <HAL_DMA_IRQHandler+0x82a>
 80106fa:	4953      	ldr	r1, [pc, #332]	; (8010848 <HAL_DMA_IRQHandler+0x618>)
 80106fc:	428b      	cmp	r3, r1
 80106fe:	d100      	bne.n	8010702 <HAL_DMA_IRQHandler+0x4d2>
 8010700:	e110      	b.n	8010924 <HAL_DMA_IRQHandler+0x6f4>
 8010702:	4952      	ldr	r1, [pc, #328]	; (801084c <HAL_DMA_IRQHandler+0x61c>)
 8010704:	428b      	cmp	r3, r1
 8010706:	d100      	bne.n	801070a <HAL_DMA_IRQHandler+0x4da>
 8010708:	e224      	b.n	8010b54 <HAL_DMA_IRQHandler+0x924>
 801070a:	4951      	ldr	r1, [pc, #324]	; (8010850 <HAL_DMA_IRQHandler+0x620>)
 801070c:	428b      	cmp	r3, r1
 801070e:	d100      	bne.n	8010712 <HAL_DMA_IRQHandler+0x4e2>
 8010710:	e226      	b.n	8010b60 <HAL_DMA_IRQHandler+0x930>
 8010712:	4950      	ldr	r1, [pc, #320]	; (8010854 <HAL_DMA_IRQHandler+0x624>)
 8010714:	428b      	cmp	r3, r1
 8010716:	d100      	bne.n	801071a <HAL_DMA_IRQHandler+0x4ea>
 8010718:	e22e      	b.n	8010b78 <HAL_DMA_IRQHandler+0x948>
 801071a:	4293      	cmp	r3, r2
 801071c:	d100      	bne.n	8010720 <HAL_DMA_IRQHandler+0x4f0>
 801071e:	e237      	b.n	8010b90 <HAL_DMA_IRQHandler+0x960>
 8010720:	4a4d      	ldr	r2, [pc, #308]	; (8010858 <HAL_DMA_IRQHandler+0x628>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d100      	bne.n	8010728 <HAL_DMA_IRQHandler+0x4f8>
 8010726:	e173      	b.n	8010a10 <HAL_DMA_IRQHandler+0x7e0>
 8010728:	4a4c      	ldr	r2, [pc, #304]	; (801085c <HAL_DMA_IRQHandler+0x62c>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d100      	bne.n	8010730 <HAL_DMA_IRQHandler+0x500>
 801072e:	e194      	b.n	8010a5a <HAL_DMA_IRQHandler+0x82a>
 8010730:	4a4b      	ldr	r2, [pc, #300]	; (8010860 <HAL_DMA_IRQHandler+0x630>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d100      	bne.n	8010738 <HAL_DMA_IRQHandler+0x508>
 8010736:	e0f5      	b.n	8010924 <HAL_DMA_IRQHandler+0x6f4>
 8010738:	4a4a      	ldr	r2, [pc, #296]	; (8010864 <HAL_DMA_IRQHandler+0x634>)
 801073a:	4694      	mov	ip, r2
 801073c:	4463      	add	r3, ip
 801073e:	1e5a      	subs	r2, r3, #1
 8010740:	4193      	sbcs	r3, r2
 8010742:	22f0      	movs	r2, #240	; 0xf0
 8010744:	425b      	negs	r3, r3
 8010746:	0252      	lsls	r2, r2, #9
 8010748:	4013      	ands	r3, r2
 801074a:	2280      	movs	r2, #128	; 0x80
 801074c:	0192      	lsls	r2, r2, #6
 801074e:	4694      	mov	ip, r2
 8010750:	4463      	add	r3, ip
 8010752:	4a45      	ldr	r2, [pc, #276]	; (8010868 <HAL_DMA_IRQHandler+0x638>)
 8010754:	6053      	str	r3, [r2, #4]
 8010756:	e061      	b.n	801081c <HAL_DMA_IRQHandler+0x5ec>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010758:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801075a:	4943      	ldr	r1, [pc, #268]	; (8010868 <HAL_DMA_IRQHandler+0x638>)
 801075c:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801075e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010760:	432a      	orrs	r2, r5
 8010762:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010764:	2221      	movs	r2, #33	; 0x21
 8010766:	3503      	adds	r5, #3
 8010768:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801076a:	2500      	movs	r5, #0
 801076c:	3a01      	subs	r2, #1
 801076e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010770:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010772:	2a00      	cmp	r2, #0
 8010774:	d000      	beq.n	8010778 <HAL_DMA_IRQHandler+0x548>
 8010776:	e69d      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010778:	6809      	ldr	r1, [r1, #0]
 801077a:	2204      	movs	r2, #4
 801077c:	e721      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801077e:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010780:	493a      	ldr	r1, [pc, #232]	; (801086c <HAL_DMA_IRQHandler+0x63c>)
 8010782:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010784:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010786:	4302      	orrs	r2, r0
 8010788:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801078a:	2221      	movs	r2, #33	; 0x21
 801078c:	3003      	adds	r0, #3
 801078e:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010790:	2000      	movs	r0, #0
 8010792:	3a01      	subs	r2, #1
 8010794:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010796:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010798:	2a00      	cmp	r2, #0
 801079a:	d000      	beq.n	801079e <HAL_DMA_IRQHandler+0x56e>
 801079c:	e68a      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801079e:	0018      	movs	r0, r3
 80107a0:	6809      	ldr	r1, [r1, #0]
 80107a2:	2204      	movs	r2, #4
 80107a4:	e6b0      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80107a6:	2280      	movs	r2, #128	; 0x80
 80107a8:	0112      	lsls	r2, r2, #4
 80107aa:	e5c0      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80107ac:	2280      	movs	r2, #128	; 0x80
 80107ae:	0092      	lsls	r2, r2, #2
 80107b0:	e786      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80107b2:	428b      	cmp	r3, r1
 80107b4:	d100      	bne.n	80107b8 <HAL_DMA_IRQHandler+0x588>
 80107b6:	e12f      	b.n	8010a18 <HAL_DMA_IRQHandler+0x7e8>
 80107b8:	4922      	ldr	r1, [pc, #136]	; (8010844 <HAL_DMA_IRQHandler+0x614>)
 80107ba:	428b      	cmp	r3, r1
 80107bc:	d100      	bne.n	80107c0 <HAL_DMA_IRQHandler+0x590>
 80107be:	e150      	b.n	8010a62 <HAL_DMA_IRQHandler+0x832>
 80107c0:	4921      	ldr	r1, [pc, #132]	; (8010848 <HAL_DMA_IRQHandler+0x618>)
 80107c2:	428b      	cmp	r3, r1
 80107c4:	d100      	bne.n	80107c8 <HAL_DMA_IRQHandler+0x598>
 80107c6:	e0a4      	b.n	8010912 <HAL_DMA_IRQHandler+0x6e2>
 80107c8:	4920      	ldr	r1, [pc, #128]	; (801084c <HAL_DMA_IRQHandler+0x61c>)
 80107ca:	428b      	cmp	r3, r1
 80107cc:	d100      	bne.n	80107d0 <HAL_DMA_IRQHandler+0x5a0>
 80107ce:	e1be      	b.n	8010b4e <HAL_DMA_IRQHandler+0x91e>
 80107d0:	491f      	ldr	r1, [pc, #124]	; (8010850 <HAL_DMA_IRQHandler+0x620>)
 80107d2:	428b      	cmp	r3, r1
 80107d4:	d100      	bne.n	80107d8 <HAL_DMA_IRQHandler+0x5a8>
 80107d6:	e1c9      	b.n	8010b6c <HAL_DMA_IRQHandler+0x93c>
 80107d8:	491e      	ldr	r1, [pc, #120]	; (8010854 <HAL_DMA_IRQHandler+0x624>)
 80107da:	428b      	cmp	r3, r1
 80107dc:	d100      	bne.n	80107e0 <HAL_DMA_IRQHandler+0x5b0>
 80107de:	e1c8      	b.n	8010b72 <HAL_DMA_IRQHandler+0x942>
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d100      	bne.n	80107e6 <HAL_DMA_IRQHandler+0x5b6>
 80107e4:	e1da      	b.n	8010b9c <HAL_DMA_IRQHandler+0x96c>
 80107e6:	4a1c      	ldr	r2, [pc, #112]	; (8010858 <HAL_DMA_IRQHandler+0x628>)
 80107e8:	4293      	cmp	r3, r2
 80107ea:	d100      	bne.n	80107ee <HAL_DMA_IRQHandler+0x5be>
 80107ec:	e114      	b.n	8010a18 <HAL_DMA_IRQHandler+0x7e8>
 80107ee:	4a1b      	ldr	r2, [pc, #108]	; (801085c <HAL_DMA_IRQHandler+0x62c>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d100      	bne.n	80107f6 <HAL_DMA_IRQHandler+0x5c6>
 80107f4:	e135      	b.n	8010a62 <HAL_DMA_IRQHandler+0x832>
 80107f6:	4a1a      	ldr	r2, [pc, #104]	; (8010860 <HAL_DMA_IRQHandler+0x630>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d100      	bne.n	80107fe <HAL_DMA_IRQHandler+0x5ce>
 80107fc:	e089      	b.n	8010912 <HAL_DMA_IRQHandler+0x6e2>
 80107fe:	4a19      	ldr	r2, [pc, #100]	; (8010864 <HAL_DMA_IRQHandler+0x634>)
 8010800:	4694      	mov	ip, r2
 8010802:	4463      	add	r3, ip
 8010804:	1e5a      	subs	r2, r3, #1
 8010806:	4193      	sbcs	r3, r2
 8010808:	22f0      	movs	r2, #240	; 0xf0
 801080a:	425b      	negs	r3, r3
 801080c:	0252      	lsls	r2, r2, #9
 801080e:	4013      	ands	r3, r2
 8010810:	2280      	movs	r2, #128	; 0x80
 8010812:	0192      	lsls	r2, r2, #6
 8010814:	4694      	mov	ip, r2
 8010816:	4463      	add	r3, ip
 8010818:	4a14      	ldr	r2, [pc, #80]	; (801086c <HAL_DMA_IRQHandler+0x63c>)
 801081a:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801081c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801081e:	2201      	movs	r2, #1
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8010820:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8010822:	2321      	movs	r3, #33	; 0x21
 8010824:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010826:	2200      	movs	r2, #0
 8010828:	3b01      	subs	r3, #1
 801082a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801082c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801082e:	2b00      	cmp	r3, #0
 8010830:	d100      	bne.n	8010834 <HAL_DMA_IRQHandler+0x604>
 8010832:	e6c3      	b.n	80105bc <HAL_DMA_IRQHandler+0x38c>
        hdma->XferCpltCallback(hdma);
 8010834:	0020      	movs	r0, r4
 8010836:	4798      	blx	r3
}  
 8010838:	e6c0      	b.n	80105bc <HAL_DMA_IRQHandler+0x38c>
 801083a:	46c0      	nop			; (mov r8, r8)
 801083c:	40020080 	.word	0x40020080
 8010840:	40020008 	.word	0x40020008
 8010844:	4002001c 	.word	0x4002001c
 8010848:	40020030 	.word	0x40020030
 801084c:	40020044 	.word	0x40020044
 8010850:	40020058 	.word	0x40020058
 8010854:	4002006c 	.word	0x4002006c
 8010858:	40020408 	.word	0x40020408
 801085c:	4002041c 	.word	0x4002041c
 8010860:	40020430 	.word	0x40020430
 8010864:	bffdfbbc 	.word	0xbffdfbbc
 8010868:	40020400 	.word	0x40020400
 801086c:	40020000 	.word	0x40020000
 8010870:	fffe2000 	.word	0xfffe2000
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010874:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010876:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010878:	49d4      	ldr	r1, [pc, #848]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 801087a:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801087c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801087e:	4302      	orrs	r2, r0
 8010880:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010882:	2221      	movs	r2, #33	; 0x21
 8010884:	3003      	adds	r0, #3
 8010886:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010888:	2000      	movs	r0, #0
 801088a:	3a01      	subs	r2, #1
 801088c:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801088e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010890:	2a00      	cmp	r2, #0
 8010892:	d000      	beq.n	8010896 <HAL_DMA_IRQHandler+0x666>
 8010894:	e60e      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010896:	0018      	movs	r0, r3
 8010898:	6809      	ldr	r1, [r1, #0]
 801089a:	2240      	movs	r2, #64	; 0x40
 801089c:	e691      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801089e:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108a0:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108a2:	49cb      	ldr	r1, [pc, #812]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 80108a4:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80108a8:	432a      	orrs	r2, r5
 80108aa:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80108ac:	2221      	movs	r2, #33	; 0x21
 80108ae:	3503      	adds	r5, #3
 80108b0:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80108b2:	2500      	movs	r5, #0
 80108b4:	3a01      	subs	r2, #1
 80108b6:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108ba:	2a00      	cmp	r2, #0
 80108bc:	d000      	beq.n	80108c0 <HAL_DMA_IRQHandler+0x690>
 80108be:	e5f9      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108c0:	6809      	ldr	r1, [r1, #0]
 80108c2:	2240      	movs	r2, #64	; 0x40
 80108c4:	e620      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80108c6:	2280      	movs	r2, #128	; 0x80
 80108c8:	0212      	lsls	r2, r2, #8
 80108ca:	e530      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80108cc:	2280      	movs	r2, #128	; 0x80
 80108ce:	0192      	lsls	r2, r2, #6
 80108d0:	e6f6      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
 80108d2:	2280      	movs	r2, #128	; 0x80
 80108d4:	0292      	lsls	r2, r2, #10
 80108d6:	e6f3      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108d8:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108da:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80108dc:	49bc      	ldr	r1, [pc, #752]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 80108de:	0212      	lsls	r2, r2, #8
 80108e0:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80108e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80108e4:	4302      	orrs	r2, r0
 80108e6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80108e8:	2221      	movs	r2, #33	; 0x21
 80108ea:	3003      	adds	r0, #3
 80108ec:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80108ee:	2000      	movs	r0, #0
 80108f0:	3a01      	subs	r2, #1
 80108f2:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80108f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	d000      	beq.n	80108fc <HAL_DMA_IRQHandler+0x6cc>
 80108fa:	e5db      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80108fc:	0018      	movs	r0, r3
 80108fe:	6809      	ldr	r1, [r1, #0]
 8010900:	2280      	movs	r2, #128	; 0x80
 8010902:	01d2      	lsls	r2, r2, #7
 8010904:	e600      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010906:	2280      	movs	r2, #128	; 0x80
 8010908:	0392      	lsls	r2, r2, #14
 801090a:	e6d9      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801090c:	2280      	movs	r2, #128	; 0x80
 801090e:	0412      	lsls	r2, r2, #16
 8010910:	e50d      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010912:	2380      	movs	r3, #128	; 0x80
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	e77f      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010918:	2280      	movs	r2, #128	; 0x80
 801091a:	00d2      	lsls	r2, r2, #3
 801091c:	e639      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
 801091e:	2280      	movs	r2, #128	; 0x80
 8010920:	00d2      	lsls	r2, r2, #3
 8010922:	e68b      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010924:	2380      	movs	r3, #128	; 0x80
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	e713      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801092a:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801092c:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801092e:	49a8      	ldr	r1, [pc, #672]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 8010930:	0112      	lsls	r2, r2, #4
 8010932:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010934:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010936:	4302      	orrs	r2, r0
 8010938:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801093a:	2221      	movs	r2, #33	; 0x21
 801093c:	3003      	adds	r0, #3
 801093e:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010940:	2000      	movs	r0, #0
 8010942:	3a01      	subs	r2, #1
 8010944:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010946:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010948:	2a00      	cmp	r2, #0
 801094a:	d000      	beq.n	801094e <HAL_DMA_IRQHandler+0x71e>
 801094c:	e5b2      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801094e:	2280      	movs	r2, #128	; 0x80
 8010950:	0018      	movs	r0, r3
 8010952:	6809      	ldr	r1, [r1, #0]
 8010954:	00d2      	lsls	r2, r2, #3
 8010956:	e5d7      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010958:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801095a:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801095c:	499b      	ldr	r1, [pc, #620]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 801095e:	0112      	lsls	r2, r2, #4
 8010960:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010962:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010964:	432a      	orrs	r2, r5
 8010966:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010968:	2221      	movs	r2, #33	; 0x21
 801096a:	3503      	adds	r5, #3
 801096c:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801096e:	2500      	movs	r5, #0
 8010970:	3a01      	subs	r2, #1
 8010972:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010974:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010976:	2a00      	cmp	r2, #0
 8010978:	d000      	beq.n	801097c <HAL_DMA_IRQHandler+0x74c>
 801097a:	e59b      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801097c:	2280      	movs	r2, #128	; 0x80
 801097e:	6809      	ldr	r1, [r1, #0]
 8010980:	00d2      	lsls	r2, r2, #3
 8010982:	e61e      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010984:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010986:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010988:	4990      	ldr	r1, [pc, #576]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 801098a:	0512      	lsls	r2, r2, #20
 801098c:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801098e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010990:	432a      	orrs	r2, r5
 8010992:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010994:	2221      	movs	r2, #33	; 0x21
 8010996:	3503      	adds	r5, #3
 8010998:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 801099a:	2500      	movs	r5, #0
 801099c:	3a01      	subs	r2, #1
 801099e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80109a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109a2:	2a00      	cmp	r2, #0
 80109a4:	d000      	beq.n	80109a8 <HAL_DMA_IRQHandler+0x778>
 80109a6:	e585      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109a8:	6809      	ldr	r1, [r1, #0]
 80109aa:	2280      	movs	r2, #128	; 0x80
 80109ac:	04d2      	lsls	r2, r2, #19
 80109ae:	e608      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109b0:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80109b2:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109b4:	4986      	ldr	r1, [pc, #536]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 80109b6:	0512      	lsls	r2, r2, #20
 80109b8:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80109ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80109bc:	4302      	orrs	r2, r0
 80109be:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80109c0:	2221      	movs	r2, #33	; 0x21
 80109c2:	3003      	adds	r0, #3
 80109c4:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80109c6:	2000      	movs	r0, #0
 80109c8:	3a01      	subs	r2, #1
 80109ca:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80109cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109ce:	2a00      	cmp	r2, #0
 80109d0:	d000      	beq.n	80109d4 <HAL_DMA_IRQHandler+0x7a4>
 80109d2:	e56f      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80109d4:	6809      	ldr	r1, [r1, #0]
 80109d6:	487f      	ldr	r0, [pc, #508]	; (8010bd4 <HAL_DMA_IRQHandler+0x9a4>)
 80109d8:	2280      	movs	r2, #128	; 0x80
 80109da:	04d2      	lsls	r2, r2, #19
 80109dc:	e594      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109de:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80109e0:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109e2:	497a      	ldr	r1, [pc, #488]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 80109e4:	0212      	lsls	r2, r2, #8
 80109e6:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80109e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80109ea:	4302      	orrs	r2, r0
 80109ec:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80109ee:	2221      	movs	r2, #33	; 0x21
 80109f0:	3003      	adds	r0, #3
 80109f2:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 80109f4:	2000      	movs	r0, #0
 80109f6:	3a01      	subs	r2, #1
 80109f8:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80109fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	d000      	beq.n	8010a02 <HAL_DMA_IRQHandler+0x7d2>
 8010a00:	e558      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a02:	0018      	movs	r0, r3
 8010a04:	6809      	ldr	r1, [r1, #0]
 8010a06:	2280      	movs	r2, #128	; 0x80
 8010a08:	01d2      	lsls	r2, r2, #7
 8010a0a:	e5da      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a0c:	2204      	movs	r2, #4
 8010a0e:	e5c0      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a10:	2302      	movs	r3, #2
 8010a12:	e69e      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a14:	2204      	movs	r2, #4
 8010a16:	e611      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a18:	2302      	movs	r3, #2
 8010a1a:	e6fd      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a1c:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a1e:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a20:	496b      	ldr	r1, [pc, #428]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 8010a22:	0312      	lsls	r2, r2, #12
 8010a24:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a28:	4302      	orrs	r2, r0
 8010a2a:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010a2c:	2221      	movs	r2, #33	; 0x21
 8010a2e:	3003      	adds	r0, #3
 8010a30:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010a32:	2000      	movs	r0, #0
 8010a34:	3a01      	subs	r2, #1
 8010a36:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010a3a:	2a00      	cmp	r2, #0
 8010a3c:	d000      	beq.n	8010a40 <HAL_DMA_IRQHandler+0x810>
 8010a3e:	e539      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a40:	0018      	movs	r0, r3
 8010a42:	6809      	ldr	r1, [r1, #0]
 8010a44:	2280      	movs	r2, #128	; 0x80
 8010a46:	02d2      	lsls	r2, r2, #11
 8010a48:	e55e      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010a4a:	2280      	movs	r2, #128	; 0x80
 8010a4c:	0492      	lsls	r2, r2, #18
 8010a4e:	e637      	b.n	80106c0 <HAL_DMA_IRQHandler+0x490>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010a50:	2280      	movs	r2, #128	; 0x80
 8010a52:	0512      	lsls	r2, r2, #20
 8010a54:	e46b      	b.n	801032e <HAL_DMA_IRQHandler+0xfe>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a56:	2240      	movs	r2, #64	; 0x40
 8010a58:	e59b      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a5a:	2320      	movs	r3, #32
 8010a5c:	e679      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010a5e:	2240      	movs	r2, #64	; 0x40
 8010a60:	e5ec      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010a62:	2320      	movs	r3, #32
 8010a64:	e6d8      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a66:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a68:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a6a:	4959      	ldr	r1, [pc, #356]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 8010a6c:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a70:	4302      	orrs	r2, r0
 8010a72:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010a74:	2221      	movs	r2, #33	; 0x21
 8010a76:	3003      	adds	r0, #3
 8010a78:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	3a01      	subs	r2, #1
 8010a7e:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010a80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	d000      	beq.n	8010a88 <HAL_DMA_IRQHandler+0x858>
 8010a86:	e515      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010a88:	0018      	movs	r0, r3
 8010a8a:	2240      	movs	r2, #64	; 0x40
 8010a8c:	6809      	ldr	r1, [r1, #0]
 8010a8e:	e53b      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a90:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a92:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010a94:	494d      	ldr	r1, [pc, #308]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 8010a96:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010a98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010a9a:	432a      	orrs	r2, r5
 8010a9c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010a9e:	2221      	movs	r2, #33	; 0x21
 8010aa0:	3503      	adds	r5, #3
 8010aa2:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010aa4:	2500      	movs	r5, #0
 8010aa6:	3a01      	subs	r2, #1
 8010aa8:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010aaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010aac:	2a00      	cmp	r2, #0
 8010aae:	d000      	beq.n	8010ab2 <HAL_DMA_IRQHandler+0x882>
 8010ab0:	e500      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ab2:	2240      	movs	r2, #64	; 0x40
 8010ab4:	6809      	ldr	r1, [r1, #0]
 8010ab6:	e584      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ab8:	2180      	movs	r1, #128	; 0x80
 8010aba:	4a45      	ldr	r2, [pc, #276]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 8010abc:	0409      	lsls	r1, r1, #16
 8010abe:	6051      	str	r1, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ac0:	2101      	movs	r1, #1
 8010ac2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010ac4:	430a      	orrs	r2, r1
 8010ac6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010ac8:	2221      	movs	r2, #33	; 0x21
 8010aca:	3103      	adds	r1, #3
 8010acc:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010ace:	2100      	movs	r1, #0
 8010ad0:	3a01      	subs	r2, #1
 8010ad2:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010ad4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d000      	beq.n	8010adc <HAL_DMA_IRQHandler+0x8ac>
 8010ada:	e4eb      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010adc:	4a3c      	ldr	r2, [pc, #240]	; (8010bd0 <HAL_DMA_IRQHandler+0x9a0>)
 8010ade:	483e      	ldr	r0, [pc, #248]	; (8010bd8 <HAL_DMA_IRQHandler+0x9a8>)
 8010ae0:	6811      	ldr	r1, [r2, #0]
 8010ae2:	2280      	movs	r2, #128	; 0x80
 8010ae4:	03d2      	lsls	r2, r2, #15
 8010ae6:	e50f      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ae8:	2180      	movs	r1, #128	; 0x80
 8010aea:	4a38      	ldr	r2, [pc, #224]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 8010aec:	0409      	lsls	r1, r1, #16
 8010aee:	6051      	str	r1, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010af0:	2101      	movs	r1, #1
 8010af2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010af4:	430a      	orrs	r2, r1
 8010af6:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010af8:	2221      	movs	r2, #33	; 0x21
 8010afa:	3103      	adds	r1, #3
 8010afc:	54a1      	strb	r1, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010afe:	2100      	movs	r1, #0
 8010b00:	3a01      	subs	r2, #1
 8010b02:	54a1      	strb	r1, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010b04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	d000      	beq.n	8010b0c <HAL_DMA_IRQHandler+0x8dc>
 8010b0a:	e4d3      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b0c:	4a2f      	ldr	r2, [pc, #188]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 8010b0e:	6811      	ldr	r1, [r2, #0]
 8010b10:	2280      	movs	r2, #128	; 0x80
 8010b12:	03d2      	lsls	r2, r2, #15
 8010b14:	e555      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b16:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b18:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b1a:	492c      	ldr	r1, [pc, #176]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 8010b1c:	0212      	lsls	r2, r2, #8
 8010b1e:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010b22:	432a      	orrs	r2, r5
 8010b24:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010b26:	2221      	movs	r2, #33	; 0x21
 8010b28:	3503      	adds	r5, #3
 8010b2a:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010b2c:	2500      	movs	r5, #0
 8010b2e:	3a01      	subs	r2, #1
 8010b30:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010b34:	2a00      	cmp	r2, #0
 8010b36:	d000      	beq.n	8010b3a <HAL_DMA_IRQHandler+0x90a>
 8010b38:	e4bc      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b3a:	2280      	movs	r2, #128	; 0x80
 8010b3c:	6809      	ldr	r1, [r1, #0]
 8010b3e:	01d2      	lsls	r2, r2, #7
 8010b40:	e53f      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b42:	2280      	movs	r2, #128	; 0x80
 8010b44:	01d2      	lsls	r2, r2, #7
 8010b46:	e524      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
 8010b48:	2280      	movs	r2, #128	; 0x80
 8010b4a:	01d2      	lsls	r2, r2, #7
 8010b4c:	e576      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b4e:	2380      	movs	r3, #128	; 0x80
 8010b50:	019b      	lsls	r3, r3, #6
 8010b52:	e661      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
 8010b54:	2380      	movs	r3, #128	; 0x80
 8010b56:	019b      	lsls	r3, r3, #6
 8010b58:	e5fb      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b5a:	2280      	movs	r2, #128	; 0x80
 8010b5c:	02d2      	lsls	r2, r2, #11
 8010b5e:	e518      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b60:	2380      	movs	r3, #128	; 0x80
 8010b62:	029b      	lsls	r3, r3, #10
 8010b64:	e5f5      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b66:	2280      	movs	r2, #128	; 0x80
 8010b68:	02d2      	lsls	r2, r2, #11
 8010b6a:	e567      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b6c:	2380      	movs	r3, #128	; 0x80
 8010b6e:	029b      	lsls	r3, r3, #10
 8010b70:	e652      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
 8010b72:	2380      	movs	r3, #128	; 0x80
 8010b74:	039b      	lsls	r3, r3, #14
 8010b76:	e64f      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
 8010b78:	2380      	movs	r3, #128	; 0x80
 8010b7a:	039b      	lsls	r3, r3, #14
 8010b7c:	e5e9      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b7e:	2280      	movs	r2, #128	; 0x80
 8010b80:	03d2      	lsls	r2, r2, #15
 8010b82:	e506      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
 8010b84:	2280      	movs	r2, #128	; 0x80
 8010b86:	03d2      	lsls	r2, r2, #15
 8010b88:	e558      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
 8010b8a:	2280      	movs	r2, #128	; 0x80
 8010b8c:	04d2      	lsls	r2, r2, #19
 8010b8e:	e555      	b.n	801063c <HAL_DMA_IRQHandler+0x40c>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b90:	2380      	movs	r3, #128	; 0x80
 8010b92:	049b      	lsls	r3, r3, #18
 8010b94:	e5dd      	b.n	8010752 <HAL_DMA_IRQHandler+0x522>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010b96:	2280      	movs	r2, #128	; 0x80
 8010b98:	04d2      	lsls	r2, r2, #19
 8010b9a:	e4fa      	b.n	8010592 <HAL_DMA_IRQHandler+0x362>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010b9c:	2380      	movs	r3, #128	; 0x80
 8010b9e:	049b      	lsls	r3, r3, #18
 8010ba0:	e63a      	b.n	8010818 <HAL_DMA_IRQHandler+0x5e8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ba2:	2208      	movs	r2, #8
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010ba4:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010ba6:	4909      	ldr	r1, [pc, #36]	; (8010bcc <HAL_DMA_IRQHandler+0x99c>)
 8010ba8:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010baa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010bac:	4302      	orrs	r2, r0
 8010bae:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010bb0:	2221      	movs	r2, #33	; 0x21
 8010bb2:	3003      	adds	r0, #3
 8010bb4:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	3a01      	subs	r2, #1
 8010bba:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010bbc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010bbe:	2a00      	cmp	r2, #0
 8010bc0:	d000      	beq.n	8010bc4 <HAL_DMA_IRQHandler+0x994>
 8010bc2:	e477      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010bc4:	0018      	movs	r0, r3
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	6809      	ldr	r1, [r1, #0]
 8010bca:	e4fa      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
 8010bcc:	40020400 	.word	0x40020400
 8010bd0:	40020000 	.word	0x40020000
 8010bd4:	40020080 	.word	0x40020080
 8010bd8:	4002006c 	.word	0x4002006c
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010bdc:	2208      	movs	r2, #8
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010bde:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010be0:	492c      	ldr	r1, [pc, #176]	; (8010c94 <HAL_DMA_IRQHandler+0xa64>)
 8010be2:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010be4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010be6:	432a      	orrs	r2, r5
 8010be8:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010bea:	2221      	movs	r2, #33	; 0x21
 8010bec:	3503      	adds	r5, #3
 8010bee:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010bf0:	2500      	movs	r5, #0
 8010bf2:	3a01      	subs	r2, #1
 8010bf4:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010bf6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010bf8:	2a00      	cmp	r2, #0
 8010bfa:	d000      	beq.n	8010bfe <HAL_DMA_IRQHandler+0x9ce>
 8010bfc:	e45a      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010bfe:	2204      	movs	r2, #4
 8010c00:	6809      	ldr	r1, [r1, #0]
 8010c02:	e481      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c04:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c06:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c08:	4922      	ldr	r1, [pc, #136]	; (8010c94 <HAL_DMA_IRQHandler+0xa64>)
 8010c0a:	0112      	lsls	r2, r2, #4
 8010c0c:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010c10:	432a      	orrs	r2, r5
 8010c12:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010c14:	2221      	movs	r2, #33	; 0x21
 8010c16:	3503      	adds	r5, #3
 8010c18:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010c1a:	2500      	movs	r5, #0
 8010c1c:	3a01      	subs	r2, #1
 8010c1e:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010c20:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c22:	2a00      	cmp	r2, #0
 8010c24:	d000      	beq.n	8010c28 <HAL_DMA_IRQHandler+0x9f8>
 8010c26:	e445      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c28:	2280      	movs	r2, #128	; 0x80
 8010c2a:	6809      	ldr	r1, [r1, #0]
 8010c2c:	00d2      	lsls	r2, r2, #3
 8010c2e:	e46b      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c30:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c32:	2001      	movs	r0, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c34:	4918      	ldr	r1, [pc, #96]	; (8010c98 <HAL_DMA_IRQHandler+0xa68>)
 8010c36:	0112      	lsls	r2, r2, #4
 8010c38:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010c3c:	4302      	orrs	r2, r0
 8010c3e:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010c40:	2221      	movs	r2, #33	; 0x21
 8010c42:	3003      	adds	r0, #3
 8010c44:	54a0      	strb	r0, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010c46:	2000      	movs	r0, #0
 8010c48:	3a01      	subs	r2, #1
 8010c4a:	54a0      	strb	r0, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010c4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c4e:	2a00      	cmp	r2, #0
 8010c50:	d000      	beq.n	8010c54 <HAL_DMA_IRQHandler+0xa24>
 8010c52:	e42f      	b.n	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c54:	2280      	movs	r2, #128	; 0x80
 8010c56:	0018      	movs	r0, r3
 8010c58:	6809      	ldr	r1, [r1, #0]
 8010c5a:	00d2      	lsls	r2, r2, #3
 8010c5c:	e4b1      	b.n	80105c2 <HAL_DMA_IRQHandler+0x392>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c5e:	2280      	movs	r2, #128	; 0x80
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c60:	2501      	movs	r5, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010c62:	490c      	ldr	r1, [pc, #48]	; (8010c94 <HAL_DMA_IRQHandler+0xa64>)
 8010c64:	0212      	lsls	r2, r2, #8
 8010c66:	604a      	str	r2, [r1, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010c68:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010c6a:	432a      	orrs	r2, r5
 8010c6c:	6362      	str	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010c6e:	2221      	movs	r2, #33	; 0x21
 8010c70:	3503      	adds	r5, #3
 8010c72:	54a5      	strb	r5, [r4, r2]
      __HAL_UNLOCK(hdma); 
 8010c74:	2500      	movs	r5, #0
 8010c76:	3a01      	subs	r2, #1
 8010c78:	54a5      	strb	r5, [r4, r2]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010c7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010c7c:	2a00      	cmp	r2, #0
 8010c7e:	d001      	beq.n	8010c84 <HAL_DMA_IRQHandler+0xa54>
 8010c80:	f7ff fc18 	bl	80104b4 <HAL_DMA_IRQHandler+0x284>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c84:	2280      	movs	r2, #128	; 0x80
 8010c86:	6809      	ldr	r1, [r1, #0]
 8010c88:	01d2      	lsls	r2, r2, #7
 8010c8a:	e43d      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
 8010c8c:	2280      	movs	r2, #128	; 0x80
 8010c8e:	6809      	ldr	r1, [r1, #0]
 8010c90:	02d2      	lsls	r2, r2, #11
 8010c92:	e439      	b.n	8010508 <HAL_DMA_IRQHandler+0x2d8>
 8010c94:	40020000 	.word	0x40020000
 8010c98:	40020400 	.word	0x40020400

08010c9c <HAL_FLASH_Unlock>:
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8010c9c:	4b05      	ldr	r3, [pc, #20]	; (8010cb4 <HAL_FLASH_Unlock+0x18>)
 8010c9e:	691a      	ldr	r2, [r3, #16]
 8010ca0:	0612      	lsls	r2, r2, #24
 8010ca2:	d505      	bpl.n	8010cb0 <HAL_FLASH_Unlock+0x14>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8010ca4:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010ca6:	4a04      	ldr	r2, [pc, #16]	; (8010cb8 <HAL_FLASH_Unlock+0x1c>)
 8010ca8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010caa:	4a04      	ldr	r2, [pc, #16]	; (8010cbc <HAL_FLASH_Unlock+0x20>)
 8010cac:	605a      	str	r2, [r3, #4]
}
 8010cae:	4770      	bx	lr
    return HAL_ERROR;
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	e7fc      	b.n	8010cae <HAL_FLASH_Unlock+0x12>
 8010cb4:	40022000 	.word	0x40022000
 8010cb8:	45670123 	.word	0x45670123
 8010cbc:	cdef89ab 	.word	0xcdef89ab

08010cc0 <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010cc0:	2180      	movs	r1, #128	; 0x80
 8010cc2:	4a03      	ldr	r2, [pc, #12]	; (8010cd0 <HAL_FLASH_Lock+0x10>)
  

  return HAL_OK;  
}
 8010cc4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8010cc6:	6913      	ldr	r3, [r2, #16]
 8010cc8:	430b      	orrs	r3, r1
 8010cca:	6113      	str	r3, [r2, #16]
}
 8010ccc:	4770      	bx	lr
 8010cce:	46c0      	nop			; (mov r8, r8)
 8010cd0:	40022000 	.word	0x40022000

08010cd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operationtimeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8010cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd6:	0004      	movs	r4, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8010cd8:	f7fe fd6c 	bl	800f7b4 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010cdc:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8010cde:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010ce0:	4d1c      	ldr	r5, [pc, #112]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
 8010ce2:	e001      	b.n	8010ce8 <FLASH_WaitForLastOperation+0x14>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8010ce4:	1c63      	adds	r3, r4, #1
 8010ce6:	d10f      	bne.n	8010d08 <FLASH_WaitForLastOperation+0x34>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8010ce8:	68eb      	ldr	r3, [r5, #12]
 8010cea:	421e      	tst	r6, r3
 8010cec:	d1fa      	bne.n	8010ce4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8010cee:	2320      	movs	r3, #32
 8010cf0:	68ea      	ldr	r2, [r5, #12]
 8010cf2:	4213      	tst	r3, r2
 8010cf4:	d111      	bne.n	8010d1a <FLASH_WaitForLastOperation+0x46>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010cf6:	4b17      	ldr	r3, [pc, #92]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
 8010cf8:	68da      	ldr	r2, [r3, #12]
 8010cfa:	06d2      	lsls	r2, r2, #27
 8010cfc:	d412      	bmi.n	8010d24 <FLASH_WaitForLastOperation+0x50>
 8010cfe:	68db      	ldr	r3, [r3, #12]
    FLASH_SetErrorCode();
    return HAL_ERROR;
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010d00:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d02:	075b      	lsls	r3, r3, #29
 8010d04:	d40e      	bmi.n	8010d24 <FLASH_WaitForLastOperation+0x50>
  
}
 8010d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010d08:	2c00      	cmp	r4, #0
 8010d0a:	d004      	beq.n	8010d16 <FLASH_WaitForLastOperation+0x42>
 8010d0c:	f7fe fd52 	bl	800f7b4 <HAL_GetTick>
 8010d10:	1bc0      	subs	r0, r0, r7
 8010d12:	42a0      	cmp	r0, r4
 8010d14:	d9e8      	bls.n	8010ce8 <FLASH_WaitForLastOperation+0x14>
        return HAL_TIMEOUT;
 8010d16:	2003      	movs	r0, #3
 8010d18:	e7f5      	b.n	8010d06 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010d1a:	60eb      	str	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d1c:	4b0d      	ldr	r3, [pc, #52]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
 8010d1e:	68da      	ldr	r2, [r3, #12]
 8010d20:	06d2      	lsls	r2, r2, #27
 8010d22:	d5ec      	bpl.n	8010cfe <FLASH_WaitForLastOperation+0x2a>
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010d24:	4b0b      	ldr	r3, [pc, #44]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	06db      	lsls	r3, r3, #27
 8010d2a:	d504      	bpl.n	8010d36 <FLASH_WaitForLastOperation+0x62>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010d2c:	2102      	movs	r1, #2
 8010d2e:	4a0a      	ldr	r2, [pc, #40]	; (8010d58 <FLASH_WaitForLastOperation+0x84>)
 8010d30:	69d3      	ldr	r3, [r2, #28]
 8010d32:	430b      	orrs	r3, r1
 8010d34:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8010d36:	4b07      	ldr	r3, [pc, #28]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	075b      	lsls	r3, r3, #29
 8010d3c:	d504      	bpl.n	8010d48 <FLASH_WaitForLastOperation+0x74>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8010d3e:	2101      	movs	r1, #1
 8010d40:	4a05      	ldr	r2, [pc, #20]	; (8010d58 <FLASH_WaitForLastOperation+0x84>)
 8010d42:	69d3      	ldr	r3, [r2, #28]
 8010d44:	430b      	orrs	r3, r1
 8010d46:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010d48:	2214      	movs	r2, #20
 8010d4a:	4b02      	ldr	r3, [pc, #8]	; (8010d54 <FLASH_WaitForLastOperation+0x80>)
    return HAL_ERROR;
 8010d4c:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8010d4e:	60da      	str	r2, [r3, #12]
}  
 8010d50:	e7d9      	b.n	8010d06 <FLASH_WaitForLastOperation+0x32>
 8010d52:	46c0      	nop			; (mov r8, r8)
 8010d54:	40022000 	.word	0x40022000
 8010d58:	20006d80 	.word	0x20006d80

08010d5c <HAL_FLASH_Program>:
{
 8010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5e:	464e      	mov	r6, r9
 8010d60:	4657      	mov	r7, sl
 8010d62:	46de      	mov	lr, fp
 8010d64:	4645      	mov	r5, r8
 8010d66:	b5e0      	push	{r5, r6, r7, lr}
 8010d68:	469a      	mov	sl, r3
 8010d6a:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8010d6c:	4b2a      	ldr	r3, [pc, #168]	; (8010e18 <HAL_FLASH_Program+0xbc>)
{
 8010d6e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(&pFlash);
 8010d70:	4699      	mov	r9, r3
 8010d72:	7e1b      	ldrb	r3, [r3, #24]
{
 8010d74:	0004      	movs	r4, r0
 8010d76:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d048      	beq.n	8010e0e <HAL_FLASH_Program+0xb2>
 8010d7c:	2501      	movs	r5, #1
 8010d7e:	464b      	mov	r3, r9
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010d80:	4826      	ldr	r0, [pc, #152]	; (8010e1c <HAL_FLASH_Program+0xc0>)
  __HAL_LOCK(&pFlash);
 8010d82:	761d      	strb	r5, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010d84:	f7ff ffa6 	bl	8010cd4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	d136      	bne.n	8010dfa <HAL_FLASH_Program+0x9e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010d8c:	2c01      	cmp	r4, #1
 8010d8e:	d040      	beq.n	8010e12 <HAL_FLASH_Program+0xb6>
      nbiterations = 4;
 8010d90:	3c02      	subs	r4, #2
 8010d92:	4263      	negs	r3, r4
 8010d94:	415c      	adcs	r4, r3
 8010d96:	2304      	movs	r3, #4
 8010d98:	4264      	negs	r4, r4
 8010d9a:	43ac      	bics	r4, r5
 8010d9c:	46a0      	mov	r8, r4
 8010d9e:	469c      	mov	ip, r3
 8010da0:	44e0      	add	r8, ip
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010da2:	2300      	movs	r3, #0
      nbiterations = 4;
 8010da4:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010da6:	469b      	mov	fp, r3
 8010da8:	e018      	b.n	8010ddc <HAL_FLASH_Program+0x80>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010daa:	4653      	mov	r3, sl
 8010dac:	40d3      	lsrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010dae:	464a      	mov	r2, r9
 8010db0:	4659      	mov	r1, fp
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010db2:	2701      	movs	r7, #1
 8010db4:	4c1a      	ldr	r4, [pc, #104]	; (8010e20 <HAL_FLASH_Program+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010db6:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010db8:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010dba:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8010dbc:	433a      	orrs	r2, r7
 8010dbe:	6122      	str	r2, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dc0:	4816      	ldr	r0, [pc, #88]	; (8010e1c <HAL_FLASH_Program+0xc0>)
  *(__IO uint16_t*)Address = Data;
 8010dc2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010dc4:	f7ff ff86 	bl	8010cd4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8010dc8:	6923      	ldr	r3, [r4, #16]
 8010dca:	43bb      	bics	r3, r7
 8010dcc:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d113      	bne.n	8010dfa <HAL_FLASH_Program+0x9e>
    for (index = 0; index < nbiterations; index++)
 8010dd2:	3501      	adds	r5, #1
 8010dd4:	b2eb      	uxtb	r3, r5
 8010dd6:	3602      	adds	r6, #2
 8010dd8:	4598      	cmp	r8, r3
 8010dda:	d90e      	bls.n	8010dfa <HAL_FLASH_Program+0x9e>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8010ddc:	2220      	movs	r2, #32
 8010dde:	012b      	lsls	r3, r5, #4
 8010de0:	4252      	negs	r2, r2
 8010de2:	189a      	adds	r2, r3, r2
 8010de4:	d5e1      	bpl.n	8010daa <HAL_FLASH_Program+0x4e>
 8010de6:	2220      	movs	r2, #32
 8010de8:	4651      	mov	r1, sl
 8010dea:	1ad2      	subs	r2, r2, r3
 8010dec:	4091      	lsls	r1, r2
 8010dee:	000a      	movs	r2, r1
 8010df0:	9901      	ldr	r1, [sp, #4]
 8010df2:	40d9      	lsrs	r1, r3
 8010df4:	000b      	movs	r3, r1
 8010df6:	4313      	orrs	r3, r2
 8010df8:	e7d9      	b.n	8010dae <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	464a      	mov	r2, r9
 8010dfe:	7613      	strb	r3, [r2, #24]
}
 8010e00:	b003      	add	sp, #12
 8010e02:	bcf0      	pop	{r4, r5, r6, r7}
 8010e04:	46bb      	mov	fp, r7
 8010e06:	46b2      	mov	sl, r6
 8010e08:	46a9      	mov	r9, r5
 8010e0a:	46a0      	mov	r8, r4
 8010e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8010e0e:	2002      	movs	r0, #2
 8010e10:	e7f6      	b.n	8010e00 <HAL_FLASH_Program+0xa4>
      nbiterations = 1;
 8010e12:	2301      	movs	r3, #1
 8010e14:	4698      	mov	r8, r3
 8010e16:	e7c4      	b.n	8010da2 <HAL_FLASH_Program+0x46>
 8010e18:	20006d80 	.word	0x20006d80
 8010e1c:	0000c350 	.word	0x0000c350
 8010e20:	40022000 	.word	0x40022000

08010e24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8010e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e26:	4646      	mov	r6, r8
 8010e28:	464f      	mov	r7, r9
 8010e2a:	46d6      	mov	lr, sl
 8010e2c:	b5c0      	push	{r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010e2e:	4f30      	ldr	r7, [pc, #192]	; (8010ef0 <HAL_FLASHEx_Erase+0xcc>)
{
 8010e30:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 8010e32:	7e3b      	ldrb	r3, [r7, #24]
{
 8010e34:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8010e36:	2b01      	cmp	r3, #1
 8010e38:	d057      	beq.n	8010eea <HAL_FLASHEx_Erase+0xc6>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	763b      	strb	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010e3e:	6803      	ldr	r3, [r0, #0]
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010e40:	482c      	ldr	r0, [pc, #176]	; (8010ef4 <HAL_FLASHEx_Erase+0xd0>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d034      	beq.n	8010eb0 <HAL_FLASHEx_Erase+0x8c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010e46:	f7ff ff45 	bl	8010cd4 <FLASH_WaitForLastOperation>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d134      	bne.n	8010eb8 <HAL_FLASHEx_Erase+0x94>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	4642      	mov	r2, r8
 8010e52:	425b      	negs	r3, r3
 8010e54:	6013      	str	r3, [r2, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010e56:	68b3      	ldr	r3, [r6, #8]
        for(address = pEraseInit->PageAddress;
 8010e58:	6875      	ldr	r5, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010e5a:	02db      	lsls	r3, r3, #11
 8010e5c:	195b      	adds	r3, r3, r5
        for(address = pEraseInit->PageAddress;
 8010e5e:	429d      	cmp	r5, r3
 8010e60:	d22a      	bcs.n	8010eb8 <HAL_FLASHEx_Erase+0x94>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e62:	2300      	movs	r3, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e64:	4c24      	ldr	r4, [pc, #144]	; (8010ef8 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e66:	4699      	mov	r9, r3
 8010e68:	e00a      	b.n	8010e80 <HAL_FLASHEx_Erase+0x5c>
            address += FLASH_PAGE_SIZE)
 8010e6a:	2380      	movs	r3, #128	; 0x80
 8010e6c:	011b      	lsls	r3, r3, #4
 8010e6e:	469c      	mov	ip, r3
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010e70:	6872      	ldr	r2, [r6, #4]
            address += FLASH_PAGE_SIZE)
 8010e72:	4465      	add	r5, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8010e74:	4694      	mov	ip, r2
 8010e76:	68b3      	ldr	r3, [r6, #8]
 8010e78:	02db      	lsls	r3, r3, #11
 8010e7a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8010e7c:	42ab      	cmp	r3, r5
 8010e7e:	d91c      	bls.n	8010eba <HAL_FLASHEx_Erase+0x96>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e80:	2202      	movs	r2, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e82:	464b      	mov	r3, r9
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e84:	4692      	mov	sl, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010e86:	61fb      	str	r3, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e88:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e8a:	481a      	ldr	r0, [pc, #104]	; (8010ef4 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010e90:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010e92:	6923      	ldr	r3, [r4, #16]
 8010e94:	323e      	adds	r2, #62	; 0x3e
 8010e96:	4313      	orrs	r3, r2
 8010e98:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010e9a:	f7ff ff1b 	bl	8010cd4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8010e9e:	4652      	mov	r2, sl
 8010ea0:	6923      	ldr	r3, [r4, #16]
 8010ea2:	4393      	bics	r3, r2
 8010ea4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d0df      	beq.n	8010e6a <HAL_FLASHEx_Erase+0x46>
            *PageError = address;
 8010eaa:	4643      	mov	r3, r8
 8010eac:	601d      	str	r5, [r3, #0]
            break;
 8010eae:	e004      	b.n	8010eba <HAL_FLASHEx_Erase+0x96>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8010eb0:	f7ff ff10 	bl	8010cd4 <FLASH_WaitForLastOperation>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d007      	beq.n	8010ec8 <HAL_FLASHEx_Erase+0xa4>
  HAL_StatusTypeDef status = HAL_ERROR;
 8010eb8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8010eba:	2300      	movs	r3, #0
 8010ebc:	763b      	strb	r3, [r7, #24]
}
 8010ebe:	bce0      	pop	{r5, r6, r7}
 8010ec0:	46ba      	mov	sl, r7
 8010ec2:	46b1      	mov	r9, r6
 8010ec4:	46a8      	mov	r8, r5
 8010ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ec8:	2504      	movs	r5, #4
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010eca:	2240      	movs	r2, #64	; 0x40
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ecc:	4c0a      	ldr	r4, [pc, #40]	; (8010ef8 <HAL_FLASHEx_Erase+0xd4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010ece:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ed0:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ed2:	4808      	ldr	r0, [pc, #32]	; (8010ef4 <HAL_FLASHEx_Erase+0xd0>)
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8010ed4:	432b      	orrs	r3, r5
 8010ed6:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010ed8:	6923      	ldr	r3, [r4, #16]
 8010eda:	4313      	orrs	r3, r2
 8010edc:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010ede:	f7ff fef9 	bl	8010cd4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8010ee2:	6923      	ldr	r3, [r4, #16]
 8010ee4:	43ab      	bics	r3, r5
 8010ee6:	6123      	str	r3, [r4, #16]
 8010ee8:	e7e7      	b.n	8010eba <HAL_FLASHEx_Erase+0x96>
  __HAL_LOCK(&pFlash);
 8010eea:	2002      	movs	r0, #2
 8010eec:	e7e7      	b.n	8010ebe <HAL_FLASHEx_Erase+0x9a>
 8010eee:	46c0      	nop			; (mov r8, r8)
 8010ef0:	20006d80 	.word	0x20006d80
 8010ef4:	0000c350 	.word	0x0000c350
 8010ef8:	40022000 	.word	0x40022000

08010efc <FLASH_PageErase>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010efc:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010efe:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010f00:	4b05      	ldr	r3, [pc, #20]	; (8010f18 <FLASH_PageErase+0x1c>)
 8010f02:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8010f04:	4b05      	ldr	r3, [pc, #20]	; (8010f1c <FLASH_PageErase+0x20>)
 8010f06:	691a      	ldr	r2, [r3, #16]
 8010f08:	430a      	orrs	r2, r1
 8010f0a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8010f0c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8010f0e:	691a      	ldr	r2, [r3, #16]
 8010f10:	313e      	adds	r1, #62	; 0x3e
 8010f12:	430a      	orrs	r2, r1
 8010f14:	611a      	str	r2, [r3, #16]
}
 8010f16:	4770      	bx	lr
 8010f18:	20006d80 	.word	0x20006d80
 8010f1c:	40022000 	.word	0x40022000

08010f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8010f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f22:	46de      	mov	lr, fp
 8010f24:	4657      	mov	r7, sl
 8010f26:	464e      	mov	r6, r9
 8010f28:	4645      	mov	r5, r8
 8010f2a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8010f2c:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00;
 8010f2e:	2300      	movs	r3, #0
{ 
 8010f30:	b085      	sub	sp, #20
  while ((GPIO_Init->Pin) >> position)
 8010f32:	2c00      	cmp	r4, #0
 8010f34:	d100      	bne.n	8010f38 <HAL_GPIO_Init+0x18>
 8010f36:	e08b      	b.n	8011050 <HAL_GPIO_Init+0x130>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f38:	4a7d      	ldr	r2, [pc, #500]	; (8011130 <HAL_GPIO_Init+0x210>)
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010f3a:	468a      	mov	sl, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f3c:	4691      	mov	r9, r2
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8010f3e:	2201      	movs	r2, #1
 8010f40:	0021      	movs	r1, r4
 8010f42:	409a      	lsls	r2, r3
 8010f44:	4011      	ands	r1, r2
 8010f46:	9101      	str	r1, [sp, #4]
    if(iocurrent)
 8010f48:	4214      	tst	r4, r2
 8010f4a:	d07c      	beq.n	8011046 <HAL_GPIO_Init+0x126>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8010f4c:	4652      	mov	r2, sl
 8010f4e:	6852      	ldr	r2, [r2, #4]
 8010f50:	2510      	movs	r5, #16
 8010f52:	0011      	movs	r1, r2
 8010f54:	43a9      	bics	r1, r5
 8010f56:	468c      	mov	ip, r1
 8010f58:	2902      	cmp	r1, #2
 8010f5a:	d100      	bne.n	8010f5e <HAL_GPIO_Init+0x3e>
 8010f5c:	e07f      	b.n	801105e <HAL_GPIO_Init+0x13e>
      temp = GPIOx->MODER;
 8010f5e:	6801      	ldr	r1, [r0, #0]
 8010f60:	005d      	lsls	r5, r3, #1
 8010f62:	468b      	mov	fp, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010f64:	2103      	movs	r1, #3
 8010f66:	40a9      	lsls	r1, r5
 8010f68:	4688      	mov	r8, r1
 8010f6a:	465e      	mov	r6, fp
 8010f6c:	4647      	mov	r7, r8
 8010f6e:	43be      	bics	r6, r7
 8010f70:	46b3      	mov	fp, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010f72:	2603      	movs	r6, #3
 8010f74:	4016      	ands	r6, r2
 8010f76:	40ae      	lsls	r6, r5
 8010f78:	46b0      	mov	r8, r6
 8010f7a:	465e      	mov	r6, fp
 8010f7c:	4647      	mov	r7, r8
 8010f7e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8010f80:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010f82:	2601      	movs	r6, #1
 8010f84:	4276      	negs	r6, r6
 8010f86:	46b0      	mov	r8, r6
 8010f88:	44c4      	add	ip, r8
 8010f8a:	4666      	mov	r6, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8010f8c:	43c9      	mvns	r1, r1
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8010f8e:	2e01      	cmp	r6, #1
 8010f90:	d800      	bhi.n	8010f94 <HAL_GPIO_Init+0x74>
 8010f92:	e08d      	b.n	80110b0 <HAL_GPIO_Init+0x190>
      temp = GPIOx->PUPDR;
 8010f94:	68c6      	ldr	r6, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8010f96:	4031      	ands	r1, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8010f98:	4656      	mov	r6, sl
 8010f9a:	68b6      	ldr	r6, [r6, #8]
 8010f9c:	40ae      	lsls	r6, r5
 8010f9e:	4331      	orrs	r1, r6
      GPIOx->PUPDR = temp;
 8010fa0:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8010fa2:	2180      	movs	r1, #128	; 0x80
 8010fa4:	0549      	lsls	r1, r1, #21
 8010fa6:	420a      	tst	r2, r1
 8010fa8:	d04d      	beq.n	8011046 <HAL_GPIO_Init+0x126>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010faa:	4649      	mov	r1, r9
 8010fac:	2601      	movs	r6, #1
 8010fae:	464d      	mov	r5, r9
 8010fb0:	6989      	ldr	r1, [r1, #24]
 8010fb2:	4331      	orrs	r1, r6
 8010fb4:	61a9      	str	r1, [r5, #24]
 8010fb6:	69a9      	ldr	r1, [r5, #24]
 8010fb8:	4d5e      	ldr	r5, [pc, #376]	; (8011134 <HAL_GPIO_Init+0x214>)
 8010fba:	4031      	ands	r1, r6
 8010fbc:	46ac      	mov	ip, r5
 8010fbe:	9103      	str	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fc0:	3602      	adds	r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010fc2:	9903      	ldr	r1, [sp, #12]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fc4:	401e      	ands	r6, r3
        temp = SYSCFG->EXTICR[position >> 2];
 8010fc6:	0899      	lsrs	r1, r3, #2
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fc8:	00b6      	lsls	r6, r6, #2
 8010fca:	0089      	lsls	r1, r1, #2
 8010fcc:	4461      	add	r1, ip
 8010fce:	46b4      	mov	ip, r6
 8010fd0:	260f      	movs	r6, #15
 8010fd2:	4667      	mov	r7, ip
 8010fd4:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8010fd6:	688d      	ldr	r5, [r1, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010fd8:	43b5      	bics	r5, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010fda:	2690      	movs	r6, #144	; 0x90
 8010fdc:	05f6      	lsls	r6, r6, #23
 8010fde:	42b0      	cmp	r0, r6
 8010fe0:	d015      	beq.n	801100e <HAL_GPIO_Init+0xee>
 8010fe2:	4e55      	ldr	r6, [pc, #340]	; (8011138 <HAL_GPIO_Init+0x218>)
 8010fe4:	42b0      	cmp	r0, r6
 8010fe6:	d100      	bne.n	8010fea <HAL_GPIO_Init+0xca>
 8010fe8:	e09d      	b.n	8011126 <HAL_GPIO_Init+0x206>
 8010fea:	4e54      	ldr	r6, [pc, #336]	; (801113c <HAL_GPIO_Init+0x21c>)
 8010fec:	46b0      	mov	r8, r6
 8010fee:	2602      	movs	r6, #2
 8010ff0:	4540      	cmp	r0, r8
 8010ff2:	d009      	beq.n	8011008 <HAL_GPIO_Init+0xe8>
 8010ff4:	4e52      	ldr	r6, [pc, #328]	; (8011140 <HAL_GPIO_Init+0x220>)
 8010ff6:	42b0      	cmp	r0, r6
 8010ff8:	d100      	bne.n	8010ffc <HAL_GPIO_Init+0xdc>
 8010ffa:	e090      	b.n	801111e <HAL_GPIO_Init+0x1fe>
 8010ffc:	4e51      	ldr	r6, [pc, #324]	; (8011144 <HAL_GPIO_Init+0x224>)
 8010ffe:	46b0      	mov	r8, r6
 8011000:	2604      	movs	r6, #4
 8011002:	4540      	cmp	r0, r8
 8011004:	d000      	beq.n	8011008 <HAL_GPIO_Init+0xe8>
 8011006:	2605      	movs	r6, #5
 8011008:	4667      	mov	r7, ip
 801100a:	40be      	lsls	r6, r7
 801100c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 801100e:	608d      	str	r5, [r1, #8]
        temp = EXTI->IMR;
 8011010:	494d      	ldr	r1, [pc, #308]	; (8011148 <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011012:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->IMR;
 8011014:	6809      	ldr	r1, [r1, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011016:	43ed      	mvns	r5, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011018:	03d6      	lsls	r6, r2, #15
 801101a:	d467      	bmi.n	80110ec <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 801101c:	4e4a      	ldr	r6, [pc, #296]	; (8011148 <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 801101e:	4029      	ands	r1, r5
        EXTI->IMR = temp;
 8011020:	6031      	str	r1, [r6, #0]

        temp = EXTI->EMR;
 8011022:	6871      	ldr	r1, [r6, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011024:	0396      	lsls	r6, r2, #14
 8011026:	d468      	bmi.n	80110fa <HAL_GPIO_Init+0x1da>
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011028:	4e47      	ldr	r6, [pc, #284]	; (8011148 <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 801102a:	4029      	ands	r1, r5
        EXTI->EMR = temp;
 801102c:	6071      	str	r1, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801102e:	68b1      	ldr	r1, [r6, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011030:	02d6      	lsls	r6, r2, #11
 8011032:	d469      	bmi.n	8011108 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011034:	4e44      	ldr	r6, [pc, #272]	; (8011148 <HAL_GPIO_Init+0x228>)
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011036:	4029      	ands	r1, r5
        EXTI->RTSR = temp;
 8011038:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 801103a:	68f1      	ldr	r1, [r6, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801103c:	0292      	lsls	r2, r2, #10
 801103e:	d46a      	bmi.n	8011116 <HAL_GPIO_Init+0x1f6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011040:	4029      	ands	r1, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011042:	4a41      	ldr	r2, [pc, #260]	; (8011148 <HAL_GPIO_Init+0x228>)
 8011044:	60d1      	str	r1, [r2, #12]
  while ((GPIO_Init->Pin) >> position)
 8011046:	0022      	movs	r2, r4
      }
    }
    
    position++;
 8011048:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801104a:	40da      	lsrs	r2, r3
 801104c:	d000      	beq.n	8011050 <HAL_GPIO_Init+0x130>
 801104e:	e776      	b.n	8010f3e <HAL_GPIO_Init+0x1e>
  } 
}
 8011050:	b005      	add	sp, #20
 8011052:	bcf0      	pop	{r4, r5, r6, r7}
 8011054:	46bb      	mov	fp, r7
 8011056:	46b2      	mov	sl, r6
 8011058:	46a9      	mov	r9, r5
 801105a:	46a0      	mov	r8, r4
 801105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->AFR[position >> 3];
 801105e:	08d9      	lsrs	r1, r3, #3
 8011060:	0089      	lsls	r1, r1, #2
 8011062:	1841      	adds	r1, r0, r1
 8011064:	6a0d      	ldr	r5, [r1, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011066:	260f      	movs	r6, #15
        temp = GPIOx->AFR[position >> 3];
 8011068:	46ac      	mov	ip, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 801106a:	2507      	movs	r5, #7
 801106c:	401d      	ands	r5, r3
 801106e:	00ad      	lsls	r5, r5, #2
 8011070:	40ae      	lsls	r6, r5
 8011072:	46b0      	mov	r8, r6
 8011074:	4666      	mov	r6, ip
 8011076:	4647      	mov	r7, r8
 8011078:	43be      	bics	r6, r7
 801107a:	46b4      	mov	ip, r6
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801107c:	4656      	mov	r6, sl
 801107e:	6936      	ldr	r6, [r6, #16]
 8011080:	40ae      	lsls	r6, r5
 8011082:	0035      	movs	r5, r6
 8011084:	4666      	mov	r6, ip
 8011086:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3] = temp;
 8011088:	620d      	str	r5, [r1, #32]
      temp = GPIOx->MODER;
 801108a:	6801      	ldr	r1, [r0, #0]
 801108c:	005d      	lsls	r5, r3, #1
 801108e:	4688      	mov	r8, r1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011090:	2103      	movs	r1, #3
 8011092:	40a9      	lsls	r1, r5
 8011094:	468b      	mov	fp, r1
 8011096:	4646      	mov	r6, r8
 8011098:	465f      	mov	r7, fp
 801109a:	43be      	bics	r6, r7
 801109c:	46b0      	mov	r8, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801109e:	2603      	movs	r6, #3
 80110a0:	4016      	ands	r6, r2
 80110a2:	40ae      	lsls	r6, r5
 80110a4:	46b4      	mov	ip, r6
 80110a6:	4646      	mov	r6, r8
 80110a8:	4667      	mov	r7, ip
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80110aa:	43c9      	mvns	r1, r1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80110ac:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80110ae:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80110b0:	6886      	ldr	r6, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80110b2:	400e      	ands	r6, r1
 80110b4:	46b0      	mov	r8, r6
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80110b6:	4656      	mov	r6, sl
 80110b8:	68f6      	ldr	r6, [r6, #12]
 80110ba:	40ae      	lsls	r6, r5
 80110bc:	46b4      	mov	ip, r6
 80110be:	4646      	mov	r6, r8
 80110c0:	4667      	mov	r7, ip
 80110c2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80110c4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80110c6:	6846      	ldr	r6, [r0, #4]
 80110c8:	46b4      	mov	ip, r6
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80110ca:	2601      	movs	r6, #1
 80110cc:	409e      	lsls	r6, r3
 80110ce:	46b0      	mov	r8, r6
 80110d0:	4666      	mov	r6, ip
 80110d2:	4647      	mov	r7, r8
 80110d4:	43be      	bics	r6, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80110d6:	2701      	movs	r7, #1
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80110d8:	46b0      	mov	r8, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80110da:	0916      	lsrs	r6, r2, #4
 80110dc:	403e      	ands	r6, r7
 80110de:	409e      	lsls	r6, r3
 80110e0:	46b4      	mov	ip, r6
 80110e2:	4646      	mov	r6, r8
 80110e4:	4667      	mov	r7, ip
 80110e6:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80110e8:	6046      	str	r6, [r0, #4]
 80110ea:	e753      	b.n	8010f94 <HAL_GPIO_Init+0x74>
          SET_BIT(temp, iocurrent); 
 80110ec:	9e01      	ldr	r6, [sp, #4]
 80110ee:	4331      	orrs	r1, r6
        EXTI->IMR = temp;
 80110f0:	4e15      	ldr	r6, [pc, #84]	; (8011148 <HAL_GPIO_Init+0x228>)
 80110f2:	6031      	str	r1, [r6, #0]
        temp = EXTI->EMR;
 80110f4:	6871      	ldr	r1, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80110f6:	0396      	lsls	r6, r2, #14
 80110f8:	d596      	bpl.n	8011028 <HAL_GPIO_Init+0x108>
          SET_BIT(temp, iocurrent); 
 80110fa:	9e01      	ldr	r6, [sp, #4]
 80110fc:	4331      	orrs	r1, r6
        EXTI->EMR = temp;
 80110fe:	4e12      	ldr	r6, [pc, #72]	; (8011148 <HAL_GPIO_Init+0x228>)
 8011100:	6071      	str	r1, [r6, #4]
        temp = EXTI->RTSR;
 8011102:	68b1      	ldr	r1, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011104:	02d6      	lsls	r6, r2, #11
 8011106:	d595      	bpl.n	8011034 <HAL_GPIO_Init+0x114>
          SET_BIT(temp, iocurrent); 
 8011108:	9e01      	ldr	r6, [sp, #4]
 801110a:	4331      	orrs	r1, r6
        EXTI->RTSR = temp;
 801110c:	4e0e      	ldr	r6, [pc, #56]	; (8011148 <HAL_GPIO_Init+0x228>)
 801110e:	60b1      	str	r1, [r6, #8]
        temp = EXTI->FTSR;
 8011110:	68f1      	ldr	r1, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011112:	0292      	lsls	r2, r2, #10
 8011114:	d594      	bpl.n	8011040 <HAL_GPIO_Init+0x120>
          SET_BIT(temp, iocurrent); 
 8011116:	9a01      	ldr	r2, [sp, #4]
 8011118:	430a      	orrs	r2, r1
 801111a:	0011      	movs	r1, r2
 801111c:	e791      	b.n	8011042 <HAL_GPIO_Init+0x122>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801111e:	2603      	movs	r6, #3
 8011120:	40be      	lsls	r6, r7
 8011122:	4335      	orrs	r5, r6
 8011124:	e773      	b.n	801100e <HAL_GPIO_Init+0xee>
 8011126:	2601      	movs	r6, #1
 8011128:	40be      	lsls	r6, r7
 801112a:	4335      	orrs	r5, r6
 801112c:	e76f      	b.n	801100e <HAL_GPIO_Init+0xee>
 801112e:	46c0      	nop			; (mov r8, r8)
 8011130:	40021000 	.word	0x40021000
 8011134:	40010000 	.word	0x40010000
 8011138:	48000400 	.word	0x48000400
 801113c:	48000800 	.word	0x48000800
 8011140:	48000c00 	.word	0x48000c00
 8011144:	48001000 	.word	0x48001000
 8011148:	40010400 	.word	0x40010400

0801114c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801114e:	46de      	mov	lr, fp
 8011150:	4657      	mov	r7, sl
 8011152:	464e      	mov	r6, r9
 8011154:	4645      	mov	r5, r8
 8011156:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00;
 8011158:	2300      	movs	r3, #0
{
 801115a:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 801115c:	2900      	cmp	r1, #0
 801115e:	d069      	beq.n	8011234 <HAL_GPIO_DeInit+0xe8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011160:	2201      	movs	r2, #1
 8011162:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011164:	3202      	adds	r2, #2
 8011166:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011168:	320c      	adds	r2, #12
 801116a:	4691      	mov	r9, r2
 801116c:	e025      	b.n	80111ba <HAL_GPIO_DeInit+0x6e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801116e:	4f3d      	ldr	r7, [pc, #244]	; (8011264 <HAL_GPIO_DeInit+0x118>)
 8011170:	42b8      	cmp	r0, r7
 8011172:	d066      	beq.n	8011242 <HAL_GPIO_DeInit+0xf6>
 8011174:	4f3c      	ldr	r7, [pc, #240]	; (8011268 <HAL_GPIO_DeInit+0x11c>)
 8011176:	42b8      	cmp	r0, r7
 8011178:	d067      	beq.n	801124a <HAL_GPIO_DeInit+0xfe>
 801117a:	4f3c      	ldr	r7, [pc, #240]	; (801126c <HAL_GPIO_DeInit+0x120>)
 801117c:	42b8      	cmp	r0, r7
 801117e:	d068      	beq.n	8011252 <HAL_GPIO_DeInit+0x106>
 8011180:	4f3b      	ldr	r7, [pc, #236]	; (8011270 <HAL_GPIO_DeInit+0x124>)
 8011182:	42b8      	cmp	r0, r7
 8011184:	d069      	beq.n	801125a <HAL_GPIO_DeInit+0x10e>
 8011186:	2705      	movs	r7, #5
 8011188:	40a7      	lsls	r7, r4
 801118a:	003c      	movs	r4, r7
 801118c:	42a6      	cmp	r6, r4
 801118e:	d110      	bne.n	80111b2 <HAL_GPIO_DeInit+0x66>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011190:	4656      	mov	r6, sl
 8011192:	6894      	ldr	r4, [r2, #8]
 8011194:	43b4      	bics	r4, r6
 8011196:	6094      	str	r4, [r2, #8]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011198:	4c36      	ldr	r4, [pc, #216]	; (8011274 <HAL_GPIO_DeInit+0x128>)
 801119a:	6822      	ldr	r2, [r4, #0]
 801119c:	43aa      	bics	r2, r5
 801119e:	6022      	str	r2, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80111a0:	6862      	ldr	r2, [r4, #4]
 80111a2:	43aa      	bics	r2, r5
 80111a4:	6062      	str	r2, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80111a6:	68a2      	ldr	r2, [r4, #8]
 80111a8:	43aa      	bics	r2, r5
 80111aa:	60a2      	str	r2, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80111ac:	68e2      	ldr	r2, [r4, #12]
 80111ae:	43aa      	bics	r2, r5
 80111b0:	60e2      	str	r2, [r4, #12]
  while (GPIO_Pin >> position)
 80111b2:	000a      	movs	r2, r1
      }
    }
    
    position++;
 80111b4:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80111b6:	40da      	lsrs	r2, r3
 80111b8:	d03c      	beq.n	8011234 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1 << position);
 80111ba:	4662      	mov	r2, ip
 80111bc:	000d      	movs	r5, r1
 80111be:	409a      	lsls	r2, r3
 80111c0:	4015      	ands	r5, r2
    if (iocurrent)
 80111c2:	4211      	tst	r1, r2
 80111c4:	d0f5      	beq.n	80111b2 <HAL_GPIO_DeInit+0x66>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80111c6:	4647      	mov	r7, r8
 80111c8:	005e      	lsls	r6, r3, #1
 80111ca:	40b7      	lsls	r7, r6
 80111cc:	6804      	ldr	r4, [r0, #0]
 80111ce:	003e      	movs	r6, r7
 80111d0:	43bc      	bics	r4, r7
 80111d2:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80111d4:	08dc      	lsrs	r4, r3, #3
 80111d6:	00a4      	lsls	r4, r4, #2
 80111d8:	1907      	adds	r7, r0, r4
 80111da:	9701      	str	r7, [sp, #4]
 80111dc:	6a3f      	ldr	r7, [r7, #32]
 80111de:	46ba      	mov	sl, r7
 80111e0:	2707      	movs	r7, #7
 80111e2:	401f      	ands	r7, r3
 80111e4:	00bf      	lsls	r7, r7, #2
 80111e6:	46bb      	mov	fp, r7
 80111e8:	464f      	mov	r7, r9
 80111ea:	465c      	mov	r4, fp
 80111ec:	40a7      	lsls	r7, r4
 80111ee:	46bb      	mov	fp, r7
 80111f0:	4657      	mov	r7, sl
 80111f2:	465c      	mov	r4, fp
 80111f4:	43a7      	bics	r7, r4
 80111f6:	003c      	movs	r4, r7
 80111f8:	9f01      	ldr	r7, [sp, #4]
 80111fa:	623c      	str	r4, [r7, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80111fc:	6884      	ldr	r4, [r0, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80111fe:	464f      	mov	r7, r9
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011200:	43b4      	bics	r4, r6
 8011202:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011204:	6844      	ldr	r4, [r0, #4]
 8011206:	4394      	bics	r4, r2
 8011208:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801120a:	4c1b      	ldr	r4, [pc, #108]	; (8011278 <HAL_GPIO_DeInit+0x12c>)
 801120c:	68c2      	ldr	r2, [r0, #12]
 801120e:	46a2      	mov	sl, r4
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011210:	4644      	mov	r4, r8
 8011212:	401c      	ands	r4, r3
 8011214:	00a4      	lsls	r4, r4, #2
 8011216:	40a7      	lsls	r7, r4
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011218:	43b2      	bics	r2, r6
 801121a:	60c2      	str	r2, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 801121c:	089a      	lsrs	r2, r3, #2
 801121e:	0092      	lsls	r2, r2, #2
 8011220:	4452      	add	r2, sl
 8011222:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011224:	46ba      	mov	sl, r7
 8011226:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011228:	2790      	movs	r7, #144	; 0x90
 801122a:	05ff      	lsls	r7, r7, #23
 801122c:	42b8      	cmp	r0, r7
 801122e:	d19e      	bne.n	801116e <HAL_GPIO_DeInit+0x22>
 8011230:	2400      	movs	r4, #0
 8011232:	e7ab      	b.n	801118c <HAL_GPIO_DeInit+0x40>
  }
}
 8011234:	b003      	add	sp, #12
 8011236:	bcf0      	pop	{r4, r5, r6, r7}
 8011238:	46bb      	mov	fp, r7
 801123a:	46b2      	mov	sl, r6
 801123c:	46a9      	mov	r9, r5
 801123e:	46a0      	mov	r8, r4
 8011240:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011242:	4667      	mov	r7, ip
 8011244:	40a7      	lsls	r7, r4
 8011246:	003c      	movs	r4, r7
 8011248:	e7a0      	b.n	801118c <HAL_GPIO_DeInit+0x40>
 801124a:	2702      	movs	r7, #2
 801124c:	40a7      	lsls	r7, r4
 801124e:	003c      	movs	r4, r7
 8011250:	e79c      	b.n	801118c <HAL_GPIO_DeInit+0x40>
 8011252:	4647      	mov	r7, r8
 8011254:	40a7      	lsls	r7, r4
 8011256:	003c      	movs	r4, r7
 8011258:	e798      	b.n	801118c <HAL_GPIO_DeInit+0x40>
 801125a:	2704      	movs	r7, #4
 801125c:	40a7      	lsls	r7, r4
 801125e:	003c      	movs	r4, r7
 8011260:	e794      	b.n	801118c <HAL_GPIO_DeInit+0x40>
 8011262:	46c0      	nop			; (mov r8, r8)
 8011264:	48000400 	.word	0x48000400
 8011268:	48000800 	.word	0x48000800
 801126c:	48000c00 	.word	0x48000c00
 8011270:	48001000 	.word	0x48001000
 8011274:	40010400 	.word	0x40010400
 8011278:	40010000 	.word	0x40010000

0801127c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801127c:	6900      	ldr	r0, [r0, #16]
 801127e:	4008      	ands	r0, r1
 8011280:	1e43      	subs	r3, r0, #1
 8011282:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011284:	b2c0      	uxtb	r0, r0
  }
 8011286:	4770      	bx	lr

08011288 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011288:	2a00      	cmp	r2, #0
 801128a:	d001      	beq.n	8011290 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801128c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801128e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011290:	6281      	str	r1, [r0, #40]	; 0x28
}
 8011292:	e7fc      	b.n	801128e <HAL_GPIO_WritePin+0x6>

08011294 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011294:	6943      	ldr	r3, [r0, #20]
 8011296:	4059      	eors	r1, r3
 8011298:	6141      	str	r1, [r0, #20]
}
 801129a:	4770      	bx	lr

0801129c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 801129c:	4770      	bx	lr
 801129e:	46c0      	nop			; (mov r8, r8)

080112a0 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80112a0:	2380      	movs	r3, #128	; 0x80
 80112a2:	4a03      	ldr	r2, [pc, #12]	; (80112b0 <HAL_PWR_EnableBkUpAccess+0x10>)
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	6811      	ldr	r1, [r2, #0]
 80112a8:	430b      	orrs	r3, r1
 80112aa:	6013      	str	r3, [r2, #0]
}
 80112ac:	4770      	bx	lr
 80112ae:	46c0      	nop			; (mov r8, r8)
 80112b0:	40007000 	.word	0x40007000

080112b4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	46c6      	mov	lr, r8
 80112b8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80112ba:	6803      	ldr	r3, [r0, #0]
{
 80112bc:	0004      	movs	r4, r0
 80112be:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80112c0:	07da      	lsls	r2, r3, #31
 80112c2:	d54b      	bpl.n	801135c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80112c4:	210c      	movs	r1, #12
 80112c6:	48c4      	ldr	r0, [pc, #784]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80112c8:	6842      	ldr	r2, [r0, #4]
 80112ca:	400a      	ands	r2, r1
 80112cc:	2a04      	cmp	r2, #4
 80112ce:	d100      	bne.n	80112d2 <HAL_RCC_OscConfig+0x1e>
 80112d0:	e153      	b.n	801157a <HAL_RCC_OscConfig+0x2c6>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80112d2:	6842      	ldr	r2, [r0, #4]
 80112d4:	4011      	ands	r1, r2
 80112d6:	2908      	cmp	r1, #8
 80112d8:	d108      	bne.n	80112ec <HAL_RCC_OscConfig+0x38>
 80112da:	21c0      	movs	r1, #192	; 0xc0
 80112dc:	6842      	ldr	r2, [r0, #4]
 80112de:	0249      	lsls	r1, r1, #9
 80112e0:	400a      	ands	r2, r1
 80112e2:	2180      	movs	r1, #128	; 0x80
 80112e4:	0249      	lsls	r1, r1, #9
 80112e6:	428a      	cmp	r2, r1
 80112e8:	d100      	bne.n	80112ec <HAL_RCC_OscConfig+0x38>
 80112ea:	e146      	b.n	801157a <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80112ec:	4dba      	ldr	r5, [pc, #744]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80112ee:	4abb      	ldr	r2, [pc, #748]	; (80115dc <HAL_RCC_OscConfig+0x328>)
 80112f0:	682b      	ldr	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112f2:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80112f4:	4013      	ands	r3, r2
 80112f6:	602b      	str	r3, [r5, #0]
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	4ab9      	ldr	r2, [pc, #740]	; (80115e0 <HAL_RCC_OscConfig+0x32c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112fc:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80112fe:	4013      	ands	r3, r2
 8011300:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011302:	f7fe fa57 	bl	800f7b4 <HAL_GetTick>
 8011306:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011308:	e005      	b.n	8011316 <HAL_RCC_OscConfig+0x62>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801130a:	f7fe fa53 	bl	800f7b4 <HAL_GetTick>
 801130e:	1b80      	subs	r0, r0, r6
 8011310:	2864      	cmp	r0, #100	; 0x64
 8011312:	d900      	bls.n	8011316 <HAL_RCC_OscConfig+0x62>
 8011314:	e13b      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011316:	682b      	ldr	r3, [r5, #0]
 8011318:	423b      	tst	r3, r7
 801131a:	d1f6      	bne.n	801130a <HAL_RCC_OscConfig+0x56>
          return HAL_TIMEOUT;
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801131c:	6863      	ldr	r3, [r4, #4]
 801131e:	2b01      	cmp	r3, #1
 8011320:	d100      	bne.n	8011324 <HAL_RCC_OscConfig+0x70>
 8011322:	e195      	b.n	8011650 <HAL_RCC_OscConfig+0x39c>
 8011324:	2b00      	cmp	r3, #0
 8011326:	d000      	beq.n	801132a <HAL_RCC_OscConfig+0x76>
 8011328:	e1bb      	b.n	80116a2 <HAL_RCC_OscConfig+0x3ee>
 801132a:	682b      	ldr	r3, [r5, #0]
 801132c:	4aab      	ldr	r2, [pc, #684]	; (80115dc <HAL_RCC_OscConfig+0x328>)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801132e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011330:	4013      	ands	r3, r2
 8011332:	602b      	str	r3, [r5, #0]
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	4aaa      	ldr	r2, [pc, #680]	; (80115e0 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011338:	4fa7      	ldr	r7, [pc, #668]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801133a:	4013      	ands	r3, r2
 801133c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801133e:	f7fe fa39 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011342:	02b6      	lsls	r6, r6, #10
        tickstart = HAL_GetTick();
 8011344:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011346:	e005      	b.n	8011354 <HAL_RCC_OscConfig+0xa0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011348:	f7fe fa34 	bl	800f7b4 <HAL_GetTick>
 801134c:	1b40      	subs	r0, r0, r5
 801134e:	2864      	cmp	r0, #100	; 0x64
 8011350:	d900      	bls.n	8011354 <HAL_RCC_OscConfig+0xa0>
 8011352:	e11c      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	4233      	tst	r3, r6
 8011358:	d1f6      	bne.n	8011348 <HAL_RCC_OscConfig+0x94>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	079a      	lsls	r2, r3, #30
 801135e:	d529      	bpl.n	80113b4 <HAL_RCC_OscConfig+0x100>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011360:	220c      	movs	r2, #12
 8011362:	499d      	ldr	r1, [pc, #628]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 8011364:	6848      	ldr	r0, [r1, #4]
 8011366:	4202      	tst	r2, r0
 8011368:	d100      	bne.n	801136c <HAL_RCC_OscConfig+0xb8>
 801136a:	e0fd      	b.n	8011568 <HAL_RCC_OscConfig+0x2b4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801136c:	6848      	ldr	r0, [r1, #4]
 801136e:	4002      	ands	r2, r0
 8011370:	2a08      	cmp	r2, #8
 8011372:	d100      	bne.n	8011376 <HAL_RCC_OscConfig+0xc2>
 8011374:	e0ef      	b.n	8011556 <HAL_RCC_OscConfig+0x2a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011376:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011378:	4d97      	ldr	r5, [pc, #604]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801137a:	2b00      	cmp	r3, #0
 801137c:	d100      	bne.n	8011380 <HAL_RCC_OscConfig+0xcc>
 801137e:	e137      	b.n	80115f0 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_ENABLE();
 8011380:	2201      	movs	r2, #1
 8011382:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011384:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8011386:	4313      	orrs	r3, r2
 8011388:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801138a:	f7fe fa13 	bl	800f7b4 <HAL_GetTick>
 801138e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011390:	e005      	b.n	801139e <HAL_RCC_OscConfig+0xea>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011392:	f7fe fa0f 	bl	800f7b4 <HAL_GetTick>
 8011396:	1b80      	subs	r0, r0, r6
 8011398:	2864      	cmp	r0, #100	; 0x64
 801139a:	d900      	bls.n	801139e <HAL_RCC_OscConfig+0xea>
 801139c:	e0f7      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801139e:	682b      	ldr	r3, [r5, #0]
 80113a0:	421f      	tst	r7, r3
 80113a2:	d0f6      	beq.n	8011392 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113a4:	21f8      	movs	r1, #248	; 0xf8
 80113a6:	682a      	ldr	r2, [r5, #0]
 80113a8:	6923      	ldr	r3, [r4, #16]
 80113aa:	438a      	bics	r2, r1
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	4313      	orrs	r3, r2
 80113b0:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80113b2:	6823      	ldr	r3, [r4, #0]
 80113b4:	071a      	lsls	r2, r3, #28
 80113b6:	d45d      	bmi.n	8011474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80113b8:	075a      	lsls	r2, r3, #29
 80113ba:	d474      	bmi.n	80114a6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80113bc:	06da      	lsls	r2, r3, #27
 80113be:	d512      	bpl.n	80113e6 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80113c0:	6962      	ldr	r2, [r4, #20]
 80113c2:	2a01      	cmp	r2, #1
 80113c4:	d100      	bne.n	80113c8 <HAL_RCC_OscConfig+0x114>
 80113c6:	e18b      	b.n	80116e0 <HAL_RCC_OscConfig+0x42c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80113c8:	3205      	adds	r2, #5
 80113ca:	d000      	beq.n	80113ce <HAL_RCC_OscConfig+0x11a>
 80113cc:	e123      	b.n	8011616 <HAL_RCC_OscConfig+0x362>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80113ce:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80113d0:	25f8      	movs	r5, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80113d2:	4981      	ldr	r1, [pc, #516]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80113d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80113d6:	4382      	bics	r2, r0
 80113d8:	634a      	str	r2, [r1, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80113da:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80113dc:	69a2      	ldr	r2, [r4, #24]
 80113de:	43a8      	bics	r0, r5
 80113e0:	00d2      	lsls	r2, r2, #3
 80113e2:	4302      	orrs	r2, r0
 80113e4:	634a      	str	r2, [r1, #52]	; 0x34
    }
  }

#if defined(RCC_CR2_HSI48ON)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80113e6:	069b      	lsls	r3, r3, #26
 80113e8:	d522      	bpl.n	8011430 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80113ea:	220c      	movs	r2, #12
 80113ec:	497a      	ldr	r1, [pc, #488]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80113ee:	684b      	ldr	r3, [r1, #4]
 80113f0:	4013      	ands	r3, r2
 80113f2:	2b0c      	cmp	r3, #12
 80113f4:	d100      	bne.n	80113f8 <HAL_RCC_OscConfig+0x144>
 80113f6:	e149      	b.n	801168c <HAL_RCC_OscConfig+0x3d8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80113f8:	684b      	ldr	r3, [r1, #4]
 80113fa:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80113fc:	2a08      	cmp	r2, #8
 80113fe:	d100      	bne.n	8011402 <HAL_RCC_OscConfig+0x14e>
 8011400:	e13d      	b.n	801167e <HAL_RCC_OscConfig+0x3ca>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011402:	69e3      	ldr	r3, [r4, #28]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011404:	4d74      	ldr	r5, [pc, #464]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011406:	2b00      	cmp	r3, #0
 8011408:	d100      	bne.n	801140c <HAL_RCC_OscConfig+0x158>
 801140a:	e155      	b.n	80116b8 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_HSI48_ENABLE();
 801140c:	2780      	movs	r7, #128	; 0x80
 801140e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011410:	027f      	lsls	r7, r7, #9
 8011412:	433b      	orrs	r3, r7
 8011414:	636b      	str	r3, [r5, #52]	; 0x34

        /* Get timeout */
        tickstart = HAL_GetTick();
 8011416:	f7fe f9cd 	bl	800f7b4 <HAL_GetTick>
 801141a:	0006      	movs	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801141c:	e005      	b.n	801142a <HAL_RCC_OscConfig+0x176>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801141e:	f7fe f9c9 	bl	800f7b4 <HAL_GetTick>
 8011422:	1b80      	subs	r0, r0, r6
 8011424:	2864      	cmp	r0, #100	; 0x64
 8011426:	d900      	bls.n	801142a <HAL_RCC_OscConfig+0x176>
 8011428:	e0b1      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801142a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801142c:	423b      	tst	r3, r7
 801142e:	d0f6      	beq.n	801141e <HAL_RCC_OscConfig+0x16a>
#endif /* RCC_CR2_HSI48ON */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011432:	2b00      	cmp	r3, #0
 8011434:	d01c      	beq.n	8011470 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011436:	220c      	movs	r2, #12
 8011438:	4d67      	ldr	r5, [pc, #412]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 801143a:	6869      	ldr	r1, [r5, #4]
 801143c:	400a      	ands	r2, r1
 801143e:	2a08      	cmp	r2, #8
 8011440:	d100      	bne.n	8011444 <HAL_RCC_OscConfig+0x190>
 8011442:	e098      	b.n	8011576 <HAL_RCC_OscConfig+0x2c2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011444:	2b02      	cmp	r3, #2
 8011446:	d100      	bne.n	801144a <HAL_RCC_OscConfig+0x196>
 8011448:	e169      	b.n	801171e <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801144a:	682b      	ldr	r3, [r5, #0]
 801144c:	4a65      	ldr	r2, [pc, #404]	; (80115e4 <HAL_RCC_OscConfig+0x330>)
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801144e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011450:	4013      	ands	r3, r2
 8011452:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011454:	f7fe f9ae 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011458:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 801145a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801145c:	e005      	b.n	801146a <HAL_RCC_OscConfig+0x1b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801145e:	f7fe f9a9 	bl	800f7b4 <HAL_GetTick>
 8011462:	1b00      	subs	r0, r0, r4
 8011464:	2864      	cmp	r0, #100	; 0x64
 8011466:	d900      	bls.n	801146a <HAL_RCC_OscConfig+0x1b6>
 8011468:	e091      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801146a:	682b      	ldr	r3, [r5, #0]
 801146c:	4233      	tst	r3, r6
 801146e:	d1f6      	bne.n	801145e <HAL_RCC_OscConfig+0x1aa>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8011470:	2000      	movs	r0, #0
 8011472:	e08d      	b.n	8011590 <HAL_RCC_OscConfig+0x2dc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011474:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_LSI_ENABLE();
 8011476:	4d58      	ldr	r5, [pc, #352]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011478:	2b00      	cmp	r3, #0
 801147a:	d100      	bne.n	801147e <HAL_RCC_OscConfig+0x1ca>
 801147c:	e08c      	b.n	8011598 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 801147e:	2201      	movs	r2, #1
 8011480:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011482:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8011484:	4313      	orrs	r3, r2
 8011486:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011488:	f7fe f994 	bl	800f7b4 <HAL_GetTick>
 801148c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801148e:	e004      	b.n	801149a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011490:	f7fe f990 	bl	800f7b4 <HAL_GetTick>
 8011494:	1b80      	subs	r0, r0, r6
 8011496:	2864      	cmp	r0, #100	; 0x64
 8011498:	d879      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801149a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801149c:	421f      	tst	r7, r3
 801149e:	d0f7      	beq.n	8011490 <HAL_RCC_OscConfig+0x1dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80114a0:	6823      	ldr	r3, [r4, #0]
 80114a2:	075a      	lsls	r2, r3, #29
 80114a4:	d58a      	bpl.n	80113bc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_PWR_CLK_ENABLE();
 80114a6:	2080      	movs	r0, #128	; 0x80
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80114a8:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80114aa:	4a4b      	ldr	r2, [pc, #300]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80114ac:	0540      	lsls	r0, r0, #21
 80114ae:	69d1      	ldr	r1, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80114b0:	4d4d      	ldr	r5, [pc, #308]	; (80115e8 <HAL_RCC_OscConfig+0x334>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80114b2:	4301      	orrs	r1, r0
 80114b4:	61d1      	str	r1, [r2, #28]
 80114b6:	69d3      	ldr	r3, [r2, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80114b8:	007f      	lsls	r7, r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80114ba:	4003      	ands	r3, r0
 80114bc:	9301      	str	r3, [sp, #4]
 80114be:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80114c0:	682b      	ldr	r3, [r5, #0]
 80114c2:	433b      	orrs	r3, r7
 80114c4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80114c6:	f7fe f975 	bl	800f7b4 <HAL_GetTick>
 80114ca:	0006      	movs	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80114cc:	e004      	b.n	80114d8 <HAL_RCC_OscConfig+0x224>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80114ce:	f7fe f971 	bl	800f7b4 <HAL_GetTick>
 80114d2:	1b80      	subs	r0, r0, r6
 80114d4:	2864      	cmp	r0, #100	; 0x64
 80114d6:	d85a      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80114d8:	682b      	ldr	r3, [r5, #0]
 80114da:	423b      	tst	r3, r7
 80114dc:	d0f7      	beq.n	80114ce <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80114de:	2201      	movs	r2, #1
 80114e0:	4d3d      	ldr	r5, [pc, #244]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114e2:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80114e4:	6a2b      	ldr	r3, [r5, #32]
 80114e6:	4393      	bics	r3, r2
 80114e8:	622b      	str	r3, [r5, #32]
 80114ea:	6a2b      	ldr	r3, [r5, #32]
 80114ec:	3203      	adds	r2, #3
 80114ee:	4393      	bics	r3, r2
 80114f0:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
 80114f2:	f7fe f95f 	bl	800f7b4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114f6:	4b3d      	ldr	r3, [pc, #244]	; (80115ec <HAL_RCC_OscConfig+0x338>)
    tickstart = HAL_GetTick();
 80114f8:	0006      	movs	r6, r0
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114fa:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80114fc:	e004      	b.n	8011508 <HAL_RCC_OscConfig+0x254>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80114fe:	f7fe f959 	bl	800f7b4 <HAL_GetTick>
 8011502:	1b80      	subs	r0, r0, r6
 8011504:	4540      	cmp	r0, r8
 8011506:	d842      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011508:	6a2b      	ldr	r3, [r5, #32]
 801150a:	421f      	tst	r7, r3
 801150c:	d1f7      	bne.n	80114fe <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801150e:	68a3      	ldr	r3, [r4, #8]
 8011510:	2b01      	cmp	r3, #1
 8011512:	d100      	bne.n	8011516 <HAL_RCC_OscConfig+0x262>
 8011514:	e156      	b.n	80117c4 <HAL_RCC_OscConfig+0x510>
 8011516:	2b00      	cmp	r3, #0
 8011518:	d100      	bne.n	801151c <HAL_RCC_OscConfig+0x268>
 801151a:	e138      	b.n	801178e <HAL_RCC_OscConfig+0x4da>
 801151c:	2b05      	cmp	r3, #5
 801151e:	d100      	bne.n	8011522 <HAL_RCC_OscConfig+0x26e>
 8011520:	e154      	b.n	80117cc <HAL_RCC_OscConfig+0x518>
 8011522:	2201      	movs	r2, #1
 8011524:	6a2b      	ldr	r3, [r5, #32]
 8011526:	4393      	bics	r3, r2
 8011528:	622b      	str	r3, [r5, #32]
 801152a:	6a2b      	ldr	r3, [r5, #32]
 801152c:	3203      	adds	r2, #3
 801152e:	4393      	bics	r3, r2
 8011530:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8011532:	f7fe f93f 	bl	800f7b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011536:	4b2d      	ldr	r3, [pc, #180]	; (80115ec <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 8011538:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801153a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801153c:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801153e:	4f26      	ldr	r7, [pc, #152]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 8011540:	e004      	b.n	801154c <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011542:	f7fe f937 	bl	800f7b4 <HAL_GetTick>
 8011546:	1b40      	subs	r0, r0, r5
 8011548:	4540      	cmp	r0, r8
 801154a:	d820      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	421e      	tst	r6, r3
 8011550:	d0f7      	beq.n	8011542 <HAL_RCC_OscConfig+0x28e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	e732      	b.n	80113bc <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011556:	684a      	ldr	r2, [r1, #4]
 8011558:	21c0      	movs	r1, #192	; 0xc0
 801155a:	0249      	lsls	r1, r1, #9
 801155c:	400a      	ands	r2, r1
 801155e:	2180      	movs	r1, #128	; 0x80
 8011560:	0209      	lsls	r1, r1, #8
 8011562:	428a      	cmp	r2, r1
 8011564:	d000      	beq.n	8011568 <HAL_RCC_OscConfig+0x2b4>
 8011566:	e706      	b.n	8011376 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011568:	4a1b      	ldr	r2, [pc, #108]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 801156a:	6812      	ldr	r2, [r2, #0]
 801156c:	0792      	lsls	r2, r2, #30
 801156e:	d526      	bpl.n	80115be <HAL_RCC_OscConfig+0x30a>
 8011570:	68e2      	ldr	r2, [r4, #12]
 8011572:	2a01      	cmp	r2, #1
 8011574:	d023      	beq.n	80115be <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8011576:	2001      	movs	r0, #1
 8011578:	e00a      	b.n	8011590 <HAL_RCC_OscConfig+0x2dc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801157a:	4a17      	ldr	r2, [pc, #92]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 801157c:	6812      	ldr	r2, [r2, #0]
 801157e:	0392      	lsls	r2, r2, #14
 8011580:	d400      	bmi.n	8011584 <HAL_RCC_OscConfig+0x2d0>
 8011582:	e6eb      	b.n	801135c <HAL_RCC_OscConfig+0xa8>
 8011584:	6862      	ldr	r2, [r4, #4]
 8011586:	2a00      	cmp	r2, #0
 8011588:	d000      	beq.n	801158c <HAL_RCC_OscConfig+0x2d8>
 801158a:	e6e7      	b.n	801135c <HAL_RCC_OscConfig+0xa8>
 801158c:	e7f3      	b.n	8011576 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 801158e:	2003      	movs	r0, #3
}
 8011590:	b002      	add	sp, #8
 8011592:	bc80      	pop	{r7}
 8011594:	46b8      	mov	r8, r7
 8011596:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8011598:	2201      	movs	r2, #1
 801159a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801159c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 801159e:	4393      	bics	r3, r2
 80115a0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80115a2:	f7fe f907 	bl	800f7b4 <HAL_GetTick>
 80115a6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80115a8:	e004      	b.n	80115b4 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80115aa:	f7fe f903 	bl	800f7b4 <HAL_GetTick>
 80115ae:	1b80      	subs	r0, r0, r6
 80115b0:	2864      	cmp	r0, #100	; 0x64
 80115b2:	d8ec      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80115b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80115b6:	421f      	tst	r7, r3
 80115b8:	d1f7      	bne.n	80115aa <HAL_RCC_OscConfig+0x2f6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	e771      	b.n	80114a2 <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80115be:	25f8      	movs	r5, #248	; 0xf8
 80115c0:	4805      	ldr	r0, [pc, #20]	; (80115d8 <HAL_RCC_OscConfig+0x324>)
 80115c2:	6922      	ldr	r2, [r4, #16]
 80115c4:	6801      	ldr	r1, [r0, #0]
 80115c6:	00d2      	lsls	r2, r2, #3
 80115c8:	43a9      	bics	r1, r5
 80115ca:	430a      	orrs	r2, r1
 80115cc:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80115ce:	071a      	lsls	r2, r3, #28
 80115d0:	d400      	bmi.n	80115d4 <HAL_RCC_OscConfig+0x320>
 80115d2:	e6f1      	b.n	80113b8 <HAL_RCC_OscConfig+0x104>
 80115d4:	e74e      	b.n	8011474 <HAL_RCC_OscConfig+0x1c0>
 80115d6:	46c0      	nop			; (mov r8, r8)
 80115d8:	40021000 	.word	0x40021000
 80115dc:	fffeffff 	.word	0xfffeffff
 80115e0:	fffbffff 	.word	0xfffbffff
 80115e4:	feffffff 	.word	0xfeffffff
 80115e8:	40007000 	.word	0x40007000
 80115ec:	00001388 	.word	0x00001388
        __HAL_RCC_HSI_DISABLE();
 80115f0:	2201      	movs	r2, #1
 80115f2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80115f4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80115f6:	4393      	bics	r3, r2
 80115f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80115fa:	f7fe f8db 	bl	800f7b4 <HAL_GetTick>
 80115fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011600:	e004      	b.n	801160c <HAL_RCC_OscConfig+0x358>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011602:	f7fe f8d7 	bl	800f7b4 <HAL_GetTick>
 8011606:	1b80      	subs	r0, r0, r6
 8011608:	2864      	cmp	r0, #100	; 0x64
 801160a:	d8c0      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	421f      	tst	r7, r3
 8011610:	d1f7      	bne.n	8011602 <HAL_RCC_OscConfig+0x34e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	e6ce      	b.n	80113b4 <HAL_RCC_OscConfig+0x100>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011616:	2204      	movs	r2, #4
 8011618:	4d71      	ldr	r5, [pc, #452]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801161a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 801161c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801161e:	4313      	orrs	r3, r2
 8011620:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011622:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011624:	3a03      	subs	r2, #3
 8011626:	4393      	bics	r3, r2
 8011628:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 801162a:	f7fe f8c3 	bl	800f7b4 <HAL_GetTick>
 801162e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011630:	e004      	b.n	801163c <HAL_RCC_OscConfig+0x388>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011632:	f7fe f8bf 	bl	800f7b4 <HAL_GetTick>
 8011636:	1b80      	subs	r0, r0, r6
 8011638:	2864      	cmp	r0, #100	; 0x64
 801163a:	d8a8      	bhi.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801163c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801163e:	421f      	tst	r7, r3
 8011640:	d1f7      	bne.n	8011632 <HAL_RCC_OscConfig+0x37e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	e6cf      	b.n	80113e6 <HAL_RCC_OscConfig+0x132>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011646:	2380      	movs	r3, #128	; 0x80
 8011648:	682a      	ldr	r2, [r5, #0]
 801164a:	02db      	lsls	r3, r3, #11
 801164c:	4313      	orrs	r3, r2
 801164e:	602b      	str	r3, [r5, #0]
 8011650:	2380      	movs	r3, #128	; 0x80
 8011652:	682a      	ldr	r2, [r5, #0]
 8011654:	025b      	lsls	r3, r3, #9
 8011656:	4313      	orrs	r3, r2
 8011658:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801165a:	f7fe f8ab 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801165e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8011660:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011662:	4f5f      	ldr	r7, [pc, #380]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
 8011664:	02b6      	lsls	r6, r6, #10
 8011666:	e005      	b.n	8011674 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011668:	f7fe f8a4 	bl	800f7b4 <HAL_GetTick>
 801166c:	1b40      	subs	r0, r0, r5
 801166e:	2864      	cmp	r0, #100	; 0x64
 8011670:	d900      	bls.n	8011674 <HAL_RCC_OscConfig+0x3c0>
 8011672:	e78c      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	4233      	tst	r3, r6
 8011678:	d0f6      	beq.n	8011668 <HAL_RCC_OscConfig+0x3b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	e66e      	b.n	801135c <HAL_RCC_OscConfig+0xa8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801167e:	22c0      	movs	r2, #192	; 0xc0
 8011680:	684b      	ldr	r3, [r1, #4]
 8011682:	0252      	lsls	r2, r2, #9
 8011684:	4013      	ands	r3, r2
 8011686:	4293      	cmp	r3, r2
 8011688:	d000      	beq.n	801168c <HAL_RCC_OscConfig+0x3d8>
 801168a:	e6ba      	b.n	8011402 <HAL_RCC_OscConfig+0x14e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801168c:	4b54      	ldr	r3, [pc, #336]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
 801168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011690:	03db      	lsls	r3, r3, #15
 8011692:	d400      	bmi.n	8011696 <HAL_RCC_OscConfig+0x3e2>
 8011694:	e6cc      	b.n	8011430 <HAL_RCC_OscConfig+0x17c>
 8011696:	69e3      	ldr	r3, [r4, #28]
 8011698:	2b01      	cmp	r3, #1
 801169a:	d100      	bne.n	801169e <HAL_RCC_OscConfig+0x3ea>
 801169c:	e6c8      	b.n	8011430 <HAL_RCC_OscConfig+0x17c>
        return HAL_ERROR;
 801169e:	2001      	movs	r0, #1
 80116a0:	e776      	b.n	8011590 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80116a2:	2b05      	cmp	r3, #5
 80116a4:	d0cf      	beq.n	8011646 <HAL_RCC_OscConfig+0x392>
 80116a6:	682b      	ldr	r3, [r5, #0]
 80116a8:	4a4e      	ldr	r2, [pc, #312]	; (80117e4 <HAL_RCC_OscConfig+0x530>)
 80116aa:	4013      	ands	r3, r2
 80116ac:	602b      	str	r3, [r5, #0]
 80116ae:	682b      	ldr	r3, [r5, #0]
 80116b0:	4a4d      	ldr	r2, [pc, #308]	; (80117e8 <HAL_RCC_OscConfig+0x534>)
 80116b2:	4013      	ands	r3, r2
 80116b4:	602b      	str	r3, [r5, #0]
 80116b6:	e7d0      	b.n	801165a <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_HSI48_DISABLE();
 80116b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80116ba:	4a4a      	ldr	r2, [pc, #296]	; (80117e4 <HAL_RCC_OscConfig+0x530>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80116bc:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80116be:	4013      	ands	r3, r2
 80116c0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80116c2:	f7fe f877 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80116c6:	027f      	lsls	r7, r7, #9
        tickstart = HAL_GetTick();
 80116c8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80116ca:	e005      	b.n	80116d8 <HAL_RCC_OscConfig+0x424>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80116cc:	f7fe f872 	bl	800f7b4 <HAL_GetTick>
 80116d0:	1b80      	subs	r0, r0, r6
 80116d2:	2864      	cmp	r0, #100	; 0x64
 80116d4:	d900      	bls.n	80116d8 <HAL_RCC_OscConfig+0x424>
 80116d6:	e75a      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80116d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80116da:	423b      	tst	r3, r7
 80116dc:	d1f6      	bne.n	80116cc <HAL_RCC_OscConfig+0x418>
 80116de:	e6a7      	b.n	8011430 <HAL_RCC_OscConfig+0x17c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80116e0:	2104      	movs	r1, #4
 80116e2:	4d3f      	ldr	r5, [pc, #252]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80116e4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80116e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80116e8:	430b      	orrs	r3, r1
 80116ea:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80116ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80116ee:	431a      	orrs	r2, r3
 80116f0:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80116f2:	f7fe f85f 	bl	800f7b4 <HAL_GetTick>
 80116f6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80116f8:	e005      	b.n	8011706 <HAL_RCC_OscConfig+0x452>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80116fa:	f7fe f85b 	bl	800f7b4 <HAL_GetTick>
 80116fe:	1b80      	subs	r0, r0, r6
 8011700:	2864      	cmp	r0, #100	; 0x64
 8011702:	d900      	bls.n	8011706 <HAL_RCC_OscConfig+0x452>
 8011704:	e743      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011706:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011708:	421f      	tst	r7, r3
 801170a:	d0f6      	beq.n	80116fa <HAL_RCC_OscConfig+0x446>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801170c:	21f8      	movs	r1, #248	; 0xf8
 801170e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8011710:	69a3      	ldr	r3, [r4, #24]
 8011712:	438a      	bics	r2, r1
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	4313      	orrs	r3, r2
 8011718:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801171a:	6823      	ldr	r3, [r4, #0]
 801171c:	e663      	b.n	80113e6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_PLL_DISABLE();
 801171e:	682b      	ldr	r3, [r5, #0]
 8011720:	4a32      	ldr	r2, [pc, #200]	; (80117ec <HAL_RCC_OscConfig+0x538>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011722:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8011724:	4013      	ands	r3, r2
 8011726:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8011728:	f7fe f844 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801172c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 801172e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011730:	e005      	b.n	801173e <HAL_RCC_OscConfig+0x48a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011732:	f7fe f83f 	bl	800f7b4 <HAL_GetTick>
 8011736:	1b80      	subs	r0, r0, r6
 8011738:	2864      	cmp	r0, #100	; 0x64
 801173a:	d900      	bls.n	801173e <HAL_RCC_OscConfig+0x48a>
 801173c:	e727      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801173e:	682b      	ldr	r3, [r5, #0]
 8011740:	423b      	tst	r3, r7
 8011742:	d1f6      	bne.n	8011732 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011744:	220f      	movs	r2, #15
 8011746:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011748:	4e25      	ldr	r6, [pc, #148]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801174a:	4393      	bics	r3, r2
 801174c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801174e:	4313      	orrs	r3, r2
 8011750:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011752:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011754:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011756:	686a      	ldr	r2, [r5, #4]
 8011758:	430b      	orrs	r3, r1
 801175a:	4925      	ldr	r1, [pc, #148]	; (80117f0 <HAL_RCC_OscConfig+0x53c>)
 801175c:	400a      	ands	r2, r1
 801175e:	4313      	orrs	r3, r2
 8011760:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8011762:	2380      	movs	r3, #128	; 0x80
 8011764:	682a      	ldr	r2, [r5, #0]
 8011766:	045b      	lsls	r3, r3, #17
 8011768:	4313      	orrs	r3, r2
 801176a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801176c:	f7fe f822 	bl	800f7b4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011770:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8011772:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011774:	04ad      	lsls	r5, r5, #18
 8011776:	e005      	b.n	8011784 <HAL_RCC_OscConfig+0x4d0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011778:	f7fe f81c 	bl	800f7b4 <HAL_GetTick>
 801177c:	1b00      	subs	r0, r0, r4
 801177e:	2864      	cmp	r0, #100	; 0x64
 8011780:	d900      	bls.n	8011784 <HAL_RCC_OscConfig+0x4d0>
 8011782:	e704      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011784:	6833      	ldr	r3, [r6, #0]
 8011786:	422b      	tst	r3, r5
 8011788:	d0f6      	beq.n	8011778 <HAL_RCC_OscConfig+0x4c4>
  return HAL_OK;
 801178a:	2000      	movs	r0, #0
 801178c:	e700      	b.n	8011590 <HAL_RCC_OscConfig+0x2dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801178e:	2201      	movs	r2, #1
 8011790:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011792:	2602      	movs	r6, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011794:	4393      	bics	r3, r2
 8011796:	622b      	str	r3, [r5, #32]
 8011798:	6a2b      	ldr	r3, [r5, #32]
 801179a:	3203      	adds	r2, #3
 801179c:	4393      	bics	r3, r2
 801179e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80117a0:	f7fe f808 	bl	800f7b4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117a4:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <HAL_RCC_OscConfig+0x540>)
      tickstart = HAL_GetTick();
 80117a6:	0005      	movs	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117a8:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80117aa:	4f0d      	ldr	r7, [pc, #52]	; (80117e0 <HAL_RCC_OscConfig+0x52c>)
 80117ac:	e005      	b.n	80117ba <HAL_RCC_OscConfig+0x506>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80117ae:	f7fe f801 	bl	800f7b4 <HAL_GetTick>
 80117b2:	1b40      	subs	r0, r0, r5
 80117b4:	4540      	cmp	r0, r8
 80117b6:	d900      	bls.n	80117ba <HAL_RCC_OscConfig+0x506>
 80117b8:	e6e9      	b.n	801158e <HAL_RCC_OscConfig+0x2da>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80117ba:	6a3b      	ldr	r3, [r7, #32]
 80117bc:	421e      	tst	r6, r3
 80117be:	d1f6      	bne.n	80117ae <HAL_RCC_OscConfig+0x4fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	e5fb      	b.n	80113bc <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80117c4:	6a2a      	ldr	r2, [r5, #32]
 80117c6:	4313      	orrs	r3, r2
 80117c8:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80117ca:	e6b2      	b.n	8011532 <HAL_RCC_OscConfig+0x27e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80117cc:	2204      	movs	r2, #4
 80117ce:	6a2b      	ldr	r3, [r5, #32]
 80117d0:	4313      	orrs	r3, r2
 80117d2:	622b      	str	r3, [r5, #32]
 80117d4:	6a2b      	ldr	r3, [r5, #32]
 80117d6:	3a03      	subs	r2, #3
 80117d8:	4313      	orrs	r3, r2
 80117da:	622b      	str	r3, [r5, #32]
 80117dc:	e6a9      	b.n	8011532 <HAL_RCC_OscConfig+0x27e>
 80117de:	46c0      	nop			; (mov r8, r8)
 80117e0:	40021000 	.word	0x40021000
 80117e4:	fffeffff 	.word	0xfffeffff
 80117e8:	fffbffff 	.word	0xfffbffff
 80117ec:	feffffff 	.word	0xfeffffff
 80117f0:	ffc27fff 	.word	0xffc27fff
 80117f4:	00001388 	.word	0x00001388

080117f8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80117f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117fa:	46ce      	mov	lr, r9
 80117fc:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80117fe:	2301      	movs	r3, #1
{
 8011800:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011802:	498b      	ldr	r1, [pc, #556]	; (8011a30 <HAL_RCC_ClockConfig+0x238>)
{
 8011804:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011806:	680a      	ldr	r2, [r1, #0]
{
 8011808:	b580      	push	{r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801180a:	401a      	ands	r2, r3
 801180c:	42a2      	cmp	r2, r4
 801180e:	d254      	bcs.n	80118ba <HAL_RCC_ClockConfig+0xc2>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011810:	680a      	ldr	r2, [r1, #0]
 8011812:	439a      	bics	r2, r3
 8011814:	4322      	orrs	r2, r4
 8011816:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011818:	680a      	ldr	r2, [r1, #0]
 801181a:	4013      	ands	r3, r2
 801181c:	42a3      	cmp	r3, r4
 801181e:	d004      	beq.n	801182a <HAL_RCC_ClockConfig+0x32>
    {
      return HAL_ERROR;
 8011820:	2001      	movs	r0, #1
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8011822:	bcc0      	pop	{r6, r7}
 8011824:	46b9      	mov	r9, r7
 8011826:	46b0      	mov	r8, r6
 8011828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801182a:	6803      	ldr	r3, [r0, #0]
 801182c:	079a      	lsls	r2, r3, #30
 801182e:	d506      	bpl.n	801183e <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011830:	20f0      	movs	r0, #240	; 0xf0
 8011832:	4980      	ldr	r1, [pc, #512]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
 8011834:	684a      	ldr	r2, [r1, #4]
 8011836:	4382      	bics	r2, r0
 8011838:	68a8      	ldr	r0, [r5, #8]
 801183a:	4302      	orrs	r2, r0
 801183c:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801183e:	07da      	lsls	r2, r3, #31
 8011840:	d52d      	bpl.n	801189e <HAL_RCC_ClockConfig+0xa6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011842:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011844:	4b7b      	ldr	r3, [pc, #492]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011846:	2a01      	cmp	r2, #1
 8011848:	d100      	bne.n	801184c <HAL_RCC_ClockConfig+0x54>
 801184a:	e0a8      	b.n	801199e <HAL_RCC_ClockConfig+0x1a6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801184c:	2a02      	cmp	r2, #2
 801184e:	d100      	bne.n	8011852 <HAL_RCC_ClockConfig+0x5a>
 8011850:	e0be      	b.n	80119d0 <HAL_RCC_ClockConfig+0x1d8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011852:	2a03      	cmp	r2, #3
 8011854:	d100      	bne.n	8011858 <HAL_RCC_ClockConfig+0x60>
 8011856:	e09d      	b.n	8011994 <HAL_RCC_ClockConfig+0x19c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	079b      	lsls	r3, r3, #30
 801185c:	d5e0      	bpl.n	8011820 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801185e:	2103      	movs	r1, #3
 8011860:	4c74      	ldr	r4, [pc, #464]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011862:	270c      	movs	r7, #12
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011864:	6863      	ldr	r3, [r4, #4]
 8011866:	438b      	bics	r3, r1
 8011868:	4313      	orrs	r3, r2
 801186a:	6063      	str	r3, [r4, #4]
      tickstart = HAL_GetTick();
 801186c:	f7fd ffa2 	bl	800f7b4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011870:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 8011872:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011874:	2b01      	cmp	r3, #1
 8011876:	d100      	bne.n	801187a <HAL_RCC_ClockConfig+0x82>
 8011878:	e0af      	b.n	80119da <HAL_RCC_ClockConfig+0x1e2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801187a:	2b02      	cmp	r3, #2
 801187c:	d100      	bne.n	8011880 <HAL_RCC_ClockConfig+0x88>
 801187e:	e0ba      	b.n	80119f6 <HAL_RCC_ClockConfig+0x1fe>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011880:	2b03      	cmp	r3, #3
 8011882:	d100      	bne.n	8011886 <HAL_RCC_ClockConfig+0x8e>
 8011884:	e0c5      	b.n	8011a12 <HAL_RCC_ClockConfig+0x21a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011886:	4b6c      	ldr	r3, [pc, #432]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 8011888:	4698      	mov	r8, r3
 801188a:	e004      	b.n	8011896 <HAL_RCC_ClockConfig+0x9e>
 801188c:	f7fd ff92 	bl	800f7b4 <HAL_GetTick>
 8011890:	1b80      	subs	r0, r0, r6
 8011892:	4540      	cmp	r0, r8
 8011894:	d86c      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011896:	6863      	ldr	r3, [r4, #4]
 8011898:	421f      	tst	r7, r3
 801189a:	d1f7      	bne.n	801188c <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801189c:	682b      	ldr	r3, [r5, #0]
 801189e:	075b      	lsls	r3, r3, #29
 80118a0:	d506      	bpl.n	80118b0 <HAL_RCC_ClockConfig+0xb8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80118a2:	4a64      	ldr	r2, [pc, #400]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
 80118a4:	4965      	ldr	r1, [pc, #404]	; (8011a3c <HAL_RCC_ClockConfig+0x244>)
 80118a6:	6853      	ldr	r3, [r2, #4]
 80118a8:	400b      	ands	r3, r1
 80118aa:	68e9      	ldr	r1, [r5, #12]
 80118ac:	430b      	orrs	r3, r1
 80118ae:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80118b0:	2000      	movs	r0, #0
 80118b2:	f7fd ff55 	bl	800f760 <HAL_InitTick>
  return HAL_OK;
 80118b6:	2000      	movs	r0, #0
 80118b8:	e7b3      	b.n	8011822 <HAL_RCC_ClockConfig+0x2a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80118ba:	6803      	ldr	r3, [r0, #0]
 80118bc:	079a      	lsls	r2, r3, #30
 80118be:	d506      	bpl.n	80118ce <HAL_RCC_ClockConfig+0xd6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80118c0:	20f0      	movs	r0, #240	; 0xf0
 80118c2:	495c      	ldr	r1, [pc, #368]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
 80118c4:	684a      	ldr	r2, [r1, #4]
 80118c6:	4382      	bics	r2, r0
 80118c8:	68a8      	ldr	r0, [r5, #8]
 80118ca:	4302      	orrs	r2, r0
 80118cc:	604a      	str	r2, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80118ce:	07db      	lsls	r3, r3, #31
 80118d0:	d51a      	bpl.n	8011908 <HAL_RCC_ClockConfig+0x110>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80118d2:	686a      	ldr	r2, [r5, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80118d4:	4b57      	ldr	r3, [pc, #348]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80118d6:	2a01      	cmp	r2, #1
 80118d8:	d023      	beq.n	8011922 <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80118da:	2a02      	cmp	r2, #2
 80118dc:	d044      	beq.n	8011968 <HAL_RCC_ClockConfig+0x170>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80118de:	2a03      	cmp	r2, #3
 80118e0:	d062      	beq.n	80119a8 <HAL_RCC_ClockConfig+0x1b0>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	079b      	lsls	r3, r3, #30
 80118e6:	d420      	bmi.n	801192a <HAL_RCC_ClockConfig+0x132>
 80118e8:	e79a      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80118ea:	330b      	adds	r3, #11
 80118ec:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80118ee:	4b52      	ldr	r3, [pc, #328]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 80118f0:	4699      	mov	r9, r3
 80118f2:	e004      	b.n	80118fe <HAL_RCC_ClockConfig+0x106>
 80118f4:	f7fd ff5e 	bl	800f7b4 <HAL_GetTick>
 80118f8:	1bc0      	subs	r0, r0, r7
 80118fa:	4548      	cmp	r0, r9
 80118fc:	d838      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80118fe:	4642      	mov	r2, r8
 8011900:	6873      	ldr	r3, [r6, #4]
 8011902:	4013      	ands	r3, r2
 8011904:	2b04      	cmp	r3, #4
 8011906:	d1f5      	bne.n	80118f4 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011908:	2201      	movs	r2, #1
 801190a:	4949      	ldr	r1, [pc, #292]	; (8011a30 <HAL_RCC_ClockConfig+0x238>)
 801190c:	680b      	ldr	r3, [r1, #0]
 801190e:	4393      	bics	r3, r2
 8011910:	4323      	orrs	r3, r4
 8011912:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011914:	680b      	ldr	r3, [r1, #0]
 8011916:	401a      	ands	r2, r3
 8011918:	42a2      	cmp	r2, r4
 801191a:	d000      	beq.n	801191e <HAL_RCC_ClockConfig+0x126>
 801191c:	e780      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801191e:	682b      	ldr	r3, [r5, #0]
 8011920:	e7bd      	b.n	801189e <HAL_RCC_ClockConfig+0xa6>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	039b      	lsls	r3, r3, #14
 8011926:	d400      	bmi.n	801192a <HAL_RCC_ClockConfig+0x132>
 8011928:	e77a      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801192a:	2103      	movs	r1, #3
 801192c:	4e41      	ldr	r6, [pc, #260]	; (8011a34 <HAL_RCC_ClockConfig+0x23c>)
 801192e:	6873      	ldr	r3, [r6, #4]
 8011930:	438b      	bics	r3, r1
 8011932:	4313      	orrs	r3, r2
 8011934:	6073      	str	r3, [r6, #4]
      tickstart = HAL_GetTick();
 8011936:	f7fd ff3d 	bl	800f7b4 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801193a:	686b      	ldr	r3, [r5, #4]
      tickstart = HAL_GetTick();
 801193c:	0007      	movs	r7, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801193e:	2b01      	cmp	r3, #1
 8011940:	d0d3      	beq.n	80118ea <HAL_RCC_ClockConfig+0xf2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011942:	2b02      	cmp	r3, #2
 8011944:	d034      	beq.n	80119b0 <HAL_RCC_ClockConfig+0x1b8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011946:	2b03      	cmp	r3, #3
 8011948:	d014      	beq.n	8011974 <HAL_RCC_ClockConfig+0x17c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801194a:	230c      	movs	r3, #12
 801194c:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801194e:	4b3a      	ldr	r3, [pc, #232]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 8011950:	4699      	mov	r9, r3
 8011952:	e004      	b.n	801195e <HAL_RCC_ClockConfig+0x166>
 8011954:	f7fd ff2e 	bl	800f7b4 <HAL_GetTick>
 8011958:	1bc0      	subs	r0, r0, r7
 801195a:	4548      	cmp	r0, r9
 801195c:	d808      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801195e:	4642      	mov	r2, r8
 8011960:	6873      	ldr	r3, [r6, #4]
 8011962:	421a      	tst	r2, r3
 8011964:	d1f6      	bne.n	8011954 <HAL_RCC_ClockConfig+0x15c>
 8011966:	e7cf      	b.n	8011908 <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	019b      	lsls	r3, r3, #6
 801196c:	d4dd      	bmi.n	801192a <HAL_RCC_ClockConfig+0x132>
 801196e:	e757      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
            return HAL_TIMEOUT;
 8011970:	2003      	movs	r0, #3
 8011972:	e756      	b.n	8011822 <HAL_RCC_ClockConfig+0x2a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011974:	3309      	adds	r3, #9
 8011976:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011978:	4b2f      	ldr	r3, [pc, #188]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 801197a:	4699      	mov	r9, r3
 801197c:	e004      	b.n	8011988 <HAL_RCC_ClockConfig+0x190>
 801197e:	f7fd ff19 	bl	800f7b4 <HAL_GetTick>
 8011982:	1bc0      	subs	r0, r0, r7
 8011984:	4548      	cmp	r0, r9
 8011986:	d8f3      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011988:	4642      	mov	r2, r8
 801198a:	6873      	ldr	r3, [r6, #4]
 801198c:	4013      	ands	r3, r2
 801198e:	2b0c      	cmp	r3, #12
 8011990:	d1f5      	bne.n	801197e <HAL_RCC_ClockConfig+0x186>
 8011992:	e7b9      	b.n	8011908 <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011996:	03db      	lsls	r3, r3, #15
 8011998:	d500      	bpl.n	801199c <HAL_RCC_ClockConfig+0x1a4>
 801199a:	e760      	b.n	801185e <HAL_RCC_ClockConfig+0x66>
 801199c:	e740      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	039b      	lsls	r3, r3, #14
 80119a2:	d500      	bpl.n	80119a6 <HAL_RCC_ClockConfig+0x1ae>
 80119a4:	e75b      	b.n	801185e <HAL_RCC_ClockConfig+0x66>
 80119a6:	e73b      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80119a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119aa:	03db      	lsls	r3, r3, #15
 80119ac:	d4bd      	bmi.n	801192a <HAL_RCC_ClockConfig+0x132>
 80119ae:	e737      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80119b0:	330a      	adds	r3, #10
 80119b2:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119b4:	4b20      	ldr	r3, [pc, #128]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 80119b6:	4699      	mov	r9, r3
 80119b8:	e004      	b.n	80119c4 <HAL_RCC_ClockConfig+0x1cc>
 80119ba:	f7fd fefb 	bl	800f7b4 <HAL_GetTick>
 80119be:	1bc0      	subs	r0, r0, r7
 80119c0:	4548      	cmp	r0, r9
 80119c2:	d8d5      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80119c4:	4642      	mov	r2, r8
 80119c6:	6873      	ldr	r3, [r6, #4]
 80119c8:	4013      	ands	r3, r2
 80119ca:	2b08      	cmp	r3, #8
 80119cc:	d1f5      	bne.n	80119ba <HAL_RCC_ClockConfig+0x1c2>
 80119ce:	e79b      	b.n	8011908 <HAL_RCC_ClockConfig+0x110>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	019b      	lsls	r3, r3, #6
 80119d4:	d500      	bpl.n	80119d8 <HAL_RCC_ClockConfig+0x1e0>
 80119d6:	e742      	b.n	801185e <HAL_RCC_ClockConfig+0x66>
 80119d8:	e722      	b.n	8011820 <HAL_RCC_ClockConfig+0x28>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119da:	4b17      	ldr	r3, [pc, #92]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 80119dc:	4698      	mov	r8, r3
 80119de:	e004      	b.n	80119ea <HAL_RCC_ClockConfig+0x1f2>
 80119e0:	f7fd fee8 	bl	800f7b4 <HAL_GetTick>
 80119e4:	1b80      	subs	r0, r0, r6
 80119e6:	4540      	cmp	r0, r8
 80119e8:	d8c2      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80119ea:	6863      	ldr	r3, [r4, #4]
 80119ec:	403b      	ands	r3, r7
 80119ee:	2b04      	cmp	r3, #4
 80119f0:	d1f6      	bne.n	80119e0 <HAL_RCC_ClockConfig+0x1e8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80119f2:	682b      	ldr	r3, [r5, #0]
 80119f4:	e753      	b.n	801189e <HAL_RCC_ClockConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80119f6:	4b10      	ldr	r3, [pc, #64]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 80119f8:	4698      	mov	r8, r3
 80119fa:	e004      	b.n	8011a06 <HAL_RCC_ClockConfig+0x20e>
 80119fc:	f7fd feda 	bl	800f7b4 <HAL_GetTick>
 8011a00:	1b80      	subs	r0, r0, r6
 8011a02:	4540      	cmp	r0, r8
 8011a04:	d8b4      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011a06:	6863      	ldr	r3, [r4, #4]
 8011a08:	403b      	ands	r3, r7
 8011a0a:	2b08      	cmp	r3, #8
 8011a0c:	d1f6      	bne.n	80119fc <HAL_RCC_ClockConfig+0x204>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a0e:	682b      	ldr	r3, [r5, #0]
 8011a10:	e745      	b.n	801189e <HAL_RCC_ClockConfig+0xa6>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a12:	4b09      	ldr	r3, [pc, #36]	; (8011a38 <HAL_RCC_ClockConfig+0x240>)
 8011a14:	4698      	mov	r8, r3
 8011a16:	e004      	b.n	8011a22 <HAL_RCC_ClockConfig+0x22a>
 8011a18:	f7fd fecc 	bl	800f7b4 <HAL_GetTick>
 8011a1c:	1b80      	subs	r0, r0, r6
 8011a1e:	4540      	cmp	r0, r8
 8011a20:	d8a6      	bhi.n	8011970 <HAL_RCC_ClockConfig+0x178>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011a22:	6863      	ldr	r3, [r4, #4]
 8011a24:	403b      	ands	r3, r7
 8011a26:	2b0c      	cmp	r3, #12
 8011a28:	d1f6      	bne.n	8011a18 <HAL_RCC_ClockConfig+0x220>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a2a:	682b      	ldr	r3, [r5, #0]
 8011a2c:	e737      	b.n	801189e <HAL_RCC_ClockConfig+0xa6>
 8011a2e:	46c0      	nop			; (mov r8, r8)
 8011a30:	40022000 	.word	0x40022000
 8011a34:	40021000 	.word	0x40021000
 8011a38:	00001388 	.word	0x00001388
 8011a3c:	fffff8ff 	.word	0xfffff8ff

08011a40 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011a40:	b570      	push	{r4, r5, r6, lr}
 8011a42:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011a44:	4669      	mov	r1, sp
 8011a46:	000a      	movs	r2, r1
 8011a48:	4b1b      	ldr	r3, [pc, #108]	; (8011ab8 <HAL_RCC_GetSysClockFreq+0x78>)
 8011a4a:	cb31      	ldmia	r3!, {r0, r4, r5}
 8011a4c:	c231      	stmia	r2!, {r0, r4, r5}
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011a52:	aa04      	add	r2, sp, #16
 8011a54:	0010      	movs	r0, r2
 8011a56:	4b19      	ldr	r3, [pc, #100]	; (8011abc <HAL_RCC_GetSysClockFreq+0x7c>)
 8011a58:	cb70      	ldmia	r3!, {r4, r5, r6}
 8011a5a:	c070      	stmia	r0!, {r4, r5, r6}
 8011a5c:	681b      	ldr	r3, [r3, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011a5e:	4d18      	ldr	r5, [pc, #96]	; (8011ac0 <HAL_RCC_GetSysClockFreq+0x80>)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011a60:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011a62:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8011a64:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8011a66:	4018      	ands	r0, r3
 8011a68:	2808      	cmp	r0, #8
 8011a6a:	d00a      	beq.n	8011a82 <HAL_RCC_GetSysClockFreq+0x42>
 8011a6c:	380c      	subs	r0, #12
 8011a6e:	1e43      	subs	r3, r0, #1
 8011a70:	4198      	sbcs	r0, r3
 8011a72:	4b14      	ldr	r3, [pc, #80]	; (8011ac4 <HAL_RCC_GetSysClockFreq+0x84>)
 8011a74:	4240      	negs	r0, r0
 8011a76:	4018      	ands	r0, r3
 8011a78:	4b13      	ldr	r3, [pc, #76]	; (8011ac8 <HAL_RCC_GetSysClockFreq+0x88>)
 8011a7a:	469c      	mov	ip, r3
 8011a7c:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011a7e:	b008      	add	sp, #32
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011a82:	200f      	movs	r0, #15
 8011a84:	0c9c      	lsrs	r4, r3, #18
 8011a86:	4004      	ands	r4, r0
 8011a88:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011a8a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011a8c:	4008      	ands	r0, r1
 8011a8e:	5c11      	ldrb	r1, [r2, r0]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011a90:	22c0      	movs	r2, #192	; 0xc0
 8011a92:	2080      	movs	r0, #128	; 0x80
 8011a94:	0252      	lsls	r2, r2, #9
 8011a96:	4013      	ands	r3, r2
 8011a98:	0240      	lsls	r0, r0, #9
 8011a9a:	4283      	cmp	r3, r0
 8011a9c:	d001      	beq.n	8011aa2 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011a9e:	4293      	cmp	r3, r2
 8011aa0:	d004      	beq.n	8011aac <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011aa2:	480a      	ldr	r0, [pc, #40]	; (8011acc <HAL_RCC_GetSysClockFreq+0x8c>)
 8011aa4:	f7ee fb54 	bl	8000150 <__udivsi3>
 8011aa8:	4360      	muls	r0, r4
 8011aaa:	e7e8      	b.n	8011a7e <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011aac:	4806      	ldr	r0, [pc, #24]	; (8011ac8 <HAL_RCC_GetSysClockFreq+0x88>)
 8011aae:	f7ee fb4f 	bl	8000150 <__udivsi3>
 8011ab2:	4360      	muls	r0, r4
 8011ab4:	e7e3      	b.n	8011a7e <HAL_RCC_GetSysClockFreq+0x3e>
 8011ab6:	46c0      	nop			; (mov r8, r8)
 8011ab8:	0801c3ac 	.word	0x0801c3ac
 8011abc:	0801c3c0 	.word	0x0801c3c0
 8011ac0:	40021000 	.word	0x40021000
 8011ac4:	fd9da600 	.word	0xfd9da600
 8011ac8:	02dc6c00 	.word	0x02dc6c00
 8011acc:	007a1200 	.word	0x007a1200

08011ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ad0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011ad2:	f7ff ffb5 	bl	8011a40 <HAL_RCC_GetSysClockFreq>
 8011ad6:	4b05      	ldr	r3, [pc, #20]	; (8011aec <HAL_RCC_GetHCLKFreq+0x1c>)
 8011ad8:	4a05      	ldr	r2, [pc, #20]	; (8011af0 <HAL_RCC_GetHCLKFreq+0x20>)
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	061b      	lsls	r3, r3, #24
 8011ade:	0f1b      	lsrs	r3, r3, #28
 8011ae0:	5cd3      	ldrb	r3, [r2, r3]
 8011ae2:	40d8      	lsrs	r0, r3
 8011ae4:	4b03      	ldr	r3, [pc, #12]	; (8011af4 <HAL_RCC_GetHCLKFreq+0x24>)
 8011ae6:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011ae8:	bd10      	pop	{r4, pc}
 8011aea:	46c0      	nop			; (mov r8, r8)
 8011aec:	40021000 	.word	0x40021000
 8011af0:	08019934 	.word	0x08019934
 8011af4:	200000b8 	.word	0x200000b8

08011af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011af8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011afa:	f7ff ffa1 	bl	8011a40 <HAL_RCC_GetSysClockFreq>
 8011afe:	4907      	ldr	r1, [pc, #28]	; (8011b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011b00:	4a07      	ldr	r2, [pc, #28]	; (8011b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011b02:	684b      	ldr	r3, [r1, #4]
 8011b04:	061b      	lsls	r3, r3, #24
 8011b06:	0f1b      	lsrs	r3, r3, #28
 8011b08:	5cd3      	ldrb	r3, [r2, r3]
 8011b0a:	40d8      	lsrs	r0, r3
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8011b0e:	6018      	str	r0, [r3, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011b10:	684b      	ldr	r3, [r1, #4]
 8011b12:	055b      	lsls	r3, r3, #21
 8011b14:	0f5b      	lsrs	r3, r3, #29
 8011b16:	5cd3      	ldrb	r3, [r2, r3]
 8011b18:	40d8      	lsrs	r0, r3
}    
 8011b1a:	bd10      	pop	{r4, pc}
 8011b1c:	40021000 	.word	0x40021000
 8011b20:	08019934 	.word	0x08019934
 8011b24:	200000b8 	.word	0x200000b8

08011b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2a:	46c6      	mov	lr, r8
 8011b2c:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011b2e:	6803      	ldr	r3, [r0, #0]
{
 8011b30:	0004      	movs	r4, r0
 8011b32:	b082      	sub	sp, #8
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011b34:	03da      	lsls	r2, r3, #15
 8011b36:	d507      	bpl.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011b38:	493e      	ldr	r1, [pc, #248]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b3a:	6840      	ldr	r0, [r0, #4]
 8011b3c:	6a0a      	ldr	r2, [r1, #32]
 8011b3e:	4042      	eors	r2, r0
 8011b40:	20c0      	movs	r0, #192	; 0xc0
 8011b42:	0080      	lsls	r0, r0, #2
 8011b44:	4202      	tst	r2, r0
 8011b46:	d131      	bne.n	8011bac <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b48:	07da      	lsls	r2, r3, #31
 8011b4a:	d506      	bpl.n	8011b5a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b4c:	2003      	movs	r0, #3
 8011b4e:	4939      	ldr	r1, [pc, #228]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b50:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011b52:	4382      	bics	r2, r0
 8011b54:	68a0      	ldr	r0, [r4, #8]
 8011b56:	4302      	orrs	r2, r0
 8011b58:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011b5a:	079a      	lsls	r2, r3, #30
 8011b5c:	d506      	bpl.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011b5e:	4935      	ldr	r1, [pc, #212]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b60:	4835      	ldr	r0, [pc, #212]	; (8011c38 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8011b62:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011b64:	4002      	ands	r2, r0
 8011b66:	68e0      	ldr	r0, [r4, #12]
 8011b68:	4302      	orrs	r2, r0
 8011b6a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011b6c:	035a      	lsls	r2, r3, #13
 8011b6e:	d506      	bpl.n	8011b7e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011b70:	4930      	ldr	r1, [pc, #192]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b72:	4832      	ldr	r0, [pc, #200]	; (8011c3c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011b74:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011b76:	4002      	ands	r2, r0
 8011b78:	6920      	ldr	r0, [r4, #16]
 8011b7a:	4302      	orrs	r2, r0
 8011b7c:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011b7e:	069a      	lsls	r2, r3, #26
 8011b80:	d506      	bpl.n	8011b90 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011b82:	2010      	movs	r0, #16
 8011b84:	492b      	ldr	r1, [pc, #172]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8011b88:	4382      	bics	r2, r0
 8011b8a:	6960      	ldr	r0, [r4, #20]
 8011b8c:	4302      	orrs	r2, r0
 8011b8e:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011b90:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011b92:	055b      	lsls	r3, r3, #21
 8011b94:	d506      	bpl.n	8011ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011b96:	2140      	movs	r1, #64	; 0x40
 8011b98:	4a26      	ldr	r2, [pc, #152]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011b9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011b9c:	438b      	bics	r3, r1
 8011b9e:	69a1      	ldr	r1, [r4, #24]
 8011ba0:	430b      	orrs	r3, r1
 8011ba2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8011ba4:	b002      	add	sp, #8
 8011ba6:	bc80      	pop	{r7}
 8011ba8:	46b8      	mov	r8, r7
 8011baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bac:	2080      	movs	r0, #128	; 0x80
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011bae:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bb0:	69ca      	ldr	r2, [r1, #28]
 8011bb2:	0540      	lsls	r0, r0, #21
 8011bb4:	4302      	orrs	r2, r0
 8011bb6:	61ca      	str	r2, [r1, #28]
 8011bb8:	69cb      	ldr	r3, [r1, #28]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011bba:	4d21      	ldr	r5, [pc, #132]	; (8011c40 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8011bbc:	4003      	ands	r3, r0
 8011bbe:	9301      	str	r3, [sp, #4]
 8011bc0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011bc2:	682b      	ldr	r3, [r5, #0]
 8011bc4:	007f      	lsls	r7, r7, #1
 8011bc6:	433b      	orrs	r3, r7
 8011bc8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8011bca:	f7fd fdf3 	bl	800f7b4 <HAL_GetTick>
 8011bce:	0006      	movs	r6, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011bd0:	e004      	b.n	8011bdc <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011bd2:	f7fd fdef 	bl	800f7b4 <HAL_GetTick>
 8011bd6:	1b80      	subs	r0, r0, r6
 8011bd8:	2864      	cmp	r0, #100	; 0x64
 8011bda:	d829      	bhi.n	8011c30 <HAL_RCCEx_PeriphCLKConfig+0x108>
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8011bdc:	682b      	ldr	r3, [r5, #0]
 8011bde:	423b      	tst	r3, r7
 8011be0:	d0f7      	beq.n	8011bd2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_BACKUPRESET_FORCE();
 8011be2:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011be4:	4d13      	ldr	r5, [pc, #76]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011be6:	0252      	lsls	r2, r2, #9
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011be8:	6a29      	ldr	r1, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8011bea:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011bec:	4b15      	ldr	r3, [pc, #84]	; (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8011bee:	4302      	orrs	r2, r0
 8011bf0:	622a      	str	r2, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011bf2:	6a2a      	ldr	r2, [r5, #32]
 8011bf4:	4814      	ldr	r0, [pc, #80]	; (8011c48 <HAL_RCCEx_PeriphCLKConfig+0x120>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011bf6:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011bf8:	4002      	ands	r2, r0
 8011bfa:	622a      	str	r2, [r5, #32]
      RCC->BDCR = temp_reg;
 8011bfc:	622b      	str	r3, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8011bfe:	078b      	lsls	r3, r1, #30
 8011c00:	d408      	bmi.n	8011c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8011c02:	4a0c      	ldr	r2, [pc, #48]	; (8011c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8011c04:	490f      	ldr	r1, [pc, #60]	; (8011c44 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8011c06:	6a13      	ldr	r3, [r2, #32]
 8011c08:	400b      	ands	r3, r1
 8011c0a:	6861      	ldr	r1, [r4, #4]
 8011c0c:	430b      	orrs	r3, r1
 8011c0e:	6213      	str	r3, [r2, #32]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	e799      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8011c14:	f7fd fdce 	bl	800f7b4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c18:	4b0c      	ldr	r3, [pc, #48]	; (8011c4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
        tickstart = HAL_GetTick();
 8011c1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c1c:	2702      	movs	r7, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c1e:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011c20:	6a2b      	ldr	r3, [r5, #32]
 8011c22:	421f      	tst	r7, r3
 8011c24:	d1ed      	bne.n	8011c02 <HAL_RCCEx_PeriphCLKConfig+0xda>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011c26:	f7fd fdc5 	bl	800f7b4 <HAL_GetTick>
 8011c2a:	1b80      	subs	r0, r0, r6
 8011c2c:	4540      	cmp	r0, r8
 8011c2e:	d9f7      	bls.n	8011c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          return HAL_TIMEOUT;
 8011c30:	2003      	movs	r0, #3
 8011c32:	e7b7      	b.n	8011ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011c34:	40021000 	.word	0x40021000
 8011c38:	fffcffff 	.word	0xfffcffff
 8011c3c:	fff3ffff 	.word	0xfff3ffff
 8011c40:	40007000 	.word	0x40007000
 8011c44:	fffffcff 	.word	0xfffffcff
 8011c48:	fffeffff 	.word	0xfffeffff
 8011c4c:	00001388 	.word	0x00001388

08011c50 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8011c50:	4770      	bx	lr
 8011c52:	46c0      	nop			; (mov r8, r8)

08011c54 <HAL_RTC_Init>:
{
 8011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c56:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8011c58:	d049      	beq.n	8011cee <HAL_RTC_Init+0x9a>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8011c5a:	7f43      	ldrb	r3, [r0, #29]
 8011c5c:	b2da      	uxtb	r2, r3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d047      	beq.n	8011cf2 <HAL_RTC_Init+0x9e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011c62:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c64:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8011c66:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	625a      	str	r2, [r3, #36]	; 0x24
 8011c6c:	3a77      	subs	r2, #119	; 0x77
 8011c6e:	625a      	str	r2, [r3, #36]	; 0x24
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011c70:	68da      	ldr	r2, [r3, #12]
 8011c72:	0652      	lsls	r2, r2, #25
 8011c74:	d524      	bpl.n	8011cc0 <HAL_RTC_Init+0x6c>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011c76:	689a      	ldr	r2, [r3, #8]
 8011c78:	4920      	ldr	r1, [pc, #128]	; (8011cfc <HAL_RTC_Init+0xa8>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011c7a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8011c7c:	400a      	ands	r2, r1
 8011c7e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011c80:	6862      	ldr	r2, [r4, #4]
 8011c82:	6899      	ldr	r1, [r3, #8]
 8011c84:	4302      	orrs	r2, r0
 8011c86:	6960      	ldr	r0, [r4, #20]
 8011c88:	4302      	orrs	r2, r0
 8011c8a:	430a      	orrs	r2, r1
 8011c8c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011c8e:	68e2      	ldr	r2, [r4, #12]
    return HAL_OK;
 8011c90:	2000      	movs	r0, #0
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8011c92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011c94:	68a2      	ldr	r2, [r4, #8]
 8011c96:	6919      	ldr	r1, [r3, #16]
 8011c98:	0412      	lsls	r2, r2, #16
 8011c9a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011c9c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8011c9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8011ca0:	68da      	ldr	r2, [r3, #12]
 8011ca2:	438a      	bics	r2, r1
 8011ca4:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8011ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ca8:	4915      	ldr	r1, [pc, #84]	; (8011d00 <HAL_RTC_Init+0xac>)
 8011caa:	400a      	ands	r2, r1
 8011cac:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8011cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011cb0:	69a1      	ldr	r1, [r4, #24]
 8011cb2:	430a      	orrs	r2, r1
 8011cb4:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011cb6:	22ff      	movs	r2, #255	; 0xff
 8011cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	7763      	strb	r3, [r4, #29]
}
 8011cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	4252      	negs	r2, r2
 8011cc4:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8011cc6:	f7fd fd75 	bl	800f7b4 <HAL_GetTick>
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011cca:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8011ccc:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011cce:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011cd0:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011cd2:	6823      	ldr	r3, [r4, #0]
 8011cd4:	68da      	ldr	r2, [r3, #12]
 8011cd6:	4216      	tst	r6, r2
 8011cd8:	d1cd      	bne.n	8011c76 <HAL_RTC_Init+0x22>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011cda:	f7fd fd6b 	bl	800f7b4 <HAL_GetTick>
 8011cde:	1b40      	subs	r0, r0, r5
 8011ce0:	42b8      	cmp	r0, r7
 8011ce2:	d9f6      	bls.n	8011cd2 <HAL_RTC_Init+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011ce4:	22ff      	movs	r2, #255	; 0xff
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011cea:	2304      	movs	r3, #4
 8011cec:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8011cee:	2001      	movs	r0, #1
 8011cf0:	e7e5      	b.n	8011cbe <HAL_RTC_Init+0x6a>
    hrtc->Lock = HAL_UNLOCKED;
 8011cf2:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8011cf4:	f7ff ffac 	bl	8011c50 <HAL_RTC_MspInit>
 8011cf8:	e7b3      	b.n	8011c62 <HAL_RTC_Init+0xe>
 8011cfa:	46c0      	nop			; (mov r8, r8)
 8011cfc:	ff8fffbf 	.word	0xff8fffbf
 8011d00:	fffbffff 	.word	0xfffbffff

08011d04 <HAL_RTC_SetTime>:
{
 8011d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d06:	464e      	mov	r6, r9
 8011d08:	4645      	mov	r5, r8
 8011d0a:	46de      	mov	lr, fp
 8011d0c:	4657      	mov	r7, sl
 8011d0e:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8011d10:	7f03      	ldrb	r3, [r0, #28]
{
 8011d12:	0005      	movs	r5, r0
 8011d14:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d100      	bne.n	8011d1c <HAL_RTC_SetTime+0x18>
 8011d1a:	e0c2      	b.n	8011ea2 <HAL_RTC_SetTime+0x19e>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d20:	3301      	adds	r3, #1
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011d22:	6807      	ldr	r7, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011d24:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8011d26:	2a00      	cmp	r2, #0
 8011d28:	d054      	beq.n	8011dd4 <HAL_RTC_SetTime+0xd0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011d2a:	2140      	movs	r1, #64	; 0x40
 8011d2c:	000b      	movs	r3, r1
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	4013      	ands	r3, r2
 8011d32:	4211      	tst	r1, r2
 8011d34:	d100      	bne.n	8011d38 <HAL_RTC_SetTime+0x34>
 8011d36:	e0a7      	b.n	8011e88 <HAL_RTC_SetTime+0x184>
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8011d38:	7a33      	ldrb	r3, [r6, #8]
 8011d3a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d3c:	7834      	ldrb	r4, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011d3e:	7872      	ldrb	r2, [r6, #1]
              ((uint32_t)sTime->Seconds) | \
 8011d40:	78b1      	ldrb	r1, [r6, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d42:	0424      	lsls	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011d44:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d46:	4314      	orrs	r4, r2
              ((uint32_t)(sTime->Minutes) << 8) | \
 8011d48:	430c      	orrs	r4, r1
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d4a:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011d4c:	23ca      	movs	r3, #202	; 0xca
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d50:	3b77      	subs	r3, #119	; 0x77
 8011d52:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011d54:	68fb      	ldr	r3, [r7, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8011d56:	46a0      	mov	r8, r4
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011d58:	065b      	lsls	r3, r3, #25
 8011d5a:	d400      	bmi.n	8011d5e <HAL_RTC_SetTime+0x5a>
 8011d5c:	e073      	b.n	8011e46 <HAL_RTC_SetTime+0x142>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011d5e:	4644      	mov	r4, r8
 8011d60:	4b51      	ldr	r3, [pc, #324]	; (8011ea8 <HAL_RTC_SetTime+0x1a4>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011d62:	4a52      	ldr	r2, [pc, #328]	; (8011eac <HAL_RTC_SetTime+0x1a8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011d64:	401c      	ands	r4, r3
 8011d66:	603c      	str	r4, [r7, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011d68:	68bb      	ldr	r3, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011d6a:	6931      	ldr	r1, [r6, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011d70:	68f3      	ldr	r3, [r6, #12]
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	430b      	orrs	r3, r1
 8011d76:	4313      	orrs	r3, r2
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011d78:	2280      	movs	r2, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011d7a:	60bb      	str	r3, [r7, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4393      	bics	r3, r2
 8011d80:	60fb      	str	r3, [r7, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	069b      	lsls	r3, r3, #26
 8011d86:	d418      	bmi.n	8011dba <HAL_RTC_SetTime+0xb6>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	3220      	adds	r2, #32
 8011d8c:	4393      	bics	r3, r2
 8011d8e:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8011d90:	f7fd fd10 	bl	800f7b4 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011d94:	23fa      	movs	r3, #250	; 0xfa
 8011d96:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8011d98:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011d9a:	2420      	movs	r4, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011d9c:	4699      	mov	r9, r3
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011d9e:	e005      	b.n	8011dac <HAL_RTC_SetTime+0xa8>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011da0:	f7fd fd08 	bl	800f7b4 <HAL_GetTick>
 8011da4:	1b80      	subs	r0, r0, r6
 8011da6:	4548      	cmp	r0, r9
 8011da8:	d900      	bls.n	8011dac <HAL_RTC_SetTime+0xa8>
 8011daa:	e071      	b.n	8011e90 <HAL_RTC_SetTime+0x18c>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011dac:	0022      	movs	r2, r4
 8011dae:	682f      	ldr	r7, [r5, #0]
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	401a      	ands	r2, r3
 8011db4:	4690      	mov	r8, r2
 8011db6:	421c      	tst	r4, r3
 8011db8:	d0f2      	beq.n	8011da0 <HAL_RTC_SetTime+0x9c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011dba:	23ff      	movs	r3, #255	; 0xff
 8011dbc:	627b      	str	r3, [r7, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8011dbe:	3bfe      	subs	r3, #254	; 0xfe
 8011dc0:	776b      	strb	r3, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8011dc2:	2300      	movs	r3, #0
   return HAL_OK;
 8011dc4:	2000      	movs	r0, #0
   __HAL_UNLOCK(hrtc); 
 8011dc6:	772b      	strb	r3, [r5, #28]
}
 8011dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8011dca:	46bb      	mov	fp, r7
 8011dcc:	46b2      	mov	sl, r6
 8011dce:	46a9      	mov	r9, r5
 8011dd0:	46a0      	mov	r8, r4
 8011dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8011dd4:	2140      	movs	r1, #64	; 0x40
 8011dd6:	0008      	movs	r0, r1
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	4018      	ands	r0, r3
 8011ddc:	4219      	tst	r1, r3
 8011dde:	d055      	beq.n	8011e8c <HAL_RTC_SetTime+0x188>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8011de0:	7a30      	ldrb	r0, [r6, #8]
 8011de2:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011de4:	7831      	ldrb	r1, [r6, #0]
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8011de6:	2909      	cmp	r1, #9
 8011de8:	d908      	bls.n	8011dfc <HAL_RTC_SetTime+0xf8>
  uint32_t bcdhigh = 0;
 8011dea:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10;
 8011dec:	390a      	subs	r1, #10
 8011dee:	b2c9      	uxtb	r1, r1
    bcdhigh++;
 8011df0:	3301      	adds	r3, #1
  while(Value >= 10)
 8011df2:	2909      	cmp	r1, #9
 8011df4:	d8fa      	bhi.n	8011dec <HAL_RTC_SetTime+0xe8>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011df6:	011b      	lsls	r3, r3, #4
 8011df8:	4319      	orrs	r1, r3
 8011dfa:	b2c9      	uxtb	r1, r1
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011dfc:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011dfe:	0409      	lsls	r1, r1, #16
  while(Value >= 10)
 8011e00:	2b09      	cmp	r3, #9
 8011e02:	d908      	bls.n	8011e16 <HAL_RTC_SetTime+0x112>
  uint32_t bcdhigh = 0;
 8011e04:	2400      	movs	r4, #0
    Value -= 10;
 8011e06:	3b0a      	subs	r3, #10
 8011e08:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011e0a:	3401      	adds	r4, #1
  while(Value >= 10)
 8011e0c:	2b09      	cmp	r3, #9
 8011e0e:	d8fa      	bhi.n	8011e06 <HAL_RTC_SetTime+0x102>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011e10:	0124      	lsls	r4, r4, #4
 8011e12:	4323      	orrs	r3, r4
 8011e14:	b2db      	uxtb	r3, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8011e16:	78b4      	ldrb	r4, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8011e18:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011e1a:	2c09      	cmp	r4, #9
 8011e1c:	d907      	bls.n	8011e2e <HAL_RTC_SetTime+0x12a>
    Value -= 10;
 8011e1e:	3c0a      	subs	r4, #10
 8011e20:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8011e22:	3201      	adds	r2, #1
  while(Value >= 10)
 8011e24:	2c09      	cmp	r4, #9
 8011e26:	d8fa      	bhi.n	8011e1e <HAL_RTC_SetTime+0x11a>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011e28:	0112      	lsls	r2, r2, #4
 8011e2a:	4314      	orrs	r4, r2
 8011e2c:	b2e4      	uxtb	r4, r4
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8011e2e:	4301      	orrs	r1, r0
 8011e30:	430b      	orrs	r3, r1
 8011e32:	4323      	orrs	r3, r4
 8011e34:	4698      	mov	r8, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011e36:	23ca      	movs	r3, #202	; 0xca
 8011e38:	627b      	str	r3, [r7, #36]	; 0x24
 8011e3a:	3b77      	subs	r3, #119	; 0x77
 8011e3c:	627b      	str	r3, [r7, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	065b      	lsls	r3, r3, #25
 8011e42:	d500      	bpl.n	8011e46 <HAL_RTC_SetTime+0x142>
 8011e44:	e78b      	b.n	8011d5e <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011e46:	2301      	movs	r3, #1
 8011e48:	425b      	negs	r3, r3
 8011e4a:	60fb      	str	r3, [r7, #12]
    tickstart = HAL_GetTick();
 8011e4c:	f7fd fcb2 	bl	800f7b4 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e50:	23fa      	movs	r3, #250	; 0xfa
 8011e52:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 8011e54:	4681      	mov	r9, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e56:	2440      	movs	r4, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e58:	469b      	mov	fp, r3
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011e5a:	0022      	movs	r2, r4
 8011e5c:	682f      	ldr	r7, [r5, #0]
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	401a      	ands	r2, r3
 8011e62:	4692      	mov	sl, r2
 8011e64:	421c      	tst	r4, r3
 8011e66:	d000      	beq.n	8011e6a <HAL_RTC_SetTime+0x166>
 8011e68:	e779      	b.n	8011d5e <HAL_RTC_SetTime+0x5a>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011e6a:	f7fd fca3 	bl	800f7b4 <HAL_GetTick>
 8011e6e:	464b      	mov	r3, r9
 8011e70:	1ac0      	subs	r0, r0, r3
 8011e72:	4558      	cmp	r0, fp
 8011e74:	d9f1      	bls.n	8011e5a <HAL_RTC_SetTime+0x156>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011e76:	22ff      	movs	r2, #255	; 0xff
 8011e78:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 8011e7a:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8011e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8011e7e:	2304      	movs	r3, #4
 8011e80:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011e82:	4653      	mov	r3, sl
 8011e84:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 8011e86:	e79f      	b.n	8011dc8 <HAL_RTC_SetTime+0xc4>
      sTime->TimeFormat = 0x00;
 8011e88:	7233      	strb	r3, [r6, #8]
 8011e8a:	e757      	b.n	8011d3c <HAL_RTC_SetTime+0x38>
      sTime->TimeFormat = 0x00;
 8011e8c:	7230      	strb	r0, [r6, #8]
 8011e8e:	e7a9      	b.n	8011de4 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011e90:	22ff      	movs	r2, #255	; 0xff
 8011e92:	682b      	ldr	r3, [r5, #0]
        return HAL_ERROR;
 8011e94:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011e96:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8011e98:	2304      	movs	r3, #4
 8011e9a:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8011e9c:	4643      	mov	r3, r8
 8011e9e:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8011ea0:	e792      	b.n	8011dc8 <HAL_RTC_SetTime+0xc4>
  __HAL_LOCK(hrtc);
 8011ea2:	2002      	movs	r0, #2
 8011ea4:	e790      	b.n	8011dc8 <HAL_RTC_SetTime+0xc4>
 8011ea6:	46c0      	nop			; (mov r8, r8)
 8011ea8:	007f7f7f 	.word	0x007f7f7f
 8011eac:	fffbffff 	.word	0xfffbffff

08011eb0 <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011eb0:	6803      	ldr	r3, [r0, #0]
{
 8011eb2:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011eb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011eb6:	2640      	movs	r6, #64	; 0x40
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011eb8:	6048      	str	r0, [r1, #4]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011eba:	203f      	movs	r0, #63	; 0x3f
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8011ebc:	681c      	ldr	r4, [r3, #0]
 8011ebe:	4b13      	ldr	r3, [pc, #76]	; (8011f0c <HAL_RTC_GetTime+0x5c>)
 8011ec0:	401c      	ands	r4, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011ec2:	0c25      	lsrs	r5, r4, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011ec4:	0a23      	lsrs	r3, r4, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011ec6:	4028      	ands	r0, r5
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011ec8:	b2db      	uxtb	r3, r3
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011eca:	b2e4      	uxtb	r4, r4
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011ecc:	402e      	ands	r6, r5
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8011ece:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8011ed0:	704b      	strb	r3, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8011ed2:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8011ed4:	720e      	strb	r6, [r1, #8]
  if(Format == RTC_FORMAT_BIN)
 8011ed6:	2a00      	cmp	r2, #0
 8011ed8:	d115      	bne.n	8011f06 <HAL_RTC_GetTime+0x56>
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  return (tmp + (Value & (uint8_t)0x0F));
 8011eda:	260f      	movs	r6, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011edc:	0900      	lsrs	r0, r0, #4
 8011ede:	0082      	lsls	r2, r0, #2
 8011ee0:	1810      	adds	r0, r2, r0
 8011ee2:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011ee4:	4035      	ands	r5, r6
 8011ee6:	1945      	adds	r5, r0, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ee8:	0918      	lsrs	r0, r3, #4
 8011eea:	0082      	lsls	r2, r0, #2
 8011eec:	1812      	adds	r2, r2, r0
 8011eee:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011ef0:	4033      	ands	r3, r6
 8011ef2:	18d3      	adds	r3, r2, r3
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ef4:	0922      	lsrs	r2, r4, #4
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011ef6:	704b      	strb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011ef8:	0093      	lsls	r3, r2, #2
 8011efa:	189b      	adds	r3, r3, r2
 8011efc:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8011efe:	4034      	ands	r4, r6
 8011f00:	191c      	adds	r4, r3, r4
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011f02:	700d      	strb	r5, [r1, #0]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8011f04:	708c      	strb	r4, [r1, #2]
}
 8011f06:	2000      	movs	r0, #0
 8011f08:	bd70      	pop	{r4, r5, r6, pc}
 8011f0a:	46c0      	nop			; (mov r8, r8)
 8011f0c:	007f7f7f 	.word	0x007f7f7f

08011f10 <HAL_RTC_SetDate>:
{
 8011f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f12:	46ce      	mov	lr, r9
 8011f14:	4647      	mov	r7, r8
 8011f16:	b580      	push	{r7, lr}
 __HAL_LOCK(hrtc);
 8011f18:	7f03      	ldrb	r3, [r0, #28]
{
 8011f1a:	0005      	movs	r5, r0
 __HAL_LOCK(hrtc);
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d100      	bne.n	8011f22 <HAL_RTC_SetDate+0x12>
 8011f20:	e0a8      	b.n	8012074 <HAL_RTC_SetDate+0x164>
 8011f22:	2301      	movs	r3, #1
 8011f24:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8011f26:	3301      	adds	r3, #1
 8011f28:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011f2a:	2a00      	cmp	r2, #0
 8011f2c:	d03d      	beq.n	8011faa <HAL_RTC_SetDate+0x9a>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f2e:	23ca      	movs	r3, #202	; 0xca
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f30:	78c8      	ldrb	r0, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8011f32:	784c      	ldrb	r4, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f34:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8011f36:	0224      	lsls	r4, r4, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f38:	682a      	ldr	r2, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f3a:	4320      	orrs	r0, r4
                  ((uint32_t)sDate->Date) | \
 8011f3c:	788c      	ldrb	r4, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8011f3e:	4320      	orrs	r0, r4
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011f40:	780c      	ldrb	r4, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011f42:	6253      	str	r3, [r2, #36]	; 0x24
 8011f44:	3b77      	subs	r3, #119	; 0x77
 8011f46:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011f48:	68d3      	ldr	r3, [r2, #12]
                  (((uint32_t)sDate->WeekDay) << 13));  
 8011f4a:	0364      	lsls	r4, r4, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8011f4c:	4304      	orrs	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8011f4e:	065b      	lsls	r3, r3, #25
 8011f50:	d564      	bpl.n	801201c <HAL_RTC_SetDate+0x10c>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011f52:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011f54:	4849      	ldr	r0, [pc, #292]	; (801207c <HAL_RTC_SetDate+0x16c>)
 8011f56:	4020      	ands	r0, r4
 8011f58:	6050      	str	r0, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8011f5a:	68d3      	ldr	r3, [r2, #12]
 8011f5c:	438b      	bics	r3, r1
 8011f5e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8011f60:	6893      	ldr	r3, [r2, #8]
 8011f62:	069b      	lsls	r3, r3, #26
 8011f64:	d416      	bmi.n	8011f94 <HAL_RTC_SetDate+0x84>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8011f66:	68d3      	ldr	r3, [r2, #12]
 8011f68:	3120      	adds	r1, #32
 8011f6a:	438b      	bics	r3, r1
 8011f6c:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 8011f6e:	f7fd fc21 	bl	800f7b4 <HAL_GetTick>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011f72:	23fa      	movs	r3, #250	; 0xfa
 8011f74:	009b      	lsls	r3, r3, #2
  tickstart = HAL_GetTick();
 8011f76:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011f78:	2420      	movs	r4, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011f7a:	4698      	mov	r8, r3
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011f7c:	e004      	b.n	8011f88 <HAL_RTC_SetDate+0x78>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8011f7e:	f7fd fc19 	bl	800f7b4 <HAL_GetTick>
 8011f82:	1b80      	subs	r0, r0, r6
 8011f84:	4540      	cmp	r0, r8
 8011f86:	d86d      	bhi.n	8012064 <HAL_RTC_SetDate+0x154>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8011f88:	0027      	movs	r7, r4
 8011f8a:	682a      	ldr	r2, [r5, #0]
 8011f8c:	68d3      	ldr	r3, [r2, #12]
 8011f8e:	401f      	ands	r7, r3
 8011f90:	421c      	tst	r4, r3
 8011f92:	d0f4      	beq.n	8011f7e <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8011f94:	23ff      	movs	r3, #255	; 0xff
 8011f96:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8011f98:	3bfe      	subs	r3, #254	; 0xfe
 8011f9a:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8011f9c:	2300      	movs	r3, #0
    return HAL_OK;    
 8011f9e:	2000      	movs	r0, #0
    __HAL_UNLOCK(hrtc);
 8011fa0:	772b      	strb	r3, [r5, #28]
}
 8011fa2:	bcc0      	pop	{r6, r7}
 8011fa4:	46b9      	mov	r9, r7
 8011fa6:	46b0      	mov	r8, r6
 8011fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8011faa:	2010      	movs	r0, #16
 8011fac:	784b      	ldrb	r3, [r1, #1]
 8011fae:	4218      	tst	r0, r3
 8011fb0:	d054      	beq.n	801205c <HAL_RTC_SetDate+0x14c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011fb2:	4383      	bics	r3, r0
 8011fb4:	330a      	adds	r3, #10
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011fb6:	78cc      	ldrb	r4, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	704b      	strb	r3, [r1, #1]
  while(Value >= 10)
 8011fbc:	2c09      	cmp	r4, #9
 8011fbe:	d95b      	bls.n	8012078 <HAL_RTC_SetDate+0x168>
  uint32_t bcdhigh = 0;
 8011fc0:	2000      	movs	r0, #0
    Value -= 10;
 8011fc2:	3c0a      	subs	r4, #10
 8011fc4:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8011fc6:	3001      	adds	r0, #1
  while(Value >= 10)
 8011fc8:	2c09      	cmp	r4, #9
 8011fca:	d8fa      	bhi.n	8011fc2 <HAL_RTC_SetDate+0xb2>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011fcc:	0100      	lsls	r0, r0, #4
 8011fce:	4304      	orrs	r4, r0
 8011fd0:	b2e4      	uxtb	r4, r4
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8011fd2:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 8011fd4:	2b09      	cmp	r3, #9
 8011fd6:	d908      	bls.n	8011fea <HAL_RTC_SetDate+0xda>
  uint32_t bcdhigh = 0;
 8011fd8:	2000      	movs	r0, #0
    Value -= 10;
 8011fda:	3b0a      	subs	r3, #10
 8011fdc:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8011fde:	3001      	adds	r0, #1
  while(Value >= 10)
 8011fe0:	2b09      	cmp	r3, #9
 8011fe2:	d8fa      	bhi.n	8011fda <HAL_RTC_SetDate+0xca>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011fe4:	0100      	lsls	r0, r0, #4
 8011fe6:	4303      	orrs	r3, r0
 8011fe8:	b2db      	uxtb	r3, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8011fea:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8011fec:	021b      	lsls	r3, r3, #8
  while(Value >= 10)
 8011fee:	2809      	cmp	r0, #9
 8011ff0:	d907      	bls.n	8012002 <HAL_RTC_SetDate+0xf2>
    Value -= 10;
 8011ff2:	380a      	subs	r0, #10
 8011ff4:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8011ff6:	3201      	adds	r2, #1
  while(Value >= 10)
 8011ff8:	2809      	cmp	r0, #9
 8011ffa:	d8fa      	bhi.n	8011ff2 <HAL_RTC_SetDate+0xe2>
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8011ffc:	0112      	lsls	r2, r2, #4
 8011ffe:	4310      	orrs	r0, r2
 8012000:	b2c0      	uxtb	r0, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8012002:	780a      	ldrb	r2, [r1, #0]
 8012004:	0352      	lsls	r2, r2, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012006:	4314      	orrs	r4, r2
 8012008:	431c      	orrs	r4, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801200a:	23ca      	movs	r3, #202	; 0xca
 801200c:	682a      	ldr	r2, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801200e:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012010:	6253      	str	r3, [r2, #36]	; 0x24
 8012012:	3b77      	subs	r3, #119	; 0x77
 8012014:	6253      	str	r3, [r2, #36]	; 0x24
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012016:	68d3      	ldr	r3, [r2, #12]
 8012018:	065b      	lsls	r3, r3, #25
 801201a:	d49a      	bmi.n	8011f52 <HAL_RTC_SetDate+0x42>
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801201c:	2301      	movs	r3, #1
 801201e:	425b      	negs	r3, r3
 8012020:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8012022:	f7fd fbc7 	bl	800f7b4 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012026:	23fa      	movs	r3, #250	; 0xfa
 8012028:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 801202a:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801202c:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801202e:	4699      	mov	r9, r3
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012030:	0031      	movs	r1, r6
 8012032:	682a      	ldr	r2, [r5, #0]
 8012034:	68d3      	ldr	r3, [r2, #12]
 8012036:	4019      	ands	r1, r3
 8012038:	4688      	mov	r8, r1
 801203a:	421e      	tst	r6, r3
 801203c:	d000      	beq.n	8012040 <HAL_RTC_SetDate+0x130>
 801203e:	e788      	b.n	8011f52 <HAL_RTC_SetDate+0x42>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012040:	f7fd fbb8 	bl	800f7b4 <HAL_GetTick>
 8012044:	1bc0      	subs	r0, r0, r7
 8012046:	4548      	cmp	r0, r9
 8012048:	d9f2      	bls.n	8012030 <HAL_RTC_SetDate+0x120>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801204a:	22ff      	movs	r2, #255	; 0xff
 801204c:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
 801204e:	2001      	movs	r0, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012050:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012052:	2304      	movs	r3, #4
 8012054:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8012056:	4643      	mov	r3, r8
 8012058:	772b      	strb	r3, [r5, #28]
    return HAL_ERROR;
 801205a:	e7a2      	b.n	8011fa2 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801205c:	78cc      	ldrb	r4, [r1, #3]
  while(Value >= 10)
 801205e:	2c09      	cmp	r4, #9
 8012060:	d8ae      	bhi.n	8011fc0 <HAL_RTC_SetDate+0xb0>
 8012062:	e7b6      	b.n	8011fd2 <HAL_RTC_SetDate+0xc2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012064:	22ff      	movs	r2, #255	; 0xff
 8012066:	682b      	ldr	r3, [r5, #0]
        return HAL_ERROR;
 8012068:	2001      	movs	r0, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801206a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801206c:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 801206e:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012070:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8012072:	e796      	b.n	8011fa2 <HAL_RTC_SetDate+0x92>
 __HAL_LOCK(hrtc);
 8012074:	2002      	movs	r0, #2
 8012076:	e794      	b.n	8011fa2 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012078:	0424      	lsls	r4, r4, #16
  while(Value >= 10)
 801207a:	e7ad      	b.n	8011fd8 <HAL_RTC_SetDate+0xc8>
 801207c:	00ffff3f 	.word	0x00ffff3f

08012080 <HAL_RTC_GetDate>:
{
 8012080:	b5f0      	push	{r4, r5, r6, r7, lr}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012082:	241f      	movs	r4, #31
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012084:	6803      	ldr	r3, [r0, #0]
 8012086:	4814      	ldr	r0, [pc, #80]	; (80120d8 <HAL_RTC_GetDate+0x58>)
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	4003      	ands	r3, r0
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801208c:	0a18      	lsrs	r0, r3, #8
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801208e:	0c1f      	lsrs	r7, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012090:	b2c6      	uxtb	r6, r0
 8012092:	4020      	ands	r0, r4
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012094:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012096:	041b      	lsls	r3, r3, #16
 8012098:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801209a:	70cf      	strb	r7, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801209c:	7048      	strb	r0, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801209e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80120a0:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80120a2:	2a00      	cmp	r2, #0
 80120a4:	d115      	bne.n	80120d2 <HAL_RTC_GetDate+0x52>
  return (tmp + (Value & (uint8_t)0x0F));
 80120a6:	250f      	movs	r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80120a8:	093b      	lsrs	r3, r7, #4
 80120aa:	009a      	lsls	r2, r3, #2
 80120ac:	18d2      	adds	r2, r2, r3
 80120ae:	0052      	lsls	r2, r2, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80120b0:	402f      	ands	r7, r5
 80120b2:	19d2      	adds	r2, r2, r7
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80120b4:	70ca      	strb	r2, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80120b6:	0902      	lsrs	r2, r0, #4
 80120b8:	0090      	lsls	r0, r2, #2
 80120ba:	1880      	adds	r0, r0, r2
 80120bc:	0922      	lsrs	r2, r4, #4
 80120be:	0093      	lsls	r3, r2, #2
 80120c0:	189b      	adds	r3, r3, r2
 80120c2:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80120c4:	402e      	ands	r6, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80120c6:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80120c8:	402c      	ands	r4, r5
 80120ca:	1980      	adds	r0, r0, r6
 80120cc:	191b      	adds	r3, r3, r4
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80120ce:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80120d0:	708b      	strb	r3, [r1, #2]
}
 80120d2:	2000      	movs	r0, #0
 80120d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	00ffff3f 	.word	0x00ffff3f

080120dc <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80120dc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80120de:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80120e0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80120e2:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80120e4:	600a      	str	r2, [r1, #0]
}
 80120e6:	4770      	bx	lr

080120e8 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80120e8:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4);
 80120ea:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80120ec:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 80120ee:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80120f0:	6808      	ldr	r0, [r1, #0]
}
 80120f2:	4770      	bx	lr

080120f4 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80120f4:	4770      	bx	lr
 80120f6:	46c0      	nop			; (mov r8, r8)

080120f8 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80120f8:	2239      	movs	r2, #57	; 0x39
 80120fa:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80120fc:	2101      	movs	r1, #1
{
 80120fe:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 8012100:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8012102:	6804      	ldr	r4, [r0, #0]
 8012104:	6823      	ldr	r3, [r4, #0]
 8012106:	430b      	orrs	r3, r1
 8012108:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801210a:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801210c:	2000      	movs	r0, #0
 801210e:	bd10      	pop	{r4, pc}

08012110 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012110:	4a1b      	ldr	r2, [pc, #108]	; (8012180 <TIM_Base_SetConfig+0x70>)
  tmpcr1 = TIMx->CR1;
 8012112:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012114:	4290      	cmp	r0, r2
 8012116:	d023      	beq.n	8012160 <TIM_Base_SetConfig+0x50>
 8012118:	2280      	movs	r2, #128	; 0x80
 801211a:	05d2      	lsls	r2, r2, #23
 801211c:	4290      	cmp	r0, r2
 801211e:	d016      	beq.n	801214e <TIM_Base_SetConfig+0x3e>
 8012120:	4a18      	ldr	r2, [pc, #96]	; (8012184 <TIM_Base_SetConfig+0x74>)
 8012122:	4290      	cmp	r0, r2
 8012124:	d013      	beq.n	801214e <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012126:	4a18      	ldr	r2, [pc, #96]	; (8012188 <TIM_Base_SetConfig+0x78>)
 8012128:	4290      	cmp	r0, r2
 801212a:	d014      	beq.n	8012156 <TIM_Base_SetConfig+0x46>
 801212c:	4a17      	ldr	r2, [pc, #92]	; (801218c <TIM_Base_SetConfig+0x7c>)
 801212e:	4290      	cmp	r0, r2
 8012130:	d01a      	beq.n	8012168 <TIM_Base_SetConfig+0x58>
 8012132:	4a17      	ldr	r2, [pc, #92]	; (8012190 <TIM_Base_SetConfig+0x80>)
 8012134:	4290      	cmp	r0, r2
 8012136:	d017      	beq.n	8012168 <TIM_Base_SetConfig+0x58>
 8012138:	4a16      	ldr	r2, [pc, #88]	; (8012194 <TIM_Base_SetConfig+0x84>)
 801213a:	4290      	cmp	r0, r2
 801213c:	d014      	beq.n	8012168 <TIM_Base_SetConfig+0x58>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 801213e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012140:	688b      	ldr	r3, [r1, #8]
 8012142:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012144:	680b      	ldr	r3, [r1, #0]
 8012146:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012148:	2301      	movs	r3, #1
 801214a:	6143      	str	r3, [r0, #20]
}
 801214c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801214e:	2270      	movs	r2, #112	; 0x70
 8012150:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012152:	684a      	ldr	r2, [r1, #4]
 8012154:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012156:	4a10      	ldr	r2, [pc, #64]	; (8012198 <TIM_Base_SetConfig+0x88>)
 8012158:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801215a:	68ca      	ldr	r2, [r1, #12]
 801215c:	4313      	orrs	r3, r2
 801215e:	e7ee      	b.n	801213e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012160:	2270      	movs	r2, #112	; 0x70
 8012162:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012164:	684a      	ldr	r2, [r1, #4]
 8012166:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012168:	4a0b      	ldr	r2, [pc, #44]	; (8012198 <TIM_Base_SetConfig+0x88>)
 801216a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801216c:	68ca      	ldr	r2, [r1, #12]
 801216e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012170:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012172:	688b      	ldr	r3, [r1, #8]
 8012174:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012176:	680b      	ldr	r3, [r1, #0]
 8012178:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 801217a:	690b      	ldr	r3, [r1, #16]
 801217c:	6303      	str	r3, [r0, #48]	; 0x30
 801217e:	e7e3      	b.n	8012148 <TIM_Base_SetConfig+0x38>
 8012180:	40012c00 	.word	0x40012c00
 8012184:	40000400 	.word	0x40000400
 8012188:	40002000 	.word	0x40002000
 801218c:	40014000 	.word	0x40014000
 8012190:	40014400 	.word	0x40014400
 8012194:	40014800 	.word	0x40014800
 8012198:	fffffcff 	.word	0xfffffcff

0801219c <HAL_TIM_Base_Init>:
{
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80121a0:	d014      	beq.n	80121cc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80121a2:	2339      	movs	r3, #57	; 0x39
 80121a4:	5cc3      	ldrb	r3, [r0, r3]
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00a      	beq.n	80121c2 <HAL_TIM_Base_Init+0x26>
  htim->State= HAL_TIM_STATE_BUSY;
 80121ac:	2302      	movs	r3, #2
 80121ae:	2539      	movs	r5, #57	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121b0:	0021      	movs	r1, r4
  htim->State= HAL_TIM_STATE_BUSY;
 80121b2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80121b4:	c901      	ldmia	r1!, {r0}
 80121b6:	f7ff ffab 	bl	8012110 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80121ba:	2301      	movs	r3, #1
  return HAL_OK;
 80121bc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80121be:	5563      	strb	r3, [r4, r5]
}
 80121c0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80121c2:	3338      	adds	r3, #56	; 0x38
 80121c4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80121c6:	f7ff ff95 	bl	80120f4 <HAL_TIM_Base_MspInit>
 80121ca:	e7ef      	b.n	80121ac <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80121cc:	2001      	movs	r0, #1
 80121ce:	e7f7      	b.n	80121c0 <HAL_TIM_Base_Init+0x24>

080121d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80121d0:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80121d2:	2438      	movs	r4, #56	; 0x38
 80121d4:	5d03      	ldrb	r3, [r0, r4]
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d019      	beq.n	801220e <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  htim->State = HAL_TIM_STATE_BUSY;
 80121da:	2539      	movs	r5, #57	; 0x39
 80121dc:	2302      	movs	r3, #2

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80121de:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80121e0:	5543      	strb	r3, [r0, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80121e2:	6803      	ldr	r3, [r0, #0]
 80121e4:	685a      	ldr	r2, [r3, #4]
 80121e6:	43b2      	bics	r2, r6
 80121e8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80121ea:	685a      	ldr	r2, [r3, #4]
 80121ec:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80121ee:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80121f0:	4332      	orrs	r2, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80121f2:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80121f4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80121f6:	689a      	ldr	r2, [r3, #8]
 80121f8:	43b2      	bics	r2, r6
 80121fa:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80121fc:	689a      	ldr	r2, [r3, #8]
 80121fe:	430a      	orrs	r2, r1
 8012200:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012202:	2301      	movs	r3, #1
 8012204:	5543      	strb	r3, [r0, r5]

  __HAL_UNLOCK(htim);
 8012206:	2300      	movs	r3, #0
 8012208:	5503      	strb	r3, [r0, r4]

  return HAL_OK;
 801220a:	2000      	movs	r0, #0
}
 801220c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 801220e:	2002      	movs	r0, #2
 8012210:	e7fc      	b.n	801220c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8012212:	46c0      	nop			; (mov r8, r8)

08012214 <HAL_UART_MspDeInit>:
 8012214:	4770      	bx	lr
 8012216:	46c0      	nop			; (mov r8, r8)

08012218 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8012218:	b570      	push	{r4, r5, r6, lr}
 801221a:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 801221c:	d013      	beq.n	8012246 <HAL_UART_DeInit+0x2e>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->State = HAL_UART_STATE_BUSY;
 801221e:	2669      	movs	r6, #105	; 0x69
 8012220:	2302      	movs	r3, #2

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012222:	2101      	movs	r1, #1

  huart->Instance->CR1 = 0x0;
 8012224:	2500      	movs	r5, #0
  huart->State = HAL_UART_STATE_BUSY;
 8012226:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012228:	6803      	ldr	r3, [r0, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	438a      	bics	r2, r1
 801222e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0;
 8012230:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012232:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012234:	609d      	str	r5, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8012236:	f7ff ffed 	bl	8012214 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801223a:	2368      	movs	r3, #104	; 0x68

  return HAL_OK;
 801223c:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801223e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012240:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012242:	54e5      	strb	r5, [r4, r3]
}
 8012244:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8012246:	2001      	movs	r0, #1
 8012248:	e7fc      	b.n	8012244 <HAL_UART_DeInit+0x2c>
 801224a:	46c0      	nop			; (mov r8, r8)

0801224c <HAL_UART_Transmit_IT>:
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801224c:	2369      	movs	r3, #105	; 0x69
{
 801224e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012250:	5cc4      	ldrb	r4, [r0, r3]
 8012252:	2c01      	cmp	r4, #1
 8012254:	d002      	beq.n	801225c <HAL_UART_Transmit_IT+0x10>
 8012256:	5cc3      	ldrb	r3, [r0, r3]
 8012258:	2b22      	cmp	r3, #34	; 0x22
 801225a:	d124      	bne.n	80122a6 <HAL_UART_Transmit_IT+0x5a>
  {
    if((pData == NULL ) || (Size == 0))
 801225c:	2900      	cmp	r1, #0
 801225e:	d024      	beq.n	80122aa <HAL_UART_Transmit_IT+0x5e>
 8012260:	2a00      	cmp	r2, #0
 8012262:	d022      	beq.n	80122aa <HAL_UART_Transmit_IT+0x5e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012264:	2368      	movs	r3, #104	; 0x68
 8012266:	5cc4      	ldrb	r4, [r0, r3]
 8012268:	2c01      	cmp	r4, #1
 801226a:	d01c      	beq.n	80122a6 <HAL_UART_Transmit_IT+0x5a>
 801226c:	2401      	movs	r4, #1
 801226e:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8012270:	3b18      	subs	r3, #24
    huart->pTxBuffPtr = pData;
 8012272:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012274:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012276:	3302      	adds	r3, #2
 8012278:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801227a:	2300      	movs	r3, #0
 801227c:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801227e:	3369      	adds	r3, #105	; 0x69
 8012280:	5cc2      	ldrb	r2, [r0, r3]
 8012282:	2a22      	cmp	r2, #34	; 0x22
 8012284:	d013      	beq.n	80122ae <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012286:	2212      	movs	r2, #18
 8012288:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801228a:	2101      	movs	r1, #1
 801228c:	6803      	ldr	r3, [r0, #0]
 801228e:	689a      	ldr	r2, [r3, #8]
 8012290:	430a      	orrs	r2, r1
 8012292:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012294:	2100      	movs	r1, #0
 8012296:	2268      	movs	r2, #104	; 0x68
 8012298:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);

    return HAL_OK;
 801229a:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	3180      	adds	r1, #128	; 0x80
 80122a0:	430a      	orrs	r2, r1
 80122a2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80122a4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80122a6:	2002      	movs	r0, #2
 80122a8:	e7fc      	b.n	80122a4 <HAL_UART_Transmit_IT+0x58>
      return HAL_ERROR;
 80122aa:	2001      	movs	r0, #1
 80122ac:	e7fa      	b.n	80122a4 <HAL_UART_Transmit_IT+0x58>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80122ae:	3210      	adds	r2, #16
 80122b0:	54c2      	strb	r2, [r0, r3]
 80122b2:	e7ea      	b.n	801228a <HAL_UART_Transmit_IT+0x3e>

080122b4 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122b4:	2369      	movs	r3, #105	; 0x69
{
 80122b6:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80122b8:	5cc4      	ldrb	r4, [r0, r3]
 80122ba:	2c01      	cmp	r4, #1
 80122bc:	d002      	beq.n	80122c4 <HAL_UART_Receive_IT+0x10>
 80122be:	5cc3      	ldrb	r3, [r0, r3]
 80122c0:	2b12      	cmp	r3, #18
 80122c2:	d134      	bne.n	801232e <HAL_UART_Receive_IT+0x7a>
  {
    if((pData == NULL ) || (Size == 0))
 80122c4:	2900      	cmp	r1, #0
 80122c6:	d034      	beq.n	8012332 <HAL_UART_Receive_IT+0x7e>
 80122c8:	2a00      	cmp	r2, #0
 80122ca:	d032      	beq.n	8012332 <HAL_UART_Receive_IT+0x7e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80122cc:	2368      	movs	r3, #104	; 0x68
 80122ce:	5cc4      	ldrb	r4, [r0, r3]
 80122d0:	2c01      	cmp	r4, #1
 80122d2:	d02c      	beq.n	801232e <HAL_UART_Receive_IT+0x7a>
 80122d4:	2401      	movs	r4, #1
 80122d6:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 80122d8:	3b10      	subs	r3, #16
    huart->pRxBuffPtr = pData;
 80122da:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80122dc:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80122de:	3302      	adds	r3, #2
 80122e0:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80122e2:	2280      	movs	r2, #128	; 0x80
 80122e4:	6883      	ldr	r3, [r0, #8]
 80122e6:	0152      	lsls	r2, r2, #5
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d02b      	beq.n	8012344 <HAL_UART_Receive_IT+0x90>
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d022      	beq.n	8012336 <HAL_UART_Receive_IT+0x82>
 80122f0:	2280      	movs	r2, #128	; 0x80
 80122f2:	0552      	lsls	r2, r2, #21
 80122f4:	4293      	cmp	r3, r2
 80122f6:	d033      	beq.n	8012360 <HAL_UART_Receive_IT+0xac>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122f8:	2300      	movs	r3, #0
 80122fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80122fc:	3369      	adds	r3, #105	; 0x69
 80122fe:	5cc2      	ldrb	r2, [r0, r3]
 8012300:	2a12      	cmp	r2, #18
 8012302:	d026      	beq.n	8012352 <HAL_UART_Receive_IT+0x9e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012304:	2222      	movs	r2, #34	; 0x22
 8012306:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012308:	2280      	movs	r2, #128	; 0x80
 801230a:	6803      	ldr	r3, [r0, #0]
 801230c:	0052      	lsls	r2, r2, #1
 801230e:	6819      	ldr	r1, [r3, #0]
 8012310:	430a      	orrs	r2, r1

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012312:	2101      	movs	r1, #1
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012314:	601a      	str	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012316:	689a      	ldr	r2, [r3, #8]
 8012318:	430a      	orrs	r2, r1
 801231a:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801231c:	2100      	movs	r1, #0
 801231e:	2268      	movs	r2, #104	; 0x68
 8012320:	5481      	strb	r1, [r0, r2]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	3120      	adds	r1, #32
 8012326:	430a      	orrs	r2, r1

    return HAL_OK;
 8012328:	2000      	movs	r0, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801232a:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 801232c:	e000      	b.n	8012330 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 801232e:	2002      	movs	r0, #2
  }
}
 8012330:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8012332:	2001      	movs	r0, #1
 8012334:	e7fc      	b.n	8012330 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8012336:	6903      	ldr	r3, [r0, #16]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d00d      	beq.n	8012358 <HAL_UART_Receive_IT+0xa4>
 801233c:	235c      	movs	r3, #92	; 0x5c
 801233e:	227f      	movs	r2, #127	; 0x7f
 8012340:	52c2      	strh	r2, [r0, r3]
 8012342:	e7d9      	b.n	80122f8 <HAL_UART_Receive_IT+0x44>
 8012344:	6903      	ldr	r3, [r0, #16]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d106      	bne.n	8012358 <HAL_UART_Receive_IT+0xa4>
 801234a:	4a09      	ldr	r2, [pc, #36]	; (8012370 <HAL_UART_Receive_IT+0xbc>)
 801234c:	335c      	adds	r3, #92	; 0x5c
 801234e:	52c2      	strh	r2, [r0, r3]
 8012350:	e7d2      	b.n	80122f8 <HAL_UART_Receive_IT+0x44>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012352:	3220      	adds	r2, #32
 8012354:	54c2      	strb	r2, [r0, r3]
 8012356:	e7d7      	b.n	8012308 <HAL_UART_Receive_IT+0x54>
    UART_MASK_COMPUTATION(huart);
 8012358:	235c      	movs	r3, #92	; 0x5c
 801235a:	22ff      	movs	r2, #255	; 0xff
 801235c:	52c2      	strh	r2, [r0, r3]
 801235e:	e7cb      	b.n	80122f8 <HAL_UART_Receive_IT+0x44>
 8012360:	6903      	ldr	r3, [r0, #16]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d0ea      	beq.n	801233c <HAL_UART_Receive_IT+0x88>
 8012366:	235c      	movs	r3, #92	; 0x5c
 8012368:	223f      	movs	r2, #63	; 0x3f
 801236a:	52c2      	strh	r2, [r0, r3]
 801236c:	e7c4      	b.n	80122f8 <HAL_UART_Receive_IT+0x44>
 801236e:	46c0      	nop			; (mov r8, r8)
 8012370:	000001ff 	.word	0x000001ff

08012374 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012374:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012376:	2269      	movs	r2, #105	; 0x69
{
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	000d      	movs	r5, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801237c:	5c81      	ldrb	r1, [r0, r2]
{
 801237e:	0004      	movs	r4, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012380:	2901      	cmp	r1, #1
 8012382:	d002      	beq.n	801238a <HAL_UART_Receive_DMA+0x16>
 8012384:	5c82      	ldrb	r2, [r0, r2]
 8012386:	2a12      	cmp	r2, #18
 8012388:	d12a      	bne.n	80123e0 <HAL_UART_Receive_DMA+0x6c>
  {
    if((pData == NULL ) || (Size == 0))
 801238a:	2d00      	cmp	r5, #0
 801238c:	d02a      	beq.n	80123e4 <HAL_UART_Receive_DMA+0x70>
 801238e:	2b00      	cmp	r3, #0
 8012390:	d028      	beq.n	80123e4 <HAL_UART_Receive_DMA+0x70>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012392:	2268      	movs	r2, #104	; 0x68
 8012394:	5ca1      	ldrb	r1, [r4, r2]
 8012396:	2901      	cmp	r1, #1
 8012398:	d022      	beq.n	80123e0 <HAL_UART_Receive_DMA+0x6c>
 801239a:	2101      	movs	r1, #1
 801239c:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 801239e:	3a10      	subs	r2, #16
    huart->pRxBuffPtr = pData;
 80123a0:	6565      	str	r5, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80123a2:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123a4:	2200      	movs	r2, #0
 80123a6:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80123a8:	3269      	adds	r2, #105	; 0x69
 80123aa:	5ca1      	ldrb	r1, [r4, r2]
 80123ac:	2912      	cmp	r1, #18
 80123ae:	d01b      	beq.n	80123e8 <HAL_UART_Receive_DMA+0x74>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80123b0:	2122      	movs	r1, #34	; 0x22
 80123b2:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80123b4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80123b6:	4a0e      	ldr	r2, [pc, #56]	; (80123f0 <HAL_UART_Receive_DMA+0x7c>)
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80123b8:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80123ba:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123bc:	4a0d      	ldr	r2, [pc, #52]	; (80123f4 <HAL_UART_Receive_DMA+0x80>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80123be:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123c0:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80123c2:	4a0d      	ldr	r2, [pc, #52]	; (80123f8 <HAL_UART_Receive_DMA+0x84>)
 80123c4:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 80123c6:	002a      	movs	r2, r5
 80123c8:	f7fd fedc 	bl	8010184 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80123cc:	2140      	movs	r1, #64	; 0x40
 80123ce:	6822      	ldr	r2, [r4, #0]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);

    return HAL_OK;
 80123d0:	2000      	movs	r0, #0
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80123d2:	6893      	ldr	r3, [r2, #8]
 80123d4:	430b      	orrs	r3, r1
 80123d6:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80123d8:	2368      	movs	r3, #104	; 0x68
 80123da:	2200      	movs	r2, #0
 80123dc:	54e2      	strb	r2, [r4, r3]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80123de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80123e0:	2002      	movs	r0, #2
 80123e2:	e7fc      	b.n	80123de <HAL_UART_Receive_DMA+0x6a>
      return HAL_ERROR;
 80123e4:	2001      	movs	r0, #1
 80123e6:	e7fa      	b.n	80123de <HAL_UART_Receive_DMA+0x6a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80123e8:	3120      	adds	r1, #32
 80123ea:	54a1      	strb	r1, [r4, r2]
 80123ec:	e7e2      	b.n	80123b4 <HAL_UART_Receive_DMA+0x40>
 80123ee:	46c0      	nop			; (mov r8, r8)
 80123f0:	080123fd 	.word	0x080123fd
 80123f4:	0801243d 	.word	0x0801243d
 80123f8:	08012449 	.word	0x08012449

080123fc <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80123fc:	2220      	movs	r2, #32
{
 80123fe:	0003      	movs	r3, r0
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012400:	0011      	movs	r1, r2
 8012402:	681b      	ldr	r3, [r3, #0]
{
 8012404:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012406:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012408:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801240a:	4019      	ands	r1, r3
 801240c:	421a      	tst	r2, r3
 801240e:	d10c      	bne.n	801242a <UART_DMAReceiveCplt+0x2e>
  {
    huart->RxXferCount = 0;
 8012410:	235a      	movs	r3, #90	; 0x5a
 8012412:	52c1      	strh	r1, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012414:	2140      	movs	r1, #64	; 0x40
 8012416:	6802      	ldr	r2, [r0, #0]
 8012418:	6893      	ldr	r3, [r2, #8]
 801241a:	438b      	bics	r3, r1
 801241c:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801241e:	2369      	movs	r3, #105	; 0x69
 8012420:	5cc2      	ldrb	r2, [r0, r3]
 8012422:	2a32      	cmp	r2, #50	; 0x32
 8012424:	d004      	beq.n	8012430 <UART_DMAReceiveCplt+0x34>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012426:	2201      	movs	r2, #1
 8012428:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801242a:	f7fa fcb3 	bl	800cd94 <HAL_UART_RxCpltCallback>
}
 801242e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012430:	3a20      	subs	r2, #32
 8012432:	54c2      	strb	r2, [r0, r3]
 8012434:	e7f9      	b.n	801242a <UART_DMAReceiveCplt+0x2e>
 8012436:	46c0      	nop			; (mov r8, r8)

08012438 <HAL_UART_RxHalfCpltCallback>:
 8012438:	4770      	bx	lr
 801243a:	46c0      	nop			; (mov r8, r8)

0801243c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801243c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801243e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012440:	f7ff fffa 	bl	8012438 <HAL_UART_RxHalfCpltCallback>
}
 8012444:	bd10      	pop	{r4, pc}
 8012446:	46c0      	nop			; (mov r8, r8)

08012448 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  huart->RxXferCount = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	225a      	movs	r2, #90	; 0x5a
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801244c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 801244e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8012450:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012452:	3a08      	subs	r2, #8
 8012454:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012456:	3369      	adds	r3, #105	; 0x69
 8012458:	3a51      	subs	r2, #81	; 0x51
 801245a:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801245c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801245e:	320f      	adds	r2, #15
 8012460:	4313      	orrs	r3, r2
 8012462:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012464:	f7fa fc72 	bl	800cd4c <HAL_UART_ErrorCallback>
}
 8012468:	bd10      	pop	{r4, pc}
 801246a:	46c0      	nop			; (mov r8, r8)

0801246c <UART_SetConfig>:
{
 801246c:	b570      	push	{r4, r5, r6, lr}
 801246e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012470:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012472:	69c1      	ldr	r1, [r0, #28]
 8012474:	6883      	ldr	r3, [r0, #8]
 8012476:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012478:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801247a:	4303      	orrs	r3, r0
 801247c:	6960      	ldr	r0, [r4, #20]
 801247e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012480:	4862      	ldr	r0, [pc, #392]	; (801260c <UART_SetConfig+0x1a0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012482:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012484:	4002      	ands	r2, r0
 8012486:	4313      	orrs	r3, r2
 8012488:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801248a:	686b      	ldr	r3, [r5, #4]
 801248c:	4a60      	ldr	r2, [pc, #384]	; (8012610 <UART_SetConfig+0x1a4>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801248e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012490:	4013      	ands	r3, r2
 8012492:	68e2      	ldr	r2, [r4, #12]
 8012494:	4313      	orrs	r3, r2
 8012496:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012498:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801249a:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801249c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801249e:	485d      	ldr	r0, [pc, #372]	; (8012614 <UART_SetConfig+0x1a8>)
 80124a0:	4002      	ands	r2, r0
 80124a2:	4313      	orrs	r3, r2
 80124a4:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124a6:	4b5c      	ldr	r3, [pc, #368]	; (8012618 <UART_SetConfig+0x1ac>)
 80124a8:	429d      	cmp	r5, r3
 80124aa:	d032      	beq.n	8012512 <UART_SetConfig+0xa6>
 80124ac:	4b5b      	ldr	r3, [pc, #364]	; (801261c <UART_SetConfig+0x1b0>)
 80124ae:	429d      	cmp	r5, r3
 80124b0:	d018      	beq.n	80124e4 <UART_SetConfig+0x78>
 80124b2:	4b5b      	ldr	r3, [pc, #364]	; (8012620 <UART_SetConfig+0x1b4>)
 80124b4:	429d      	cmp	r5, r3
 80124b6:	d100      	bne.n	80124ba <UART_SetConfig+0x4e>
 80124b8:	e085      	b.n	80125c6 <UART_SetConfig+0x15a>
 80124ba:	4b5a      	ldr	r3, [pc, #360]	; (8012624 <UART_SetConfig+0x1b8>)
 80124bc:	429d      	cmp	r5, r3
 80124be:	d02f      	beq.n	8012520 <UART_SetConfig+0xb4>
 80124c0:	4b59      	ldr	r3, [pc, #356]	; (8012628 <UART_SetConfig+0x1bc>)
 80124c2:	429d      	cmp	r5, r3
 80124c4:	d02c      	beq.n	8012520 <UART_SetConfig+0xb4>
 80124c6:	4b59      	ldr	r3, [pc, #356]	; (801262c <UART_SetConfig+0x1c0>)
 80124c8:	429d      	cmp	r5, r3
 80124ca:	d029      	beq.n	8012520 <UART_SetConfig+0xb4>
 80124cc:	4b58      	ldr	r3, [pc, #352]	; (8012630 <UART_SetConfig+0x1c4>)
 80124ce:	429d      	cmp	r5, r3
 80124d0:	d026      	beq.n	8012520 <UART_SetConfig+0xb4>
 80124d2:	4b58      	ldr	r3, [pc, #352]	; (8012634 <UART_SetConfig+0x1c8>)
 80124d4:	429d      	cmp	r5, r3
 80124d6:	d023      	beq.n	8012520 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124d8:	2380      	movs	r3, #128	; 0x80
 80124da:	021b      	lsls	r3, r3, #8
 80124dc:	4299      	cmp	r1, r3
 80124de:	d051      	beq.n	8012584 <UART_SetConfig+0x118>
    switch (clocksource)
 80124e0:	2001      	movs	r0, #1
 80124e2:	e02b      	b.n	801253c <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124e4:	22c0      	movs	r2, #192	; 0xc0
 80124e6:	2080      	movs	r0, #128	; 0x80
 80124e8:	4b53      	ldr	r3, [pc, #332]	; (8012638 <UART_SetConfig+0x1cc>)
 80124ea:	0292      	lsls	r2, r2, #10
 80124ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ee:	0280      	lsls	r0, r0, #10
 80124f0:	4013      	ands	r3, r2
 80124f2:	4283      	cmp	r3, r0
 80124f4:	d04a      	beq.n	801258c <UART_SetConfig+0x120>
 80124f6:	d822      	bhi.n	801253e <UART_SetConfig+0xd2>
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d011      	beq.n	8012520 <UART_SetConfig+0xb4>
 80124fc:	2280      	movs	r2, #128	; 0x80
 80124fe:	0252      	lsls	r2, r2, #9
 8012500:	4293      	cmp	r3, r2
 8012502:	d1e9      	bne.n	80124d8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012504:	2380      	movs	r3, #128	; 0x80
 8012506:	021b      	lsls	r3, r3, #8
 8012508:	4299      	cmp	r1, r3
 801250a:	d051      	beq.n	80125b0 <UART_SetConfig+0x144>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801250c:	f7ff fa98 	bl	8011a40 <HAL_RCC_GetSysClockFreq>
 8012510:	e00c      	b.n	801252c <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012512:	4b49      	ldr	r3, [pc, #292]	; (8012638 <UART_SetConfig+0x1cc>)
 8012514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012516:	2303      	movs	r3, #3
 8012518:	4013      	ands	r3, r2
 801251a:	3b01      	subs	r3, #1
 801251c:	2b02      	cmp	r3, #2
 801251e:	d917      	bls.n	8012550 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012520:	2380      	movs	r3, #128	; 0x80
 8012522:	021b      	lsls	r3, r3, #8
 8012524:	4299      	cmp	r1, r3
 8012526:	d065      	beq.n	80125f4 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012528:	f7ff fae6 	bl	8011af8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801252c:	6825      	ldr	r5, [r4, #0]
 801252e:	6861      	ldr	r1, [r4, #4]
 8012530:	f7ed fe0e 	bl	8000150 <__udivsi3>
 8012534:	0400      	lsls	r0, r0, #16
 8012536:	0c00      	lsrs	r0, r0, #16
 8012538:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801253a:	2000      	movs	r0, #0
}
 801253c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 801253e:	4293      	cmp	r3, r2
 8012540:	d1ca      	bne.n	80124d8 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012542:	2380      	movs	r3, #128	; 0x80
 8012544:	021b      	lsls	r3, r3, #8
 8012546:	4299      	cmp	r1, r3
 8012548:	d03a      	beq.n	80125c0 <UART_SetConfig+0x154>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801254a:	6861      	ldr	r1, [r4, #4]
 801254c:	483b      	ldr	r0, [pc, #236]	; (801263c <UART_SetConfig+0x1d0>)
 801254e:	e7ef      	b.n	8012530 <UART_SetConfig+0xc4>
 8012550:	4a3b      	ldr	r2, [pc, #236]	; (8012640 <UART_SetConfig+0x1d4>)
 8012552:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012554:	2280      	movs	r2, #128	; 0x80
 8012556:	0212      	lsls	r2, r2, #8
 8012558:	4291      	cmp	r1, r2
 801255a:	d00c      	beq.n	8012576 <UART_SetConfig+0x10a>
    switch (clocksource)
 801255c:	2b04      	cmp	r3, #4
 801255e:	d0d5      	beq.n	801250c <UART_SetConfig+0xa0>
 8012560:	d943      	bls.n	80125ea <UART_SetConfig+0x17e>
 8012562:	2b08      	cmp	r3, #8
 8012564:	d1bc      	bne.n	80124e0 <UART_SetConfig+0x74>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012566:	2080      	movs	r0, #128	; 0x80
 8012568:	6861      	ldr	r1, [r4, #4]
 801256a:	0200      	lsls	r0, r0, #8
 801256c:	f7ed fdf0 	bl	8000150 <__udivsi3>
 8012570:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012572:	2000      	movs	r0, #0
        break;
 8012574:	e7e2      	b.n	801253c <UART_SetConfig+0xd0>
    switch (clocksource)
 8012576:	2b04      	cmp	r3, #4
 8012578:	d01a      	beq.n	80125b0 <UART_SetConfig+0x144>
 801257a:	d843      	bhi.n	8012604 <UART_SetConfig+0x198>
 801257c:	2b00      	cmp	r3, #0
 801257e:	d039      	beq.n	80125f4 <UART_SetConfig+0x188>
 8012580:	2b02      	cmp	r3, #2
 8012582:	d01d      	beq.n	80125c0 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012584:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 8012586:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8012588:	60eb      	str	r3, [r5, #12]
 801258a:	e7d7      	b.n	801253c <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801258c:	2380      	movs	r3, #128	; 0x80
 801258e:	021b      	lsls	r3, r3, #8
 8012590:	4299      	cmp	r1, r3
 8012592:	d1e8      	bne.n	8012566 <UART_SetConfig+0xfa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8012594:	2080      	movs	r0, #128	; 0x80
 8012596:	6861      	ldr	r1, [r4, #4]
 8012598:	0240      	lsls	r0, r0, #9
 801259a:	f7ed fdd9 	bl	8000150 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0;
 801259e:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80125a0:	0703      	lsls	r3, r0, #28
 80125a2:	0f5b      	lsrs	r3, r3, #29
    brrtemp = usartdiv & 0xFFF0;
 80125a4:	4390      	bics	r0, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80125a6:	4303      	orrs	r3, r0
    huart->Instance->BRR = brrtemp;
 80125a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80125aa:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 80125ac:	60eb      	str	r3, [r5, #12]
 80125ae:	e7c5      	b.n	801253c <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80125b0:	f7ff fa46 	bl	8011a40 <HAL_RCC_GetSysClockFreq>
 80125b4:	6861      	ldr	r1, [r4, #4]
 80125b6:	0040      	lsls	r0, r0, #1
 80125b8:	f7ed fdca 	bl	8000150 <__udivsi3>
    huart->Instance->BRR = brrtemp;
 80125bc:	6825      	ldr	r5, [r4, #0]
 80125be:	e7ee      	b.n	801259e <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80125c0:	6861      	ldr	r1, [r4, #4]
 80125c2:	4820      	ldr	r0, [pc, #128]	; (8012644 <UART_SetConfig+0x1d8>)
 80125c4:	e7e9      	b.n	801259a <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125c6:	22c0      	movs	r2, #192	; 0xc0
 80125c8:	2080      	movs	r0, #128	; 0x80
 80125ca:	4b1b      	ldr	r3, [pc, #108]	; (8012638 <UART_SetConfig+0x1cc>)
 80125cc:	0312      	lsls	r2, r2, #12
 80125ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125d0:	0300      	lsls	r0, r0, #12
 80125d2:	4013      	ands	r3, r2
 80125d4:	4283      	cmp	r3, r0
 80125d6:	d0d9      	beq.n	801258c <UART_SetConfig+0x120>
 80125d8:	d8b1      	bhi.n	801253e <UART_SetConfig+0xd2>
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d0a0      	beq.n	8012520 <UART_SetConfig+0xb4>
 80125de:	2280      	movs	r2, #128	; 0x80
 80125e0:	02d2      	lsls	r2, r2, #11
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d100      	bne.n	80125e8 <UART_SetConfig+0x17c>
 80125e6:	e78d      	b.n	8012504 <UART_SetConfig+0x98>
 80125e8:	e776      	b.n	80124d8 <UART_SetConfig+0x6c>
    switch (clocksource)
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d09c      	beq.n	8012528 <UART_SetConfig+0xbc>
 80125ee:	2b02      	cmp	r3, #2
 80125f0:	d0ab      	beq.n	801254a <UART_SetConfig+0xde>
 80125f2:	e775      	b.n	80124e0 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80125f4:	f7ff fa80 	bl	8011af8 <HAL_RCC_GetPCLK1Freq>
 80125f8:	6861      	ldr	r1, [r4, #4]
 80125fa:	0040      	lsls	r0, r0, #1
 80125fc:	f7ed fda8 	bl	8000150 <__udivsi3>
    huart->Instance->BRR = brrtemp;
 8012600:	6825      	ldr	r5, [r4, #0]
 8012602:	e7cc      	b.n	801259e <UART_SetConfig+0x132>
    switch (clocksource)
 8012604:	2b08      	cmp	r3, #8
 8012606:	d0c5      	beq.n	8012594 <UART_SetConfig+0x128>
 8012608:	e7bc      	b.n	8012584 <UART_SetConfig+0x118>
 801260a:	46c0      	nop			; (mov r8, r8)
 801260c:	efff69f3 	.word	0xefff69f3
 8012610:	ffffcfff 	.word	0xffffcfff
 8012614:	fffff4ff 	.word	0xfffff4ff
 8012618:	40013800 	.word	0x40013800
 801261c:	40004400 	.word	0x40004400
 8012620:	40004800 	.word	0x40004800
 8012624:	40004c00 	.word	0x40004c00
 8012628:	40005000 	.word	0x40005000
 801262c:	40011400 	.word	0x40011400
 8012630:	40011800 	.word	0x40011800
 8012634:	40011c00 	.word	0x40011c00
 8012638:	40021000 	.word	0x40021000
 801263c:	007a1200 	.word	0x007a1200
 8012640:	08019944 	.word	0x08019944
 8012644:	00f42400 	.word	0x00f42400

08012648 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012648:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 801264a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801264c:	07da      	lsls	r2, r3, #31
 801264e:	d506      	bpl.n	801265e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012650:	6801      	ldr	r1, [r0, #0]
 8012652:	4c28      	ldr	r4, [pc, #160]	; (80126f4 <UART_AdvFeatureConfig+0xac>)
 8012654:	684a      	ldr	r2, [r1, #4]
 8012656:	4022      	ands	r2, r4
 8012658:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801265a:	4322      	orrs	r2, r4
 801265c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801265e:	079a      	lsls	r2, r3, #30
 8012660:	d506      	bpl.n	8012670 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012662:	6801      	ldr	r1, [r0, #0]
 8012664:	4c24      	ldr	r4, [pc, #144]	; (80126f8 <UART_AdvFeatureConfig+0xb0>)
 8012666:	684a      	ldr	r2, [r1, #4]
 8012668:	4022      	ands	r2, r4
 801266a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801266c:	4322      	orrs	r2, r4
 801266e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012670:	075a      	lsls	r2, r3, #29
 8012672:	d506      	bpl.n	8012682 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012674:	6801      	ldr	r1, [r0, #0]
 8012676:	4c21      	ldr	r4, [pc, #132]	; (80126fc <UART_AdvFeatureConfig+0xb4>)
 8012678:	684a      	ldr	r2, [r1, #4]
 801267a:	4022      	ands	r2, r4
 801267c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 801267e:	4322      	orrs	r2, r4
 8012680:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012682:	071a      	lsls	r2, r3, #28
 8012684:	d506      	bpl.n	8012694 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012686:	6801      	ldr	r1, [r0, #0]
 8012688:	4c1d      	ldr	r4, [pc, #116]	; (8012700 <UART_AdvFeatureConfig+0xb8>)
 801268a:	684a      	ldr	r2, [r1, #4]
 801268c:	4022      	ands	r2, r4
 801268e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012690:	4322      	orrs	r2, r4
 8012692:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012694:	06da      	lsls	r2, r3, #27
 8012696:	d506      	bpl.n	80126a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012698:	6801      	ldr	r1, [r0, #0]
 801269a:	4c1a      	ldr	r4, [pc, #104]	; (8012704 <UART_AdvFeatureConfig+0xbc>)
 801269c:	688a      	ldr	r2, [r1, #8]
 801269e:	4022      	ands	r2, r4
 80126a0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80126a2:	4322      	orrs	r2, r4
 80126a4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80126a6:	069a      	lsls	r2, r3, #26
 80126a8:	d506      	bpl.n	80126b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80126aa:	6801      	ldr	r1, [r0, #0]
 80126ac:	4c16      	ldr	r4, [pc, #88]	; (8012708 <UART_AdvFeatureConfig+0xc0>)
 80126ae:	688a      	ldr	r2, [r1, #8]
 80126b0:	4022      	ands	r2, r4
 80126b2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80126b4:	4322      	orrs	r2, r4
 80126b6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80126b8:	065a      	lsls	r2, r3, #25
 80126ba:	d50a      	bpl.n	80126d2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80126bc:	6801      	ldr	r1, [r0, #0]
 80126be:	4d13      	ldr	r5, [pc, #76]	; (801270c <UART_AdvFeatureConfig+0xc4>)
 80126c0:	684a      	ldr	r2, [r1, #4]
 80126c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80126c4:	402a      	ands	r2, r5
 80126c6:	4322      	orrs	r2, r4
 80126c8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80126ca:	2280      	movs	r2, #128	; 0x80
 80126cc:	0352      	lsls	r2, r2, #13
 80126ce:	4294      	cmp	r4, r2
 80126d0:	d009      	beq.n	80126e6 <UART_AdvFeatureConfig+0x9e>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80126d2:	061b      	lsls	r3, r3, #24
 80126d4:	d506      	bpl.n	80126e4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80126d6:	6802      	ldr	r2, [r0, #0]
 80126d8:	490d      	ldr	r1, [pc, #52]	; (8012710 <UART_AdvFeatureConfig+0xc8>)
 80126da:	6853      	ldr	r3, [r2, #4]
 80126dc:	400b      	ands	r3, r1
 80126de:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80126e0:	430b      	orrs	r3, r1
 80126e2:	6053      	str	r3, [r2, #4]
}
 80126e4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80126e6:	684a      	ldr	r2, [r1, #4]
 80126e8:	4c0a      	ldr	r4, [pc, #40]	; (8012714 <UART_AdvFeatureConfig+0xcc>)
 80126ea:	4022      	ands	r2, r4
 80126ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80126ee:	4322      	orrs	r2, r4
 80126f0:	604a      	str	r2, [r1, #4]
 80126f2:	e7ee      	b.n	80126d2 <UART_AdvFeatureConfig+0x8a>
 80126f4:	fffdffff 	.word	0xfffdffff
 80126f8:	fffeffff 	.word	0xfffeffff
 80126fc:	fffbffff 	.word	0xfffbffff
 8012700:	ffff7fff 	.word	0xffff7fff
 8012704:	ffffefff 	.word	0xffffefff
 8012708:	ffffdfff 	.word	0xffffdfff
 801270c:	ffefffff 	.word	0xffefffff
 8012710:	fff7ffff 	.word	0xfff7ffff
 8012714:	ff9fffff 	.word	0xff9fffff

08012718 <UART_WaitOnFlagUntilTimeout>:
{
 8012718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801271a:	46c6      	mov	lr, r8
 801271c:	4690      	mov	r8, r2
 801271e:	b500      	push	{lr}
 8012720:	001d      	movs	r5, r3
 8012722:	0006      	movs	r6, r0
 8012724:	000c      	movs	r4, r1
  uint32_t tickstart = HAL_GetTick();
 8012726:	f7fd f845 	bl	800f7b4 <HAL_GetTick>
  if(Status == RESET)
 801272a:	4643      	mov	r3, r8
  uint32_t tickstart = HAL_GetTick();
 801272c:	0007      	movs	r7, r0
  if(Status == RESET)
 801272e:	2b00      	cmp	r3, #0
 8012730:	d112      	bne.n	8012758 <UART_WaitOnFlagUntilTimeout+0x40>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012732:	6833      	ldr	r3, [r6, #0]
 8012734:	e001      	b.n	801273a <UART_WaitOnFlagUntilTimeout+0x22>
      if(Timeout != HAL_MAX_DELAY)
 8012736:	1c6a      	adds	r2, r5, #1
 8012738:	d117      	bne.n	801276a <UART_WaitOnFlagUntilTimeout+0x52>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801273a:	69da      	ldr	r2, [r3, #28]
 801273c:	4022      	ands	r2, r4
 801273e:	42a2      	cmp	r2, r4
 8012740:	d1f9      	bne.n	8012736 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8012742:	2000      	movs	r0, #0
}
 8012744:	bc80      	pop	{r7}
 8012746:	46b8      	mov	r8, r7
 8012748:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801274a:	2d00      	cmp	r5, #0
 801274c:	d015      	beq.n	801277a <UART_WaitOnFlagUntilTimeout+0x62>
 801274e:	f7fd f831 	bl	800f7b4 <HAL_GetTick>
 8012752:	1bc0      	subs	r0, r0, r7
 8012754:	42a8      	cmp	r0, r5
 8012756:	d80f      	bhi.n	8012778 <UART_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012758:	6833      	ldr	r3, [r6, #0]
 801275a:	e001      	b.n	8012760 <UART_WaitOnFlagUntilTimeout+0x48>
      if(Timeout != HAL_MAX_DELAY)
 801275c:	1c6a      	adds	r2, r5, #1
 801275e:	d1f4      	bne.n	801274a <UART_WaitOnFlagUntilTimeout+0x32>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012760:	69da      	ldr	r2, [r3, #28]
 8012762:	4022      	ands	r2, r4
 8012764:	42a2      	cmp	r2, r4
 8012766:	d0f9      	beq.n	801275c <UART_WaitOnFlagUntilTimeout+0x44>
 8012768:	e7eb      	b.n	8012742 <UART_WaitOnFlagUntilTimeout+0x2a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801276a:	2d00      	cmp	r5, #0
 801276c:	d005      	beq.n	801277a <UART_WaitOnFlagUntilTimeout+0x62>
 801276e:	f7fd f821 	bl	800f7b4 <HAL_GetTick>
 8012772:	1bc0      	subs	r0, r0, r7
 8012774:	42a8      	cmp	r0, r5
 8012776:	d9dc      	bls.n	8012732 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012778:	6833      	ldr	r3, [r6, #0]
 801277a:	2180      	movs	r1, #128	; 0x80
 801277c:	681a      	ldr	r2, [r3, #0]
          return HAL_TIMEOUT;
 801277e:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012780:	438a      	bics	r2, r1
 8012782:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012784:	681a      	ldr	r2, [r3, #0]
 8012786:	3960      	subs	r1, #96	; 0x60
 8012788:	438a      	bics	r2, r1
 801278a:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801278c:	681a      	ldr	r2, [r3, #0]
 801278e:	4907      	ldr	r1, [pc, #28]	; (80127ac <UART_WaitOnFlagUntilTimeout+0x94>)
 8012790:	400a      	ands	r2, r1
 8012792:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012794:	689a      	ldr	r2, [r3, #8]
 8012796:	3103      	adds	r1, #3
 8012798:	31ff      	adds	r1, #255	; 0xff
 801279a:	438a      	bics	r2, r1
 801279c:	609a      	str	r2, [r3, #8]
          huart->State = HAL_UART_STATE_READY;
 801279e:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 80127a0:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 80127a2:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 80127a4:	3b01      	subs	r3, #1
 80127a6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80127a8:	e7cc      	b.n	8012744 <UART_WaitOnFlagUntilTimeout+0x2c>
 80127aa:	46c0      	nop			; (mov r8, r8)
 80127ac:	fffffeff 	.word	0xfffffeff

080127b0 <HAL_UART_Transmit>:
{
 80127b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127b2:	464f      	mov	r7, r9
 80127b4:	4646      	mov	r6, r8
 80127b6:	46d6      	mov	lr, sl
 80127b8:	001c      	movs	r4, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80127ba:	2369      	movs	r3, #105	; 0x69
{
 80127bc:	b5c0      	push	{r6, r7, lr}
 80127be:	000f      	movs	r7, r1
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80127c0:	5cc1      	ldrb	r1, [r0, r3]
{
 80127c2:	0006      	movs	r6, r0
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80127c4:	2901      	cmp	r1, #1
 80127c6:	d002      	beq.n	80127ce <HAL_UART_Transmit+0x1e>
 80127c8:	5cc3      	ldrb	r3, [r0, r3]
 80127ca:	2b22      	cmp	r3, #34	; 0x22
 80127cc:	d141      	bne.n	8012852 <HAL_UART_Transmit+0xa2>
    if((pData == NULL ) || (Size == 0))
 80127ce:	2f00      	cmp	r7, #0
 80127d0:	d045      	beq.n	801285e <HAL_UART_Transmit+0xae>
 80127d2:	2a00      	cmp	r2, #0
 80127d4:	d043      	beq.n	801285e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80127d6:	2368      	movs	r3, #104	; 0x68
 80127d8:	5cf1      	ldrb	r1, [r6, r3]
 80127da:	2901      	cmp	r1, #1
 80127dc:	d039      	beq.n	8012852 <HAL_UART_Transmit+0xa2>
 80127de:	2101      	movs	r1, #1
 80127e0:	54f1      	strb	r1, [r6, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127e2:	2300      	movs	r3, #0
 80127e4:	66f3      	str	r3, [r6, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80127e6:	3369      	adds	r3, #105	; 0x69
 80127e8:	5cf1      	ldrb	r1, [r6, r3]
 80127ea:	2922      	cmp	r1, #34	; 0x22
 80127ec:	d063      	beq.n	80128b6 <HAL_UART_Transmit+0x106>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80127ee:	2112      	movs	r1, #18
 80127f0:	54f1      	strb	r1, [r6, r3]
    huart->TxXferSize = Size;
 80127f2:	2350      	movs	r3, #80	; 0x50
 80127f4:	52f2      	strh	r2, [r6, r3]
      huart->TxXferCount--;
 80127f6:	3302      	adds	r3, #2
 80127f8:	4699      	mov	r9, r3
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80127fa:	2380      	movs	r3, #128	; 0x80
 80127fc:	015b      	lsls	r3, r3, #5
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80127fe:	2580      	movs	r5, #128	; 0x80
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012800:	469a      	mov	sl, r3
      huart->TxXferCount--;
 8012802:	464b      	mov	r3, r9
 8012804:	3a01      	subs	r2, #1
 8012806:	52f2      	strh	r2, [r6, r3]
  uint32_t tickstart = HAL_GetTick();
 8012808:	f7fc ffd4 	bl	800f7b4 <HAL_GetTick>
 801280c:	4680      	mov	r8, r0
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801280e:	6833      	ldr	r3, [r6, #0]
 8012810:	e001      	b.n	8012816 <HAL_UART_Transmit+0x66>
      if(Timeout != HAL_MAX_DELAY)
 8012812:	1c62      	adds	r2, r4, #1
 8012814:	d125      	bne.n	8012862 <HAL_UART_Transmit+0xb2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012816:	69da      	ldr	r2, [r3, #28]
 8012818:	4215      	tst	r5, r2
 801281a:	d0fa      	beq.n	8012812 <HAL_UART_Transmit+0x62>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801281c:	68b2      	ldr	r2, [r6, #8]
 801281e:	4552      	cmp	r2, sl
 8012820:	d040      	beq.n	80128a4 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012822:	783a      	ldrb	r2, [r7, #0]
 8012824:	3701      	adds	r7, #1
 8012826:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8012828:	464b      	mov	r3, r9
 801282a:	5af2      	ldrh	r2, [r6, r3]
 801282c:	2a00      	cmp	r2, #0
 801282e:	d1e8      	bne.n	8012802 <HAL_UART_Transmit+0x52>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012830:	0023      	movs	r3, r4
 8012832:	2140      	movs	r1, #64	; 0x40
 8012834:	0030      	movs	r0, r6
 8012836:	f7ff ff6f 	bl	8012718 <UART_WaitOnFlagUntilTimeout>
 801283a:	2800      	cmp	r0, #0
 801283c:	d13e      	bne.n	80128bc <HAL_UART_Transmit+0x10c>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801283e:	2369      	movs	r3, #105	; 0x69
 8012840:	5cf2      	ldrb	r2, [r6, r3]
 8012842:	2a32      	cmp	r2, #50	; 0x32
 8012844:	d03c      	beq.n	80128c0 <HAL_UART_Transmit+0x110>
      huart->State = HAL_UART_STATE_READY;
 8012846:	2201      	movs	r2, #1
 8012848:	54f2      	strb	r2, [r6, r3]
    __HAL_UNLOCK(huart);
 801284a:	2368      	movs	r3, #104	; 0x68
 801284c:	2200      	movs	r2, #0
 801284e:	54f2      	strb	r2, [r6, r3]
    return HAL_OK;
 8012850:	e000      	b.n	8012854 <HAL_UART_Transmit+0xa4>
    return HAL_BUSY;
 8012852:	2002      	movs	r0, #2
}
 8012854:	bce0      	pop	{r5, r6, r7}
 8012856:	46ba      	mov	sl, r7
 8012858:	46b1      	mov	r9, r6
 801285a:	46a8      	mov	r8, r5
 801285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 801285e:	2001      	movs	r0, #1
 8012860:	e7f8      	b.n	8012854 <HAL_UART_Transmit+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012862:	2c00      	cmp	r4, #0
 8012864:	d006      	beq.n	8012874 <HAL_UART_Transmit+0xc4>
 8012866:	f7fc ffa5 	bl	800f7b4 <HAL_GetTick>
 801286a:	4643      	mov	r3, r8
 801286c:	1ac0      	subs	r0, r0, r3
 801286e:	4284      	cmp	r4, r0
 8012870:	d2cd      	bcs.n	801280e <HAL_UART_Transmit+0x5e>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012872:	6833      	ldr	r3, [r6, #0]
 8012874:	2180      	movs	r1, #128	; 0x80
 8012876:	681a      	ldr	r2, [r3, #0]
        return HAL_TIMEOUT;
 8012878:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801287a:	438a      	bics	r2, r1
 801287c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	3960      	subs	r1, #96	; 0x60
 8012882:	438a      	bics	r2, r1
 8012884:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	490f      	ldr	r1, [pc, #60]	; (80128c8 <HAL_UART_Transmit+0x118>)
 801288a:	400a      	ands	r2, r1
 801288c:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801288e:	689a      	ldr	r2, [r3, #8]
 8012890:	3103      	adds	r1, #3
 8012892:	31ff      	adds	r1, #255	; 0xff
 8012894:	438a      	bics	r2, r1
 8012896:	609a      	str	r2, [r3, #8]
          huart->State = HAL_UART_STATE_READY;
 8012898:	2369      	movs	r3, #105	; 0x69
          __HAL_UNLOCK(huart);
 801289a:	2200      	movs	r2, #0
          huart->State = HAL_UART_STATE_READY;
 801289c:	54f1      	strb	r1, [r6, r3]
          __HAL_UNLOCK(huart);
 801289e:	3b01      	subs	r3, #1
 80128a0:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80128a2:	e7d7      	b.n	8012854 <HAL_UART_Transmit+0xa4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80128a4:	6932      	ldr	r2, [r6, #16]
 80128a6:	2a00      	cmp	r2, #0
 80128a8:	d1bb      	bne.n	8012822 <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80128aa:	883a      	ldrh	r2, [r7, #0]
        pData += 2;
 80128ac:	3702      	adds	r7, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80128ae:	05d2      	lsls	r2, r2, #23
 80128b0:	0dd2      	lsrs	r2, r2, #23
 80128b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 80128b4:	e7b8      	b.n	8012828 <HAL_UART_Transmit+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80128b6:	3110      	adds	r1, #16
 80128b8:	54f1      	strb	r1, [r6, r3]
 80128ba:	e79a      	b.n	80127f2 <HAL_UART_Transmit+0x42>
      return HAL_TIMEOUT;
 80128bc:	2003      	movs	r0, #3
 80128be:	e7c9      	b.n	8012854 <HAL_UART_Transmit+0xa4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80128c0:	3a10      	subs	r2, #16
 80128c2:	54f2      	strb	r2, [r6, r3]
 80128c4:	e7c1      	b.n	801284a <HAL_UART_Transmit+0x9a>
 80128c6:	46c0      	nop			; (mov r8, r8)
 80128c8:	fffffeff 	.word	0xfffffeff

080128cc <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128cc:	2300      	movs	r3, #0
{
 80128ce:	b510      	push	{r4, lr}
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80128d0:	4a1a      	ldr	r2, [pc, #104]	; (801293c <UART_CheckIdleState+0x70>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80128d2:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80128d4:	6803      	ldr	r3, [r0, #0]
{
 80128d6:	0004      	movs	r4, r0
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80128d8:	4293      	cmp	r3, r2
 80128da:	d00d      	beq.n	80128f8 <UART_CheckIdleState+0x2c>
 80128dc:	4a18      	ldr	r2, [pc, #96]	; (8012940 <UART_CheckIdleState+0x74>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d00a      	beq.n	80128f8 <UART_CheckIdleState+0x2c>
 80128e2:	4a18      	ldr	r2, [pc, #96]	; (8012944 <UART_CheckIdleState+0x78>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d007      	beq.n	80128f8 <UART_CheckIdleState+0x2c>
  huart->State= HAL_UART_STATE_READY;
 80128e8:	2369      	movs	r3, #105	; 0x69
 80128ea:	2201      	movs	r2, #1
 80128ec:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80128ee:	2200      	movs	r2, #0
  return HAL_OK;
 80128f0:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80128f2:	3b01      	subs	r3, #1
 80128f4:	54e2      	strb	r2, [r4, r3]
}
 80128f6:	bd10      	pop	{r4, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	0712      	lsls	r2, r2, #28
 80128fc:	d40e      	bmi.n	801291c <UART_CheckIdleState+0x50>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	075b      	lsls	r3, r3, #29
 8012902:	d5f1      	bpl.n	80128e8 <UART_CheckIdleState+0x1c>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012904:	23fa      	movs	r3, #250	; 0xfa
 8012906:	2180      	movs	r1, #128	; 0x80
 8012908:	2200      	movs	r2, #0
 801290a:	0020      	movs	r0, r4
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	03c9      	lsls	r1, r1, #15
 8012910:	f7ff ff02 	bl	8012718 <UART_WaitOnFlagUntilTimeout>
 8012914:	2800      	cmp	r0, #0
 8012916:	d0e7      	beq.n	80128e8 <UART_CheckIdleState+0x1c>
        return HAL_TIMEOUT;
 8012918:	2003      	movs	r0, #3
 801291a:	e7ec      	b.n	80128f6 <UART_CheckIdleState+0x2a>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801291c:	23fa      	movs	r3, #250	; 0xfa
 801291e:	2180      	movs	r1, #128	; 0x80
 8012920:	2200      	movs	r2, #0
 8012922:	0020      	movs	r0, r4
 8012924:	009b      	lsls	r3, r3, #2
 8012926:	0389      	lsls	r1, r1, #14
 8012928:	f7ff fef6 	bl	8012718 <UART_WaitOnFlagUntilTimeout>
 801292c:	2800      	cmp	r0, #0
 801292e:	d1f3      	bne.n	8012918 <UART_CheckIdleState+0x4c>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012930:	6823      	ldr	r3, [r4, #0]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	075b      	lsls	r3, r3, #29
 8012936:	d5d7      	bpl.n	80128e8 <UART_CheckIdleState+0x1c>
 8012938:	e7e4      	b.n	8012904 <UART_CheckIdleState+0x38>
 801293a:	46c0      	nop			; (mov r8, r8)
 801293c:	40013800 	.word	0x40013800
 8012940:	40004400 	.word	0x40004400
 8012944:	40004800 	.word	0x40004800

08012948 <HAL_UART_Init>:
{
 8012948:	b510      	push	{r4, lr}
 801294a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801294c:	d029      	beq.n	80129a2 <HAL_UART_Init+0x5a>
  if(huart->State == HAL_UART_STATE_RESET)
 801294e:	2369      	movs	r3, #105	; 0x69
 8012950:	5cc3      	ldrb	r3, [r0, r3]
 8012952:	b2da      	uxtb	r2, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	d026      	beq.n	80129a6 <HAL_UART_Init+0x5e>
  huart->State = HAL_UART_STATE_BUSY;
 8012958:	2369      	movs	r3, #105	; 0x69
 801295a:	2202      	movs	r2, #2
  __HAL_UART_DISABLE(huart);
 801295c:	2101      	movs	r1, #1
  huart->State = HAL_UART_STATE_BUSY;
 801295e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012960:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012962:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8012964:	6813      	ldr	r3, [r2, #0]
 8012966:	438b      	bics	r3, r1
 8012968:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801296a:	f7ff fd7f 	bl	801246c <UART_SetConfig>
 801296e:	2801      	cmp	r0, #1
 8012970:	d017      	beq.n	80129a2 <HAL_UART_Init+0x5a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012974:	2b00      	cmp	r3, #0
 8012976:	d110      	bne.n	801299a <HAL_UART_Init+0x52>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	490d      	ldr	r1, [pc, #52]	; (80129b0 <HAL_UART_Init+0x68>)
 801297c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 801297e:	0020      	movs	r0, r4
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012980:	400a      	ands	r2, r1
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012982:	212a      	movs	r1, #42	; 0x2a
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012984:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012986:	689a      	ldr	r2, [r3, #8]
 8012988:	438a      	bics	r2, r1
 801298a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	3929      	subs	r1, #41	; 0x29
 8012990:	430a      	orrs	r2, r1
 8012992:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012994:	f7ff ff9a 	bl	80128cc <UART_CheckIdleState>
}
 8012998:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 801299a:	0020      	movs	r0, r4
 801299c:	f7ff fe54 	bl	8012648 <UART_AdvFeatureConfig>
 80129a0:	e7ea      	b.n	8012978 <HAL_UART_Init+0x30>
    return HAL_ERROR;
 80129a2:	2001      	movs	r0, #1
 80129a4:	e7f8      	b.n	8012998 <HAL_UART_Init+0x50>
    huart->Lock = HAL_UNLOCKED;
 80129a6:	3368      	adds	r3, #104	; 0x68
 80129a8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80129aa:	f7fa fd65 	bl	800d478 <HAL_UART_MspInit>
 80129ae:	e7d3      	b.n	8012958 <HAL_UART_Init+0x10>
 80129b0:	ffffb7ff 	.word	0xffffb7ff

080129b4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80129b4:	2369      	movs	r3, #105	; 0x69
{
 80129b6:	b510      	push	{r4, lr}
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80129b8:	5cc2      	ldrb	r2, [r0, r3]
 80129ba:	2a12      	cmp	r2, #18
 80129bc:	d002      	beq.n	80129c4 <UART_Transmit_IT+0x10>
 80129be:	5cc3      	ldrb	r3, [r0, r3]
 80129c0:	2b32      	cmp	r3, #50	; 0x32
 80129c2:	d11e      	bne.n	8012a02 <UART_Transmit_IT+0x4e>
  {

    if(huart->TxXferCount == 0)
 80129c4:	2352      	movs	r3, #82	; 0x52
 80129c6:	5ac3      	ldrh	r3, [r0, r3]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d00f      	beq.n	80129ec <UART_Transmit_IT+0x38>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80129cc:	2280      	movs	r2, #128	; 0x80
 80129ce:	6881      	ldr	r1, [r0, #8]
 80129d0:	0152      	lsls	r2, r2, #5
 80129d2:	4291      	cmp	r1, r2
 80129d4:	d017      	beq.n	8012a06 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80129d6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80129d8:	1c51      	adds	r1, r2, #1
 80129da:	64c1      	str	r1, [r0, #76]	; 0x4c
 80129dc:	7812      	ldrb	r2, [r2, #0]
 80129de:	6801      	ldr	r1, [r0, #0]
 80129e0:	850a      	strh	r2, [r1, #40]	; 0x28
      }

      huart->TxXferCount--;
 80129e2:	2252      	movs	r2, #82	; 0x52
 80129e4:	3b01      	subs	r3, #1
 80129e6:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 80129e8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80129ea:	bd10      	pop	{r4, pc}
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80129ec:	2180      	movs	r1, #128	; 0x80
 80129ee:	6803      	ldr	r3, [r0, #0]
      return HAL_OK;
 80129f0:	2000      	movs	r0, #0
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	438a      	bics	r2, r1
 80129f6:	601a      	str	r2, [r3, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	3940      	subs	r1, #64	; 0x40
 80129fc:	430a      	orrs	r2, r1
 80129fe:	601a      	str	r2, [r3, #0]
      return HAL_OK;
 8012a00:	e7f3      	b.n	80129ea <UART_Transmit_IT+0x36>
    return HAL_BUSY;
 8012a02:	2002      	movs	r0, #2
 8012a04:	e7f1      	b.n	80129ea <UART_Transmit_IT+0x36>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a06:	6902      	ldr	r2, [r0, #16]
 8012a08:	2a00      	cmp	r2, #0
 8012a0a:	d1e4      	bne.n	80129d6 <UART_Transmit_IT+0x22>
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8012a0c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012a0e:	6804      	ldr	r4, [r0, #0]
 8012a10:	880a      	ldrh	r2, [r1, #0]
        huart->pTxBuffPtr += 2;
 8012a12:	3102      	adds	r1, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012a14:	05d2      	lsls	r2, r2, #23
 8012a16:	0dd2      	lsrs	r2, r2, #23
 8012a18:	8522      	strh	r2, [r4, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012a1a:	64c1      	str	r1, [r0, #76]	; 0x4c
 8012a1c:	e7e1      	b.n	80129e2 <UART_Transmit_IT+0x2e>
 8012a1e:	46c0      	nop			; (mov r8, r8)

08012a20 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012a20:	2140      	movs	r1, #64	; 0x40
 8012a22:	6803      	ldr	r3, [r0, #0]
{
 8012a24:	b510      	push	{r4, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	438a      	bics	r2, r1
 8012a2a:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012a2c:	2269      	movs	r2, #105	; 0x69
 8012a2e:	5c81      	ldrb	r1, [r0, r2]
 8012a30:	2932      	cmp	r1, #50	; 0x32
 8012a32:	d008      	beq.n	8012a46 <UART_EndTransmit_IT+0x26>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012a34:	2401      	movs	r4, #1
 8012a36:	6899      	ldr	r1, [r3, #8]
 8012a38:	43a1      	bics	r1, r4
 8012a3a:	6099      	str	r1, [r3, #8]

    huart->State = HAL_UART_STATE_READY;
 8012a3c:	5484      	strb	r4, [r0, r2]
  }

  HAL_UART_TxCpltCallback(huart);
 8012a3e:	f7fa f96d 	bl	800cd1c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012a42:	2000      	movs	r0, #0
 8012a44:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012a46:	2322      	movs	r3, #34	; 0x22
 8012a48:	5483      	strb	r3, [r0, r2]
 8012a4a:	e7f8      	b.n	8012a3e <UART_EndTransmit_IT+0x1e>

08012a4c <UART_Receive_IT>:
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012a4c:	2269      	movs	r2, #105	; 0x69
{
 8012a4e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012a50:	5c81      	ldrb	r1, [r0, r2]
{
 8012a52:	0003      	movs	r3, r0
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012a54:	2922      	cmp	r1, #34	; 0x22
 8012a56:	d002      	beq.n	8012a5e <UART_Receive_IT+0x12>
 8012a58:	5c82      	ldrb	r2, [r0, r2]
 8012a5a:	2a32      	cmp	r2, #50	; 0x32
 8012a5c:	d12d      	bne.n	8012aba <UART_Receive_IT+0x6e>
  uint16_t uhMask = huart->Mask;
 8012a5e:	225c      	movs	r2, #92	; 0x5c
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a60:	2180      	movs	r1, #128	; 0x80
 8012a62:	6898      	ldr	r0, [r3, #8]
  uint16_t uhMask = huart->Mask;
 8012a64:	5a9a      	ldrh	r2, [r3, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a66:	0149      	lsls	r1, r1, #5
 8012a68:	4288      	cmp	r0, r1
 8012a6a:	d028      	beq.n	8012abe <UART_Receive_IT+0x72>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012a6c:	6819      	ldr	r1, [r3, #0]
 8012a6e:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8012a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012a72:	4002      	ands	r2, r0
 8012a74:	1c4c      	adds	r4, r1, #1
 8012a76:	655c      	str	r4, [r3, #84]	; 0x54
 8012a78:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8012a7a:	215a      	movs	r1, #90	; 0x5a
 8012a7c:	5a5a      	ldrh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8012a7e:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8012a80:	3a01      	subs	r2, #1
 8012a82:	b292      	uxth	r2, r2
 8012a84:	525a      	strh	r2, [r3, r1]
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	d116      	bne.n	8012ab8 <UART_Receive_IT+0x6c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	3020      	adds	r0, #32
 8012a8e:	6811      	ldr	r1, [r2, #0]
 8012a90:	4381      	bics	r1, r0
 8012a92:	6011      	str	r1, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012a94:	2169      	movs	r1, #105	; 0x69
 8012a96:	5c58      	ldrb	r0, [r3, r1]
 8012a98:	2832      	cmp	r0, #50	; 0x32
 8012a9a:	d01b      	beq.n	8012ad4 <UART_Receive_IT+0x88>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012a9c:	6810      	ldr	r0, [r2, #0]
 8012a9e:	4c0f      	ldr	r4, [pc, #60]	; (8012adc <UART_Receive_IT+0x90>)
 8012aa0:	4020      	ands	r0, r4
 8012aa2:	6010      	str	r0, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012aa4:	6890      	ldr	r0, [r2, #8]
 8012aa6:	3403      	adds	r4, #3
 8012aa8:	34ff      	adds	r4, #255	; 0xff
 8012aaa:	43a0      	bics	r0, r4
 8012aac:	6090      	str	r0, [r2, #8]
        huart->State = HAL_UART_STATE_READY;
 8012aae:	545c      	strb	r4, [r3, r1]
      HAL_UART_RxCpltCallback(huart);
 8012ab0:	0018      	movs	r0, r3
 8012ab2:	f7fa f96f 	bl	800cd94 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8012ab6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012ab8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8012aba:	2002      	movs	r0, #2
 8012abc:	e7fc      	b.n	8012ab8 <UART_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012abe:	6919      	ldr	r1, [r3, #16]
 8012ac0:	2900      	cmp	r1, #0
 8012ac2:	d1d3      	bne.n	8012a6c <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012ac4:	6818      	ldr	r0, [r3, #0]
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8012ac6:	6d59      	ldr	r1, [r3, #84]	; 0x54
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012ac8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8012aca:	4002      	ands	r2, r0
 8012acc:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8012ace:	3102      	adds	r1, #2
 8012ad0:	6559      	str	r1, [r3, #84]	; 0x54
 8012ad2:	e7d2      	b.n	8012a7a <UART_Receive_IT+0x2e>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012ad4:	2212      	movs	r2, #18
 8012ad6:	545a      	strb	r2, [r3, r1]
 8012ad8:	e7ea      	b.n	8012ab0 <UART_Receive_IT+0x64>
 8012ada:	46c0      	nop			; (mov r8, r8)
 8012adc:	fffffeff 	.word	0xfffffeff

08012ae0 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012ae0:	4770      	bx	lr
 8012ae2:	46c0      	nop			; (mov r8, r8)

08012ae4 <HAL_UART_IRQHandler>:
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	6803      	ldr	r3, [r0, #0]
{
 8012ae8:	b510      	push	{r4, lr}
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012aea:	69d9      	ldr	r1, [r3, #28]
{
 8012aec:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012aee:	420a      	tst	r2, r1
 8012af0:	d002      	beq.n	8012af8 <HAL_UART_IRQHandler+0x14>
 8012af2:	6819      	ldr	r1, [r3, #0]
 8012af4:	05c9      	lsls	r1, r1, #23
 8012af6:	d456      	bmi.n	8012ba6 <HAL_UART_IRQHandler+0xc2>
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012af8:	2202      	movs	r2, #2
 8012afa:	69d9      	ldr	r1, [r3, #28]
 8012afc:	420a      	tst	r2, r1
 8012afe:	d003      	beq.n	8012b08 <HAL_UART_IRQHandler+0x24>
 8012b00:	2101      	movs	r1, #1
 8012b02:	6898      	ldr	r0, [r3, #8]
 8012b04:	4201      	tst	r1, r0
 8012b06:	d146      	bne.n	8012b96 <HAL_UART_IRQHandler+0xb2>
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012b08:	2204      	movs	r2, #4
 8012b0a:	69d9      	ldr	r1, [r3, #28]
 8012b0c:	420a      	tst	r2, r1
 8012b0e:	d003      	beq.n	8012b18 <HAL_UART_IRQHandler+0x34>
 8012b10:	2101      	movs	r1, #1
 8012b12:	6898      	ldr	r0, [r3, #8]
 8012b14:	4201      	tst	r1, r0
 8012b16:	d136      	bne.n	8012b86 <HAL_UART_IRQHandler+0xa2>
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012b18:	2208      	movs	r2, #8
 8012b1a:	69d9      	ldr	r1, [r3, #28]
 8012b1c:	420a      	tst	r2, r1
 8012b1e:	d003      	beq.n	8012b28 <HAL_UART_IRQHandler+0x44>
 8012b20:	2101      	movs	r1, #1
 8012b22:	6898      	ldr	r0, [r3, #8]
 8012b24:	4201      	tst	r1, r0
 8012b26:	d120      	bne.n	8012b6a <HAL_UART_IRQHandler+0x86>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012b2a:	2a00      	cmp	r2, #0
 8012b2c:	d126      	bne.n	8012b7c <HAL_UART_IRQHandler+0x98>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012b2e:	2280      	movs	r2, #128	; 0x80
 8012b30:	69d9      	ldr	r1, [r3, #28]
 8012b32:	0352      	lsls	r2, r2, #13
 8012b34:	4211      	tst	r1, r2
 8012b36:	d002      	beq.n	8012b3e <HAL_UART_IRQHandler+0x5a>
 8012b38:	6899      	ldr	r1, [r3, #8]
 8012b3a:	0249      	lsls	r1, r1, #9
 8012b3c:	d43e      	bmi.n	8012bbc <HAL_UART_IRQHandler+0xd8>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012b3e:	2220      	movs	r2, #32
 8012b40:	69d9      	ldr	r1, [r3, #28]
 8012b42:	420a      	tst	r2, r1
 8012b44:	d002      	beq.n	8012b4c <HAL_UART_IRQHandler+0x68>
 8012b46:	6819      	ldr	r1, [r3, #0]
 8012b48:	420a      	tst	r2, r1
 8012b4a:	d140      	bne.n	8012bce <HAL_UART_IRQHandler+0xea>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012b4c:	2280      	movs	r2, #128	; 0x80
 8012b4e:	69d9      	ldr	r1, [r3, #28]
 8012b50:	420a      	tst	r2, r1
 8012b52:	d002      	beq.n	8012b5a <HAL_UART_IRQHandler+0x76>
 8012b54:	6819      	ldr	r1, [r3, #0]
 8012b56:	420a      	tst	r2, r1
 8012b58:	d142      	bne.n	8012be0 <HAL_UART_IRQHandler+0xfc>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012b5a:	2240      	movs	r2, #64	; 0x40
 8012b5c:	69d9      	ldr	r1, [r3, #28]
 8012b5e:	420a      	tst	r2, r1
 8012b60:	d002      	beq.n	8012b68 <HAL_UART_IRQHandler+0x84>
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	421a      	tst	r2, r3
 8012b66:	d125      	bne.n	8012bb4 <HAL_UART_IRQHandler+0xd0>
}
 8012b68:	bd10      	pop	{r4, pc}
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012b6a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012b6c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012b6e:	4302      	orrs	r2, r0
 8012b70:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012b72:	2269      	movs	r2, #105	; 0x69
 8012b74:	54a1      	strb	r1, [r4, r2]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b76:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	d0d8      	beq.n	8012b2e <HAL_UART_IRQHandler+0x4a>
    HAL_UART_ErrorCallback(huart);
 8012b7c:	0020      	movs	r0, r4
 8012b7e:	f7fa f8e5 	bl	800cd4c <HAL_UART_ErrorCallback>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	e7d3      	b.n	8012b2e <HAL_UART_IRQHandler+0x4a>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b86:	2002      	movs	r0, #2
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012b88:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b8a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012b8c:	4302      	orrs	r2, r0
 8012b8e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012b90:	2269      	movs	r2, #105	; 0x69
 8012b92:	54a1      	strb	r1, [r4, r2]
 8012b94:	e7c0      	b.n	8012b18 <HAL_UART_IRQHandler+0x34>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012b96:	2004      	movs	r0, #4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012b98:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012b9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8012b9c:	4302      	orrs	r2, r0
 8012b9e:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012ba0:	2269      	movs	r2, #105	; 0x69
 8012ba2:	54a1      	strb	r1, [r4, r2]
 8012ba4:	e7b0      	b.n	8012b08 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012ba6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ba8:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012baa:	4311      	orrs	r1, r2
 8012bac:	66c1      	str	r1, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012bae:	2169      	movs	r1, #105	; 0x69
 8012bb0:	5442      	strb	r2, [r0, r1]
 8012bb2:	e7a1      	b.n	8012af8 <HAL_UART_IRQHandler+0x14>
    UART_EndTransmit_IT(huart);
 8012bb4:	0020      	movs	r0, r4
 8012bb6:	f7ff ff33 	bl	8012a20 <UART_EndTransmit_IT>
}
 8012bba:	e7d5      	b.n	8012b68 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8012bbc:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8012bbe:	2369      	movs	r3, #105	; 0x69
 8012bc0:	2201      	movs	r2, #1
    HAL_UARTEx_WakeupCallback(huart);
 8012bc2:	0020      	movs	r0, r4
    huart->State = HAL_UART_STATE_READY;
 8012bc4:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8012bc6:	f7ff ff8b 	bl	8012ae0 <HAL_UARTEx_WakeupCallback>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	e7b7      	b.n	8012b3e <HAL_UART_IRQHandler+0x5a>
    UART_Receive_IT(huart);
 8012bce:	0020      	movs	r0, r4
 8012bd0:	f7ff ff3c 	bl	8012a4c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012bd4:	2108      	movs	r1, #8
 8012bd6:	6823      	ldr	r3, [r4, #0]
 8012bd8:	699a      	ldr	r2, [r3, #24]
 8012bda:	430a      	orrs	r2, r1
 8012bdc:	619a      	str	r2, [r3, #24]
 8012bde:	e7b5      	b.n	8012b4c <HAL_UART_IRQHandler+0x68>
    UART_Transmit_IT(huart);
 8012be0:	0020      	movs	r0, r4
 8012be2:	f7ff fee7 	bl	80129b4 <UART_Transmit_IT>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012be6:	6823      	ldr	r3, [r4, #0]
 8012be8:	e7b7      	b.n	8012b5a <HAL_UART_IRQHandler+0x76>
 8012bea:	46c0      	nop			; (mov r8, r8)

08012bec <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8012bec:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8012bee:	f7f0 ff03 	bl	80039f8 <Module_Init>

	//Don't place your code here.
	for(;;){}
 8012bf2:	e7fe      	b.n	8012bf2 <main+0x6>

08012bf4 <UserTask>:

/* User Task */
void UserTask(void *argument){

	// put your code here, to run repeatedly.
	while(1){
 8012bf4:	e7fe      	b.n	8012bf4 <UserTask>
 8012bf6:	46c0      	nop			; (mov r8, r8)

08012bf8 <atof>:
 8012bf8:	b510      	push	{r4, lr}
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	f001 fb56 	bl	80142ac <strtod>
 8012c00:	bd10      	pop	{r4, pc}

08012c02 <atoi>:
 8012c02:	b510      	push	{r4, lr}
 8012c04:	220a      	movs	r2, #10
 8012c06:	2100      	movs	r1, #0
 8012c08:	f001 fc26 	bl	8014458 <strtol>
 8012c0c:	bd10      	pop	{r4, pc}

08012c0e <atol>:
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	220a      	movs	r2, #10
 8012c12:	2100      	movs	r1, #0
 8012c14:	f001 fc20 	bl	8014458 <strtol>
 8012c18:	bd10      	pop	{r4, pc}
	...

08012c1c <calloc>:
 8012c1c:	b510      	push	{r4, lr}
 8012c1e:	4b03      	ldr	r3, [pc, #12]	; (8012c2c <calloc+0x10>)
 8012c20:	000a      	movs	r2, r1
 8012c22:	0001      	movs	r1, r0
 8012c24:	6818      	ldr	r0, [r3, #0]
 8012c26:	f000 f803 	bl	8012c30 <_calloc_r>
 8012c2a:	bd10      	pop	{r4, pc}
 8012c2c:	200000d0 	.word	0x200000d0

08012c30 <_calloc_r>:
 8012c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c32:	2500      	movs	r5, #0
 8012c34:	000e      	movs	r6, r1
 8012c36:	0c0c      	lsrs	r4, r1, #16
 8012c38:	0c13      	lsrs	r3, r2, #16
 8012c3a:	42ac      	cmp	r4, r5
 8012c3c:	d133      	bne.n	8012ca6 <_calloc_r+0x76>
 8012c3e:	42ab      	cmp	r3, r5
 8012c40:	d121      	bne.n	8012c86 <_calloc_r+0x56>
 8012c42:	b2b6      	uxth	r6, r6
 8012c44:	b291      	uxth	r1, r2
 8012c46:	4371      	muls	r1, r6
 8012c48:	f000 f880 	bl	8012d4c <_malloc_r>
 8012c4c:	1e04      	subs	r4, r0, #0
 8012c4e:	d033      	beq.n	8012cb8 <_calloc_r+0x88>
 8012c50:	0003      	movs	r3, r0
 8012c52:	3b08      	subs	r3, #8
 8012c54:	685a      	ldr	r2, [r3, #4]
 8012c56:	2303      	movs	r3, #3
 8012c58:	439a      	bics	r2, r3
 8012c5a:	3a04      	subs	r2, #4
 8012c5c:	2a24      	cmp	r2, #36	; 0x24
 8012c5e:	d832      	bhi.n	8012cc6 <_calloc_r+0x96>
 8012c60:	0003      	movs	r3, r0
 8012c62:	2a13      	cmp	r2, #19
 8012c64:	d90a      	bls.n	8012c7c <_calloc_r+0x4c>
 8012c66:	6005      	str	r5, [r0, #0]
 8012c68:	6045      	str	r5, [r0, #4]
 8012c6a:	3308      	adds	r3, #8
 8012c6c:	2a1b      	cmp	r2, #27
 8012c6e:	d905      	bls.n	8012c7c <_calloc_r+0x4c>
 8012c70:	6085      	str	r5, [r0, #8]
 8012c72:	60c5      	str	r5, [r0, #12]
 8012c74:	2a24      	cmp	r2, #36	; 0x24
 8012c76:	d021      	beq.n	8012cbc <_calloc_r+0x8c>
 8012c78:	0003      	movs	r3, r0
 8012c7a:	3310      	adds	r3, #16
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	601a      	str	r2, [r3, #0]
 8012c80:	605a      	str	r2, [r3, #4]
 8012c82:	609a      	str	r2, [r3, #8]
 8012c84:	e018      	b.n	8012cb8 <_calloc_r+0x88>
 8012c86:	1c1c      	adds	r4, r3, #0
 8012c88:	1c31      	adds	r1, r6, #0
 8012c8a:	b2b6      	uxth	r6, r6
 8012c8c:	b292      	uxth	r2, r2
 8012c8e:	b289      	uxth	r1, r1
 8012c90:	4372      	muls	r2, r6
 8012c92:	b2a3      	uxth	r3, r4
 8012c94:	434b      	muls	r3, r1
 8012c96:	0c11      	lsrs	r1, r2, #16
 8012c98:	185b      	adds	r3, r3, r1
 8012c9a:	0c19      	lsrs	r1, r3, #16
 8012c9c:	d107      	bne.n	8012cae <_calloc_r+0x7e>
 8012c9e:	0419      	lsls	r1, r3, #16
 8012ca0:	b292      	uxth	r2, r2
 8012ca2:	4311      	orrs	r1, r2
 8012ca4:	e7d0      	b.n	8012c48 <_calloc_r+0x18>
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d101      	bne.n	8012cae <_calloc_r+0x7e>
 8012caa:	1c11      	adds	r1, r2, #0
 8012cac:	e7ed      	b.n	8012c8a <_calloc_r+0x5a>
 8012cae:	f000 f80f 	bl	8012cd0 <__errno>
 8012cb2:	230c      	movs	r3, #12
 8012cb4:	2400      	movs	r4, #0
 8012cb6:	6003      	str	r3, [r0, #0]
 8012cb8:	0020      	movs	r0, r4
 8012cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cbc:	0003      	movs	r3, r0
 8012cbe:	6105      	str	r5, [r0, #16]
 8012cc0:	3318      	adds	r3, #24
 8012cc2:	6145      	str	r5, [r0, #20]
 8012cc4:	e7da      	b.n	8012c7c <_calloc_r+0x4c>
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	f000 fa69 	bl	801319e <memset>
 8012ccc:	e7f4      	b.n	8012cb8 <_calloc_r+0x88>
	...

08012cd0 <__errno>:
 8012cd0:	4b01      	ldr	r3, [pc, #4]	; (8012cd8 <__errno+0x8>)
 8012cd2:	6818      	ldr	r0, [r3, #0]
 8012cd4:	4770      	bx	lr
 8012cd6:	46c0      	nop			; (mov r8, r8)
 8012cd8:	200000d0 	.word	0x200000d0

08012cdc <__libc_init_array>:
 8012cdc:	b570      	push	{r4, r5, r6, lr}
 8012cde:	2600      	movs	r6, #0
 8012ce0:	4d0c      	ldr	r5, [pc, #48]	; (8012d14 <__libc_init_array+0x38>)
 8012ce2:	4c0d      	ldr	r4, [pc, #52]	; (8012d18 <__libc_init_array+0x3c>)
 8012ce4:	1b64      	subs	r4, r4, r5
 8012ce6:	10a4      	asrs	r4, r4, #2
 8012ce8:	42a6      	cmp	r6, r4
 8012cea:	d109      	bne.n	8012d00 <__libc_init_array+0x24>
 8012cec:	2600      	movs	r6, #0
 8012cee:	f006 fad3 	bl	8019298 <_init>
 8012cf2:	4d0a      	ldr	r5, [pc, #40]	; (8012d1c <__libc_init_array+0x40>)
 8012cf4:	4c0a      	ldr	r4, [pc, #40]	; (8012d20 <__libc_init_array+0x44>)
 8012cf6:	1b64      	subs	r4, r4, r5
 8012cf8:	10a4      	asrs	r4, r4, #2
 8012cfa:	42a6      	cmp	r6, r4
 8012cfc:	d105      	bne.n	8012d0a <__libc_init_array+0x2e>
 8012cfe:	bd70      	pop	{r4, r5, r6, pc}
 8012d00:	00b3      	lsls	r3, r6, #2
 8012d02:	58eb      	ldr	r3, [r5, r3]
 8012d04:	4798      	blx	r3
 8012d06:	3601      	adds	r6, #1
 8012d08:	e7ee      	b.n	8012ce8 <__libc_init_array+0xc>
 8012d0a:	00b3      	lsls	r3, r6, #2
 8012d0c:	58eb      	ldr	r3, [r5, r3]
 8012d0e:	4798      	blx	r3
 8012d10:	3601      	adds	r6, #1
 8012d12:	e7f2      	b.n	8012cfa <__libc_init_array+0x1e>
 8012d14:	0801c830 	.word	0x0801c830
 8012d18:	0801c830 	.word	0x0801c830
 8012d1c:	0801c830 	.word	0x0801c830
 8012d20:	0801c838 	.word	0x0801c838

08012d24 <malloc>:
 8012d24:	b510      	push	{r4, lr}
 8012d26:	4b03      	ldr	r3, [pc, #12]	; (8012d34 <malloc+0x10>)
 8012d28:	0001      	movs	r1, r0
 8012d2a:	6818      	ldr	r0, [r3, #0]
 8012d2c:	f000 f80e 	bl	8012d4c <_malloc_r>
 8012d30:	bd10      	pop	{r4, pc}
 8012d32:	46c0      	nop			; (mov r8, r8)
 8012d34:	200000d0 	.word	0x200000d0

08012d38 <free>:
 8012d38:	b510      	push	{r4, lr}
 8012d3a:	4b03      	ldr	r3, [pc, #12]	; (8012d48 <free+0x10>)
 8012d3c:	0001      	movs	r1, r0
 8012d3e:	6818      	ldr	r0, [r3, #0]
 8012d40:	f003 fcf8 	bl	8016734 <_free_r>
 8012d44:	bd10      	pop	{r4, pc}
 8012d46:	46c0      	nop			; (mov r8, r8)
 8012d48:	200000d0 	.word	0x200000d0

08012d4c <_malloc_r>:
 8012d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d4e:	000d      	movs	r5, r1
 8012d50:	b087      	sub	sp, #28
 8012d52:	350b      	adds	r5, #11
 8012d54:	9001      	str	r0, [sp, #4]
 8012d56:	2d16      	cmp	r5, #22
 8012d58:	d908      	bls.n	8012d6c <_malloc_r+0x20>
 8012d5a:	2207      	movs	r2, #7
 8012d5c:	4395      	bics	r5, r2
 8012d5e:	d506      	bpl.n	8012d6e <_malloc_r+0x22>
 8012d60:	230c      	movs	r3, #12
 8012d62:	9a01      	ldr	r2, [sp, #4]
 8012d64:	6013      	str	r3, [r2, #0]
 8012d66:	2000      	movs	r0, #0
 8012d68:	b007      	add	sp, #28
 8012d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d6c:	2510      	movs	r5, #16
 8012d6e:	42a9      	cmp	r1, r5
 8012d70:	d8f6      	bhi.n	8012d60 <_malloc_r+0x14>
 8012d72:	9801      	ldr	r0, [sp, #4]
 8012d74:	f000 fa1c 	bl	80131b0 <__malloc_lock>
 8012d78:	23fc      	movs	r3, #252	; 0xfc
 8012d7a:	48bd      	ldr	r0, [pc, #756]	; (8013070 <_malloc_r+0x324>)
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	429d      	cmp	r5, r3
 8012d80:	d21a      	bcs.n	8012db8 <_malloc_r+0x6c>
 8012d82:	002a      	movs	r2, r5
 8012d84:	3208      	adds	r2, #8
 8012d86:	1882      	adds	r2, r0, r2
 8012d88:	0011      	movs	r1, r2
 8012d8a:	6854      	ldr	r4, [r2, #4]
 8012d8c:	3908      	subs	r1, #8
 8012d8e:	08eb      	lsrs	r3, r5, #3
 8012d90:	428c      	cmp	r4, r1
 8012d92:	d103      	bne.n	8012d9c <_malloc_r+0x50>
 8012d94:	68d4      	ldr	r4, [r2, #12]
 8012d96:	3302      	adds	r3, #2
 8012d98:	42a2      	cmp	r2, r4
 8012d9a:	d023      	beq.n	8012de4 <_malloc_r+0x98>
 8012d9c:	2303      	movs	r3, #3
 8012d9e:	6862      	ldr	r2, [r4, #4]
 8012da0:	68a1      	ldr	r1, [r4, #8]
 8012da2:	439a      	bics	r2, r3
 8012da4:	0013      	movs	r3, r2
 8012da6:	68e2      	ldr	r2, [r4, #12]
 8012da8:	18e3      	adds	r3, r4, r3
 8012daa:	60ca      	str	r2, [r1, #12]
 8012dac:	6091      	str	r1, [r2, #8]
 8012dae:	2201      	movs	r2, #1
 8012db0:	6859      	ldr	r1, [r3, #4]
 8012db2:	430a      	orrs	r2, r1
 8012db4:	605a      	str	r2, [r3, #4]
 8012db6:	e02b      	b.n	8012e10 <_malloc_r+0xc4>
 8012db8:	233f      	movs	r3, #63	; 0x3f
 8012dba:	0a6a      	lsrs	r2, r5, #9
 8012dbc:	d003      	beq.n	8012dc6 <_malloc_r+0x7a>
 8012dbe:	2a04      	cmp	r2, #4
 8012dc0:	d82c      	bhi.n	8012e1c <_malloc_r+0xd0>
 8012dc2:	09ab      	lsrs	r3, r5, #6
 8012dc4:	3338      	adds	r3, #56	; 0x38
 8012dc6:	2203      	movs	r2, #3
 8012dc8:	4694      	mov	ip, r2
 8012dca:	00d9      	lsls	r1, r3, #3
 8012dcc:	1809      	adds	r1, r1, r0
 8012dce:	68cc      	ldr	r4, [r1, #12]
 8012dd0:	428c      	cmp	r4, r1
 8012dd2:	d006      	beq.n	8012de2 <_malloc_r+0x96>
 8012dd4:	4666      	mov	r6, ip
 8012dd6:	6862      	ldr	r2, [r4, #4]
 8012dd8:	43b2      	bics	r2, r6
 8012dda:	1b57      	subs	r7, r2, r5
 8012ddc:	2f0f      	cmp	r7, #15
 8012dde:	dd35      	ble.n	8012e4c <_malloc_r+0x100>
 8012de0:	3b01      	subs	r3, #1
 8012de2:	3301      	adds	r3, #1
 8012de4:	6904      	ldr	r4, [r0, #16]
 8012de6:	49a3      	ldr	r1, [pc, #652]	; (8013074 <_malloc_r+0x328>)
 8012de8:	428c      	cmp	r4, r1
 8012dea:	d056      	beq.n	8012e9a <_malloc_r+0x14e>
 8012dec:	2203      	movs	r2, #3
 8012dee:	6866      	ldr	r6, [r4, #4]
 8012df0:	4396      	bics	r6, r2
 8012df2:	0032      	movs	r2, r6
 8012df4:	1b76      	subs	r6, r6, r5
 8012df6:	2e0f      	cmp	r6, #15
 8012df8:	dd36      	ble.n	8012e68 <_malloc_r+0x11c>
 8012dfa:	2701      	movs	r7, #1
 8012dfc:	1963      	adds	r3, r4, r5
 8012dfe:	433d      	orrs	r5, r7
 8012e00:	4337      	orrs	r7, r6
 8012e02:	6065      	str	r5, [r4, #4]
 8012e04:	6143      	str	r3, [r0, #20]
 8012e06:	6103      	str	r3, [r0, #16]
 8012e08:	60d9      	str	r1, [r3, #12]
 8012e0a:	6099      	str	r1, [r3, #8]
 8012e0c:	605f      	str	r7, [r3, #4]
 8012e0e:	50a6      	str	r6, [r4, r2]
 8012e10:	9801      	ldr	r0, [sp, #4]
 8012e12:	f000 f9d5 	bl	80131c0 <__malloc_unlock>
 8012e16:	0020      	movs	r0, r4
 8012e18:	3008      	adds	r0, #8
 8012e1a:	e7a5      	b.n	8012d68 <_malloc_r+0x1c>
 8012e1c:	2a14      	cmp	r2, #20
 8012e1e:	d802      	bhi.n	8012e26 <_malloc_r+0xda>
 8012e20:	0013      	movs	r3, r2
 8012e22:	335b      	adds	r3, #91	; 0x5b
 8012e24:	e7cf      	b.n	8012dc6 <_malloc_r+0x7a>
 8012e26:	2a54      	cmp	r2, #84	; 0x54
 8012e28:	d802      	bhi.n	8012e30 <_malloc_r+0xe4>
 8012e2a:	0b2b      	lsrs	r3, r5, #12
 8012e2c:	336e      	adds	r3, #110	; 0x6e
 8012e2e:	e7ca      	b.n	8012dc6 <_malloc_r+0x7a>
 8012e30:	23aa      	movs	r3, #170	; 0xaa
 8012e32:	005b      	lsls	r3, r3, #1
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d802      	bhi.n	8012e3e <_malloc_r+0xf2>
 8012e38:	0beb      	lsrs	r3, r5, #15
 8012e3a:	3377      	adds	r3, #119	; 0x77
 8012e3c:	e7c3      	b.n	8012dc6 <_malloc_r+0x7a>
 8012e3e:	498e      	ldr	r1, [pc, #568]	; (8013078 <_malloc_r+0x32c>)
 8012e40:	237e      	movs	r3, #126	; 0x7e
 8012e42:	428a      	cmp	r2, r1
 8012e44:	d8bf      	bhi.n	8012dc6 <_malloc_r+0x7a>
 8012e46:	0cab      	lsrs	r3, r5, #18
 8012e48:	337c      	adds	r3, #124	; 0x7c
 8012e4a:	e7bc      	b.n	8012dc6 <_malloc_r+0x7a>
 8012e4c:	68e6      	ldr	r6, [r4, #12]
 8012e4e:	2f00      	cmp	r7, #0
 8012e50:	db08      	blt.n	8012e64 <_malloc_r+0x118>
 8012e52:	68a3      	ldr	r3, [r4, #8]
 8012e54:	60de      	str	r6, [r3, #12]
 8012e56:	60b3      	str	r3, [r6, #8]
 8012e58:	2301      	movs	r3, #1
 8012e5a:	18a2      	adds	r2, r4, r2
 8012e5c:	6851      	ldr	r1, [r2, #4]
 8012e5e:	430b      	orrs	r3, r1
 8012e60:	6053      	str	r3, [r2, #4]
 8012e62:	e7d5      	b.n	8012e10 <_malloc_r+0xc4>
 8012e64:	0034      	movs	r4, r6
 8012e66:	e7b3      	b.n	8012dd0 <_malloc_r+0x84>
 8012e68:	6141      	str	r1, [r0, #20]
 8012e6a:	6101      	str	r1, [r0, #16]
 8012e6c:	2e00      	cmp	r6, #0
 8012e6e:	daf3      	bge.n	8012e58 <_malloc_r+0x10c>
 8012e70:	6841      	ldr	r1, [r0, #4]
 8012e72:	468c      	mov	ip, r1
 8012e74:	2180      	movs	r1, #128	; 0x80
 8012e76:	0089      	lsls	r1, r1, #2
 8012e78:	428a      	cmp	r2, r1
 8012e7a:	d300      	bcc.n	8012e7e <_malloc_r+0x132>
 8012e7c:	e089      	b.n	8012f92 <_malloc_r+0x246>
 8012e7e:	0956      	lsrs	r6, r2, #5
 8012e80:	08d1      	lsrs	r1, r2, #3
 8012e82:	2201      	movs	r2, #1
 8012e84:	40b2      	lsls	r2, r6
 8012e86:	4666      	mov	r6, ip
 8012e88:	00c9      	lsls	r1, r1, #3
 8012e8a:	4332      	orrs	r2, r6
 8012e8c:	6042      	str	r2, [r0, #4]
 8012e8e:	1808      	adds	r0, r1, r0
 8012e90:	6882      	ldr	r2, [r0, #8]
 8012e92:	60e0      	str	r0, [r4, #12]
 8012e94:	60a2      	str	r2, [r4, #8]
 8012e96:	6084      	str	r4, [r0, #8]
 8012e98:	60d4      	str	r4, [r2, #12]
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	4874      	ldr	r0, [pc, #464]	; (8013070 <_malloc_r+0x324>)
 8012e9e:	1099      	asrs	r1, r3, #2
 8012ea0:	408a      	lsls	r2, r1
 8012ea2:	6841      	ldr	r1, [r0, #4]
 8012ea4:	4291      	cmp	r1, r2
 8012ea6:	d325      	bcc.n	8012ef4 <_malloc_r+0x1a8>
 8012ea8:	420a      	tst	r2, r1
 8012eaa:	d105      	bne.n	8012eb8 <_malloc_r+0x16c>
 8012eac:	2403      	movs	r4, #3
 8012eae:	43a3      	bics	r3, r4
 8012eb0:	0052      	lsls	r2, r2, #1
 8012eb2:	3304      	adds	r3, #4
 8012eb4:	420a      	tst	r2, r1
 8012eb6:	d0fb      	beq.n	8012eb0 <_malloc_r+0x164>
 8012eb8:	00d9      	lsls	r1, r3, #3
 8012eba:	1841      	adds	r1, r0, r1
 8012ebc:	468c      	mov	ip, r1
 8012ebe:	9302      	str	r3, [sp, #8]
 8012ec0:	68cc      	ldr	r4, [r1, #12]
 8012ec2:	428c      	cmp	r4, r1
 8012ec4:	d000      	beq.n	8012ec8 <_malloc_r+0x17c>
 8012ec6:	e09b      	b.n	8013000 <_malloc_r+0x2b4>
 8012ec8:	2603      	movs	r6, #3
 8012eca:	9c02      	ldr	r4, [sp, #8]
 8012ecc:	3108      	adds	r1, #8
 8012ece:	3401      	adds	r4, #1
 8012ed0:	9402      	str	r4, [sp, #8]
 8012ed2:	4234      	tst	r4, r6
 8012ed4:	d1f4      	bne.n	8012ec0 <_malloc_r+0x174>
 8012ed6:	2103      	movs	r1, #3
 8012ed8:	420b      	tst	r3, r1
 8012eda:	d000      	beq.n	8012ede <_malloc_r+0x192>
 8012edc:	e0b7      	b.n	801304e <_malloc_r+0x302>
 8012ede:	6843      	ldr	r3, [r0, #4]
 8012ee0:	4393      	bics	r3, r2
 8012ee2:	6043      	str	r3, [r0, #4]
 8012ee4:	4b62      	ldr	r3, [pc, #392]	; (8013070 <_malloc_r+0x324>)
 8012ee6:	0052      	lsls	r2, r2, #1
 8012ee8:	6859      	ldr	r1, [r3, #4]
 8012eea:	4291      	cmp	r1, r2
 8012eec:	d302      	bcc.n	8012ef4 <_malloc_r+0x1a8>
 8012eee:	2a00      	cmp	r2, #0
 8012ef0:	d000      	beq.n	8012ef4 <_malloc_r+0x1a8>
 8012ef2:	e0bb      	b.n	801306c <_malloc_r+0x320>
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	6886      	ldr	r6, [r0, #8]
 8012ef8:	6872      	ldr	r2, [r6, #4]
 8012efa:	439a      	bics	r2, r3
 8012efc:	9202      	str	r2, [sp, #8]
 8012efe:	42aa      	cmp	r2, r5
 8012f00:	d303      	bcc.n	8012f0a <_malloc_r+0x1be>
 8012f02:	1b51      	subs	r1, r2, r5
 8012f04:	290f      	cmp	r1, #15
 8012f06:	dd00      	ble.n	8012f0a <_malloc_r+0x1be>
 8012f08:	e123      	b.n	8013152 <_malloc_r+0x406>
 8012f0a:	9b02      	ldr	r3, [sp, #8]
 8012f0c:	2008      	movs	r0, #8
 8012f0e:	18f3      	adds	r3, r6, r3
 8012f10:	9303      	str	r3, [sp, #12]
 8012f12:	4b5a      	ldr	r3, [pc, #360]	; (801307c <_malloc_r+0x330>)
 8012f14:	681f      	ldr	r7, [r3, #0]
 8012f16:	f002 fd19 	bl	801594c <sysconf>
 8012f1a:	4b59      	ldr	r3, [pc, #356]	; (8013080 <_malloc_r+0x334>)
 8012f1c:	3710      	adds	r7, #16
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	197f      	adds	r7, r7, r5
 8012f22:	9004      	str	r0, [sp, #16]
 8012f24:	3301      	adds	r3, #1
 8012f26:	d003      	beq.n	8012f30 <_malloc_r+0x1e4>
 8012f28:	3f01      	subs	r7, #1
 8012f2a:	183f      	adds	r7, r7, r0
 8012f2c:	4243      	negs	r3, r0
 8012f2e:	401f      	ands	r7, r3
 8012f30:	0039      	movs	r1, r7
 8012f32:	9801      	ldr	r0, [sp, #4]
 8012f34:	f000 fb12 	bl	801355c <_sbrk_r>
 8012f38:	0004      	movs	r4, r0
 8012f3a:	1c43      	adds	r3, r0, #1
 8012f3c:	d100      	bne.n	8012f40 <_malloc_r+0x1f4>
 8012f3e:	e0df      	b.n	8013100 <_malloc_r+0x3b4>
 8012f40:	9b03      	ldr	r3, [sp, #12]
 8012f42:	4283      	cmp	r3, r0
 8012f44:	d903      	bls.n	8012f4e <_malloc_r+0x202>
 8012f46:	4b4a      	ldr	r3, [pc, #296]	; (8013070 <_malloc_r+0x324>)
 8012f48:	429e      	cmp	r6, r3
 8012f4a:	d000      	beq.n	8012f4e <_malloc_r+0x202>
 8012f4c:	e0d8      	b.n	8013100 <_malloc_r+0x3b4>
 8012f4e:	4b4d      	ldr	r3, [pc, #308]	; (8013084 <_malloc_r+0x338>)
 8012f50:	9903      	ldr	r1, [sp, #12]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	18ba      	adds	r2, r7, r2
 8012f56:	601a      	str	r2, [r3, #0]
 8012f58:	9b04      	ldr	r3, [sp, #16]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	42a1      	cmp	r1, r4
 8012f5e:	d000      	beq.n	8012f62 <_malloc_r+0x216>
 8012f60:	e096      	b.n	8013090 <_malloc_r+0x344>
 8012f62:	4219      	tst	r1, r3
 8012f64:	d000      	beq.n	8012f68 <_malloc_r+0x21c>
 8012f66:	e093      	b.n	8013090 <_malloc_r+0x344>
 8012f68:	2601      	movs	r6, #1
 8012f6a:	4b41      	ldr	r3, [pc, #260]	; (8013070 <_malloc_r+0x324>)
 8012f6c:	9a02      	ldr	r2, [sp, #8]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	19d7      	adds	r7, r2, r7
 8012f72:	433e      	orrs	r6, r7
 8012f74:	605e      	str	r6, [r3, #4]
 8012f76:	4b43      	ldr	r3, [pc, #268]	; (8013084 <_malloc_r+0x338>)
 8012f78:	4a43      	ldr	r2, [pc, #268]	; (8013088 <_malloc_r+0x33c>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	6811      	ldr	r1, [r2, #0]
 8012f7e:	428b      	cmp	r3, r1
 8012f80:	d900      	bls.n	8012f84 <_malloc_r+0x238>
 8012f82:	6013      	str	r3, [r2, #0]
 8012f84:	4a41      	ldr	r2, [pc, #260]	; (801308c <_malloc_r+0x340>)
 8012f86:	6811      	ldr	r1, [r2, #0]
 8012f88:	428b      	cmp	r3, r1
 8012f8a:	d800      	bhi.n	8012f8e <_malloc_r+0x242>
 8012f8c:	e0b8      	b.n	8013100 <_malloc_r+0x3b4>
 8012f8e:	6013      	str	r3, [r2, #0]
 8012f90:	e0b6      	b.n	8013100 <_malloc_r+0x3b4>
 8012f92:	0a56      	lsrs	r6, r2, #9
 8012f94:	2e04      	cmp	r6, #4
 8012f96:	d811      	bhi.n	8012fbc <_malloc_r+0x270>
 8012f98:	0991      	lsrs	r1, r2, #6
 8012f9a:	3138      	adds	r1, #56	; 0x38
 8012f9c:	00cf      	lsls	r7, r1, #3
 8012f9e:	183f      	adds	r7, r7, r0
 8012fa0:	68be      	ldr	r6, [r7, #8]
 8012fa2:	42b7      	cmp	r7, r6
 8012fa4:	d125      	bne.n	8012ff2 <_malloc_r+0x2a6>
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	1089      	asrs	r1, r1, #2
 8012faa:	408a      	lsls	r2, r1
 8012fac:	4661      	mov	r1, ip
 8012fae:	430a      	orrs	r2, r1
 8012fb0:	6042      	str	r2, [r0, #4]
 8012fb2:	60e7      	str	r7, [r4, #12]
 8012fb4:	60a6      	str	r6, [r4, #8]
 8012fb6:	60bc      	str	r4, [r7, #8]
 8012fb8:	60f4      	str	r4, [r6, #12]
 8012fba:	e76e      	b.n	8012e9a <_malloc_r+0x14e>
 8012fbc:	2e14      	cmp	r6, #20
 8012fbe:	d802      	bhi.n	8012fc6 <_malloc_r+0x27a>
 8012fc0:	0031      	movs	r1, r6
 8012fc2:	315b      	adds	r1, #91	; 0x5b
 8012fc4:	e7ea      	b.n	8012f9c <_malloc_r+0x250>
 8012fc6:	2e54      	cmp	r6, #84	; 0x54
 8012fc8:	d802      	bhi.n	8012fd0 <_malloc_r+0x284>
 8012fca:	0b11      	lsrs	r1, r2, #12
 8012fcc:	316e      	adds	r1, #110	; 0x6e
 8012fce:	e7e5      	b.n	8012f9c <_malloc_r+0x250>
 8012fd0:	21aa      	movs	r1, #170	; 0xaa
 8012fd2:	0049      	lsls	r1, r1, #1
 8012fd4:	428e      	cmp	r6, r1
 8012fd6:	d802      	bhi.n	8012fde <_malloc_r+0x292>
 8012fd8:	0bd1      	lsrs	r1, r2, #15
 8012fda:	3177      	adds	r1, #119	; 0x77
 8012fdc:	e7de      	b.n	8012f9c <_malloc_r+0x250>
 8012fde:	4f26      	ldr	r7, [pc, #152]	; (8013078 <_malloc_r+0x32c>)
 8012fe0:	217e      	movs	r1, #126	; 0x7e
 8012fe2:	42be      	cmp	r6, r7
 8012fe4:	d8da      	bhi.n	8012f9c <_malloc_r+0x250>
 8012fe6:	0c91      	lsrs	r1, r2, #18
 8012fe8:	317c      	adds	r1, #124	; 0x7c
 8012fea:	e7d7      	b.n	8012f9c <_malloc_r+0x250>
 8012fec:	68b6      	ldr	r6, [r6, #8]
 8012fee:	42b7      	cmp	r7, r6
 8012ff0:	d004      	beq.n	8012ffc <_malloc_r+0x2b0>
 8012ff2:	2003      	movs	r0, #3
 8012ff4:	6871      	ldr	r1, [r6, #4]
 8012ff6:	4381      	bics	r1, r0
 8012ff8:	4291      	cmp	r1, r2
 8012ffa:	d8f7      	bhi.n	8012fec <_malloc_r+0x2a0>
 8012ffc:	68f7      	ldr	r7, [r6, #12]
 8012ffe:	e7d8      	b.n	8012fb2 <_malloc_r+0x266>
 8013000:	2703      	movs	r7, #3
 8013002:	6866      	ldr	r6, [r4, #4]
 8013004:	43be      	bics	r6, r7
 8013006:	9603      	str	r6, [sp, #12]
 8013008:	1b77      	subs	r7, r6, r5
 801300a:	68e6      	ldr	r6, [r4, #12]
 801300c:	2f0f      	cmp	r7, #15
 801300e:	dd10      	ble.n	8013032 <_malloc_r+0x2e6>
 8013010:	2201      	movs	r2, #1
 8013012:	68a1      	ldr	r1, [r4, #8]
 8013014:	1963      	adds	r3, r4, r5
 8013016:	4315      	orrs	r5, r2
 8013018:	6065      	str	r5, [r4, #4]
 801301a:	60ce      	str	r6, [r1, #12]
 801301c:	60b1      	str	r1, [r6, #8]
 801301e:	6143      	str	r3, [r0, #20]
 8013020:	6103      	str	r3, [r0, #16]
 8013022:	4814      	ldr	r0, [pc, #80]	; (8013074 <_malloc_r+0x328>)
 8013024:	433a      	orrs	r2, r7
 8013026:	60d8      	str	r0, [r3, #12]
 8013028:	6098      	str	r0, [r3, #8]
 801302a:	605a      	str	r2, [r3, #4]
 801302c:	9b03      	ldr	r3, [sp, #12]
 801302e:	50e7      	str	r7, [r4, r3]
 8013030:	e6ee      	b.n	8012e10 <_malloc_r+0xc4>
 8013032:	2f00      	cmp	r7, #0
 8013034:	db09      	blt.n	801304a <_malloc_r+0x2fe>
 8013036:	9b03      	ldr	r3, [sp, #12]
 8013038:	18e1      	adds	r1, r4, r3
 801303a:	2301      	movs	r3, #1
 801303c:	684a      	ldr	r2, [r1, #4]
 801303e:	4313      	orrs	r3, r2
 8013040:	604b      	str	r3, [r1, #4]
 8013042:	68a3      	ldr	r3, [r4, #8]
 8013044:	60de      	str	r6, [r3, #12]
 8013046:	60b3      	str	r3, [r6, #8]
 8013048:	e6e2      	b.n	8012e10 <_malloc_r+0xc4>
 801304a:	0034      	movs	r4, r6
 801304c:	e739      	b.n	8012ec2 <_malloc_r+0x176>
 801304e:	2108      	movs	r1, #8
 8013050:	4249      	negs	r1, r1
 8013052:	448c      	add	ip, r1
 8013054:	4661      	mov	r1, ip
 8013056:	6889      	ldr	r1, [r1, #8]
 8013058:	3b01      	subs	r3, #1
 801305a:	4561      	cmp	r1, ip
 801305c:	d100      	bne.n	8013060 <_malloc_r+0x314>
 801305e:	e73a      	b.n	8012ed6 <_malloc_r+0x18a>
 8013060:	e740      	b.n	8012ee4 <_malloc_r+0x198>
 8013062:	3304      	adds	r3, #4
 8013064:	0052      	lsls	r2, r2, #1
 8013066:	420a      	tst	r2, r1
 8013068:	d0fb      	beq.n	8013062 <_malloc_r+0x316>
 801306a:	e725      	b.n	8012eb8 <_malloc_r+0x16c>
 801306c:	9b02      	ldr	r3, [sp, #8]
 801306e:	e7fa      	b.n	8013066 <_malloc_r+0x31a>
 8013070:	20000500 	.word	0x20000500
 8013074:	20000508 	.word	0x20000508
 8013078:	00000554 	.word	0x00000554
 801307c:	20006dd0 	.word	0x20006dd0
 8013080:	20000908 	.word	0x20000908
 8013084:	20006da0 	.word	0x20006da0
 8013088:	20006dc8 	.word	0x20006dc8
 801308c:	20006dcc 	.word	0x20006dcc
 8013090:	4934      	ldr	r1, [pc, #208]	; (8013164 <_malloc_r+0x418>)
 8013092:	6808      	ldr	r0, [r1, #0]
 8013094:	3001      	adds	r0, #1
 8013096:	d141      	bne.n	801311c <_malloc_r+0x3d0>
 8013098:	600c      	str	r4, [r1, #0]
 801309a:	2207      	movs	r2, #7
 801309c:	0021      	movs	r1, r4
 801309e:	4011      	ands	r1, r2
 80130a0:	2000      	movs	r0, #0
 80130a2:	9103      	str	r1, [sp, #12]
 80130a4:	4214      	tst	r4, r2
 80130a6:	d002      	beq.n	80130ae <_malloc_r+0x362>
 80130a8:	3008      	adds	r0, #8
 80130aa:	1a40      	subs	r0, r0, r1
 80130ac:	1824      	adds	r4, r4, r0
 80130ae:	19e2      	adds	r2, r4, r7
 80130b0:	9205      	str	r2, [sp, #20]
 80130b2:	9f05      	ldr	r7, [sp, #20]
 80130b4:	9a04      	ldr	r2, [sp, #16]
 80130b6:	401f      	ands	r7, r3
 80130b8:	1810      	adds	r0, r2, r0
 80130ba:	1bc7      	subs	r7, r0, r7
 80130bc:	401f      	ands	r7, r3
 80130be:	0039      	movs	r1, r7
 80130c0:	9801      	ldr	r0, [sp, #4]
 80130c2:	f000 fa4b 	bl	801355c <_sbrk_r>
 80130c6:	1c43      	adds	r3, r0, #1
 80130c8:	d108      	bne.n	80130dc <_malloc_r+0x390>
 80130ca:	9f03      	ldr	r7, [sp, #12]
 80130cc:	9805      	ldr	r0, [sp, #20]
 80130ce:	2f00      	cmp	r7, #0
 80130d0:	d004      	beq.n	80130dc <_malloc_r+0x390>
 80130d2:	0038      	movs	r0, r7
 80130d4:	2700      	movs	r7, #0
 80130d6:	9b05      	ldr	r3, [sp, #20]
 80130d8:	3808      	subs	r0, #8
 80130da:	1818      	adds	r0, r3, r0
 80130dc:	4a22      	ldr	r2, [pc, #136]	; (8013168 <_malloc_r+0x41c>)
 80130de:	1b00      	subs	r0, r0, r4
 80130e0:	6813      	ldr	r3, [r2, #0]
 80130e2:	19db      	adds	r3, r3, r7
 80130e4:	6013      	str	r3, [r2, #0]
 80130e6:	2201      	movs	r2, #1
 80130e8:	4b20      	ldr	r3, [pc, #128]	; (801316c <_malloc_r+0x420>)
 80130ea:	19c7      	adds	r7, r0, r7
 80130ec:	4317      	orrs	r7, r2
 80130ee:	609c      	str	r4, [r3, #8]
 80130f0:	6067      	str	r7, [r4, #4]
 80130f2:	429e      	cmp	r6, r3
 80130f4:	d100      	bne.n	80130f8 <_malloc_r+0x3ac>
 80130f6:	e73e      	b.n	8012f76 <_malloc_r+0x22a>
 80130f8:	9b02      	ldr	r3, [sp, #8]
 80130fa:	2b0f      	cmp	r3, #15
 80130fc:	d814      	bhi.n	8013128 <_malloc_r+0x3dc>
 80130fe:	6062      	str	r2, [r4, #4]
 8013100:	2203      	movs	r2, #3
 8013102:	4b1a      	ldr	r3, [pc, #104]	; (801316c <_malloc_r+0x420>)
 8013104:	689b      	ldr	r3, [r3, #8]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	4393      	bics	r3, r2
 801310a:	1b59      	subs	r1, r3, r5
 801310c:	42ab      	cmp	r3, r5
 801310e:	d301      	bcc.n	8013114 <_malloc_r+0x3c8>
 8013110:	290f      	cmp	r1, #15
 8013112:	dc1e      	bgt.n	8013152 <_malloc_r+0x406>
 8013114:	9801      	ldr	r0, [sp, #4]
 8013116:	f000 f853 	bl	80131c0 <__malloc_unlock>
 801311a:	e624      	b.n	8012d66 <_malloc_r+0x1a>
 801311c:	9903      	ldr	r1, [sp, #12]
 801311e:	1a61      	subs	r1, r4, r1
 8013120:	1889      	adds	r1, r1, r2
 8013122:	4a11      	ldr	r2, [pc, #68]	; (8013168 <_malloc_r+0x41c>)
 8013124:	6011      	str	r1, [r2, #0]
 8013126:	e7b8      	b.n	801309a <_malloc_r+0x34e>
 8013128:	2107      	movs	r1, #7
 801312a:	9b02      	ldr	r3, [sp, #8]
 801312c:	3b0c      	subs	r3, #12
 801312e:	438b      	bics	r3, r1
 8013130:	6871      	ldr	r1, [r6, #4]
 8013132:	400a      	ands	r2, r1
 8013134:	2105      	movs	r1, #5
 8013136:	431a      	orrs	r2, r3
 8013138:	6072      	str	r2, [r6, #4]
 801313a:	18f2      	adds	r2, r6, r3
 801313c:	6051      	str	r1, [r2, #4]
 801313e:	6091      	str	r1, [r2, #8]
 8013140:	2b0f      	cmp	r3, #15
 8013142:	d800      	bhi.n	8013146 <_malloc_r+0x3fa>
 8013144:	e717      	b.n	8012f76 <_malloc_r+0x22a>
 8013146:	0031      	movs	r1, r6
 8013148:	9801      	ldr	r0, [sp, #4]
 801314a:	3108      	adds	r1, #8
 801314c:	f003 faf2 	bl	8016734 <_free_r>
 8013150:	e711      	b.n	8012f76 <_malloc_r+0x22a>
 8013152:	2201      	movs	r2, #1
 8013154:	0013      	movs	r3, r2
 8013156:	4805      	ldr	r0, [pc, #20]	; (801316c <_malloc_r+0x420>)
 8013158:	432b      	orrs	r3, r5
 801315a:	6884      	ldr	r4, [r0, #8]
 801315c:	6063      	str	r3, [r4, #4]
 801315e:	1963      	adds	r3, r4, r5
 8013160:	6083      	str	r3, [r0, #8]
 8013162:	e626      	b.n	8012db2 <_malloc_r+0x66>
 8013164:	20000908 	.word	0x20000908
 8013168:	20006da0 	.word	0x20006da0
 801316c:	20000500 	.word	0x20000500

08013170 <memcmp>:
 8013170:	b530      	push	{r4, r5, lr}
 8013172:	2400      	movs	r4, #0
 8013174:	3901      	subs	r1, #1
 8013176:	42a2      	cmp	r2, r4
 8013178:	d101      	bne.n	801317e <memcmp+0xe>
 801317a:	2000      	movs	r0, #0
 801317c:	e005      	b.n	801318a <memcmp+0x1a>
 801317e:	5d03      	ldrb	r3, [r0, r4]
 8013180:	3401      	adds	r4, #1
 8013182:	5d0d      	ldrb	r5, [r1, r4]
 8013184:	42ab      	cmp	r3, r5
 8013186:	d0f6      	beq.n	8013176 <memcmp+0x6>
 8013188:	1b58      	subs	r0, r3, r5
 801318a:	bd30      	pop	{r4, r5, pc}

0801318c <memcpy>:
 801318c:	2300      	movs	r3, #0
 801318e:	b510      	push	{r4, lr}
 8013190:	429a      	cmp	r2, r3
 8013192:	d100      	bne.n	8013196 <memcpy+0xa>
 8013194:	bd10      	pop	{r4, pc}
 8013196:	5ccc      	ldrb	r4, [r1, r3]
 8013198:	54c4      	strb	r4, [r0, r3]
 801319a:	3301      	adds	r3, #1
 801319c:	e7f8      	b.n	8013190 <memcpy+0x4>

0801319e <memset>:
 801319e:	0003      	movs	r3, r0
 80131a0:	1882      	adds	r2, r0, r2
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d100      	bne.n	80131a8 <memset+0xa>
 80131a6:	4770      	bx	lr
 80131a8:	7019      	strb	r1, [r3, #0]
 80131aa:	3301      	adds	r3, #1
 80131ac:	e7f9      	b.n	80131a2 <memset+0x4>
	...

080131b0 <__malloc_lock>:
 80131b0:	b510      	push	{r4, lr}
 80131b2:	4802      	ldr	r0, [pc, #8]	; (80131bc <__malloc_lock+0xc>)
 80131b4:	f003 fef2 	bl	8016f9c <__retarget_lock_acquire_recursive>
 80131b8:	bd10      	pop	{r4, pc}
 80131ba:	46c0      	nop			; (mov r8, r8)
 80131bc:	20006dd5 	.word	0x20006dd5

080131c0 <__malloc_unlock>:
 80131c0:	b510      	push	{r4, lr}
 80131c2:	4802      	ldr	r0, [pc, #8]	; (80131cc <__malloc_unlock+0xc>)
 80131c4:	f003 feeb 	bl	8016f9e <__retarget_lock_release_recursive>
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	46c0      	nop			; (mov r8, r8)
 80131cc:	20006dd5 	.word	0x20006dd5

080131d0 <rand>:
 80131d0:	4b09      	ldr	r3, [pc, #36]	; (80131f8 <rand+0x28>)
 80131d2:	b510      	push	{r4, lr}
 80131d4:	681c      	ldr	r4, [r3, #0]
 80131d6:	4a09      	ldr	r2, [pc, #36]	; (80131fc <rand+0x2c>)
 80131d8:	34a8      	adds	r4, #168	; 0xa8
 80131da:	6820      	ldr	r0, [r4, #0]
 80131dc:	6861      	ldr	r1, [r4, #4]
 80131de:	4b08      	ldr	r3, [pc, #32]	; (8013200 <rand+0x30>)
 80131e0:	f7ed f9c4 	bl	800056c <__aeabi_lmul>
 80131e4:	2201      	movs	r2, #1
 80131e6:	2300      	movs	r3, #0
 80131e8:	1880      	adds	r0, r0, r2
 80131ea:	4159      	adcs	r1, r3
 80131ec:	6020      	str	r0, [r4, #0]
 80131ee:	6061      	str	r1, [r4, #4]
 80131f0:	0048      	lsls	r0, r1, #1
 80131f2:	0840      	lsrs	r0, r0, #1
 80131f4:	bd10      	pop	{r4, pc}
 80131f6:	46c0      	nop			; (mov r8, r8)
 80131f8:	200000d0 	.word	0x200000d0
 80131fc:	4c957f2d 	.word	0x4c957f2d
 8013200:	5851f42d 	.word	0x5851f42d

08013204 <realloc>:
 8013204:	b510      	push	{r4, lr}
 8013206:	4b03      	ldr	r3, [pc, #12]	; (8013214 <realloc+0x10>)
 8013208:	000a      	movs	r2, r1
 801320a:	0001      	movs	r1, r0
 801320c:	6818      	ldr	r0, [r3, #0]
 801320e:	f000 f803 	bl	8013218 <_realloc_r>
 8013212:	bd10      	pop	{r4, pc}
 8013214:	200000d0 	.word	0x200000d0

08013218 <_realloc_r>:
 8013218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801321a:	b087      	sub	sp, #28
 801321c:	1e0c      	subs	r4, r1, #0
 801321e:	9002      	str	r0, [sp, #8]
 8013220:	9205      	str	r2, [sp, #20]
 8013222:	d106      	bne.n	8013232 <_realloc_r+0x1a>
 8013224:	0011      	movs	r1, r2
 8013226:	f7ff fd91 	bl	8012d4c <_malloc_r>
 801322a:	0007      	movs	r7, r0
 801322c:	0038      	movs	r0, r7
 801322e:	b007      	add	sp, #28
 8013230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013232:	9802      	ldr	r0, [sp, #8]
 8013234:	f7ff ffbc 	bl	80131b0 <__malloc_lock>
 8013238:	9b05      	ldr	r3, [sp, #20]
 801323a:	330b      	adds	r3, #11
 801323c:	2b16      	cmp	r3, #22
 801323e:	d908      	bls.n	8013252 <_realloc_r+0x3a>
 8013240:	2207      	movs	r2, #7
 8013242:	4393      	bics	r3, r2
 8013244:	9301      	str	r3, [sp, #4]
 8013246:	d506      	bpl.n	8013256 <_realloc_r+0x3e>
 8013248:	230c      	movs	r3, #12
 801324a:	9a02      	ldr	r2, [sp, #8]
 801324c:	2700      	movs	r7, #0
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	e7ec      	b.n	801322c <_realloc_r+0x14>
 8013252:	2310      	movs	r3, #16
 8013254:	9301      	str	r3, [sp, #4]
 8013256:	9b01      	ldr	r3, [sp, #4]
 8013258:	9a05      	ldr	r2, [sp, #20]
 801325a:	4293      	cmp	r3, r2
 801325c:	d3f4      	bcc.n	8013248 <_realloc_r+0x30>
 801325e:	0023      	movs	r3, r4
 8013260:	3b08      	subs	r3, #8
 8013262:	685f      	ldr	r7, [r3, #4]
 8013264:	9304      	str	r3, [sp, #16]
 8013266:	003a      	movs	r2, r7
 8013268:	2303      	movs	r3, #3
 801326a:	439a      	bics	r2, r3
 801326c:	9b01      	ldr	r3, [sp, #4]
 801326e:	9203      	str	r2, [sp, #12]
 8013270:	4293      	cmp	r3, r2
 8013272:	dc00      	bgt.n	8013276 <_realloc_r+0x5e>
 8013274:	e167      	b.n	8013546 <_realloc_r+0x32e>
 8013276:	9b04      	ldr	r3, [sp, #16]
 8013278:	48b7      	ldr	r0, [pc, #732]	; (8013558 <_realloc_r+0x340>)
 801327a:	189b      	adds	r3, r3, r2
 801327c:	6882      	ldr	r2, [r0, #8]
 801327e:	4694      	mov	ip, r2
 8013280:	685a      	ldr	r2, [r3, #4]
 8013282:	459c      	cmp	ip, r3
 8013284:	d006      	beq.n	8013294 <_realloc_r+0x7c>
 8013286:	2501      	movs	r5, #1
 8013288:	0011      	movs	r1, r2
 801328a:	43a9      	bics	r1, r5
 801328c:	1859      	adds	r1, r3, r1
 801328e:	6849      	ldr	r1, [r1, #4]
 8013290:	4229      	tst	r1, r5
 8013292:	d126      	bne.n	80132e2 <_realloc_r+0xca>
 8013294:	2103      	movs	r1, #3
 8013296:	438a      	bics	r2, r1
 8013298:	9903      	ldr	r1, [sp, #12]
 801329a:	188e      	adds	r6, r1, r2
 801329c:	9901      	ldr	r1, [sp, #4]
 801329e:	459c      	cmp	ip, r3
 80132a0:	d117      	bne.n	80132d2 <_realloc_r+0xba>
 80132a2:	3110      	adds	r1, #16
 80132a4:	42b1      	cmp	r1, r6
 80132a6:	dc1e      	bgt.n	80132e6 <_realloc_r+0xce>
 80132a8:	9b01      	ldr	r3, [sp, #4]
 80132aa:	9a04      	ldr	r2, [sp, #16]
 80132ac:	469c      	mov	ip, r3
 80132ae:	1af6      	subs	r6, r6, r3
 80132b0:	2301      	movs	r3, #1
 80132b2:	4462      	add	r2, ip
 80132b4:	431e      	orrs	r6, r3
 80132b6:	6082      	str	r2, [r0, #8]
 80132b8:	6056      	str	r6, [r2, #4]
 80132ba:	0022      	movs	r2, r4
 80132bc:	3a08      	subs	r2, #8
 80132be:	6851      	ldr	r1, [r2, #4]
 80132c0:	9802      	ldr	r0, [sp, #8]
 80132c2:	400b      	ands	r3, r1
 80132c4:	4661      	mov	r1, ip
 80132c6:	430b      	orrs	r3, r1
 80132c8:	6053      	str	r3, [r2, #4]
 80132ca:	f7ff ff79 	bl	80131c0 <__malloc_unlock>
 80132ce:	0027      	movs	r7, r4
 80132d0:	e7ac      	b.n	801322c <_realloc_r+0x14>
 80132d2:	42b1      	cmp	r1, r6
 80132d4:	dc07      	bgt.n	80132e6 <_realloc_r+0xce>
 80132d6:	68da      	ldr	r2, [r3, #12]
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	60da      	str	r2, [r3, #12]
 80132dc:	6093      	str	r3, [r2, #8]
 80132de:	9d04      	ldr	r5, [sp, #16]
 80132e0:	e07f      	b.n	80133e2 <_realloc_r+0x1ca>
 80132e2:	2200      	movs	r2, #0
 80132e4:	0013      	movs	r3, r2
 80132e6:	07f9      	lsls	r1, r7, #31
 80132e8:	d500      	bpl.n	80132ec <_realloc_r+0xd4>
 80132ea:	e0e2      	b.n	80134b2 <_realloc_r+0x29a>
 80132ec:	0021      	movs	r1, r4
 80132ee:	3908      	subs	r1, #8
 80132f0:	680d      	ldr	r5, [r1, #0]
 80132f2:	9904      	ldr	r1, [sp, #16]
 80132f4:	1b4d      	subs	r5, r1, r5
 80132f6:	2103      	movs	r1, #3
 80132f8:	686f      	ldr	r7, [r5, #4]
 80132fa:	438f      	bics	r7, r1
 80132fc:	9903      	ldr	r1, [sp, #12]
 80132fe:	187f      	adds	r7, r7, r1
 8013300:	2b00      	cmp	r3, #0
 8013302:	d100      	bne.n	8013306 <_realloc_r+0xee>
 8013304:	e0a0      	b.n	8013448 <_realloc_r+0x230>
 8013306:	19d6      	adds	r6, r2, r7
 8013308:	459c      	cmp	ip, r3
 801330a:	d149      	bne.n	80133a0 <_realloc_r+0x188>
 801330c:	9b01      	ldr	r3, [sp, #4]
 801330e:	3310      	adds	r3, #16
 8013310:	42b3      	cmp	r3, r6
 8013312:	dd00      	ble.n	8013316 <_realloc_r+0xfe>
 8013314:	e098      	b.n	8013448 <_realloc_r+0x230>
 8013316:	68aa      	ldr	r2, [r5, #8]
 8013318:	68eb      	ldr	r3, [r5, #12]
 801331a:	002f      	movs	r7, r5
 801331c:	60d3      	str	r3, [r2, #12]
 801331e:	609a      	str	r2, [r3, #8]
 8013320:	000a      	movs	r2, r1
 8013322:	3a04      	subs	r2, #4
 8013324:	3708      	adds	r7, #8
 8013326:	2a24      	cmp	r2, #36	; 0x24
 8013328:	d835      	bhi.n	8013396 <_realloc_r+0x17e>
 801332a:	003b      	movs	r3, r7
 801332c:	2a13      	cmp	r2, #19
 801332e:	d908      	bls.n	8013342 <_realloc_r+0x12a>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	60ab      	str	r3, [r5, #8]
 8013334:	6863      	ldr	r3, [r4, #4]
 8013336:	60eb      	str	r3, [r5, #12]
 8013338:	2a1b      	cmp	r2, #27
 801333a:	d81a      	bhi.n	8013372 <_realloc_r+0x15a>
 801333c:	002b      	movs	r3, r5
 801333e:	3408      	adds	r4, #8
 8013340:	3310      	adds	r3, #16
 8013342:	6822      	ldr	r2, [r4, #0]
 8013344:	601a      	str	r2, [r3, #0]
 8013346:	6862      	ldr	r2, [r4, #4]
 8013348:	605a      	str	r2, [r3, #4]
 801334a:	68a2      	ldr	r2, [r4, #8]
 801334c:	609a      	str	r2, [r3, #8]
 801334e:	9b01      	ldr	r3, [sp, #4]
 8013350:	18ea      	adds	r2, r5, r3
 8013352:	4b81      	ldr	r3, [pc, #516]	; (8013558 <_realloc_r+0x340>)
 8013354:	609a      	str	r2, [r3, #8]
 8013356:	9b01      	ldr	r3, [sp, #4]
 8013358:	1af6      	subs	r6, r6, r3
 801335a:	2301      	movs	r3, #1
 801335c:	431e      	orrs	r6, r3
 801335e:	6056      	str	r6, [r2, #4]
 8013360:	686a      	ldr	r2, [r5, #4]
 8013362:	4013      	ands	r3, r2
 8013364:	9a01      	ldr	r2, [sp, #4]
 8013366:	4313      	orrs	r3, r2
 8013368:	606b      	str	r3, [r5, #4]
 801336a:	9802      	ldr	r0, [sp, #8]
 801336c:	f7ff ff28 	bl	80131c0 <__malloc_unlock>
 8013370:	e75c      	b.n	801322c <_realloc_r+0x14>
 8013372:	68a3      	ldr	r3, [r4, #8]
 8013374:	612b      	str	r3, [r5, #16]
 8013376:	68e3      	ldr	r3, [r4, #12]
 8013378:	616b      	str	r3, [r5, #20]
 801337a:	2a24      	cmp	r2, #36	; 0x24
 801337c:	d003      	beq.n	8013386 <_realloc_r+0x16e>
 801337e:	002b      	movs	r3, r5
 8013380:	3410      	adds	r4, #16
 8013382:	3318      	adds	r3, #24
 8013384:	e7dd      	b.n	8013342 <_realloc_r+0x12a>
 8013386:	6923      	ldr	r3, [r4, #16]
 8013388:	61ab      	str	r3, [r5, #24]
 801338a:	002b      	movs	r3, r5
 801338c:	6962      	ldr	r2, [r4, #20]
 801338e:	3320      	adds	r3, #32
 8013390:	61ea      	str	r2, [r5, #28]
 8013392:	3418      	adds	r4, #24
 8013394:	e7d5      	b.n	8013342 <_realloc_r+0x12a>
 8013396:	0021      	movs	r1, r4
 8013398:	0038      	movs	r0, r7
 801339a:	f003 fe1e 	bl	8016fda <memmove>
 801339e:	e7d6      	b.n	801334e <_realloc_r+0x136>
 80133a0:	9a01      	ldr	r2, [sp, #4]
 80133a2:	42b2      	cmp	r2, r6
 80133a4:	dc50      	bgt.n	8013448 <_realloc_r+0x230>
 80133a6:	0028      	movs	r0, r5
 80133a8:	68da      	ldr	r2, [r3, #12]
 80133aa:	689b      	ldr	r3, [r3, #8]
 80133ac:	3008      	adds	r0, #8
 80133ae:	60da      	str	r2, [r3, #12]
 80133b0:	6093      	str	r3, [r2, #8]
 80133b2:	68aa      	ldr	r2, [r5, #8]
 80133b4:	68eb      	ldr	r3, [r5, #12]
 80133b6:	60d3      	str	r3, [r2, #12]
 80133b8:	609a      	str	r2, [r3, #8]
 80133ba:	9a03      	ldr	r2, [sp, #12]
 80133bc:	3a04      	subs	r2, #4
 80133be:	2a24      	cmp	r2, #36	; 0x24
 80133c0:	d83e      	bhi.n	8013440 <_realloc_r+0x228>
 80133c2:	2a13      	cmp	r2, #19
 80133c4:	d907      	bls.n	80133d6 <_realloc_r+0x1be>
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	60ab      	str	r3, [r5, #8]
 80133ca:	6863      	ldr	r3, [r4, #4]
 80133cc:	60eb      	str	r3, [r5, #12]
 80133ce:	2a1b      	cmp	r2, #27
 80133d0:	d824      	bhi.n	801341c <_realloc_r+0x204>
 80133d2:	3408      	adds	r4, #8
 80133d4:	3008      	adds	r0, #8
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	6003      	str	r3, [r0, #0]
 80133da:	6863      	ldr	r3, [r4, #4]
 80133dc:	6043      	str	r3, [r0, #4]
 80133de:	68a3      	ldr	r3, [r4, #8]
 80133e0:	6083      	str	r3, [r0, #8]
 80133e2:	9b01      	ldr	r3, [sp, #4]
 80133e4:	6868      	ldr	r0, [r5, #4]
 80133e6:	1af4      	subs	r4, r6, r3
 80133e8:	2301      	movs	r3, #1
 80133ea:	19aa      	adds	r2, r5, r6
 80133ec:	4018      	ands	r0, r3
 80133ee:	2c0f      	cmp	r4, #15
 80133f0:	d800      	bhi.n	80133f4 <_realloc_r+0x1dc>
 80133f2:	e0aa      	b.n	801354a <_realloc_r+0x332>
 80133f4:	9901      	ldr	r1, [sp, #4]
 80133f6:	9e01      	ldr	r6, [sp, #4]
 80133f8:	1869      	adds	r1, r5, r1
 80133fa:	4330      	orrs	r0, r6
 80133fc:	431c      	orrs	r4, r3
 80133fe:	6068      	str	r0, [r5, #4]
 8013400:	604c      	str	r4, [r1, #4]
 8013402:	6850      	ldr	r0, [r2, #4]
 8013404:	3108      	adds	r1, #8
 8013406:	4303      	orrs	r3, r0
 8013408:	6053      	str	r3, [r2, #4]
 801340a:	9802      	ldr	r0, [sp, #8]
 801340c:	f003 f992 	bl	8016734 <_free_r>
 8013410:	9802      	ldr	r0, [sp, #8]
 8013412:	3508      	adds	r5, #8
 8013414:	f7ff fed4 	bl	80131c0 <__malloc_unlock>
 8013418:	002f      	movs	r7, r5
 801341a:	e707      	b.n	801322c <_realloc_r+0x14>
 801341c:	68a3      	ldr	r3, [r4, #8]
 801341e:	612b      	str	r3, [r5, #16]
 8013420:	68e3      	ldr	r3, [r4, #12]
 8013422:	616b      	str	r3, [r5, #20]
 8013424:	2a24      	cmp	r2, #36	; 0x24
 8013426:	d003      	beq.n	8013430 <_realloc_r+0x218>
 8013428:	0028      	movs	r0, r5
 801342a:	3410      	adds	r4, #16
 801342c:	3018      	adds	r0, #24
 801342e:	e7d2      	b.n	80133d6 <_realloc_r+0x1be>
 8013430:	0028      	movs	r0, r5
 8013432:	6923      	ldr	r3, [r4, #16]
 8013434:	3020      	adds	r0, #32
 8013436:	61ab      	str	r3, [r5, #24]
 8013438:	6963      	ldr	r3, [r4, #20]
 801343a:	3418      	adds	r4, #24
 801343c:	61eb      	str	r3, [r5, #28]
 801343e:	e7ca      	b.n	80133d6 <_realloc_r+0x1be>
 8013440:	0021      	movs	r1, r4
 8013442:	f003 fdca 	bl	8016fda <memmove>
 8013446:	e7cc      	b.n	80133e2 <_realloc_r+0x1ca>
 8013448:	9b01      	ldr	r3, [sp, #4]
 801344a:	42bb      	cmp	r3, r7
 801344c:	dc31      	bgt.n	80134b2 <_realloc_r+0x29a>
 801344e:	0028      	movs	r0, r5
 8013450:	68aa      	ldr	r2, [r5, #8]
 8013452:	68eb      	ldr	r3, [r5, #12]
 8013454:	3008      	adds	r0, #8
 8013456:	60d3      	str	r3, [r2, #12]
 8013458:	609a      	str	r2, [r3, #8]
 801345a:	9a03      	ldr	r2, [sp, #12]
 801345c:	3a04      	subs	r2, #4
 801345e:	2a24      	cmp	r2, #36	; 0x24
 8013460:	d823      	bhi.n	80134aa <_realloc_r+0x292>
 8013462:	2a13      	cmp	r2, #19
 8013464:	d907      	bls.n	8013476 <_realloc_r+0x25e>
 8013466:	6823      	ldr	r3, [r4, #0]
 8013468:	60ab      	str	r3, [r5, #8]
 801346a:	6863      	ldr	r3, [r4, #4]
 801346c:	60eb      	str	r3, [r5, #12]
 801346e:	2a1b      	cmp	r2, #27
 8013470:	d809      	bhi.n	8013486 <_realloc_r+0x26e>
 8013472:	3408      	adds	r4, #8
 8013474:	3008      	adds	r0, #8
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	6003      	str	r3, [r0, #0]
 801347a:	6863      	ldr	r3, [r4, #4]
 801347c:	6043      	str	r3, [r0, #4]
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	6083      	str	r3, [r0, #8]
 8013482:	003e      	movs	r6, r7
 8013484:	e7ad      	b.n	80133e2 <_realloc_r+0x1ca>
 8013486:	68a3      	ldr	r3, [r4, #8]
 8013488:	612b      	str	r3, [r5, #16]
 801348a:	68e3      	ldr	r3, [r4, #12]
 801348c:	616b      	str	r3, [r5, #20]
 801348e:	2a24      	cmp	r2, #36	; 0x24
 8013490:	d003      	beq.n	801349a <_realloc_r+0x282>
 8013492:	0028      	movs	r0, r5
 8013494:	3410      	adds	r4, #16
 8013496:	3018      	adds	r0, #24
 8013498:	e7ed      	b.n	8013476 <_realloc_r+0x25e>
 801349a:	0028      	movs	r0, r5
 801349c:	6923      	ldr	r3, [r4, #16]
 801349e:	3020      	adds	r0, #32
 80134a0:	61ab      	str	r3, [r5, #24]
 80134a2:	6963      	ldr	r3, [r4, #20]
 80134a4:	3418      	adds	r4, #24
 80134a6:	61eb      	str	r3, [r5, #28]
 80134a8:	e7e5      	b.n	8013476 <_realloc_r+0x25e>
 80134aa:	0021      	movs	r1, r4
 80134ac:	f003 fd95 	bl	8016fda <memmove>
 80134b0:	e7e7      	b.n	8013482 <_realloc_r+0x26a>
 80134b2:	9905      	ldr	r1, [sp, #20]
 80134b4:	9802      	ldr	r0, [sp, #8]
 80134b6:	f7ff fc49 	bl	8012d4c <_malloc_r>
 80134ba:	1e07      	subs	r7, r0, #0
 80134bc:	d100      	bne.n	80134c0 <_realloc_r+0x2a8>
 80134be:	e754      	b.n	801336a <_realloc_r+0x152>
 80134c0:	0023      	movs	r3, r4
 80134c2:	2201      	movs	r2, #1
 80134c4:	3b08      	subs	r3, #8
 80134c6:	685b      	ldr	r3, [r3, #4]
 80134c8:	4393      	bics	r3, r2
 80134ca:	9a04      	ldr	r2, [sp, #16]
 80134cc:	18d3      	adds	r3, r2, r3
 80134ce:	0002      	movs	r2, r0
 80134d0:	3a08      	subs	r2, #8
 80134d2:	4293      	cmp	r3, r2
 80134d4:	d105      	bne.n	80134e2 <_realloc_r+0x2ca>
 80134d6:	685e      	ldr	r6, [r3, #4]
 80134d8:	2303      	movs	r3, #3
 80134da:	439e      	bics	r6, r3
 80134dc:	9b03      	ldr	r3, [sp, #12]
 80134de:	18f6      	adds	r6, r6, r3
 80134e0:	e6fd      	b.n	80132de <_realloc_r+0xc6>
 80134e2:	9a03      	ldr	r2, [sp, #12]
 80134e4:	3a04      	subs	r2, #4
 80134e6:	2a24      	cmp	r2, #36	; 0x24
 80134e8:	d829      	bhi.n	801353e <_realloc_r+0x326>
 80134ea:	0003      	movs	r3, r0
 80134ec:	0021      	movs	r1, r4
 80134ee:	2a13      	cmp	r2, #19
 80134f0:	d908      	bls.n	8013504 <_realloc_r+0x2ec>
 80134f2:	6823      	ldr	r3, [r4, #0]
 80134f4:	6003      	str	r3, [r0, #0]
 80134f6:	6863      	ldr	r3, [r4, #4]
 80134f8:	6043      	str	r3, [r0, #4]
 80134fa:	2a1b      	cmp	r2, #27
 80134fc:	d80d      	bhi.n	801351a <_realloc_r+0x302>
 80134fe:	0003      	movs	r3, r0
 8013500:	3108      	adds	r1, #8
 8013502:	3308      	adds	r3, #8
 8013504:	680a      	ldr	r2, [r1, #0]
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	684a      	ldr	r2, [r1, #4]
 801350a:	605a      	str	r2, [r3, #4]
 801350c:	688a      	ldr	r2, [r1, #8]
 801350e:	609a      	str	r2, [r3, #8]
 8013510:	0021      	movs	r1, r4
 8013512:	9802      	ldr	r0, [sp, #8]
 8013514:	f003 f90e 	bl	8016734 <_free_r>
 8013518:	e727      	b.n	801336a <_realloc_r+0x152>
 801351a:	68a3      	ldr	r3, [r4, #8]
 801351c:	6083      	str	r3, [r0, #8]
 801351e:	68e3      	ldr	r3, [r4, #12]
 8013520:	60c3      	str	r3, [r0, #12]
 8013522:	2a24      	cmp	r2, #36	; 0x24
 8013524:	d003      	beq.n	801352e <_realloc_r+0x316>
 8013526:	0003      	movs	r3, r0
 8013528:	3110      	adds	r1, #16
 801352a:	3310      	adds	r3, #16
 801352c:	e7ea      	b.n	8013504 <_realloc_r+0x2ec>
 801352e:	6923      	ldr	r3, [r4, #16]
 8013530:	3118      	adds	r1, #24
 8013532:	6103      	str	r3, [r0, #16]
 8013534:	0003      	movs	r3, r0
 8013536:	6962      	ldr	r2, [r4, #20]
 8013538:	3318      	adds	r3, #24
 801353a:	6142      	str	r2, [r0, #20]
 801353c:	e7e2      	b.n	8013504 <_realloc_r+0x2ec>
 801353e:	0021      	movs	r1, r4
 8013540:	f003 fd4b 	bl	8016fda <memmove>
 8013544:	e7e4      	b.n	8013510 <_realloc_r+0x2f8>
 8013546:	9e03      	ldr	r6, [sp, #12]
 8013548:	e6c9      	b.n	80132de <_realloc_r+0xc6>
 801354a:	4306      	orrs	r6, r0
 801354c:	606e      	str	r6, [r5, #4]
 801354e:	6851      	ldr	r1, [r2, #4]
 8013550:	430b      	orrs	r3, r1
 8013552:	6053      	str	r3, [r2, #4]
 8013554:	e75c      	b.n	8013410 <_realloc_r+0x1f8>
 8013556:	46c0      	nop			; (mov r8, r8)
 8013558:	20000500 	.word	0x20000500

0801355c <_sbrk_r>:
 801355c:	2300      	movs	r3, #0
 801355e:	b570      	push	{r4, r5, r6, lr}
 8013560:	4d06      	ldr	r5, [pc, #24]	; (801357c <_sbrk_r+0x20>)
 8013562:	0004      	movs	r4, r0
 8013564:	0008      	movs	r0, r1
 8013566:	602b      	str	r3, [r5, #0]
 8013568:	f005 fe7c 	bl	8019264 <_sbrk>
 801356c:	1c43      	adds	r3, r0, #1
 801356e:	d103      	bne.n	8013578 <_sbrk_r+0x1c>
 8013570:	682b      	ldr	r3, [r5, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d000      	beq.n	8013578 <_sbrk_r+0x1c>
 8013576:	6023      	str	r3, [r4, #0]
 8013578:	bd70      	pop	{r4, r5, r6, pc}
 801357a:	46c0      	nop			; (mov r8, r8)
 801357c:	20006dd8 	.word	0x20006dd8

08013580 <sprintf>:
 8013580:	b40e      	push	{r1, r2, r3}
 8013582:	b500      	push	{lr}
 8013584:	490b      	ldr	r1, [pc, #44]	; (80135b4 <sprintf+0x34>)
 8013586:	b09c      	sub	sp, #112	; 0x70
 8013588:	ab1d      	add	r3, sp, #116	; 0x74
 801358a:	9002      	str	r0, [sp, #8]
 801358c:	9006      	str	r0, [sp, #24]
 801358e:	9107      	str	r1, [sp, #28]
 8013590:	9104      	str	r1, [sp, #16]
 8013592:	4809      	ldr	r0, [pc, #36]	; (80135b8 <sprintf+0x38>)
 8013594:	4909      	ldr	r1, [pc, #36]	; (80135bc <sprintf+0x3c>)
 8013596:	cb04      	ldmia	r3!, {r2}
 8013598:	9105      	str	r1, [sp, #20]
 801359a:	6800      	ldr	r0, [r0, #0]
 801359c:	a902      	add	r1, sp, #8
 801359e:	9301      	str	r3, [sp, #4]
 80135a0:	f000 ff66 	bl	8014470 <_svfprintf_r>
 80135a4:	2300      	movs	r3, #0
 80135a6:	9a02      	ldr	r2, [sp, #8]
 80135a8:	7013      	strb	r3, [r2, #0]
 80135aa:	b01c      	add	sp, #112	; 0x70
 80135ac:	bc08      	pop	{r3}
 80135ae:	b003      	add	sp, #12
 80135b0:	4718      	bx	r3
 80135b2:	46c0      	nop			; (mov r8, r8)
 80135b4:	7fffffff 	.word	0x7fffffff
 80135b8:	200000d0 	.word	0x200000d0
 80135bc:	ffff0208 	.word	0xffff0208

080135c0 <strcat>:
 80135c0:	0002      	movs	r2, r0
 80135c2:	b510      	push	{r4, lr}
 80135c4:	7813      	ldrb	r3, [r2, #0]
 80135c6:	0014      	movs	r4, r2
 80135c8:	3201      	adds	r2, #1
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d1fa      	bne.n	80135c4 <strcat+0x4>
 80135ce:	5cca      	ldrb	r2, [r1, r3]
 80135d0:	54e2      	strb	r2, [r4, r3]
 80135d2:	3301      	adds	r3, #1
 80135d4:	2a00      	cmp	r2, #0
 80135d6:	d1fa      	bne.n	80135ce <strcat+0xe>
 80135d8:	bd10      	pop	{r4, pc}

080135da <strchr>:
 80135da:	b2c9      	uxtb	r1, r1
 80135dc:	7803      	ldrb	r3, [r0, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d004      	beq.n	80135ec <strchr+0x12>
 80135e2:	428b      	cmp	r3, r1
 80135e4:	d100      	bne.n	80135e8 <strchr+0xe>
 80135e6:	4770      	bx	lr
 80135e8:	3001      	adds	r0, #1
 80135ea:	e7f7      	b.n	80135dc <strchr+0x2>
 80135ec:	424b      	negs	r3, r1
 80135ee:	4159      	adcs	r1, r3
 80135f0:	4249      	negs	r1, r1
 80135f2:	4008      	ands	r0, r1
 80135f4:	e7f7      	b.n	80135e6 <strchr+0xc>

080135f6 <strcpy>:
 80135f6:	0003      	movs	r3, r0
 80135f8:	780a      	ldrb	r2, [r1, #0]
 80135fa:	3101      	adds	r1, #1
 80135fc:	701a      	strb	r2, [r3, #0]
 80135fe:	3301      	adds	r3, #1
 8013600:	2a00      	cmp	r2, #0
 8013602:	d1f9      	bne.n	80135f8 <strcpy+0x2>
 8013604:	4770      	bx	lr

08013606 <strncmp>:
 8013606:	b530      	push	{r4, r5, lr}
 8013608:	0005      	movs	r5, r0
 801360a:	1e10      	subs	r0, r2, #0
 801360c:	d008      	beq.n	8013620 <strncmp+0x1a>
 801360e:	2400      	movs	r4, #0
 8013610:	3a01      	subs	r2, #1
 8013612:	5d2b      	ldrb	r3, [r5, r4]
 8013614:	5d08      	ldrb	r0, [r1, r4]
 8013616:	4283      	cmp	r3, r0
 8013618:	d101      	bne.n	801361e <strncmp+0x18>
 801361a:	4294      	cmp	r4, r2
 801361c:	d101      	bne.n	8013622 <strncmp+0x1c>
 801361e:	1a18      	subs	r0, r3, r0
 8013620:	bd30      	pop	{r4, r5, pc}
 8013622:	3401      	adds	r4, #1
 8013624:	2b00      	cmp	r3, #0
 8013626:	d1f4      	bne.n	8013612 <strncmp+0xc>
 8013628:	e7f9      	b.n	801361e <strncmp+0x18>

0801362a <strncpy>:
 801362a:	0003      	movs	r3, r0
 801362c:	b530      	push	{r4, r5, lr}
 801362e:	001d      	movs	r5, r3
 8013630:	2a00      	cmp	r2, #0
 8013632:	d006      	beq.n	8013642 <strncpy+0x18>
 8013634:	780c      	ldrb	r4, [r1, #0]
 8013636:	3a01      	subs	r2, #1
 8013638:	3301      	adds	r3, #1
 801363a:	702c      	strb	r4, [r5, #0]
 801363c:	3101      	adds	r1, #1
 801363e:	2c00      	cmp	r4, #0
 8013640:	d1f5      	bne.n	801362e <strncpy+0x4>
 8013642:	2100      	movs	r1, #0
 8013644:	189a      	adds	r2, r3, r2
 8013646:	4293      	cmp	r3, r2
 8013648:	d100      	bne.n	801364c <strncpy+0x22>
 801364a:	bd30      	pop	{r4, r5, pc}
 801364c:	7019      	strb	r1, [r3, #0]
 801364e:	3301      	adds	r3, #1
 8013650:	e7f9      	b.n	8013646 <strncpy+0x1c>
	...

08013654 <sulp>:
 8013654:	b570      	push	{r4, r5, r6, lr}
 8013656:	0016      	movs	r6, r2
 8013658:	000d      	movs	r5, r1
 801365a:	f004 f805 	bl	8017668 <__ulp>
 801365e:	2e00      	cmp	r6, #0
 8013660:	d00d      	beq.n	801367e <sulp+0x2a>
 8013662:	236b      	movs	r3, #107	; 0x6b
 8013664:	006a      	lsls	r2, r5, #1
 8013666:	0d52      	lsrs	r2, r2, #21
 8013668:	1a9b      	subs	r3, r3, r2
 801366a:	2b00      	cmp	r3, #0
 801366c:	dd07      	ble.n	801367e <sulp+0x2a>
 801366e:	2400      	movs	r4, #0
 8013670:	4a03      	ldr	r2, [pc, #12]	; (8013680 <sulp+0x2c>)
 8013672:	051b      	lsls	r3, r3, #20
 8013674:	189d      	adds	r5, r3, r2
 8013676:	002b      	movs	r3, r5
 8013678:	0022      	movs	r2, r4
 801367a:	f7ee fc1d 	bl	8001eb8 <__aeabi_dmul>
 801367e:	bd70      	pop	{r4, r5, r6, pc}
 8013680:	3ff00000 	.word	0x3ff00000

08013684 <_strtod_l>:
 8013684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013686:	001d      	movs	r5, r3
 8013688:	2300      	movs	r3, #0
 801368a:	b0a5      	sub	sp, #148	; 0x94
 801368c:	9320      	str	r3, [sp, #128]	; 0x80
 801368e:	4bac      	ldr	r3, [pc, #688]	; (8013940 <_strtod_l+0x2bc>)
 8013690:	9005      	str	r0, [sp, #20]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	9108      	str	r1, [sp, #32]
 8013696:	0018      	movs	r0, r3
 8013698:	9307      	str	r3, [sp, #28]
 801369a:	921b      	str	r2, [sp, #108]	; 0x6c
 801369c:	f7ec fd3c 	bl	8000118 <strlen>
 80136a0:	2600      	movs	r6, #0
 80136a2:	0004      	movs	r4, r0
 80136a4:	2700      	movs	r7, #0
 80136a6:	9b08      	ldr	r3, [sp, #32]
 80136a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80136aa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80136ac:	7813      	ldrb	r3, [r2, #0]
 80136ae:	2b2b      	cmp	r3, #43	; 0x2b
 80136b0:	d058      	beq.n	8013764 <_strtod_l+0xe0>
 80136b2:	d844      	bhi.n	801373e <_strtod_l+0xba>
 80136b4:	2b0d      	cmp	r3, #13
 80136b6:	d83d      	bhi.n	8013734 <_strtod_l+0xb0>
 80136b8:	2b08      	cmp	r3, #8
 80136ba:	d83d      	bhi.n	8013738 <_strtod_l+0xb4>
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d047      	beq.n	8013750 <_strtod_l+0xcc>
 80136c0:	2300      	movs	r3, #0
 80136c2:	930e      	str	r3, [sp, #56]	; 0x38
 80136c4:	2200      	movs	r2, #0
 80136c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80136c8:	920a      	str	r2, [sp, #40]	; 0x28
 80136ca:	9306      	str	r3, [sp, #24]
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	2b30      	cmp	r3, #48	; 0x30
 80136d0:	d000      	beq.n	80136d4 <_strtod_l+0x50>
 80136d2:	e07f      	b.n	80137d4 <_strtod_l+0x150>
 80136d4:	9b06      	ldr	r3, [sp, #24]
 80136d6:	3220      	adds	r2, #32
 80136d8:	785b      	ldrb	r3, [r3, #1]
 80136da:	4393      	bics	r3, r2
 80136dc:	2b58      	cmp	r3, #88	; 0x58
 80136de:	d000      	beq.n	80136e2 <_strtod_l+0x5e>
 80136e0:	e06e      	b.n	80137c0 <_strtod_l+0x13c>
 80136e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136e4:	9502      	str	r5, [sp, #8]
 80136e6:	9301      	str	r3, [sp, #4]
 80136e8:	ab20      	add	r3, sp, #128	; 0x80
 80136ea:	9300      	str	r3, [sp, #0]
 80136ec:	4a95      	ldr	r2, [pc, #596]	; (8013944 <_strtod_l+0x2c0>)
 80136ee:	ab21      	add	r3, sp, #132	; 0x84
 80136f0:	9805      	ldr	r0, [sp, #20]
 80136f2:	a91f      	add	r1, sp, #124	; 0x7c
 80136f4:	f003 f93a 	bl	801696c <__gethex>
 80136f8:	2307      	movs	r3, #7
 80136fa:	0005      	movs	r5, r0
 80136fc:	0004      	movs	r4, r0
 80136fe:	401d      	ands	r5, r3
 8013700:	4218      	tst	r0, r3
 8013702:	d006      	beq.n	8013712 <_strtod_l+0x8e>
 8013704:	2d06      	cmp	r5, #6
 8013706:	d12f      	bne.n	8013768 <_strtod_l+0xe4>
 8013708:	9b06      	ldr	r3, [sp, #24]
 801370a:	3301      	adds	r3, #1
 801370c:	931f      	str	r3, [sp, #124]	; 0x7c
 801370e:	2300      	movs	r3, #0
 8013710:	930e      	str	r3, [sp, #56]	; 0x38
 8013712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <_strtod_l+0x9a>
 8013718:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801371a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801371c:	601a      	str	r2, [r3, #0]
 801371e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013720:	2b00      	cmp	r3, #0
 8013722:	d01c      	beq.n	801375e <_strtod_l+0xda>
 8013724:	2380      	movs	r3, #128	; 0x80
 8013726:	0032      	movs	r2, r6
 8013728:	061b      	lsls	r3, r3, #24
 801372a:	18fb      	adds	r3, r7, r3
 801372c:	0010      	movs	r0, r2
 801372e:	0019      	movs	r1, r3
 8013730:	b025      	add	sp, #148	; 0x94
 8013732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013734:	2b20      	cmp	r3, #32
 8013736:	d1c3      	bne.n	80136c0 <_strtod_l+0x3c>
 8013738:	3201      	adds	r2, #1
 801373a:	921f      	str	r2, [sp, #124]	; 0x7c
 801373c:	e7b5      	b.n	80136aa <_strtod_l+0x26>
 801373e:	2b2d      	cmp	r3, #45	; 0x2d
 8013740:	d1be      	bne.n	80136c0 <_strtod_l+0x3c>
 8013742:	3b2c      	subs	r3, #44	; 0x2c
 8013744:	930e      	str	r3, [sp, #56]	; 0x38
 8013746:	1c53      	adds	r3, r2, #1
 8013748:	931f      	str	r3, [sp, #124]	; 0x7c
 801374a:	7853      	ldrb	r3, [r2, #1]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d1b9      	bne.n	80136c4 <_strtod_l+0x40>
 8013750:	9b08      	ldr	r3, [sp, #32]
 8013752:	931f      	str	r3, [sp, #124]	; 0x7c
 8013754:	2300      	movs	r3, #0
 8013756:	930e      	str	r3, [sp, #56]	; 0x38
 8013758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1dc      	bne.n	8013718 <_strtod_l+0x94>
 801375e:	0032      	movs	r2, r6
 8013760:	003b      	movs	r3, r7
 8013762:	e7e3      	b.n	801372c <_strtod_l+0xa8>
 8013764:	2300      	movs	r3, #0
 8013766:	e7ed      	b.n	8013744 <_strtod_l+0xc0>
 8013768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801376a:	2a00      	cmp	r2, #0
 801376c:	d007      	beq.n	801377e <_strtod_l+0xfa>
 801376e:	2135      	movs	r1, #53	; 0x35
 8013770:	a822      	add	r0, sp, #136	; 0x88
 8013772:	f004 f87a 	bl	801786a <__copybits>
 8013776:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013778:	9805      	ldr	r0, [sp, #20]
 801377a:	f003 fc69 	bl	8017050 <_Bfree>
 801377e:	1e68      	subs	r0, r5, #1
 8013780:	2804      	cmp	r0, #4
 8013782:	d806      	bhi.n	8013792 <_strtod_l+0x10e>
 8013784:	f7ec fcd0 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013788:	1816030b 	.word	0x1816030b
 801378c:	0b          	.byte	0x0b
 801378d:	00          	.byte	0x00
 801378e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8013790:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8013792:	0723      	lsls	r3, r4, #28
 8013794:	d5bd      	bpl.n	8013712 <_strtod_l+0x8e>
 8013796:	2380      	movs	r3, #128	; 0x80
 8013798:	061b      	lsls	r3, r3, #24
 801379a:	431f      	orrs	r7, r3
 801379c:	e7b9      	b.n	8013712 <_strtod_l+0x8e>
 801379e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80137a0:	4a69      	ldr	r2, [pc, #420]	; (8013948 <_strtod_l+0x2c4>)
 80137a2:	496a      	ldr	r1, [pc, #424]	; (801394c <_strtod_l+0x2c8>)
 80137a4:	401a      	ands	r2, r3
 80137a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137a8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80137aa:	185b      	adds	r3, r3, r1
 80137ac:	051b      	lsls	r3, r3, #20
 80137ae:	431a      	orrs	r2, r3
 80137b0:	0017      	movs	r7, r2
 80137b2:	e7ee      	b.n	8013792 <_strtod_l+0x10e>
 80137b4:	4f66      	ldr	r7, [pc, #408]	; (8013950 <_strtod_l+0x2cc>)
 80137b6:	e7ec      	b.n	8013792 <_strtod_l+0x10e>
 80137b8:	2601      	movs	r6, #1
 80137ba:	4f66      	ldr	r7, [pc, #408]	; (8013954 <_strtod_l+0x2d0>)
 80137bc:	4276      	negs	r6, r6
 80137be:	e7e8      	b.n	8013792 <_strtod_l+0x10e>
 80137c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80137c2:	1c5a      	adds	r2, r3, #1
 80137c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80137c6:	785b      	ldrb	r3, [r3, #1]
 80137c8:	2b30      	cmp	r3, #48	; 0x30
 80137ca:	d0f9      	beq.n	80137c0 <_strtod_l+0x13c>
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d0a0      	beq.n	8013712 <_strtod_l+0x8e>
 80137d0:	2301      	movs	r3, #1
 80137d2:	930a      	str	r3, [sp, #40]	; 0x28
 80137d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80137d6:	220a      	movs	r2, #10
 80137d8:	9310      	str	r3, [sp, #64]	; 0x40
 80137da:	2300      	movs	r3, #0
 80137dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80137de:	930b      	str	r3, [sp, #44]	; 0x2c
 80137e0:	9309      	str	r3, [sp, #36]	; 0x24
 80137e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80137e4:	7805      	ldrb	r5, [r0, #0]
 80137e6:	002b      	movs	r3, r5
 80137e8:	3b30      	subs	r3, #48	; 0x30
 80137ea:	b2d9      	uxtb	r1, r3
 80137ec:	2909      	cmp	r1, #9
 80137ee:	d927      	bls.n	8013840 <_strtod_l+0x1bc>
 80137f0:	0022      	movs	r2, r4
 80137f2:	9907      	ldr	r1, [sp, #28]
 80137f4:	f7ff ff07 	bl	8013606 <strncmp>
 80137f8:	2800      	cmp	r0, #0
 80137fa:	d033      	beq.n	8013864 <_strtod_l+0x1e0>
 80137fc:	2000      	movs	r0, #0
 80137fe:	002b      	movs	r3, r5
 8013800:	4684      	mov	ip, r0
 8013802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013804:	900c      	str	r0, [sp, #48]	; 0x30
 8013806:	9206      	str	r2, [sp, #24]
 8013808:	2220      	movs	r2, #32
 801380a:	0019      	movs	r1, r3
 801380c:	4391      	bics	r1, r2
 801380e:	000a      	movs	r2, r1
 8013810:	2100      	movs	r1, #0
 8013812:	9107      	str	r1, [sp, #28]
 8013814:	2a45      	cmp	r2, #69	; 0x45
 8013816:	d000      	beq.n	801381a <_strtod_l+0x196>
 8013818:	e0c5      	b.n	80139a6 <_strtod_l+0x322>
 801381a:	9b06      	ldr	r3, [sp, #24]
 801381c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801381e:	4303      	orrs	r3, r0
 8013820:	4313      	orrs	r3, r2
 8013822:	428b      	cmp	r3, r1
 8013824:	d094      	beq.n	8013750 <_strtod_l+0xcc>
 8013826:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013828:	9308      	str	r3, [sp, #32]
 801382a:	3301      	adds	r3, #1
 801382c:	931f      	str	r3, [sp, #124]	; 0x7c
 801382e:	9b08      	ldr	r3, [sp, #32]
 8013830:	785b      	ldrb	r3, [r3, #1]
 8013832:	2b2b      	cmp	r3, #43	; 0x2b
 8013834:	d076      	beq.n	8013924 <_strtod_l+0x2a0>
 8013836:	000c      	movs	r4, r1
 8013838:	2b2d      	cmp	r3, #45	; 0x2d
 801383a:	d179      	bne.n	8013930 <_strtod_l+0x2ac>
 801383c:	2401      	movs	r4, #1
 801383e:	e072      	b.n	8013926 <_strtod_l+0x2a2>
 8013840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013842:	2908      	cmp	r1, #8
 8013844:	dc09      	bgt.n	801385a <_strtod_l+0x1d6>
 8013846:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013848:	4351      	muls	r1, r2
 801384a:	185b      	adds	r3, r3, r1
 801384c:	930b      	str	r3, [sp, #44]	; 0x2c
 801384e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013850:	3001      	adds	r0, #1
 8013852:	3301      	adds	r3, #1
 8013854:	9309      	str	r3, [sp, #36]	; 0x24
 8013856:	901f      	str	r0, [sp, #124]	; 0x7c
 8013858:	e7c3      	b.n	80137e2 <_strtod_l+0x15e>
 801385a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801385c:	4351      	muls	r1, r2
 801385e:	185b      	adds	r3, r3, r1
 8013860:	930f      	str	r3, [sp, #60]	; 0x3c
 8013862:	e7f4      	b.n	801384e <_strtod_l+0x1ca>
 8013864:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013868:	191c      	adds	r4, r3, r4
 801386a:	941f      	str	r4, [sp, #124]	; 0x7c
 801386c:	7823      	ldrb	r3, [r4, #0]
 801386e:	2a00      	cmp	r2, #0
 8013870:	d039      	beq.n	80138e6 <_strtod_l+0x262>
 8013872:	900c      	str	r0, [sp, #48]	; 0x30
 8013874:	9206      	str	r2, [sp, #24]
 8013876:	001a      	movs	r2, r3
 8013878:	3a30      	subs	r2, #48	; 0x30
 801387a:	2a09      	cmp	r2, #9
 801387c:	d912      	bls.n	80138a4 <_strtod_l+0x220>
 801387e:	2201      	movs	r2, #1
 8013880:	4694      	mov	ip, r2
 8013882:	e7c1      	b.n	8013808 <_strtod_l+0x184>
 8013884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013886:	3001      	adds	r0, #1
 8013888:	1c5a      	adds	r2, r3, #1
 801388a:	921f      	str	r2, [sp, #124]	; 0x7c
 801388c:	785b      	ldrb	r3, [r3, #1]
 801388e:	2b30      	cmp	r3, #48	; 0x30
 8013890:	d0f8      	beq.n	8013884 <_strtod_l+0x200>
 8013892:	001a      	movs	r2, r3
 8013894:	3a31      	subs	r2, #49	; 0x31
 8013896:	2a08      	cmp	r2, #8
 8013898:	d83f      	bhi.n	801391a <_strtod_l+0x296>
 801389a:	900c      	str	r0, [sp, #48]	; 0x30
 801389c:	2000      	movs	r0, #0
 801389e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80138a0:	9006      	str	r0, [sp, #24]
 80138a2:	9210      	str	r2, [sp, #64]	; 0x40
 80138a4:	001a      	movs	r2, r3
 80138a6:	1c41      	adds	r1, r0, #1
 80138a8:	3a30      	subs	r2, #48	; 0x30
 80138aa:	2b30      	cmp	r3, #48	; 0x30
 80138ac:	d015      	beq.n	80138da <_strtod_l+0x256>
 80138ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138b0:	185b      	adds	r3, r3, r1
 80138b2:	210a      	movs	r1, #10
 80138b4:	930c      	str	r3, [sp, #48]	; 0x30
 80138b6:	9b06      	ldr	r3, [sp, #24]
 80138b8:	18c4      	adds	r4, r0, r3
 80138ba:	42a3      	cmp	r3, r4
 80138bc:	d115      	bne.n	80138ea <_strtod_l+0x266>
 80138be:	9906      	ldr	r1, [sp, #24]
 80138c0:	9b06      	ldr	r3, [sp, #24]
 80138c2:	3101      	adds	r1, #1
 80138c4:	1809      	adds	r1, r1, r0
 80138c6:	181b      	adds	r3, r3, r0
 80138c8:	9106      	str	r1, [sp, #24]
 80138ca:	2b08      	cmp	r3, #8
 80138cc:	dc1b      	bgt.n	8013906 <_strtod_l+0x282>
 80138ce:	230a      	movs	r3, #10
 80138d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138d2:	434b      	muls	r3, r1
 80138d4:	2100      	movs	r1, #0
 80138d6:	18d3      	adds	r3, r2, r3
 80138d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80138da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80138dc:	0008      	movs	r0, r1
 80138de:	1c5a      	adds	r2, r3, #1
 80138e0:	921f      	str	r2, [sp, #124]	; 0x7c
 80138e2:	785b      	ldrb	r3, [r3, #1]
 80138e4:	e7c7      	b.n	8013876 <_strtod_l+0x1f2>
 80138e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138e8:	e7d1      	b.n	801388e <_strtod_l+0x20a>
 80138ea:	2b08      	cmp	r3, #8
 80138ec:	dc04      	bgt.n	80138f8 <_strtod_l+0x274>
 80138ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80138f0:	434d      	muls	r5, r1
 80138f2:	950b      	str	r5, [sp, #44]	; 0x2c
 80138f4:	3301      	adds	r3, #1
 80138f6:	e7e0      	b.n	80138ba <_strtod_l+0x236>
 80138f8:	1c5d      	adds	r5, r3, #1
 80138fa:	2d10      	cmp	r5, #16
 80138fc:	dcfa      	bgt.n	80138f4 <_strtod_l+0x270>
 80138fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013900:	434d      	muls	r5, r1
 8013902:	950f      	str	r5, [sp, #60]	; 0x3c
 8013904:	e7f6      	b.n	80138f4 <_strtod_l+0x270>
 8013906:	9b06      	ldr	r3, [sp, #24]
 8013908:	2100      	movs	r1, #0
 801390a:	2b10      	cmp	r3, #16
 801390c:	dce5      	bgt.n	80138da <_strtod_l+0x256>
 801390e:	230a      	movs	r3, #10
 8013910:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013912:	4343      	muls	r3, r0
 8013914:	18d3      	adds	r3, r2, r3
 8013916:	930f      	str	r3, [sp, #60]	; 0x3c
 8013918:	e7df      	b.n	80138da <_strtod_l+0x256>
 801391a:	2200      	movs	r2, #0
 801391c:	920c      	str	r2, [sp, #48]	; 0x30
 801391e:	9206      	str	r2, [sp, #24]
 8013920:	3201      	adds	r2, #1
 8013922:	e7ad      	b.n	8013880 <_strtod_l+0x1fc>
 8013924:	2400      	movs	r4, #0
 8013926:	9b08      	ldr	r3, [sp, #32]
 8013928:	3302      	adds	r3, #2
 801392a:	931f      	str	r3, [sp, #124]	; 0x7c
 801392c:	9b08      	ldr	r3, [sp, #32]
 801392e:	789b      	ldrb	r3, [r3, #2]
 8013930:	001a      	movs	r2, r3
 8013932:	3a30      	subs	r2, #48	; 0x30
 8013934:	2a09      	cmp	r2, #9
 8013936:	d913      	bls.n	8013960 <_strtod_l+0x2dc>
 8013938:	9a08      	ldr	r2, [sp, #32]
 801393a:	921f      	str	r2, [sp, #124]	; 0x7c
 801393c:	2200      	movs	r2, #0
 801393e:	e031      	b.n	80139a4 <_strtod_l+0x320>
 8013940:	0801c65c 	.word	0x0801c65c
 8013944:	0801c4d8 	.word	0x0801c4d8
 8013948:	ffefffff 	.word	0xffefffff
 801394c:	00000433 	.word	0x00000433
 8013950:	7ff00000 	.word	0x7ff00000
 8013954:	7fffffff 	.word	0x7fffffff
 8013958:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801395a:	1c5a      	adds	r2, r3, #1
 801395c:	921f      	str	r2, [sp, #124]	; 0x7c
 801395e:	785b      	ldrb	r3, [r3, #1]
 8013960:	2b30      	cmp	r3, #48	; 0x30
 8013962:	d0f9      	beq.n	8013958 <_strtod_l+0x2d4>
 8013964:	2200      	movs	r2, #0
 8013966:	9207      	str	r2, [sp, #28]
 8013968:	001a      	movs	r2, r3
 801396a:	3a31      	subs	r2, #49	; 0x31
 801396c:	2a08      	cmp	r2, #8
 801396e:	d81a      	bhi.n	80139a6 <_strtod_l+0x322>
 8013970:	3b30      	subs	r3, #48	; 0x30
 8013972:	001a      	movs	r2, r3
 8013974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013976:	9307      	str	r3, [sp, #28]
 8013978:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801397a:	1c59      	adds	r1, r3, #1
 801397c:	911f      	str	r1, [sp, #124]	; 0x7c
 801397e:	785b      	ldrb	r3, [r3, #1]
 8013980:	001d      	movs	r5, r3
 8013982:	3d30      	subs	r5, #48	; 0x30
 8013984:	2d09      	cmp	r5, #9
 8013986:	d939      	bls.n	80139fc <_strtod_l+0x378>
 8013988:	9d07      	ldr	r5, [sp, #28]
 801398a:	1b49      	subs	r1, r1, r5
 801398c:	4db0      	ldr	r5, [pc, #704]	; (8013c50 <_strtod_l+0x5cc>)
 801398e:	9507      	str	r5, [sp, #28]
 8013990:	2908      	cmp	r1, #8
 8013992:	dc03      	bgt.n	801399c <_strtod_l+0x318>
 8013994:	9207      	str	r2, [sp, #28]
 8013996:	42aa      	cmp	r2, r5
 8013998:	dd00      	ble.n	801399c <_strtod_l+0x318>
 801399a:	9507      	str	r5, [sp, #28]
 801399c:	2c00      	cmp	r4, #0
 801399e:	d002      	beq.n	80139a6 <_strtod_l+0x322>
 80139a0:	9a07      	ldr	r2, [sp, #28]
 80139a2:	4252      	negs	r2, r2
 80139a4:	9207      	str	r2, [sp, #28]
 80139a6:	9a06      	ldr	r2, [sp, #24]
 80139a8:	2a00      	cmp	r2, #0
 80139aa:	d14b      	bne.n	8013a44 <_strtod_l+0x3c0>
 80139ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139ae:	4310      	orrs	r0, r2
 80139b0:	d000      	beq.n	80139b4 <_strtod_l+0x330>
 80139b2:	e6ae      	b.n	8013712 <_strtod_l+0x8e>
 80139b4:	4662      	mov	r2, ip
 80139b6:	2a00      	cmp	r2, #0
 80139b8:	d000      	beq.n	80139bc <_strtod_l+0x338>
 80139ba:	e6c9      	b.n	8013750 <_strtod_l+0xcc>
 80139bc:	2b69      	cmp	r3, #105	; 0x69
 80139be:	d025      	beq.n	8013a0c <_strtod_l+0x388>
 80139c0:	dc21      	bgt.n	8013a06 <_strtod_l+0x382>
 80139c2:	2b49      	cmp	r3, #73	; 0x49
 80139c4:	d022      	beq.n	8013a0c <_strtod_l+0x388>
 80139c6:	2b4e      	cmp	r3, #78	; 0x4e
 80139c8:	d000      	beq.n	80139cc <_strtod_l+0x348>
 80139ca:	e6c1      	b.n	8013750 <_strtod_l+0xcc>
 80139cc:	49a1      	ldr	r1, [pc, #644]	; (8013c54 <_strtod_l+0x5d0>)
 80139ce:	a81f      	add	r0, sp, #124	; 0x7c
 80139d0:	f003 fa1a 	bl	8016e08 <__match>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d100      	bne.n	80139da <_strtod_l+0x356>
 80139d8:	e6ba      	b.n	8013750 <_strtod_l+0xcc>
 80139da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	2b28      	cmp	r3, #40	; 0x28
 80139e0:	d12a      	bne.n	8013a38 <_strtod_l+0x3b4>
 80139e2:	499d      	ldr	r1, [pc, #628]	; (8013c58 <_strtod_l+0x5d4>)
 80139e4:	aa22      	add	r2, sp, #136	; 0x88
 80139e6:	a81f      	add	r0, sp, #124	; 0x7c
 80139e8:	f003 fa22 	bl	8016e30 <__hexnan>
 80139ec:	2805      	cmp	r0, #5
 80139ee:	d123      	bne.n	8013a38 <_strtod_l+0x3b4>
 80139f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80139f2:	4a9a      	ldr	r2, [pc, #616]	; (8013c5c <_strtod_l+0x5d8>)
 80139f4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80139f6:	431a      	orrs	r2, r3
 80139f8:	0017      	movs	r7, r2
 80139fa:	e68a      	b.n	8013712 <_strtod_l+0x8e>
 80139fc:	210a      	movs	r1, #10
 80139fe:	434a      	muls	r2, r1
 8013a00:	18d2      	adds	r2, r2, r3
 8013a02:	3a30      	subs	r2, #48	; 0x30
 8013a04:	e7b8      	b.n	8013978 <_strtod_l+0x2f4>
 8013a06:	2b6e      	cmp	r3, #110	; 0x6e
 8013a08:	d0e0      	beq.n	80139cc <_strtod_l+0x348>
 8013a0a:	e6a1      	b.n	8013750 <_strtod_l+0xcc>
 8013a0c:	4994      	ldr	r1, [pc, #592]	; (8013c60 <_strtod_l+0x5dc>)
 8013a0e:	a81f      	add	r0, sp, #124	; 0x7c
 8013a10:	f003 f9fa 	bl	8016e08 <__match>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d100      	bne.n	8013a1a <_strtod_l+0x396>
 8013a18:	e69a      	b.n	8013750 <_strtod_l+0xcc>
 8013a1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a1c:	4991      	ldr	r1, [pc, #580]	; (8013c64 <_strtod_l+0x5e0>)
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	a81f      	add	r0, sp, #124	; 0x7c
 8013a22:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a24:	f003 f9f0 	bl	8016e08 <__match>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d102      	bne.n	8013a32 <_strtod_l+0x3ae>
 8013a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a2e:	3301      	adds	r3, #1
 8013a30:	931f      	str	r3, [sp, #124]	; 0x7c
 8013a32:	2600      	movs	r6, #0
 8013a34:	4f89      	ldr	r7, [pc, #548]	; (8013c5c <_strtod_l+0x5d8>)
 8013a36:	e66c      	b.n	8013712 <_strtod_l+0x8e>
 8013a38:	488b      	ldr	r0, [pc, #556]	; (8013c68 <_strtod_l+0x5e4>)
 8013a3a:	f003 ff8d 	bl	8017958 <nan>
 8013a3e:	0006      	movs	r6, r0
 8013a40:	000f      	movs	r7, r1
 8013a42:	e666      	b.n	8013712 <_strtod_l+0x8e>
 8013a44:	9b07      	ldr	r3, [sp, #28]
 8013a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a48:	1a9b      	subs	r3, r3, r2
 8013a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8013a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d101      	bne.n	8013a56 <_strtod_l+0x3d2>
 8013a52:	9b06      	ldr	r3, [sp, #24]
 8013a54:	9309      	str	r3, [sp, #36]	; 0x24
 8013a56:	9c06      	ldr	r4, [sp, #24]
 8013a58:	2c10      	cmp	r4, #16
 8013a5a:	dd00      	ble.n	8013a5e <_strtod_l+0x3da>
 8013a5c:	2410      	movs	r4, #16
 8013a5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013a60:	f7ef f8ac 	bl	8002bbc <__aeabi_ui2d>
 8013a64:	9b06      	ldr	r3, [sp, #24]
 8013a66:	0006      	movs	r6, r0
 8013a68:	000f      	movs	r7, r1
 8013a6a:	2b09      	cmp	r3, #9
 8013a6c:	dd15      	ble.n	8013a9a <_strtod_l+0x416>
 8013a6e:	0022      	movs	r2, r4
 8013a70:	4b7e      	ldr	r3, [pc, #504]	; (8013c6c <_strtod_l+0x5e8>)
 8013a72:	3a09      	subs	r2, #9
 8013a74:	00d2      	lsls	r2, r2, #3
 8013a76:	189b      	adds	r3, r3, r2
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	f7ee fa1c 	bl	8001eb8 <__aeabi_dmul>
 8013a80:	0006      	movs	r6, r0
 8013a82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013a84:	000f      	movs	r7, r1
 8013a86:	f7ef f899 	bl	8002bbc <__aeabi_ui2d>
 8013a8a:	0002      	movs	r2, r0
 8013a8c:	000b      	movs	r3, r1
 8013a8e:	0030      	movs	r0, r6
 8013a90:	0039      	movs	r1, r7
 8013a92:	f7ed fad3 	bl	800103c <__aeabi_dadd>
 8013a96:	0006      	movs	r6, r0
 8013a98:	000f      	movs	r7, r1
 8013a9a:	9b06      	ldr	r3, [sp, #24]
 8013a9c:	2b0f      	cmp	r3, #15
 8013a9e:	dc39      	bgt.n	8013b14 <_strtod_l+0x490>
 8013aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d100      	bne.n	8013aa8 <_strtod_l+0x424>
 8013aa6:	e634      	b.n	8013712 <_strtod_l+0x8e>
 8013aa8:	dd24      	ble.n	8013af4 <_strtod_l+0x470>
 8013aaa:	2b16      	cmp	r3, #22
 8013aac:	dc09      	bgt.n	8013ac2 <_strtod_l+0x43e>
 8013aae:	496f      	ldr	r1, [pc, #444]	; (8013c6c <_strtod_l+0x5e8>)
 8013ab0:	00db      	lsls	r3, r3, #3
 8013ab2:	18c9      	adds	r1, r1, r3
 8013ab4:	0032      	movs	r2, r6
 8013ab6:	6808      	ldr	r0, [r1, #0]
 8013ab8:	6849      	ldr	r1, [r1, #4]
 8013aba:	003b      	movs	r3, r7
 8013abc:	f7ee f9fc 	bl	8001eb8 <__aeabi_dmul>
 8013ac0:	e7bd      	b.n	8013a3e <_strtod_l+0x3ba>
 8013ac2:	2325      	movs	r3, #37	; 0x25
 8013ac4:	9a06      	ldr	r2, [sp, #24]
 8013ac6:	1a9b      	subs	r3, r3, r2
 8013ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aca:	4293      	cmp	r3, r2
 8013acc:	db22      	blt.n	8013b14 <_strtod_l+0x490>
 8013ace:	240f      	movs	r4, #15
 8013ad0:	9b06      	ldr	r3, [sp, #24]
 8013ad2:	4d66      	ldr	r5, [pc, #408]	; (8013c6c <_strtod_l+0x5e8>)
 8013ad4:	1ae4      	subs	r4, r4, r3
 8013ad6:	00e1      	lsls	r1, r4, #3
 8013ad8:	1869      	adds	r1, r5, r1
 8013ada:	0032      	movs	r2, r6
 8013adc:	6808      	ldr	r0, [r1, #0]
 8013ade:	6849      	ldr	r1, [r1, #4]
 8013ae0:	003b      	movs	r3, r7
 8013ae2:	f7ee f9e9 	bl	8001eb8 <__aeabi_dmul>
 8013ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ae8:	1b1c      	subs	r4, r3, r4
 8013aea:	00e4      	lsls	r4, r4, #3
 8013aec:	192c      	adds	r4, r5, r4
 8013aee:	6822      	ldr	r2, [r4, #0]
 8013af0:	6863      	ldr	r3, [r4, #4]
 8013af2:	e7e3      	b.n	8013abc <_strtod_l+0x438>
 8013af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013af6:	3316      	adds	r3, #22
 8013af8:	db0c      	blt.n	8013b14 <_strtod_l+0x490>
 8013afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013afc:	9a07      	ldr	r2, [sp, #28]
 8013afe:	0030      	movs	r0, r6
 8013b00:	1a9a      	subs	r2, r3, r2
 8013b02:	4b5a      	ldr	r3, [pc, #360]	; (8013c6c <_strtod_l+0x5e8>)
 8013b04:	00d2      	lsls	r2, r2, #3
 8013b06:	189b      	adds	r3, r3, r2
 8013b08:	0039      	movs	r1, r7
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	f7ed fdd1 	bl	80016b4 <__aeabi_ddiv>
 8013b12:	e794      	b.n	8013a3e <_strtod_l+0x3ba>
 8013b14:	9b06      	ldr	r3, [sp, #24]
 8013b16:	1b1c      	subs	r4, r3, r4
 8013b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b1a:	18e4      	adds	r4, r4, r3
 8013b1c:	2c00      	cmp	r4, #0
 8013b1e:	dd72      	ble.n	8013c06 <_strtod_l+0x582>
 8013b20:	230f      	movs	r3, #15
 8013b22:	0021      	movs	r1, r4
 8013b24:	4019      	ands	r1, r3
 8013b26:	421c      	tst	r4, r3
 8013b28:	d00a      	beq.n	8013b40 <_strtod_l+0x4bc>
 8013b2a:	00cb      	lsls	r3, r1, #3
 8013b2c:	494f      	ldr	r1, [pc, #316]	; (8013c6c <_strtod_l+0x5e8>)
 8013b2e:	0032      	movs	r2, r6
 8013b30:	18c9      	adds	r1, r1, r3
 8013b32:	6808      	ldr	r0, [r1, #0]
 8013b34:	6849      	ldr	r1, [r1, #4]
 8013b36:	003b      	movs	r3, r7
 8013b38:	f7ee f9be 	bl	8001eb8 <__aeabi_dmul>
 8013b3c:	0006      	movs	r6, r0
 8013b3e:	000f      	movs	r7, r1
 8013b40:	230f      	movs	r3, #15
 8013b42:	439c      	bics	r4, r3
 8013b44:	d04a      	beq.n	8013bdc <_strtod_l+0x558>
 8013b46:	3326      	adds	r3, #38	; 0x26
 8013b48:	33ff      	adds	r3, #255	; 0xff
 8013b4a:	429c      	cmp	r4, r3
 8013b4c:	dd22      	ble.n	8013b94 <_strtod_l+0x510>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9306      	str	r3, [sp, #24]
 8013b52:	9307      	str	r3, [sp, #28]
 8013b54:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b56:	9309      	str	r3, [sp, #36]	; 0x24
 8013b58:	2322      	movs	r3, #34	; 0x22
 8013b5a:	2600      	movs	r6, #0
 8013b5c:	9a05      	ldr	r2, [sp, #20]
 8013b5e:	4f3f      	ldr	r7, [pc, #252]	; (8013c5c <_strtod_l+0x5d8>)
 8013b60:	6013      	str	r3, [r2, #0]
 8013b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b64:	42b3      	cmp	r3, r6
 8013b66:	d100      	bne.n	8013b6a <_strtod_l+0x4e6>
 8013b68:	e5d3      	b.n	8013712 <_strtod_l+0x8e>
 8013b6a:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013b6c:	9805      	ldr	r0, [sp, #20]
 8013b6e:	f003 fa6f 	bl	8017050 <_Bfree>
 8013b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b74:	9805      	ldr	r0, [sp, #20]
 8013b76:	f003 fa6b 	bl	8017050 <_Bfree>
 8013b7a:	9907      	ldr	r1, [sp, #28]
 8013b7c:	9805      	ldr	r0, [sp, #20]
 8013b7e:	f003 fa67 	bl	8017050 <_Bfree>
 8013b82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b84:	9805      	ldr	r0, [sp, #20]
 8013b86:	f003 fa63 	bl	8017050 <_Bfree>
 8013b8a:	9906      	ldr	r1, [sp, #24]
 8013b8c:	9805      	ldr	r0, [sp, #20]
 8013b8e:	f003 fa5f 	bl	8017050 <_Bfree>
 8013b92:	e5be      	b.n	8013712 <_strtod_l+0x8e>
 8013b94:	2300      	movs	r3, #0
 8013b96:	0030      	movs	r0, r6
 8013b98:	0039      	movs	r1, r7
 8013b9a:	4d35      	ldr	r5, [pc, #212]	; (8013c70 <_strtod_l+0x5ec>)
 8013b9c:	1124      	asrs	r4, r4, #4
 8013b9e:	9308      	str	r3, [sp, #32]
 8013ba0:	2c01      	cmp	r4, #1
 8013ba2:	dc1e      	bgt.n	8013be2 <_strtod_l+0x55e>
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d001      	beq.n	8013bac <_strtod_l+0x528>
 8013ba8:	0006      	movs	r6, r0
 8013baa:	000f      	movs	r7, r1
 8013bac:	4b31      	ldr	r3, [pc, #196]	; (8013c74 <_strtod_l+0x5f0>)
 8013bae:	0032      	movs	r2, r6
 8013bb0:	18ff      	adds	r7, r7, r3
 8013bb2:	9b08      	ldr	r3, [sp, #32]
 8013bb4:	00dd      	lsls	r5, r3, #3
 8013bb6:	4b2e      	ldr	r3, [pc, #184]	; (8013c70 <_strtod_l+0x5ec>)
 8013bb8:	195d      	adds	r5, r3, r5
 8013bba:	6828      	ldr	r0, [r5, #0]
 8013bbc:	6869      	ldr	r1, [r5, #4]
 8013bbe:	003b      	movs	r3, r7
 8013bc0:	f7ee f97a 	bl	8001eb8 <__aeabi_dmul>
 8013bc4:	4b25      	ldr	r3, [pc, #148]	; (8013c5c <_strtod_l+0x5d8>)
 8013bc6:	4a2c      	ldr	r2, [pc, #176]	; (8013c78 <_strtod_l+0x5f4>)
 8013bc8:	0006      	movs	r6, r0
 8013bca:	400b      	ands	r3, r1
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d8be      	bhi.n	8013b4e <_strtod_l+0x4ca>
 8013bd0:	4a2a      	ldr	r2, [pc, #168]	; (8013c7c <_strtod_l+0x5f8>)
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	d913      	bls.n	8013bfe <_strtod_l+0x57a>
 8013bd6:	2601      	movs	r6, #1
 8013bd8:	4f29      	ldr	r7, [pc, #164]	; (8013c80 <_strtod_l+0x5fc>)
 8013bda:	4276      	negs	r6, r6
 8013bdc:	2300      	movs	r3, #0
 8013bde:	9308      	str	r3, [sp, #32]
 8013be0:	e087      	b.n	8013cf2 <_strtod_l+0x66e>
 8013be2:	2201      	movs	r2, #1
 8013be4:	4214      	tst	r4, r2
 8013be6:	d004      	beq.n	8013bf2 <_strtod_l+0x56e>
 8013be8:	682a      	ldr	r2, [r5, #0]
 8013bea:	686b      	ldr	r3, [r5, #4]
 8013bec:	f7ee f964 	bl	8001eb8 <__aeabi_dmul>
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	9a08      	ldr	r2, [sp, #32]
 8013bf4:	1064      	asrs	r4, r4, #1
 8013bf6:	3201      	adds	r2, #1
 8013bf8:	9208      	str	r2, [sp, #32]
 8013bfa:	3508      	adds	r5, #8
 8013bfc:	e7d0      	b.n	8013ba0 <_strtod_l+0x51c>
 8013bfe:	23d4      	movs	r3, #212	; 0xd4
 8013c00:	049b      	lsls	r3, r3, #18
 8013c02:	18cf      	adds	r7, r1, r3
 8013c04:	e7ea      	b.n	8013bdc <_strtod_l+0x558>
 8013c06:	2c00      	cmp	r4, #0
 8013c08:	d0e8      	beq.n	8013bdc <_strtod_l+0x558>
 8013c0a:	4264      	negs	r4, r4
 8013c0c:	220f      	movs	r2, #15
 8013c0e:	0023      	movs	r3, r4
 8013c10:	4013      	ands	r3, r2
 8013c12:	4214      	tst	r4, r2
 8013c14:	d00a      	beq.n	8013c2c <_strtod_l+0x5a8>
 8013c16:	00da      	lsls	r2, r3, #3
 8013c18:	4b14      	ldr	r3, [pc, #80]	; (8013c6c <_strtod_l+0x5e8>)
 8013c1a:	0030      	movs	r0, r6
 8013c1c:	189b      	adds	r3, r3, r2
 8013c1e:	0039      	movs	r1, r7
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	f7ed fd46 	bl	80016b4 <__aeabi_ddiv>
 8013c28:	0006      	movs	r6, r0
 8013c2a:	000f      	movs	r7, r1
 8013c2c:	1124      	asrs	r4, r4, #4
 8013c2e:	d0d5      	beq.n	8013bdc <_strtod_l+0x558>
 8013c30:	2c1f      	cmp	r4, #31
 8013c32:	dd27      	ble.n	8013c84 <_strtod_l+0x600>
 8013c34:	2300      	movs	r3, #0
 8013c36:	9306      	str	r3, [sp, #24]
 8013c38:	9307      	str	r3, [sp, #28]
 8013c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8013c3e:	2322      	movs	r3, #34	; 0x22
 8013c40:	9a05      	ldr	r2, [sp, #20]
 8013c42:	2600      	movs	r6, #0
 8013c44:	6013      	str	r3, [r2, #0]
 8013c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c48:	2700      	movs	r7, #0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d18d      	bne.n	8013b6a <_strtod_l+0x4e6>
 8013c4e:	e560      	b.n	8013712 <_strtod_l+0x8e>
 8013c50:	00004e1f 	.word	0x00004e1f
 8013c54:	0801c535 	.word	0x0801c535
 8013c58:	0801c4ec 	.word	0x0801c4ec
 8013c5c:	7ff00000 	.word	0x7ff00000
 8013c60:	0801c52d 	.word	0x0801c52d
 8013c64:	0801c583 	.word	0x0801c583
 8013c68:	0801c807 	.word	0x0801c807
 8013c6c:	0801c6f8 	.word	0x0801c6f8
 8013c70:	0801c6d0 	.word	0x0801c6d0
 8013c74:	fcb00000 	.word	0xfcb00000
 8013c78:	7ca00000 	.word	0x7ca00000
 8013c7c:	7c900000 	.word	0x7c900000
 8013c80:	7fefffff 	.word	0x7fefffff
 8013c84:	2310      	movs	r3, #16
 8013c86:	0022      	movs	r2, r4
 8013c88:	401a      	ands	r2, r3
 8013c8a:	9208      	str	r2, [sp, #32]
 8013c8c:	421c      	tst	r4, r3
 8013c8e:	d001      	beq.n	8013c94 <_strtod_l+0x610>
 8013c90:	335a      	adds	r3, #90	; 0x5a
 8013c92:	9308      	str	r3, [sp, #32]
 8013c94:	0030      	movs	r0, r6
 8013c96:	0039      	movs	r1, r7
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4dc5      	ldr	r5, [pc, #788]	; (8013fb0 <_strtod_l+0x92c>)
 8013c9c:	2201      	movs	r2, #1
 8013c9e:	4214      	tst	r4, r2
 8013ca0:	d004      	beq.n	8013cac <_strtod_l+0x628>
 8013ca2:	682a      	ldr	r2, [r5, #0]
 8013ca4:	686b      	ldr	r3, [r5, #4]
 8013ca6:	f7ee f907 	bl	8001eb8 <__aeabi_dmul>
 8013caa:	2301      	movs	r3, #1
 8013cac:	1064      	asrs	r4, r4, #1
 8013cae:	3508      	adds	r5, #8
 8013cb0:	2c00      	cmp	r4, #0
 8013cb2:	d1f3      	bne.n	8013c9c <_strtod_l+0x618>
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d001      	beq.n	8013cbc <_strtod_l+0x638>
 8013cb8:	0006      	movs	r6, r0
 8013cba:	000f      	movs	r7, r1
 8013cbc:	9b08      	ldr	r3, [sp, #32]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00f      	beq.n	8013ce2 <_strtod_l+0x65e>
 8013cc2:	236b      	movs	r3, #107	; 0x6b
 8013cc4:	007a      	lsls	r2, r7, #1
 8013cc6:	0d52      	lsrs	r2, r2, #21
 8013cc8:	0039      	movs	r1, r7
 8013cca:	1a9b      	subs	r3, r3, r2
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	dd08      	ble.n	8013ce2 <_strtod_l+0x65e>
 8013cd0:	2b1f      	cmp	r3, #31
 8013cd2:	dc00      	bgt.n	8013cd6 <_strtod_l+0x652>
 8013cd4:	e124      	b.n	8013f20 <_strtod_l+0x89c>
 8013cd6:	2600      	movs	r6, #0
 8013cd8:	2b34      	cmp	r3, #52	; 0x34
 8013cda:	dc00      	bgt.n	8013cde <_strtod_l+0x65a>
 8013cdc:	e119      	b.n	8013f12 <_strtod_l+0x88e>
 8013cde:	27dc      	movs	r7, #220	; 0xdc
 8013ce0:	04bf      	lsls	r7, r7, #18
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	0030      	movs	r0, r6
 8013ce8:	0039      	movs	r1, r7
 8013cea:	f7ec fbb7 	bl	800045c <__aeabi_dcmpeq>
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	d1a0      	bne.n	8013c34 <_strtod_l+0x5b0>
 8013cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013cfa:	9b06      	ldr	r3, [sp, #24]
 8013cfc:	9805      	ldr	r0, [sp, #20]
 8013cfe:	f003 f9f5 	bl	80170ec <__s2b>
 8013d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d04:	2800      	cmp	r0, #0
 8013d06:	d100      	bne.n	8013d0a <_strtod_l+0x686>
 8013d08:	e721      	b.n	8013b4e <_strtod_l+0x4ca>
 8013d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0c:	9907      	ldr	r1, [sp, #28]
 8013d0e:	17da      	asrs	r2, r3, #31
 8013d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d12:	1a5b      	subs	r3, r3, r1
 8013d14:	401a      	ands	r2, r3
 8013d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d18:	9215      	str	r2, [sp, #84]	; 0x54
 8013d1a:	43db      	mvns	r3, r3
 8013d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d1e:	17db      	asrs	r3, r3, #31
 8013d20:	401a      	ands	r2, r3
 8013d22:	2300      	movs	r3, #0
 8013d24:	921a      	str	r2, [sp, #104]	; 0x68
 8013d26:	9306      	str	r3, [sp, #24]
 8013d28:	9307      	str	r3, [sp, #28]
 8013d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d2c:	9805      	ldr	r0, [sp, #20]
 8013d2e:	6859      	ldr	r1, [r3, #4]
 8013d30:	f003 f966 	bl	8017000 <_Balloc>
 8013d34:	9009      	str	r0, [sp, #36]	; 0x24
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d100      	bne.n	8013d3c <_strtod_l+0x6b8>
 8013d3a:	e70d      	b.n	8013b58 <_strtod_l+0x4d4>
 8013d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013d40:	691b      	ldr	r3, [r3, #16]
 8013d42:	310c      	adds	r1, #12
 8013d44:	1c9a      	adds	r2, r3, #2
 8013d46:	0092      	lsls	r2, r2, #2
 8013d48:	300c      	adds	r0, #12
 8013d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8013d4c:	f7ff fa1e 	bl	801318c <memcpy>
 8013d50:	ab22      	add	r3, sp, #136	; 0x88
 8013d52:	9301      	str	r3, [sp, #4]
 8013d54:	ab21      	add	r3, sp, #132	; 0x84
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	0032      	movs	r2, r6
 8013d5a:	003b      	movs	r3, r7
 8013d5c:	9805      	ldr	r0, [sp, #20]
 8013d5e:	9612      	str	r6, [sp, #72]	; 0x48
 8013d60:	9713      	str	r7, [sp, #76]	; 0x4c
 8013d62:	f003 fcf5 	bl	8017750 <__d2b>
 8013d66:	9020      	str	r0, [sp, #128]	; 0x80
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	d100      	bne.n	8013d6e <_strtod_l+0x6ea>
 8013d6c:	e6f4      	b.n	8013b58 <_strtod_l+0x4d4>
 8013d6e:	2101      	movs	r1, #1
 8013d70:	9805      	ldr	r0, [sp, #20]
 8013d72:	f003 fa4f 	bl	8017214 <__i2b>
 8013d76:	9007      	str	r0, [sp, #28]
 8013d78:	2800      	cmp	r0, #0
 8013d7a:	d100      	bne.n	8013d7e <_strtod_l+0x6fa>
 8013d7c:	e6ec      	b.n	8013b58 <_strtod_l+0x4d4>
 8013d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d82:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013d84:	1ad4      	subs	r4, r2, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	db01      	blt.n	8013d8e <_strtod_l+0x70a>
 8013d8a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8013d8c:	195d      	adds	r5, r3, r5
 8013d8e:	9908      	ldr	r1, [sp, #32]
 8013d90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013d92:	1a5b      	subs	r3, r3, r1
 8013d94:	2136      	movs	r1, #54	; 0x36
 8013d96:	189b      	adds	r3, r3, r2
 8013d98:	1a8a      	subs	r2, r1, r2
 8013d9a:	4986      	ldr	r1, [pc, #536]	; (8013fb4 <_strtod_l+0x930>)
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	468c      	mov	ip, r1
 8013da0:	2100      	movs	r1, #0
 8013da2:	3b01      	subs	r3, #1
 8013da4:	9110      	str	r1, [sp, #64]	; 0x40
 8013da6:	9014      	str	r0, [sp, #80]	; 0x50
 8013da8:	4563      	cmp	r3, ip
 8013daa:	da07      	bge.n	8013dbc <_strtod_l+0x738>
 8013dac:	4661      	mov	r1, ip
 8013dae:	1ac9      	subs	r1, r1, r3
 8013db0:	1a52      	subs	r2, r2, r1
 8013db2:	291f      	cmp	r1, #31
 8013db4:	dd00      	ble.n	8013db8 <_strtod_l+0x734>
 8013db6:	e0b8      	b.n	8013f2a <_strtod_l+0x8a6>
 8013db8:	4088      	lsls	r0, r1
 8013dba:	9014      	str	r0, [sp, #80]	; 0x50
 8013dbc:	18ab      	adds	r3, r5, r2
 8013dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8013dc0:	18a4      	adds	r4, r4, r2
 8013dc2:	9b08      	ldr	r3, [sp, #32]
 8013dc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013dc6:	191c      	adds	r4, r3, r4
 8013dc8:	002b      	movs	r3, r5
 8013dca:	4295      	cmp	r5, r2
 8013dcc:	dd00      	ble.n	8013dd0 <_strtod_l+0x74c>
 8013dce:	0013      	movs	r3, r2
 8013dd0:	42a3      	cmp	r3, r4
 8013dd2:	dd00      	ble.n	8013dd6 <_strtod_l+0x752>
 8013dd4:	0023      	movs	r3, r4
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	dd04      	ble.n	8013de4 <_strtod_l+0x760>
 8013dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ddc:	1ae4      	subs	r4, r4, r3
 8013dde:	1ad2      	subs	r2, r2, r3
 8013de0:	920c      	str	r2, [sp, #48]	; 0x30
 8013de2:	1aed      	subs	r5, r5, r3
 8013de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	dd17      	ble.n	8013e1a <_strtod_l+0x796>
 8013dea:	001a      	movs	r2, r3
 8013dec:	9907      	ldr	r1, [sp, #28]
 8013dee:	9805      	ldr	r0, [sp, #20]
 8013df0:	f003 fad6 	bl	80173a0 <__pow5mult>
 8013df4:	9007      	str	r0, [sp, #28]
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d100      	bne.n	8013dfc <_strtod_l+0x778>
 8013dfa:	e6ad      	b.n	8013b58 <_strtod_l+0x4d4>
 8013dfc:	0001      	movs	r1, r0
 8013dfe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013e00:	9805      	ldr	r0, [sp, #20]
 8013e02:	f003 fa1d 	bl	8017240 <__multiply>
 8013e06:	900f      	str	r0, [sp, #60]	; 0x3c
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d100      	bne.n	8013e0e <_strtod_l+0x78a>
 8013e0c:	e6a4      	b.n	8013b58 <_strtod_l+0x4d4>
 8013e0e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013e10:	9805      	ldr	r0, [sp, #20]
 8013e12:	f003 f91d 	bl	8017050 <_Bfree>
 8013e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e18:	9320      	str	r3, [sp, #128]	; 0x80
 8013e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	dd00      	ble.n	8013e22 <_strtod_l+0x79e>
 8013e20:	e089      	b.n	8013f36 <_strtod_l+0x8b2>
 8013e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	dd08      	ble.n	8013e3a <_strtod_l+0x7b6>
 8013e28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e2c:	9805      	ldr	r0, [sp, #20]
 8013e2e:	f003 fab7 	bl	80173a0 <__pow5mult>
 8013e32:	9009      	str	r0, [sp, #36]	; 0x24
 8013e34:	2800      	cmp	r0, #0
 8013e36:	d100      	bne.n	8013e3a <_strtod_l+0x7b6>
 8013e38:	e68e      	b.n	8013b58 <_strtod_l+0x4d4>
 8013e3a:	2c00      	cmp	r4, #0
 8013e3c:	dd08      	ble.n	8013e50 <_strtod_l+0x7cc>
 8013e3e:	0022      	movs	r2, r4
 8013e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e42:	9805      	ldr	r0, [sp, #20]
 8013e44:	f003 faee 	bl	8017424 <__lshift>
 8013e48:	9009      	str	r0, [sp, #36]	; 0x24
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d100      	bne.n	8013e50 <_strtod_l+0x7cc>
 8013e4e:	e683      	b.n	8013b58 <_strtod_l+0x4d4>
 8013e50:	2d00      	cmp	r5, #0
 8013e52:	dd08      	ble.n	8013e66 <_strtod_l+0x7e2>
 8013e54:	002a      	movs	r2, r5
 8013e56:	9907      	ldr	r1, [sp, #28]
 8013e58:	9805      	ldr	r0, [sp, #20]
 8013e5a:	f003 fae3 	bl	8017424 <__lshift>
 8013e5e:	9007      	str	r0, [sp, #28]
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d100      	bne.n	8013e66 <_strtod_l+0x7e2>
 8013e64:	e678      	b.n	8013b58 <_strtod_l+0x4d4>
 8013e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e68:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013e6a:	9805      	ldr	r0, [sp, #20]
 8013e6c:	f003 fb64 	bl	8017538 <__mdiff>
 8013e70:	9006      	str	r0, [sp, #24]
 8013e72:	2800      	cmp	r0, #0
 8013e74:	d100      	bne.n	8013e78 <_strtod_l+0x7f4>
 8013e76:	e66f      	b.n	8013b58 <_strtod_l+0x4d4>
 8013e78:	2200      	movs	r2, #0
 8013e7a:	68c3      	ldr	r3, [r0, #12]
 8013e7c:	9907      	ldr	r1, [sp, #28]
 8013e7e:	60c2      	str	r2, [r0, #12]
 8013e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e82:	f003 fb3d 	bl	8017500 <__mcmp>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	da5f      	bge.n	8013f4a <_strtod_l+0x8c6>
 8013e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e8c:	4333      	orrs	r3, r6
 8013e8e:	d000      	beq.n	8013e92 <_strtod_l+0x80e>
 8013e90:	e08a      	b.n	8013fa8 <_strtod_l+0x924>
 8013e92:	033b      	lsls	r3, r7, #12
 8013e94:	d000      	beq.n	8013e98 <_strtod_l+0x814>
 8013e96:	e087      	b.n	8013fa8 <_strtod_l+0x924>
 8013e98:	22d6      	movs	r2, #214	; 0xd6
 8013e9a:	4b47      	ldr	r3, [pc, #284]	; (8013fb8 <_strtod_l+0x934>)
 8013e9c:	04d2      	lsls	r2, r2, #19
 8013e9e:	403b      	ands	r3, r7
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	d800      	bhi.n	8013ea6 <_strtod_l+0x822>
 8013ea4:	e080      	b.n	8013fa8 <_strtod_l+0x924>
 8013ea6:	9b06      	ldr	r3, [sp, #24]
 8013ea8:	695b      	ldr	r3, [r3, #20]
 8013eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d104      	bne.n	8013eba <_strtod_l+0x836>
 8013eb0:	9b06      	ldr	r3, [sp, #24]
 8013eb2:	691b      	ldr	r3, [r3, #16]
 8013eb4:	930a      	str	r3, [sp, #40]	; 0x28
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	dd76      	ble.n	8013fa8 <_strtod_l+0x924>
 8013eba:	9906      	ldr	r1, [sp, #24]
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	9805      	ldr	r0, [sp, #20]
 8013ec0:	f003 fab0 	bl	8017424 <__lshift>
 8013ec4:	9907      	ldr	r1, [sp, #28]
 8013ec6:	9006      	str	r0, [sp, #24]
 8013ec8:	f003 fb1a 	bl	8017500 <__mcmp>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	dd6b      	ble.n	8013fa8 <_strtod_l+0x924>
 8013ed0:	9908      	ldr	r1, [sp, #32]
 8013ed2:	003b      	movs	r3, r7
 8013ed4:	4a38      	ldr	r2, [pc, #224]	; (8013fb8 <_strtod_l+0x934>)
 8013ed6:	2900      	cmp	r1, #0
 8013ed8:	d100      	bne.n	8013edc <_strtod_l+0x858>
 8013eda:	e092      	b.n	8014002 <_strtod_l+0x97e>
 8013edc:	0011      	movs	r1, r2
 8013ede:	20d6      	movs	r0, #214	; 0xd6
 8013ee0:	4039      	ands	r1, r7
 8013ee2:	04c0      	lsls	r0, r0, #19
 8013ee4:	4281      	cmp	r1, r0
 8013ee6:	dd00      	ble.n	8013eea <_strtod_l+0x866>
 8013ee8:	e08b      	b.n	8014002 <_strtod_l+0x97e>
 8013eea:	23dc      	movs	r3, #220	; 0xdc
 8013eec:	049b      	lsls	r3, r3, #18
 8013eee:	4299      	cmp	r1, r3
 8013ef0:	dc00      	bgt.n	8013ef4 <_strtod_l+0x870>
 8013ef2:	e6a4      	b.n	8013c3e <_strtod_l+0x5ba>
 8013ef4:	0030      	movs	r0, r6
 8013ef6:	0039      	movs	r1, r7
 8013ef8:	2200      	movs	r2, #0
 8013efa:	4b30      	ldr	r3, [pc, #192]	; (8013fbc <_strtod_l+0x938>)
 8013efc:	f7ed ffdc 	bl	8001eb8 <__aeabi_dmul>
 8013f00:	0006      	movs	r6, r0
 8013f02:	000f      	movs	r7, r1
 8013f04:	4308      	orrs	r0, r1
 8013f06:	d000      	beq.n	8013f0a <_strtod_l+0x886>
 8013f08:	e62f      	b.n	8013b6a <_strtod_l+0x4e6>
 8013f0a:	2322      	movs	r3, #34	; 0x22
 8013f0c:	9a05      	ldr	r2, [sp, #20]
 8013f0e:	6013      	str	r3, [r2, #0]
 8013f10:	e62b      	b.n	8013b6a <_strtod_l+0x4e6>
 8013f12:	234b      	movs	r3, #75	; 0x4b
 8013f14:	1a9a      	subs	r2, r3, r2
 8013f16:	3b4c      	subs	r3, #76	; 0x4c
 8013f18:	4093      	lsls	r3, r2
 8013f1a:	4019      	ands	r1, r3
 8013f1c:	000f      	movs	r7, r1
 8013f1e:	e6e0      	b.n	8013ce2 <_strtod_l+0x65e>
 8013f20:	2201      	movs	r2, #1
 8013f22:	4252      	negs	r2, r2
 8013f24:	409a      	lsls	r2, r3
 8013f26:	4016      	ands	r6, r2
 8013f28:	e6db      	b.n	8013ce2 <_strtod_l+0x65e>
 8013f2a:	4925      	ldr	r1, [pc, #148]	; (8013fc0 <_strtod_l+0x93c>)
 8013f2c:	1acb      	subs	r3, r1, r3
 8013f2e:	0001      	movs	r1, r0
 8013f30:	4099      	lsls	r1, r3
 8013f32:	9110      	str	r1, [sp, #64]	; 0x40
 8013f34:	e741      	b.n	8013dba <_strtod_l+0x736>
 8013f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f38:	9920      	ldr	r1, [sp, #128]	; 0x80
 8013f3a:	9805      	ldr	r0, [sp, #20]
 8013f3c:	f003 fa72 	bl	8017424 <__lshift>
 8013f40:	9020      	str	r0, [sp, #128]	; 0x80
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d000      	beq.n	8013f48 <_strtod_l+0x8c4>
 8013f46:	e76c      	b.n	8013e22 <_strtod_l+0x79e>
 8013f48:	e606      	b.n	8013b58 <_strtod_l+0x4d4>
 8013f4a:	970c      	str	r7, [sp, #48]	; 0x30
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d176      	bne.n	801403e <_strtod_l+0x9ba>
 8013f50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f52:	033b      	lsls	r3, r7, #12
 8013f54:	0b1b      	lsrs	r3, r3, #12
 8013f56:	2a00      	cmp	r2, #0
 8013f58:	d038      	beq.n	8013fcc <_strtod_l+0x948>
 8013f5a:	4a1a      	ldr	r2, [pc, #104]	; (8013fc4 <_strtod_l+0x940>)
 8013f5c:	4293      	cmp	r3, r2
 8013f5e:	d138      	bne.n	8013fd2 <_strtod_l+0x94e>
 8013f60:	2201      	movs	r2, #1
 8013f62:	9b08      	ldr	r3, [sp, #32]
 8013f64:	4252      	negs	r2, r2
 8013f66:	0031      	movs	r1, r6
 8013f68:	0010      	movs	r0, r2
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00b      	beq.n	8013f86 <_strtod_l+0x902>
 8013f6e:	24d4      	movs	r4, #212	; 0xd4
 8013f70:	4b11      	ldr	r3, [pc, #68]	; (8013fb8 <_strtod_l+0x934>)
 8013f72:	0010      	movs	r0, r2
 8013f74:	403b      	ands	r3, r7
 8013f76:	04e4      	lsls	r4, r4, #19
 8013f78:	42a3      	cmp	r3, r4
 8013f7a:	d804      	bhi.n	8013f86 <_strtod_l+0x902>
 8013f7c:	306c      	adds	r0, #108	; 0x6c
 8013f7e:	0d1b      	lsrs	r3, r3, #20
 8013f80:	1ac3      	subs	r3, r0, r3
 8013f82:	409a      	lsls	r2, r3
 8013f84:	0010      	movs	r0, r2
 8013f86:	4281      	cmp	r1, r0
 8013f88:	d123      	bne.n	8013fd2 <_strtod_l+0x94e>
 8013f8a:	4b0f      	ldr	r3, [pc, #60]	; (8013fc8 <_strtod_l+0x944>)
 8013f8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d102      	bne.n	8013f98 <_strtod_l+0x914>
 8013f92:	1c4b      	adds	r3, r1, #1
 8013f94:	d100      	bne.n	8013f98 <_strtod_l+0x914>
 8013f96:	e5df      	b.n	8013b58 <_strtod_l+0x4d4>
 8013f98:	4b07      	ldr	r3, [pc, #28]	; (8013fb8 <_strtod_l+0x934>)
 8013f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f9c:	2600      	movs	r6, #0
 8013f9e:	401a      	ands	r2, r3
 8013fa0:	0013      	movs	r3, r2
 8013fa2:	2280      	movs	r2, #128	; 0x80
 8013fa4:	0352      	lsls	r2, r2, #13
 8013fa6:	189f      	adds	r7, r3, r2
 8013fa8:	9b08      	ldr	r3, [sp, #32]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1a2      	bne.n	8013ef4 <_strtod_l+0x870>
 8013fae:	e5dc      	b.n	8013b6a <_strtod_l+0x4e6>
 8013fb0:	0801c500 	.word	0x0801c500
 8013fb4:	fffffc02 	.word	0xfffffc02
 8013fb8:	7ff00000 	.word	0x7ff00000
 8013fbc:	39500000 	.word	0x39500000
 8013fc0:	fffffbe2 	.word	0xfffffbe2
 8013fc4:	000fffff 	.word	0x000fffff
 8013fc8:	7fefffff 	.word	0x7fefffff
 8013fcc:	4333      	orrs	r3, r6
 8013fce:	d100      	bne.n	8013fd2 <_strtod_l+0x94e>
 8013fd0:	e77e      	b.n	8013ed0 <_strtod_l+0x84c>
 8013fd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d01d      	beq.n	8014014 <_strtod_l+0x990>
 8013fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013fdc:	4213      	tst	r3, r2
 8013fde:	d0e3      	beq.n	8013fa8 <_strtod_l+0x924>
 8013fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fe2:	0030      	movs	r0, r6
 8013fe4:	0039      	movs	r1, r7
 8013fe6:	9a08      	ldr	r2, [sp, #32]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d017      	beq.n	801401c <_strtod_l+0x998>
 8013fec:	f7ff fb32 	bl	8013654 <sulp>
 8013ff0:	0002      	movs	r2, r0
 8013ff2:	000b      	movs	r3, r1
 8013ff4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013ff6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013ff8:	f7ed f820 	bl	800103c <__aeabi_dadd>
 8013ffc:	0006      	movs	r6, r0
 8013ffe:	000f      	movs	r7, r1
 8014000:	e7d2      	b.n	8013fa8 <_strtod_l+0x924>
 8014002:	2601      	movs	r6, #1
 8014004:	4013      	ands	r3, r2
 8014006:	4a99      	ldr	r2, [pc, #612]	; (801426c <_strtod_l+0xbe8>)
 8014008:	4276      	negs	r6, r6
 801400a:	189b      	adds	r3, r3, r2
 801400c:	4a98      	ldr	r2, [pc, #608]	; (8014270 <_strtod_l+0xbec>)
 801400e:	431a      	orrs	r2, r3
 8014010:	0017      	movs	r7, r2
 8014012:	e7c9      	b.n	8013fa8 <_strtod_l+0x924>
 8014014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014016:	4233      	tst	r3, r6
 8014018:	d0c6      	beq.n	8013fa8 <_strtod_l+0x924>
 801401a:	e7e1      	b.n	8013fe0 <_strtod_l+0x95c>
 801401c:	f7ff fb1a 	bl	8013654 <sulp>
 8014020:	0002      	movs	r2, r0
 8014022:	000b      	movs	r3, r1
 8014024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014026:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014028:	f7ee f9b2 	bl	8002390 <__aeabi_dsub>
 801402c:	2200      	movs	r2, #0
 801402e:	2300      	movs	r3, #0
 8014030:	0006      	movs	r6, r0
 8014032:	000f      	movs	r7, r1
 8014034:	f7ec fa12 	bl	800045c <__aeabi_dcmpeq>
 8014038:	2800      	cmp	r0, #0
 801403a:	d0b5      	beq.n	8013fa8 <_strtod_l+0x924>
 801403c:	e5ff      	b.n	8013c3e <_strtod_l+0x5ba>
 801403e:	9907      	ldr	r1, [sp, #28]
 8014040:	9806      	ldr	r0, [sp, #24]
 8014042:	f003 fbe9 	bl	8017818 <__ratio>
 8014046:	2380      	movs	r3, #128	; 0x80
 8014048:	2200      	movs	r2, #0
 801404a:	05db      	lsls	r3, r3, #23
 801404c:	0004      	movs	r4, r0
 801404e:	000d      	movs	r5, r1
 8014050:	f7ec fa14 	bl	800047c <__aeabi_dcmple>
 8014054:	2800      	cmp	r0, #0
 8014056:	d075      	beq.n	8014144 <_strtod_l+0xac0>
 8014058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801405a:	2b00      	cmp	r3, #0
 801405c:	d047      	beq.n	80140ee <_strtod_l+0xa6a>
 801405e:	2300      	movs	r3, #0
 8014060:	4c84      	ldr	r4, [pc, #528]	; (8014274 <_strtod_l+0xbf0>)
 8014062:	2500      	movs	r5, #0
 8014064:	9310      	str	r3, [sp, #64]	; 0x40
 8014066:	9411      	str	r4, [sp, #68]	; 0x44
 8014068:	4c82      	ldr	r4, [pc, #520]	; (8014274 <_strtod_l+0xbf0>)
 801406a:	4a83      	ldr	r2, [pc, #524]	; (8014278 <_strtod_l+0xbf4>)
 801406c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801406e:	4013      	ands	r3, r2
 8014070:	9314      	str	r3, [sp, #80]	; 0x50
 8014072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014074:	4b81      	ldr	r3, [pc, #516]	; (801427c <_strtod_l+0xbf8>)
 8014076:	429a      	cmp	r2, r3
 8014078:	d000      	beq.n	801407c <_strtod_l+0x9f8>
 801407a:	e0ac      	b.n	80141d6 <_strtod_l+0xb52>
 801407c:	4a80      	ldr	r2, [pc, #512]	; (8014280 <_strtod_l+0xbfc>)
 801407e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014080:	4694      	mov	ip, r2
 8014082:	4463      	add	r3, ip
 8014084:	001f      	movs	r7, r3
 8014086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801408a:	0030      	movs	r0, r6
 801408c:	0039      	movs	r1, r7
 801408e:	920c      	str	r2, [sp, #48]	; 0x30
 8014090:	930d      	str	r3, [sp, #52]	; 0x34
 8014092:	f003 fae9 	bl	8017668 <__ulp>
 8014096:	0002      	movs	r2, r0
 8014098:	000b      	movs	r3, r1
 801409a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801409c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801409e:	f7ed ff0b 	bl	8001eb8 <__aeabi_dmul>
 80140a2:	0032      	movs	r2, r6
 80140a4:	003b      	movs	r3, r7
 80140a6:	f7ec ffc9 	bl	800103c <__aeabi_dadd>
 80140aa:	4a73      	ldr	r2, [pc, #460]	; (8014278 <_strtod_l+0xbf4>)
 80140ac:	4b75      	ldr	r3, [pc, #468]	; (8014284 <_strtod_l+0xc00>)
 80140ae:	0006      	movs	r6, r0
 80140b0:	400a      	ands	r2, r1
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d95e      	bls.n	8014174 <_strtod_l+0xaf0>
 80140b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80140b8:	4b73      	ldr	r3, [pc, #460]	; (8014288 <_strtod_l+0xc04>)
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d103      	bne.n	80140c6 <_strtod_l+0xa42>
 80140be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140c0:	3301      	adds	r3, #1
 80140c2:	d100      	bne.n	80140c6 <_strtod_l+0xa42>
 80140c4:	e548      	b.n	8013b58 <_strtod_l+0x4d4>
 80140c6:	2601      	movs	r6, #1
 80140c8:	4f6f      	ldr	r7, [pc, #444]	; (8014288 <_strtod_l+0xc04>)
 80140ca:	4276      	negs	r6, r6
 80140cc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80140ce:	9805      	ldr	r0, [sp, #20]
 80140d0:	f002 ffbe 	bl	8017050 <_Bfree>
 80140d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140d6:	9805      	ldr	r0, [sp, #20]
 80140d8:	f002 ffba 	bl	8017050 <_Bfree>
 80140dc:	9907      	ldr	r1, [sp, #28]
 80140de:	9805      	ldr	r0, [sp, #20]
 80140e0:	f002 ffb6 	bl	8017050 <_Bfree>
 80140e4:	9906      	ldr	r1, [sp, #24]
 80140e6:	9805      	ldr	r0, [sp, #20]
 80140e8:	f002 ffb2 	bl	8017050 <_Bfree>
 80140ec:	e61d      	b.n	8013d2a <_strtod_l+0x6a6>
 80140ee:	2e00      	cmp	r6, #0
 80140f0:	d11c      	bne.n	801412c <_strtod_l+0xaa8>
 80140f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140f4:	031b      	lsls	r3, r3, #12
 80140f6:	d11f      	bne.n	8014138 <_strtod_l+0xab4>
 80140f8:	2200      	movs	r2, #0
 80140fa:	0020      	movs	r0, r4
 80140fc:	0029      	movs	r1, r5
 80140fe:	4b5d      	ldr	r3, [pc, #372]	; (8014274 <_strtod_l+0xbf0>)
 8014100:	f7ec f9b2 	bl	8000468 <__aeabi_dcmplt>
 8014104:	2800      	cmp	r0, #0
 8014106:	d11a      	bne.n	801413e <_strtod_l+0xaba>
 8014108:	0020      	movs	r0, r4
 801410a:	0029      	movs	r1, r5
 801410c:	2200      	movs	r2, #0
 801410e:	4b5f      	ldr	r3, [pc, #380]	; (801428c <_strtod_l+0xc08>)
 8014110:	f7ed fed2 	bl	8001eb8 <__aeabi_dmul>
 8014114:	0005      	movs	r5, r0
 8014116:	000c      	movs	r4, r1
 8014118:	2380      	movs	r3, #128	; 0x80
 801411a:	061b      	lsls	r3, r3, #24
 801411c:	18e3      	adds	r3, r4, r3
 801411e:	951c      	str	r5, [sp, #112]	; 0x70
 8014120:	931d      	str	r3, [sp, #116]	; 0x74
 8014122:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014126:	9210      	str	r2, [sp, #64]	; 0x40
 8014128:	9311      	str	r3, [sp, #68]	; 0x44
 801412a:	e79e      	b.n	801406a <_strtod_l+0x9e6>
 801412c:	2e01      	cmp	r6, #1
 801412e:	d103      	bne.n	8014138 <_strtod_l+0xab4>
 8014130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014132:	2b00      	cmp	r3, #0
 8014134:	d100      	bne.n	8014138 <_strtod_l+0xab4>
 8014136:	e582      	b.n	8013c3e <_strtod_l+0x5ba>
 8014138:	2300      	movs	r3, #0
 801413a:	4c55      	ldr	r4, [pc, #340]	; (8014290 <_strtod_l+0xc0c>)
 801413c:	e791      	b.n	8014062 <_strtod_l+0x9de>
 801413e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014140:	4c52      	ldr	r4, [pc, #328]	; (801428c <_strtod_l+0xc08>)
 8014142:	e7e9      	b.n	8014118 <_strtod_l+0xa94>
 8014144:	2200      	movs	r2, #0
 8014146:	0020      	movs	r0, r4
 8014148:	0029      	movs	r1, r5
 801414a:	4b50      	ldr	r3, [pc, #320]	; (801428c <_strtod_l+0xc08>)
 801414c:	f7ed feb4 	bl	8001eb8 <__aeabi_dmul>
 8014150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014152:	0005      	movs	r5, r0
 8014154:	000b      	movs	r3, r1
 8014156:	000c      	movs	r4, r1
 8014158:	2a00      	cmp	r2, #0
 801415a:	d107      	bne.n	801416c <_strtod_l+0xae8>
 801415c:	2280      	movs	r2, #128	; 0x80
 801415e:	0612      	lsls	r2, r2, #24
 8014160:	188b      	adds	r3, r1, r2
 8014162:	9016      	str	r0, [sp, #88]	; 0x58
 8014164:	9317      	str	r3, [sp, #92]	; 0x5c
 8014166:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801416a:	e7dc      	b.n	8014126 <_strtod_l+0xaa2>
 801416c:	0002      	movs	r2, r0
 801416e:	9216      	str	r2, [sp, #88]	; 0x58
 8014170:	9317      	str	r3, [sp, #92]	; 0x5c
 8014172:	e7f8      	b.n	8014166 <_strtod_l+0xae2>
 8014174:	23d4      	movs	r3, #212	; 0xd4
 8014176:	049b      	lsls	r3, r3, #18
 8014178:	18cf      	adds	r7, r1, r3
 801417a:	9b08      	ldr	r3, [sp, #32]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d1a5      	bne.n	80140cc <_strtod_l+0xa48>
 8014180:	4b3d      	ldr	r3, [pc, #244]	; (8014278 <_strtod_l+0xbf4>)
 8014182:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014184:	403b      	ands	r3, r7
 8014186:	429a      	cmp	r2, r3
 8014188:	d1a0      	bne.n	80140cc <_strtod_l+0xa48>
 801418a:	0028      	movs	r0, r5
 801418c:	0021      	movs	r1, r4
 801418e:	f7ec fa51 	bl	8000634 <__aeabi_d2lz>
 8014192:	f7ec fa8b 	bl	80006ac <__aeabi_l2d>
 8014196:	0002      	movs	r2, r0
 8014198:	000b      	movs	r3, r1
 801419a:	0028      	movs	r0, r5
 801419c:	0021      	movs	r1, r4
 801419e:	f7ee f8f7 	bl	8002390 <__aeabi_dsub>
 80141a2:	033b      	lsls	r3, r7, #12
 80141a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141a6:	0b1b      	lsrs	r3, r3, #12
 80141a8:	4333      	orrs	r3, r6
 80141aa:	4313      	orrs	r3, r2
 80141ac:	0004      	movs	r4, r0
 80141ae:	000d      	movs	r5, r1
 80141b0:	4a38      	ldr	r2, [pc, #224]	; (8014294 <_strtod_l+0xc10>)
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d055      	beq.n	8014262 <_strtod_l+0xbde>
 80141b6:	4b38      	ldr	r3, [pc, #224]	; (8014298 <_strtod_l+0xc14>)
 80141b8:	f7ec f956 	bl	8000468 <__aeabi_dcmplt>
 80141bc:	2800      	cmp	r0, #0
 80141be:	d000      	beq.n	80141c2 <_strtod_l+0xb3e>
 80141c0:	e4d3      	b.n	8013b6a <_strtod_l+0x4e6>
 80141c2:	0020      	movs	r0, r4
 80141c4:	0029      	movs	r1, r5
 80141c6:	4a35      	ldr	r2, [pc, #212]	; (801429c <_strtod_l+0xc18>)
 80141c8:	4b30      	ldr	r3, [pc, #192]	; (801428c <_strtod_l+0xc08>)
 80141ca:	f7ec f961 	bl	8000490 <__aeabi_dcmpgt>
 80141ce:	2800      	cmp	r0, #0
 80141d0:	d100      	bne.n	80141d4 <_strtod_l+0xb50>
 80141d2:	e77b      	b.n	80140cc <_strtod_l+0xa48>
 80141d4:	e4c9      	b.n	8013b6a <_strtod_l+0x4e6>
 80141d6:	9b08      	ldr	r3, [sp, #32]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d02b      	beq.n	8014234 <_strtod_l+0xbb0>
 80141dc:	23d4      	movs	r3, #212	; 0xd4
 80141de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80141e0:	04db      	lsls	r3, r3, #19
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d826      	bhi.n	8014234 <_strtod_l+0xbb0>
 80141e6:	0028      	movs	r0, r5
 80141e8:	0021      	movs	r1, r4
 80141ea:	4a2d      	ldr	r2, [pc, #180]	; (80142a0 <_strtod_l+0xc1c>)
 80141ec:	4b2d      	ldr	r3, [pc, #180]	; (80142a4 <_strtod_l+0xc20>)
 80141ee:	f7ec f945 	bl	800047c <__aeabi_dcmple>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d017      	beq.n	8014226 <_strtod_l+0xba2>
 80141f6:	0028      	movs	r0, r5
 80141f8:	0021      	movs	r1, r4
 80141fa:	f7ec f9fd 	bl	80005f8 <__aeabi_d2uiz>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d100      	bne.n	8014204 <_strtod_l+0xb80>
 8014202:	3001      	adds	r0, #1
 8014204:	f7ee fcda 	bl	8002bbc <__aeabi_ui2d>
 8014208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801420a:	0005      	movs	r5, r0
 801420c:	000b      	movs	r3, r1
 801420e:	000c      	movs	r4, r1
 8014210:	2a00      	cmp	r2, #0
 8014212:	d122      	bne.n	801425a <_strtod_l+0xbd6>
 8014214:	2280      	movs	r2, #128	; 0x80
 8014216:	0612      	lsls	r2, r2, #24
 8014218:	188b      	adds	r3, r1, r2
 801421a:	9018      	str	r0, [sp, #96]	; 0x60
 801421c:	9319      	str	r3, [sp, #100]	; 0x64
 801421e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014220:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014222:	9210      	str	r2, [sp, #64]	; 0x40
 8014224:	9311      	str	r3, [sp, #68]	; 0x44
 8014226:	22d6      	movs	r2, #214	; 0xd6
 8014228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801422a:	04d2      	lsls	r2, r2, #19
 801422c:	189b      	adds	r3, r3, r2
 801422e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014230:	1a9b      	subs	r3, r3, r2
 8014232:	9311      	str	r3, [sp, #68]	; 0x44
 8014234:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014236:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014238:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801423a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801423c:	f003 fa14 	bl	8017668 <__ulp>
 8014240:	0002      	movs	r2, r0
 8014242:	000b      	movs	r3, r1
 8014244:	0030      	movs	r0, r6
 8014246:	0039      	movs	r1, r7
 8014248:	f7ed fe36 	bl	8001eb8 <__aeabi_dmul>
 801424c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801424e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014250:	f7ec fef4 	bl	800103c <__aeabi_dadd>
 8014254:	0006      	movs	r6, r0
 8014256:	000f      	movs	r7, r1
 8014258:	e78f      	b.n	801417a <_strtod_l+0xaf6>
 801425a:	0002      	movs	r2, r0
 801425c:	9218      	str	r2, [sp, #96]	; 0x60
 801425e:	9319      	str	r3, [sp, #100]	; 0x64
 8014260:	e7dd      	b.n	801421e <_strtod_l+0xb9a>
 8014262:	4b11      	ldr	r3, [pc, #68]	; (80142a8 <_strtod_l+0xc24>)
 8014264:	f7ec f900 	bl	8000468 <__aeabi_dcmplt>
 8014268:	e7b1      	b.n	80141ce <_strtod_l+0xb4a>
 801426a:	46c0      	nop			; (mov r8, r8)
 801426c:	fff00000 	.word	0xfff00000
 8014270:	000fffff 	.word	0x000fffff
 8014274:	3ff00000 	.word	0x3ff00000
 8014278:	7ff00000 	.word	0x7ff00000
 801427c:	7fe00000 	.word	0x7fe00000
 8014280:	fcb00000 	.word	0xfcb00000
 8014284:	7c9fffff 	.word	0x7c9fffff
 8014288:	7fefffff 	.word	0x7fefffff
 801428c:	3fe00000 	.word	0x3fe00000
 8014290:	bff00000 	.word	0xbff00000
 8014294:	94a03595 	.word	0x94a03595
 8014298:	3fdfffff 	.word	0x3fdfffff
 801429c:	35afe535 	.word	0x35afe535
 80142a0:	ffc00000 	.word	0xffc00000
 80142a4:	41dfffff 	.word	0x41dfffff
 80142a8:	3fcfffff 	.word	0x3fcfffff

080142ac <strtod>:
 80142ac:	b510      	push	{r4, lr}
 80142ae:	000a      	movs	r2, r1
 80142b0:	0001      	movs	r1, r0
 80142b2:	4803      	ldr	r0, [pc, #12]	; (80142c0 <strtod+0x14>)
 80142b4:	4b03      	ldr	r3, [pc, #12]	; (80142c4 <strtod+0x18>)
 80142b6:	6800      	ldr	r0, [r0, #0]
 80142b8:	f7ff f9e4 	bl	8013684 <_strtod_l>
 80142bc:	bd10      	pop	{r4, pc}
 80142be:	46c0      	nop			; (mov r8, r8)
 80142c0:	200000d0 	.word	0x200000d0
 80142c4:	20000918 	.word	0x20000918

080142c8 <strtok>:
 80142c8:	4b03      	ldr	r3, [pc, #12]	; (80142d8 <strtok+0x10>)
 80142ca:	b510      	push	{r4, lr}
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	2301      	movs	r3, #1
 80142d0:	325c      	adds	r2, #92	; 0x5c
 80142d2:	f000 f803 	bl	80142dc <__strtok_r>
 80142d6:	bd10      	pop	{r4, pc}
 80142d8:	200000d0 	.word	0x200000d0

080142dc <__strtok_r>:
 80142dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142de:	2800      	cmp	r0, #0
 80142e0:	d102      	bne.n	80142e8 <__strtok_r+0xc>
 80142e2:	6810      	ldr	r0, [r2, #0]
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d013      	beq.n	8014310 <__strtok_r+0x34>
 80142e8:	0004      	movs	r4, r0
 80142ea:	0020      	movs	r0, r4
 80142ec:	000e      	movs	r6, r1
 80142ee:	7805      	ldrb	r5, [r0, #0]
 80142f0:	3401      	adds	r4, #1
 80142f2:	7837      	ldrb	r7, [r6, #0]
 80142f4:	2f00      	cmp	r7, #0
 80142f6:	d104      	bne.n	8014302 <__strtok_r+0x26>
 80142f8:	2d00      	cmp	r5, #0
 80142fa:	d10f      	bne.n	801431c <__strtok_r+0x40>
 80142fc:	0028      	movs	r0, r5
 80142fe:	6015      	str	r5, [r2, #0]
 8014300:	e006      	b.n	8014310 <__strtok_r+0x34>
 8014302:	3601      	adds	r6, #1
 8014304:	42bd      	cmp	r5, r7
 8014306:	d1f4      	bne.n	80142f2 <__strtok_r+0x16>
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1ee      	bne.n	80142ea <__strtok_r+0xe>
 801430c:	6014      	str	r4, [r2, #0]
 801430e:	7003      	strb	r3, [r0, #0]
 8014310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014312:	002f      	movs	r7, r5
 8014314:	e00f      	b.n	8014336 <__strtok_r+0x5a>
 8014316:	3301      	adds	r3, #1
 8014318:	2e00      	cmp	r6, #0
 801431a:	d104      	bne.n	8014326 <__strtok_r+0x4a>
 801431c:	0023      	movs	r3, r4
 801431e:	3401      	adds	r4, #1
 8014320:	781d      	ldrb	r5, [r3, #0]
 8014322:	0027      	movs	r7, r4
 8014324:	000b      	movs	r3, r1
 8014326:	781e      	ldrb	r6, [r3, #0]
 8014328:	42b5      	cmp	r5, r6
 801432a:	d1f4      	bne.n	8014316 <__strtok_r+0x3a>
 801432c:	2d00      	cmp	r5, #0
 801432e:	d0f0      	beq.n	8014312 <__strtok_r+0x36>
 8014330:	2300      	movs	r3, #0
 8014332:	3c01      	subs	r4, #1
 8014334:	7023      	strb	r3, [r4, #0]
 8014336:	6017      	str	r7, [r2, #0]
 8014338:	e7ea      	b.n	8014310 <__strtok_r+0x34>
	...

0801433c <_strtol_l.constprop.0>:
 801433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801433e:	b087      	sub	sp, #28
 8014340:	001e      	movs	r6, r3
 8014342:	9005      	str	r0, [sp, #20]
 8014344:	9101      	str	r1, [sp, #4]
 8014346:	9202      	str	r2, [sp, #8]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d045      	beq.n	80143d8 <_strtol_l.constprop.0+0x9c>
 801434c:	000b      	movs	r3, r1
 801434e:	2e24      	cmp	r6, #36	; 0x24
 8014350:	d842      	bhi.n	80143d8 <_strtol_l.constprop.0+0x9c>
 8014352:	4a3f      	ldr	r2, [pc, #252]	; (8014450 <_strtol_l.constprop.0+0x114>)
 8014354:	2108      	movs	r1, #8
 8014356:	4694      	mov	ip, r2
 8014358:	001a      	movs	r2, r3
 801435a:	4660      	mov	r0, ip
 801435c:	7814      	ldrb	r4, [r2, #0]
 801435e:	3301      	adds	r3, #1
 8014360:	5d00      	ldrb	r0, [r0, r4]
 8014362:	001d      	movs	r5, r3
 8014364:	0007      	movs	r7, r0
 8014366:	400f      	ands	r7, r1
 8014368:	4208      	tst	r0, r1
 801436a:	d1f5      	bne.n	8014358 <_strtol_l.constprop.0+0x1c>
 801436c:	2c2d      	cmp	r4, #45	; 0x2d
 801436e:	d13a      	bne.n	80143e6 <_strtol_l.constprop.0+0xaa>
 8014370:	2701      	movs	r7, #1
 8014372:	781c      	ldrb	r4, [r3, #0]
 8014374:	1c95      	adds	r5, r2, #2
 8014376:	2e00      	cmp	r6, #0
 8014378:	d065      	beq.n	8014446 <_strtol_l.constprop.0+0x10a>
 801437a:	2e10      	cmp	r6, #16
 801437c:	d109      	bne.n	8014392 <_strtol_l.constprop.0+0x56>
 801437e:	2c30      	cmp	r4, #48	; 0x30
 8014380:	d107      	bne.n	8014392 <_strtol_l.constprop.0+0x56>
 8014382:	2220      	movs	r2, #32
 8014384:	782b      	ldrb	r3, [r5, #0]
 8014386:	4393      	bics	r3, r2
 8014388:	2b58      	cmp	r3, #88	; 0x58
 801438a:	d157      	bne.n	801443c <_strtol_l.constprop.0+0x100>
 801438c:	2610      	movs	r6, #16
 801438e:	786c      	ldrb	r4, [r5, #1]
 8014390:	3502      	adds	r5, #2
 8014392:	4b30      	ldr	r3, [pc, #192]	; (8014454 <_strtol_l.constprop.0+0x118>)
 8014394:	0031      	movs	r1, r6
 8014396:	18fb      	adds	r3, r7, r3
 8014398:	0018      	movs	r0, r3
 801439a:	9303      	str	r3, [sp, #12]
 801439c:	f7eb ff5e 	bl	800025c <__aeabi_uidivmod>
 80143a0:	2300      	movs	r3, #0
 80143a2:	2201      	movs	r2, #1
 80143a4:	4684      	mov	ip, r0
 80143a6:	0018      	movs	r0, r3
 80143a8:	9104      	str	r1, [sp, #16]
 80143aa:	4252      	negs	r2, r2
 80143ac:	0021      	movs	r1, r4
 80143ae:	3930      	subs	r1, #48	; 0x30
 80143b0:	2909      	cmp	r1, #9
 80143b2:	d81d      	bhi.n	80143f0 <_strtol_l.constprop.0+0xb4>
 80143b4:	000c      	movs	r4, r1
 80143b6:	42a6      	cmp	r6, r4
 80143b8:	dd28      	ble.n	801440c <_strtol_l.constprop.0+0xd0>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	db24      	blt.n	8014408 <_strtol_l.constprop.0+0xcc>
 80143be:	0013      	movs	r3, r2
 80143c0:	4584      	cmp	ip, r0
 80143c2:	d306      	bcc.n	80143d2 <_strtol_l.constprop.0+0x96>
 80143c4:	d102      	bne.n	80143cc <_strtol_l.constprop.0+0x90>
 80143c6:	9904      	ldr	r1, [sp, #16]
 80143c8:	42a1      	cmp	r1, r4
 80143ca:	db02      	blt.n	80143d2 <_strtol_l.constprop.0+0x96>
 80143cc:	2301      	movs	r3, #1
 80143ce:	4370      	muls	r0, r6
 80143d0:	1820      	adds	r0, r4, r0
 80143d2:	782c      	ldrb	r4, [r5, #0]
 80143d4:	3501      	adds	r5, #1
 80143d6:	e7e9      	b.n	80143ac <_strtol_l.constprop.0+0x70>
 80143d8:	f7fe fc7a 	bl	8012cd0 <__errno>
 80143dc:	2316      	movs	r3, #22
 80143de:	6003      	str	r3, [r0, #0]
 80143e0:	2000      	movs	r0, #0
 80143e2:	b007      	add	sp, #28
 80143e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143e6:	2c2b      	cmp	r4, #43	; 0x2b
 80143e8:	d1c5      	bne.n	8014376 <_strtol_l.constprop.0+0x3a>
 80143ea:	781c      	ldrb	r4, [r3, #0]
 80143ec:	1c95      	adds	r5, r2, #2
 80143ee:	e7c2      	b.n	8014376 <_strtol_l.constprop.0+0x3a>
 80143f0:	0021      	movs	r1, r4
 80143f2:	3941      	subs	r1, #65	; 0x41
 80143f4:	2919      	cmp	r1, #25
 80143f6:	d801      	bhi.n	80143fc <_strtol_l.constprop.0+0xc0>
 80143f8:	3c37      	subs	r4, #55	; 0x37
 80143fa:	e7dc      	b.n	80143b6 <_strtol_l.constprop.0+0x7a>
 80143fc:	0021      	movs	r1, r4
 80143fe:	3961      	subs	r1, #97	; 0x61
 8014400:	2919      	cmp	r1, #25
 8014402:	d803      	bhi.n	801440c <_strtol_l.constprop.0+0xd0>
 8014404:	3c57      	subs	r4, #87	; 0x57
 8014406:	e7d6      	b.n	80143b6 <_strtol_l.constprop.0+0x7a>
 8014408:	0013      	movs	r3, r2
 801440a:	e7e2      	b.n	80143d2 <_strtol_l.constprop.0+0x96>
 801440c:	2b00      	cmp	r3, #0
 801440e:	da09      	bge.n	8014424 <_strtol_l.constprop.0+0xe8>
 8014410:	2322      	movs	r3, #34	; 0x22
 8014412:	9a05      	ldr	r2, [sp, #20]
 8014414:	9803      	ldr	r0, [sp, #12]
 8014416:	6013      	str	r3, [r2, #0]
 8014418:	9b02      	ldr	r3, [sp, #8]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d0e1      	beq.n	80143e2 <_strtol_l.constprop.0+0xa6>
 801441e:	1e6b      	subs	r3, r5, #1
 8014420:	9301      	str	r3, [sp, #4]
 8014422:	e007      	b.n	8014434 <_strtol_l.constprop.0+0xf8>
 8014424:	2f00      	cmp	r7, #0
 8014426:	d000      	beq.n	801442a <_strtol_l.constprop.0+0xee>
 8014428:	4240      	negs	r0, r0
 801442a:	9a02      	ldr	r2, [sp, #8]
 801442c:	2a00      	cmp	r2, #0
 801442e:	d0d8      	beq.n	80143e2 <_strtol_l.constprop.0+0xa6>
 8014430:	2b00      	cmp	r3, #0
 8014432:	d1f4      	bne.n	801441e <_strtol_l.constprop.0+0xe2>
 8014434:	9b02      	ldr	r3, [sp, #8]
 8014436:	9a01      	ldr	r2, [sp, #4]
 8014438:	601a      	str	r2, [r3, #0]
 801443a:	e7d2      	b.n	80143e2 <_strtol_l.constprop.0+0xa6>
 801443c:	2430      	movs	r4, #48	; 0x30
 801443e:	2e00      	cmp	r6, #0
 8014440:	d1a7      	bne.n	8014392 <_strtol_l.constprop.0+0x56>
 8014442:	3608      	adds	r6, #8
 8014444:	e7a5      	b.n	8014392 <_strtol_l.constprop.0+0x56>
 8014446:	2c30      	cmp	r4, #48	; 0x30
 8014448:	d09b      	beq.n	8014382 <_strtol_l.constprop.0+0x46>
 801444a:	260a      	movs	r6, #10
 801444c:	e7a1      	b.n	8014392 <_strtol_l.constprop.0+0x56>
 801444e:	46c0      	nop			; (mov r8, r8)
 8014450:	0801c3d2 	.word	0x0801c3d2
 8014454:	7fffffff 	.word	0x7fffffff

08014458 <strtol>:
 8014458:	b510      	push	{r4, lr}
 801445a:	0013      	movs	r3, r2
 801445c:	000a      	movs	r2, r1
 801445e:	0001      	movs	r1, r0
 8014460:	4802      	ldr	r0, [pc, #8]	; (801446c <strtol+0x14>)
 8014462:	6800      	ldr	r0, [r0, #0]
 8014464:	f7ff ff6a 	bl	801433c <_strtol_l.constprop.0>
 8014468:	bd10      	pop	{r4, pc}
 801446a:	46c0      	nop			; (mov r8, r8)
 801446c:	200000d0 	.word	0x200000d0

08014470 <_svfprintf_r>:
 8014470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014472:	b0d9      	sub	sp, #356	; 0x164
 8014474:	001c      	movs	r4, r3
 8014476:	910b      	str	r1, [sp, #44]	; 0x2c
 8014478:	9208      	str	r2, [sp, #32]
 801447a:	900a      	str	r0, [sp, #40]	; 0x28
 801447c:	f002 fd88 	bl	8016f90 <_localeconv_r>
 8014480:	6803      	ldr	r3, [r0, #0]
 8014482:	0018      	movs	r0, r3
 8014484:	931c      	str	r3, [sp, #112]	; 0x70
 8014486:	f7eb fe47 	bl	8000118 <strlen>
 801448a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801448c:	9016      	str	r0, [sp, #88]	; 0x58
 801448e:	899b      	ldrh	r3, [r3, #12]
 8014490:	061b      	lsls	r3, r3, #24
 8014492:	d518      	bpl.n	80144c6 <_svfprintf_r+0x56>
 8014494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	9309      	str	r3, [sp, #36]	; 0x24
 801449a:	2b00      	cmp	r3, #0
 801449c:	d113      	bne.n	80144c6 <_svfprintf_r+0x56>
 801449e:	2140      	movs	r1, #64	; 0x40
 80144a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80144a2:	f7fe fc53 	bl	8012d4c <_malloc_r>
 80144a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144a8:	6018      	str	r0, [r3, #0]
 80144aa:	6118      	str	r0, [r3, #16]
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d107      	bne.n	80144c0 <_svfprintf_r+0x50>
 80144b0:	230c      	movs	r3, #12
 80144b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144b4:	6013      	str	r3, [r2, #0]
 80144b6:	3b0d      	subs	r3, #13
 80144b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80144ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80144bc:	b059      	add	sp, #356	; 0x164
 80144be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144c0:	2340      	movs	r3, #64	; 0x40
 80144c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144c4:	6153      	str	r3, [r2, #20]
 80144c6:	2300      	movs	r3, #0
 80144c8:	2200      	movs	r2, #0
 80144ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80144cc:	932d      	str	r3, [sp, #180]	; 0xb4
 80144ce:	930e      	str	r3, [sp, #56]	; 0x38
 80144d0:	2300      	movs	r3, #0
 80144d2:	9214      	str	r2, [sp, #80]	; 0x50
 80144d4:	9315      	str	r3, [sp, #84]	; 0x54
 80144d6:	2300      	movs	r3, #0
 80144d8:	af2f      	add	r7, sp, #188	; 0xbc
 80144da:	972c      	str	r7, [sp, #176]	; 0xb0
 80144dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80144de:	931e      	str	r3, [sp, #120]	; 0x78
 80144e0:	9312      	str	r3, [sp, #72]	; 0x48
 80144e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80144e4:	931d      	str	r3, [sp, #116]	; 0x74
 80144e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80144e8:	9d08      	ldr	r5, [sp, #32]
 80144ea:	782b      	ldrb	r3, [r5, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d002      	beq.n	80144f6 <_svfprintf_r+0x86>
 80144f0:	2b25      	cmp	r3, #37	; 0x25
 80144f2:	d000      	beq.n	80144f6 <_svfprintf_r+0x86>
 80144f4:	e092      	b.n	801461c <_svfprintf_r+0x1ac>
 80144f6:	9b08      	ldr	r3, [sp, #32]
 80144f8:	1aee      	subs	r6, r5, r3
 80144fa:	429d      	cmp	r5, r3
 80144fc:	d017      	beq.n	801452e <_svfprintf_r+0xbe>
 80144fe:	603b      	str	r3, [r7, #0]
 8014500:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014502:	607e      	str	r6, [r7, #4]
 8014504:	199b      	adds	r3, r3, r6
 8014506:	932e      	str	r3, [sp, #184]	; 0xb8
 8014508:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801450a:	3708      	adds	r7, #8
 801450c:	9309      	str	r3, [sp, #36]	; 0x24
 801450e:	3301      	adds	r3, #1
 8014510:	932d      	str	r3, [sp, #180]	; 0xb4
 8014512:	2b07      	cmp	r3, #7
 8014514:	dd08      	ble.n	8014528 <_svfprintf_r+0xb8>
 8014516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014518:	980a      	ldr	r0, [sp, #40]	; 0x28
 801451a:	aa2c      	add	r2, sp, #176	; 0xb0
 801451c:	f003 fa22 	bl	8017964 <__ssprint_r>
 8014520:	2800      	cmp	r0, #0
 8014522:	d000      	beq.n	8014526 <_svfprintf_r+0xb6>
 8014524:	e1cf      	b.n	80148c6 <_svfprintf_r+0x456>
 8014526:	af2f      	add	r7, sp, #188	; 0xbc
 8014528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801452a:	199b      	adds	r3, r3, r6
 801452c:	9317      	str	r3, [sp, #92]	; 0x5c
 801452e:	782b      	ldrb	r3, [r5, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d101      	bne.n	8014538 <_svfprintf_r+0xc8>
 8014534:	f001 f9bc 	bl	80158b0 <_svfprintf_r+0x1440>
 8014538:	221b      	movs	r2, #27
 801453a:	2300      	movs	r3, #0
 801453c:	a91e      	add	r1, sp, #120	; 0x78
 801453e:	1852      	adds	r2, r2, r1
 8014540:	7013      	strb	r3, [r2, #0]
 8014542:	2201      	movs	r2, #1
 8014544:	001e      	movs	r6, r3
 8014546:	4252      	negs	r2, r2
 8014548:	3501      	adds	r5, #1
 801454a:	9209      	str	r2, [sp, #36]	; 0x24
 801454c:	9318      	str	r3, [sp, #96]	; 0x60
 801454e:	1c6b      	adds	r3, r5, #1
 8014550:	9313      	str	r3, [sp, #76]	; 0x4c
 8014552:	782b      	ldrb	r3, [r5, #0]
 8014554:	930f      	str	r3, [sp, #60]	; 0x3c
 8014556:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014558:	3820      	subs	r0, #32
 801455a:	285a      	cmp	r0, #90	; 0x5a
 801455c:	d901      	bls.n	8014562 <_svfprintf_r+0xf2>
 801455e:	f000 fe1f 	bl	80151a0 <_svfprintf_r+0xd30>
 8014562:	f7eb fdeb 	bl	800013c <__gnu_thumb1_case_uhi>
 8014566:	0078      	.short	0x0078
 8014568:	061d061d 	.word	0x061d061d
 801456c:	061d0082 	.word	0x061d0082
 8014570:	061d061d 	.word	0x061d061d
 8014574:	061d005d 	.word	0x061d005d
 8014578:	0084061d 	.word	0x0084061d
 801457c:	061d008c 	.word	0x061d008c
 8014580:	0091008a 	.word	0x0091008a
 8014584:	00b2061d 	.word	0x00b2061d
 8014588:	00b400b4 	.word	0x00b400b4
 801458c:	00b400b4 	.word	0x00b400b4
 8014590:	00b400b4 	.word	0x00b400b4
 8014594:	00b400b4 	.word	0x00b400b4
 8014598:	061d00b4 	.word	0x061d00b4
 801459c:	061d061d 	.word	0x061d061d
 80145a0:	061d061d 	.word	0x061d061d
 80145a4:	061d061d 	.word	0x061d061d
 80145a8:	061d013b 	.word	0x061d013b
 80145ac:	00f400e0 	.word	0x00f400e0
 80145b0:	013b013b 	.word	0x013b013b
 80145b4:	061d013b 	.word	0x061d013b
 80145b8:	061d061d 	.word	0x061d061d
 80145bc:	00c7061d 	.word	0x00c7061d
 80145c0:	061d061d 	.word	0x061d061d
 80145c4:	061d04d3 	.word	0x061d04d3
 80145c8:	061d061d 	.word	0x061d061d
 80145cc:	061d0517 	.word	0x061d0517
 80145d0:	061d0537 	.word	0x061d0537
 80145d4:	0564061d 	.word	0x0564061d
 80145d8:	061d061d 	.word	0x061d061d
 80145dc:	061d061d 	.word	0x061d061d
 80145e0:	061d061d 	.word	0x061d061d
 80145e4:	061d061d 	.word	0x061d061d
 80145e8:	061d013b 	.word	0x061d013b
 80145ec:	00f600e0 	.word	0x00f600e0
 80145f0:	013b013b 	.word	0x013b013b
 80145f4:	00c9013b 	.word	0x00c9013b
 80145f8:	00dc00f6 	.word	0x00dc00f6
 80145fc:	00d5061d 	.word	0x00d5061d
 8014600:	04b3061d 	.word	0x04b3061d
 8014604:	050604d5 	.word	0x050604d5
 8014608:	061d00dc 	.word	0x061d00dc
 801460c:	00800517 	.word	0x00800517
 8014610:	061d0539 	.word	0x061d0539
 8014614:	0584061d 	.word	0x0584061d
 8014618:	0080061d 	.word	0x0080061d
 801461c:	3501      	adds	r5, #1
 801461e:	e764      	b.n	80144ea <_svfprintf_r+0x7a>
 8014620:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014622:	f002 fcb5 	bl	8016f90 <_localeconv_r>
 8014626:	6843      	ldr	r3, [r0, #4]
 8014628:	0018      	movs	r0, r3
 801462a:	931d      	str	r3, [sp, #116]	; 0x74
 801462c:	f7eb fd74 	bl	8000118 <strlen>
 8014630:	901b      	str	r0, [sp, #108]	; 0x6c
 8014632:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014634:	f002 fcac 	bl	8016f90 <_localeconv_r>
 8014638:	6883      	ldr	r3, [r0, #8]
 801463a:	9312      	str	r3, [sp, #72]	; 0x48
 801463c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801463e:	2b00      	cmp	r3, #0
 8014640:	d011      	beq.n	8014666 <_svfprintf_r+0x1f6>
 8014642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014644:	2b00      	cmp	r3, #0
 8014646:	d00e      	beq.n	8014666 <_svfprintf_r+0x1f6>
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d00b      	beq.n	8014666 <_svfprintf_r+0x1f6>
 801464e:	2380      	movs	r3, #128	; 0x80
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	431e      	orrs	r6, r3
 8014654:	e007      	b.n	8014666 <_svfprintf_r+0x1f6>
 8014656:	231b      	movs	r3, #27
 8014658:	aa1e      	add	r2, sp, #120	; 0x78
 801465a:	189b      	adds	r3, r3, r2
 801465c:	781a      	ldrb	r2, [r3, #0]
 801465e:	2a00      	cmp	r2, #0
 8014660:	d101      	bne.n	8014666 <_svfprintf_r+0x1f6>
 8014662:	3220      	adds	r2, #32
 8014664:	701a      	strb	r2, [r3, #0]
 8014666:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014668:	e771      	b.n	801454e <_svfprintf_r+0xde>
 801466a:	2301      	movs	r3, #1
 801466c:	e7f1      	b.n	8014652 <_svfprintf_r+0x1e2>
 801466e:	cc08      	ldmia	r4!, {r3}
 8014670:	9318      	str	r3, [sp, #96]	; 0x60
 8014672:	2b00      	cmp	r3, #0
 8014674:	daf7      	bge.n	8014666 <_svfprintf_r+0x1f6>
 8014676:	425b      	negs	r3, r3
 8014678:	9318      	str	r3, [sp, #96]	; 0x60
 801467a:	2304      	movs	r3, #4
 801467c:	e7e9      	b.n	8014652 <_svfprintf_r+0x1e2>
 801467e:	231b      	movs	r3, #27
 8014680:	aa1e      	add	r2, sp, #120	; 0x78
 8014682:	189b      	adds	r3, r3, r2
 8014684:	222b      	movs	r2, #43	; 0x2b
 8014686:	e7ed      	b.n	8014664 <_svfprintf_r+0x1f4>
 8014688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801468a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801468c:	7812      	ldrb	r2, [r2, #0]
 801468e:	3301      	adds	r3, #1
 8014690:	920f      	str	r2, [sp, #60]	; 0x3c
 8014692:	2a2a      	cmp	r2, #42	; 0x2a
 8014694:	d010      	beq.n	80146b8 <_svfprintf_r+0x248>
 8014696:	2200      	movs	r2, #0
 8014698:	9209      	str	r2, [sp, #36]	; 0x24
 801469a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801469c:	9313      	str	r3, [sp, #76]	; 0x4c
 801469e:	3a30      	subs	r2, #48	; 0x30
 80146a0:	2a09      	cmp	r2, #9
 80146a2:	d900      	bls.n	80146a6 <_svfprintf_r+0x236>
 80146a4:	e757      	b.n	8014556 <_svfprintf_r+0xe6>
 80146a6:	210a      	movs	r1, #10
 80146a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146aa:	4348      	muls	r0, r1
 80146ac:	1882      	adds	r2, r0, r2
 80146ae:	9209      	str	r2, [sp, #36]	; 0x24
 80146b0:	781a      	ldrb	r2, [r3, #0]
 80146b2:	3301      	adds	r3, #1
 80146b4:	920f      	str	r2, [sp, #60]	; 0x3c
 80146b6:	e7f0      	b.n	801469a <_svfprintf_r+0x22a>
 80146b8:	cc04      	ldmia	r4!, {r2}
 80146ba:	9209      	str	r2, [sp, #36]	; 0x24
 80146bc:	2a00      	cmp	r2, #0
 80146be:	da02      	bge.n	80146c6 <_svfprintf_r+0x256>
 80146c0:	2201      	movs	r2, #1
 80146c2:	4252      	negs	r2, r2
 80146c4:	9209      	str	r2, [sp, #36]	; 0x24
 80146c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80146c8:	e7cd      	b.n	8014666 <_svfprintf_r+0x1f6>
 80146ca:	2380      	movs	r3, #128	; 0x80
 80146cc:	e7c1      	b.n	8014652 <_svfprintf_r+0x1e2>
 80146ce:	2200      	movs	r2, #0
 80146d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80146d2:	9218      	str	r2, [sp, #96]	; 0x60
 80146d4:	210a      	movs	r1, #10
 80146d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80146d8:	434a      	muls	r2, r1
 80146da:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80146dc:	3930      	subs	r1, #48	; 0x30
 80146de:	188a      	adds	r2, r1, r2
 80146e0:	9218      	str	r2, [sp, #96]	; 0x60
 80146e2:	001a      	movs	r2, r3
 80146e4:	7812      	ldrb	r2, [r2, #0]
 80146e6:	3301      	adds	r3, #1
 80146e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80146ea:	3a30      	subs	r2, #48	; 0x30
 80146ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80146ee:	2a09      	cmp	r2, #9
 80146f0:	d9f0      	bls.n	80146d4 <_svfprintf_r+0x264>
 80146f2:	e730      	b.n	8014556 <_svfprintf_r+0xe6>
 80146f4:	2308      	movs	r3, #8
 80146f6:	e7ac      	b.n	8014652 <_svfprintf_r+0x1e2>
 80146f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	2b68      	cmp	r3, #104	; 0x68
 80146fe:	d105      	bne.n	801470c <_svfprintf_r+0x29c>
 8014700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014702:	3301      	adds	r3, #1
 8014704:	9313      	str	r3, [sp, #76]	; 0x4c
 8014706:	2380      	movs	r3, #128	; 0x80
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	e7a2      	b.n	8014652 <_svfprintf_r+0x1e2>
 801470c:	2340      	movs	r3, #64	; 0x40
 801470e:	e7a0      	b.n	8014652 <_svfprintf_r+0x1e2>
 8014710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b6c      	cmp	r3, #108	; 0x6c
 8014716:	d104      	bne.n	8014722 <_svfprintf_r+0x2b2>
 8014718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801471a:	3301      	adds	r3, #1
 801471c:	9313      	str	r3, [sp, #76]	; 0x4c
 801471e:	2320      	movs	r3, #32
 8014720:	e797      	b.n	8014652 <_svfprintf_r+0x1e2>
 8014722:	2310      	movs	r3, #16
 8014724:	e795      	b.n	8014652 <_svfprintf_r+0x1e2>
 8014726:	0022      	movs	r2, r4
 8014728:	ca08      	ldmia	r2!, {r3}
 801472a:	a83f      	add	r0, sp, #252	; 0xfc
 801472c:	920d      	str	r2, [sp, #52]	; 0x34
 801472e:	221b      	movs	r2, #27
 8014730:	7003      	strb	r3, [r0, #0]
 8014732:	2300      	movs	r3, #0
 8014734:	a91e      	add	r1, sp, #120	; 0x78
 8014736:	1852      	adds	r2, r2, r1
 8014738:	7013      	strb	r3, [r2, #0]
 801473a:	930c      	str	r3, [sp, #48]	; 0x30
 801473c:	3301      	adds	r3, #1
 801473e:	9309      	str	r3, [sp, #36]	; 0x24
 8014740:	2300      	movs	r3, #0
 8014742:	9008      	str	r0, [sp, #32]
 8014744:	001d      	movs	r5, r3
 8014746:	9319      	str	r3, [sp, #100]	; 0x64
 8014748:	9310      	str	r3, [sp, #64]	; 0x40
 801474a:	9311      	str	r3, [sp, #68]	; 0x44
 801474c:	e1f1      	b.n	8014b32 <_svfprintf_r+0x6c2>
 801474e:	2310      	movs	r3, #16
 8014750:	431e      	orrs	r6, r3
 8014752:	06b3      	lsls	r3, r6, #26
 8014754:	d531      	bpl.n	80147ba <_svfprintf_r+0x34a>
 8014756:	2307      	movs	r3, #7
 8014758:	3407      	adds	r4, #7
 801475a:	439c      	bics	r4, r3
 801475c:	0022      	movs	r2, r4
 801475e:	ca18      	ldmia	r2!, {r3, r4}
 8014760:	9306      	str	r3, [sp, #24]
 8014762:	9407      	str	r4, [sp, #28]
 8014764:	920d      	str	r2, [sp, #52]	; 0x34
 8014766:	9a07      	ldr	r2, [sp, #28]
 8014768:	2301      	movs	r3, #1
 801476a:	2a00      	cmp	r2, #0
 801476c:	da0b      	bge.n	8014786 <_svfprintf_r+0x316>
 801476e:	9c06      	ldr	r4, [sp, #24]
 8014770:	9d07      	ldr	r5, [sp, #28]
 8014772:	2200      	movs	r2, #0
 8014774:	4261      	negs	r1, r4
 8014776:	41aa      	sbcs	r2, r5
 8014778:	9106      	str	r1, [sp, #24]
 801477a:	9207      	str	r2, [sp, #28]
 801477c:	221b      	movs	r2, #27
 801477e:	a91e      	add	r1, sp, #120	; 0x78
 8014780:	1852      	adds	r2, r2, r1
 8014782:	212d      	movs	r1, #45	; 0x2d
 8014784:	7011      	strb	r1, [r2, #0]
 8014786:	9907      	ldr	r1, [sp, #28]
 8014788:	9a06      	ldr	r2, [sp, #24]
 801478a:	430a      	orrs	r2, r1
 801478c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801478e:	3101      	adds	r1, #1
 8014790:	d101      	bne.n	8014796 <_svfprintf_r+0x326>
 8014792:	f001 f89a 	bl	80158ca <_svfprintf_r+0x145a>
 8014796:	2180      	movs	r1, #128	; 0x80
 8014798:	0035      	movs	r5, r6
 801479a:	438d      	bics	r5, r1
 801479c:	2a00      	cmp	r2, #0
 801479e:	d001      	beq.n	80147a4 <_svfprintf_r+0x334>
 80147a0:	f001 f898 	bl	80158d4 <_svfprintf_r+0x1464>
 80147a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147a6:	2a00      	cmp	r2, #0
 80147a8:	d101      	bne.n	80147ae <_svfprintf_r+0x33e>
 80147aa:	f000 fcec 	bl	8015186 <_svfprintf_r+0xd16>
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d001      	beq.n	80147b6 <_svfprintf_r+0x346>
 80147b2:	f001 f893 	bl	80158dc <_svfprintf_r+0x146c>
 80147b6:	f000 fc7e 	bl	80150b6 <_svfprintf_r+0xc46>
 80147ba:	0022      	movs	r2, r4
 80147bc:	ca08      	ldmia	r2!, {r3}
 80147be:	920d      	str	r2, [sp, #52]	; 0x34
 80147c0:	06f2      	lsls	r2, r6, #27
 80147c2:	d503      	bpl.n	80147cc <_svfprintf_r+0x35c>
 80147c4:	9306      	str	r3, [sp, #24]
 80147c6:	17db      	asrs	r3, r3, #31
 80147c8:	9307      	str	r3, [sp, #28]
 80147ca:	e7cc      	b.n	8014766 <_svfprintf_r+0x2f6>
 80147cc:	0672      	lsls	r2, r6, #25
 80147ce:	d501      	bpl.n	80147d4 <_svfprintf_r+0x364>
 80147d0:	b21b      	sxth	r3, r3
 80147d2:	e7f7      	b.n	80147c4 <_svfprintf_r+0x354>
 80147d4:	05b2      	lsls	r2, r6, #22
 80147d6:	d5f5      	bpl.n	80147c4 <_svfprintf_r+0x354>
 80147d8:	b25b      	sxtb	r3, r3
 80147da:	e7f3      	b.n	80147c4 <_svfprintf_r+0x354>
 80147dc:	2307      	movs	r3, #7
 80147de:	3407      	adds	r4, #7
 80147e0:	439c      	bics	r4, r3
 80147e2:	0022      	movs	r2, r4
 80147e4:	ca18      	ldmia	r2!, {r3, r4}
 80147e6:	920d      	str	r2, [sp, #52]	; 0x34
 80147e8:	2201      	movs	r2, #1
 80147ea:	9314      	str	r3, [sp, #80]	; 0x50
 80147ec:	9415      	str	r4, [sp, #84]	; 0x54
 80147ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80147f2:	005c      	lsls	r4, r3, #1
 80147f4:	0864      	lsrs	r4, r4, #1
 80147f6:	0028      	movs	r0, r5
 80147f8:	0021      	movs	r1, r4
 80147fa:	4b3e      	ldr	r3, [pc, #248]	; (80148f4 <_svfprintf_r+0x484>)
 80147fc:	4252      	negs	r2, r2
 80147fe:	f7ee f959 	bl	8002ab4 <__aeabi_dcmpun>
 8014802:	2800      	cmp	r0, #0
 8014804:	d126      	bne.n	8014854 <_svfprintf_r+0x3e4>
 8014806:	2201      	movs	r2, #1
 8014808:	0028      	movs	r0, r5
 801480a:	0021      	movs	r1, r4
 801480c:	4b39      	ldr	r3, [pc, #228]	; (80148f4 <_svfprintf_r+0x484>)
 801480e:	4252      	negs	r2, r2
 8014810:	f7eb fe34 	bl	800047c <__aeabi_dcmple>
 8014814:	2800      	cmp	r0, #0
 8014816:	d11d      	bne.n	8014854 <_svfprintf_r+0x3e4>
 8014818:	9814      	ldr	r0, [sp, #80]	; 0x50
 801481a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801481c:	2200      	movs	r2, #0
 801481e:	2300      	movs	r3, #0
 8014820:	f7eb fe22 	bl	8000468 <__aeabi_dcmplt>
 8014824:	2800      	cmp	r0, #0
 8014826:	d004      	beq.n	8014832 <_svfprintf_r+0x3c2>
 8014828:	231b      	movs	r3, #27
 801482a:	aa1e      	add	r2, sp, #120	; 0x78
 801482c:	189b      	adds	r3, r3, r2
 801482e:	222d      	movs	r2, #45	; 0x2d
 8014830:	701a      	strb	r2, [r3, #0]
 8014832:	4b31      	ldr	r3, [pc, #196]	; (80148f8 <_svfprintf_r+0x488>)
 8014834:	9308      	str	r3, [sp, #32]
 8014836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014838:	2b47      	cmp	r3, #71	; 0x47
 801483a:	dd01      	ble.n	8014840 <_svfprintf_r+0x3d0>
 801483c:	4b2f      	ldr	r3, [pc, #188]	; (80148fc <_svfprintf_r+0x48c>)
 801483e:	9308      	str	r3, [sp, #32]
 8014840:	2380      	movs	r3, #128	; 0x80
 8014842:	439e      	bics	r6, r3
 8014844:	2300      	movs	r3, #0
 8014846:	930c      	str	r3, [sp, #48]	; 0x30
 8014848:	3303      	adds	r3, #3
 801484a:	9309      	str	r3, [sp, #36]	; 0x24
 801484c:	2300      	movs	r3, #0
 801484e:	9319      	str	r3, [sp, #100]	; 0x64
 8014850:	f001 f873 	bl	801593a <_svfprintf_r+0x14ca>
 8014854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014856:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014858:	0010      	movs	r0, r2
 801485a:	0019      	movs	r1, r3
 801485c:	f7ee f92a 	bl	8002ab4 <__aeabi_dcmpun>
 8014860:	2800      	cmp	r0, #0
 8014862:	d00e      	beq.n	8014882 <_svfprintf_r+0x412>
 8014864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014866:	2b00      	cmp	r3, #0
 8014868:	da04      	bge.n	8014874 <_svfprintf_r+0x404>
 801486a:	231b      	movs	r3, #27
 801486c:	aa1e      	add	r2, sp, #120	; 0x78
 801486e:	189b      	adds	r3, r3, r2
 8014870:	222d      	movs	r2, #45	; 0x2d
 8014872:	701a      	strb	r2, [r3, #0]
 8014874:	4b22      	ldr	r3, [pc, #136]	; (8014900 <_svfprintf_r+0x490>)
 8014876:	9308      	str	r3, [sp, #32]
 8014878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801487a:	2b47      	cmp	r3, #71	; 0x47
 801487c:	dde0      	ble.n	8014840 <_svfprintf_r+0x3d0>
 801487e:	4b21      	ldr	r3, [pc, #132]	; (8014904 <_svfprintf_r+0x494>)
 8014880:	e7dd      	b.n	801483e <_svfprintf_r+0x3ce>
 8014882:	2320      	movs	r3, #32
 8014884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014886:	439a      	bics	r2, r3
 8014888:	9210      	str	r2, [sp, #64]	; 0x40
 801488a:	2a41      	cmp	r2, #65	; 0x41
 801488c:	d123      	bne.n	80148d6 <_svfprintf_r+0x466>
 801488e:	2230      	movs	r2, #48	; 0x30
 8014890:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014892:	ab25      	add	r3, sp, #148	; 0x94
 8014894:	701a      	strb	r2, [r3, #0]
 8014896:	3248      	adds	r2, #72	; 0x48
 8014898:	2961      	cmp	r1, #97	; 0x61
 801489a:	d000      	beq.n	801489e <_svfprintf_r+0x42e>
 801489c:	3a20      	subs	r2, #32
 801489e:	705a      	strb	r2, [r3, #1]
 80148a0:	2302      	movs	r3, #2
 80148a2:	431e      	orrs	r6, r3
 80148a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a6:	2b63      	cmp	r3, #99	; 0x63
 80148a8:	dd2e      	ble.n	8014908 <_svfprintf_r+0x498>
 80148aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80148ac:	1c59      	adds	r1, r3, #1
 80148ae:	f7fe fa4d 	bl	8012d4c <_malloc_r>
 80148b2:	9008      	str	r0, [sp, #32]
 80148b4:	2800      	cmp	r0, #0
 80148b6:	d000      	beq.n	80148ba <_svfprintf_r+0x44a>
 80148b8:	e221      	b.n	8014cfe <_svfprintf_r+0x88e>
 80148ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148bc:	899a      	ldrh	r2, [r3, #12]
 80148be:	2340      	movs	r3, #64	; 0x40
 80148c0:	4313      	orrs	r3, r2
 80148c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80148c4:	8193      	strh	r3, [r2, #12]
 80148c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148c8:	899b      	ldrh	r3, [r3, #12]
 80148ca:	065b      	lsls	r3, r3, #25
 80148cc:	d400      	bmi.n	80148d0 <_svfprintf_r+0x460>
 80148ce:	e5f4      	b.n	80144ba <_svfprintf_r+0x4a>
 80148d0:	2301      	movs	r3, #1
 80148d2:	425b      	negs	r3, r3
 80148d4:	e5f0      	b.n	80144b8 <_svfprintf_r+0x48>
 80148d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d8:	900c      	str	r0, [sp, #48]	; 0x30
 80148da:	3301      	adds	r3, #1
 80148dc:	d100      	bne.n	80148e0 <_svfprintf_r+0x470>
 80148de:	e211      	b.n	8014d04 <_svfprintf_r+0x894>
 80148e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148e2:	2b47      	cmp	r3, #71	; 0x47
 80148e4:	d114      	bne.n	8014910 <_svfprintf_r+0x4a0>
 80148e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d111      	bne.n	8014910 <_svfprintf_r+0x4a0>
 80148ec:	3301      	adds	r3, #1
 80148ee:	9309      	str	r3, [sp, #36]	; 0x24
 80148f0:	e00e      	b.n	8014910 <_svfprintf_r+0x4a0>
 80148f2:	46c0      	nop			; (mov r8, r8)
 80148f4:	7fefffff 	.word	0x7fefffff
 80148f8:	0801c528 	.word	0x0801c528
 80148fc:	0801c52c 	.word	0x0801c52c
 8014900:	0801c530 	.word	0x0801c530
 8014904:	0801c534 	.word	0x0801c534
 8014908:	2300      	movs	r3, #0
 801490a:	930c      	str	r3, [sp, #48]	; 0x30
 801490c:	ab3f      	add	r3, sp, #252	; 0xfc
 801490e:	9308      	str	r3, [sp, #32]
 8014910:	2380      	movs	r3, #128	; 0x80
 8014912:	005b      	lsls	r3, r3, #1
 8014914:	4333      	orrs	r3, r6
 8014916:	931a      	str	r3, [sp, #104]	; 0x68
 8014918:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801491a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801491c:	2b00      	cmp	r3, #0
 801491e:	db00      	blt.n	8014922 <_svfprintf_r+0x4b2>
 8014920:	e1f2      	b.n	8014d08 <_svfprintf_r+0x898>
 8014922:	2280      	movs	r2, #128	; 0x80
 8014924:	0612      	lsls	r2, r2, #24
 8014926:	4694      	mov	ip, r2
 8014928:	4463      	add	r3, ip
 801492a:	930e      	str	r3, [sp, #56]	; 0x38
 801492c:	232d      	movs	r3, #45	; 0x2d
 801492e:	9322      	str	r3, [sp, #136]	; 0x88
 8014930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014932:	2b41      	cmp	r3, #65	; 0x41
 8014934:	d000      	beq.n	8014938 <_svfprintf_r+0x4c8>
 8014936:	e200      	b.n	8014d3a <_svfprintf_r+0x8ca>
 8014938:	0028      	movs	r0, r5
 801493a:	aa26      	add	r2, sp, #152	; 0x98
 801493c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801493e:	f002 ffd9 	bl	80178f4 <frexp>
 8014942:	23ff      	movs	r3, #255	; 0xff
 8014944:	2200      	movs	r2, #0
 8014946:	059b      	lsls	r3, r3, #22
 8014948:	f7ed fab6 	bl	8001eb8 <__aeabi_dmul>
 801494c:	2200      	movs	r2, #0
 801494e:	2300      	movs	r3, #0
 8014950:	0004      	movs	r4, r0
 8014952:	000d      	movs	r5, r1
 8014954:	f7eb fd82 	bl	800045c <__aeabi_dcmpeq>
 8014958:	2800      	cmp	r0, #0
 801495a:	d001      	beq.n	8014960 <_svfprintf_r+0x4f0>
 801495c:	2301      	movs	r3, #1
 801495e:	9326      	str	r3, [sp, #152]	; 0x98
 8014960:	4bd4      	ldr	r3, [pc, #848]	; (8014cb4 <_svfprintf_r+0x844>)
 8014962:	9319      	str	r3, [sp, #100]	; 0x64
 8014964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014966:	2b61      	cmp	r3, #97	; 0x61
 8014968:	d001      	beq.n	801496e <_svfprintf_r+0x4fe>
 801496a:	4bd3      	ldr	r3, [pc, #844]	; (8014cb8 <_svfprintf_r+0x848>)
 801496c:	9319      	str	r3, [sp, #100]	; 0x64
 801496e:	9b08      	ldr	r3, [sp, #32]
 8014970:	930e      	str	r3, [sp, #56]	; 0x38
 8014972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014974:	3b01      	subs	r3, #1
 8014976:	9311      	str	r3, [sp, #68]	; 0x44
 8014978:	2200      	movs	r2, #0
 801497a:	4bd0      	ldr	r3, [pc, #832]	; (8014cbc <_svfprintf_r+0x84c>)
 801497c:	0020      	movs	r0, r4
 801497e:	0029      	movs	r1, r5
 8014980:	f7ed fa9a 	bl	8001eb8 <__aeabi_dmul>
 8014984:	000d      	movs	r5, r1
 8014986:	0004      	movs	r4, r0
 8014988:	f7ee f8b2 	bl	8002af0 <__aeabi_d2iz>
 801498c:	9021      	str	r0, [sp, #132]	; 0x84
 801498e:	f7ee f8e5 	bl	8002b5c <__aeabi_i2d>
 8014992:	0002      	movs	r2, r0
 8014994:	000b      	movs	r3, r1
 8014996:	0020      	movs	r0, r4
 8014998:	0029      	movs	r1, r5
 801499a:	f7ed fcf9 	bl	8002390 <__aeabi_dsub>
 801499e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149a0:	000d      	movs	r5, r1
 80149a2:	001a      	movs	r2, r3
 80149a4:	3201      	adds	r2, #1
 80149a6:	9921      	ldr	r1, [sp, #132]	; 0x84
 80149a8:	920e      	str	r2, [sp, #56]	; 0x38
 80149aa:	9223      	str	r2, [sp, #140]	; 0x8c
 80149ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80149ae:	0004      	movs	r4, r0
 80149b0:	5c52      	ldrb	r2, [r2, r1]
 80149b2:	701a      	strb	r2, [r3, #0]
 80149b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149b6:	9320      	str	r3, [sp, #128]	; 0x80
 80149b8:	3301      	adds	r3, #1
 80149ba:	d00a      	beq.n	80149d2 <_svfprintf_r+0x562>
 80149bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149be:	2200      	movs	r2, #0
 80149c0:	3b01      	subs	r3, #1
 80149c2:	9311      	str	r3, [sp, #68]	; 0x44
 80149c4:	0020      	movs	r0, r4
 80149c6:	2300      	movs	r3, #0
 80149c8:	0029      	movs	r1, r5
 80149ca:	f7eb fd47 	bl	800045c <__aeabi_dcmpeq>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d0d2      	beq.n	8014978 <_svfprintf_r+0x508>
 80149d2:	2200      	movs	r2, #0
 80149d4:	0020      	movs	r0, r4
 80149d6:	0029      	movs	r1, r5
 80149d8:	4bb9      	ldr	r3, [pc, #740]	; (8014cc0 <_svfprintf_r+0x850>)
 80149da:	f7eb fd59 	bl	8000490 <__aeabi_dcmpgt>
 80149de:	2800      	cmp	r0, #0
 80149e0:	d10c      	bne.n	80149fc <_svfprintf_r+0x58c>
 80149e2:	2200      	movs	r2, #0
 80149e4:	0020      	movs	r0, r4
 80149e6:	0029      	movs	r1, r5
 80149e8:	4bb5      	ldr	r3, [pc, #724]	; (8014cc0 <_svfprintf_r+0x850>)
 80149ea:	f7eb fd37 	bl	800045c <__aeabi_dcmpeq>
 80149ee:	2800      	cmp	r0, #0
 80149f0:	d100      	bne.n	80149f4 <_svfprintf_r+0x584>
 80149f2:	e19c      	b.n	8014d2e <_svfprintf_r+0x8be>
 80149f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149f6:	07db      	lsls	r3, r3, #31
 80149f8:	d400      	bmi.n	80149fc <_svfprintf_r+0x58c>
 80149fa:	e198      	b.n	8014d2e <_svfprintf_r+0x8be>
 80149fc:	2030      	movs	r0, #48	; 0x30
 80149fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a00:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a04:	7bda      	ldrb	r2, [r3, #15]
 8014a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	932a      	str	r3, [sp, #168]	; 0xa8
 8014a0c:	7819      	ldrb	r1, [r3, #0]
 8014a0e:	4291      	cmp	r1, r2
 8014a10:	d100      	bne.n	8014a14 <_svfprintf_r+0x5a4>
 8014a12:	e17c      	b.n	8014d0e <_svfprintf_r+0x89e>
 8014a14:	1c4a      	adds	r2, r1, #1
 8014a16:	b2d2      	uxtb	r2, r2
 8014a18:	2939      	cmp	r1, #57	; 0x39
 8014a1a:	d101      	bne.n	8014a20 <_svfprintf_r+0x5b0>
 8014a1c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014a1e:	7a92      	ldrb	r2, [r2, #10]
 8014a20:	701a      	strb	r2, [r3, #0]
 8014a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014a24:	9a08      	ldr	r2, [sp, #32]
 8014a26:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014a28:	1a9b      	subs	r3, r3, r2
 8014a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8014a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a2e:	2b47      	cmp	r3, #71	; 0x47
 8014a30:	d000      	beq.n	8014a34 <_svfprintf_r+0x5c4>
 8014a32:	e1d0      	b.n	8014dd6 <_svfprintf_r+0x966>
 8014a34:	1ceb      	adds	r3, r5, #3
 8014a36:	db03      	blt.n	8014a40 <_svfprintf_r+0x5d0>
 8014a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a3a:	42ab      	cmp	r3, r5
 8014a3c:	db00      	blt.n	8014a40 <_svfprintf_r+0x5d0>
 8014a3e:	e1f8      	b.n	8014e32 <_svfprintf_r+0x9c2>
 8014a40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a42:	3b02      	subs	r3, #2
 8014a44:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a46:	223c      	movs	r2, #60	; 0x3c
 8014a48:	466b      	mov	r3, sp
 8014a4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a4c:	189b      	adds	r3, r3, r2
 8014a4e:	1e6c      	subs	r4, r5, #1
 8014a50:	3a1c      	subs	r2, #28
 8014a52:	2000      	movs	r0, #0
 8014a54:	781b      	ldrb	r3, [r3, #0]
 8014a56:	9426      	str	r4, [sp, #152]	; 0x98
 8014a58:	4391      	bics	r1, r2
 8014a5a:	2941      	cmp	r1, #65	; 0x41
 8014a5c:	d102      	bne.n	8014a64 <_svfprintf_r+0x5f4>
 8014a5e:	330f      	adds	r3, #15
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	3001      	adds	r0, #1
 8014a64:	a928      	add	r1, sp, #160	; 0xa0
 8014a66:	700b      	strb	r3, [r1, #0]
 8014a68:	232b      	movs	r3, #43	; 0x2b
 8014a6a:	2c00      	cmp	r4, #0
 8014a6c:	da02      	bge.n	8014a74 <_svfprintf_r+0x604>
 8014a6e:	2401      	movs	r4, #1
 8014a70:	3302      	adds	r3, #2
 8014a72:	1b64      	subs	r4, r4, r5
 8014a74:	704b      	strb	r3, [r1, #1]
 8014a76:	2c09      	cmp	r4, #9
 8014a78:	dc00      	bgt.n	8014a7c <_svfprintf_r+0x60c>
 8014a7a:	e1c6      	b.n	8014e0a <_svfprintf_r+0x99a>
 8014a7c:	2337      	movs	r3, #55	; 0x37
 8014a7e:	250a      	movs	r5, #10
 8014a80:	aa1e      	add	r2, sp, #120	; 0x78
 8014a82:	189b      	adds	r3, r3, r2
 8014a84:	9310      	str	r3, [sp, #64]	; 0x40
 8014a86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a88:	0020      	movs	r0, r4
 8014a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a8c:	0029      	movs	r1, r5
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	9310      	str	r3, [sp, #64]	; 0x40
 8014a92:	f7eb fccd 	bl	8000430 <__aeabi_idivmod>
 8014a96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a98:	3130      	adds	r1, #48	; 0x30
 8014a9a:	7019      	strb	r1, [r3, #0]
 8014a9c:	0020      	movs	r0, r4
 8014a9e:	0029      	movs	r1, r5
 8014aa0:	9411      	str	r4, [sp, #68]	; 0x44
 8014aa2:	f7eb fbdf 	bl	8000264 <__divsi3>
 8014aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014aa8:	0004      	movs	r4, r0
 8014aaa:	2b63      	cmp	r3, #99	; 0x63
 8014aac:	dceb      	bgt.n	8014a86 <_svfprintf_r+0x616>
 8014aae:	212a      	movs	r1, #42	; 0x2a
 8014ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab2:	a81e      	add	r0, sp, #120	; 0x78
 8014ab4:	1e9a      	subs	r2, r3, #2
 8014ab6:	1809      	adds	r1, r1, r0
 8014ab8:	2037      	movs	r0, #55	; 0x37
 8014aba:	0013      	movs	r3, r2
 8014abc:	3430      	adds	r4, #48	; 0x30
 8014abe:	7014      	strb	r4, [r2, #0]
 8014ac0:	ac1e      	add	r4, sp, #120	; 0x78
 8014ac2:	1900      	adds	r0, r0, r4
 8014ac4:	4283      	cmp	r3, r0
 8014ac6:	d200      	bcs.n	8014aca <_svfprintf_r+0x65a>
 8014ac8:	e19a      	b.n	8014e00 <_svfprintf_r+0x990>
 8014aca:	2300      	movs	r3, #0
 8014acc:	4282      	cmp	r2, r0
 8014ace:	d804      	bhi.n	8014ada <_svfprintf_r+0x66a>
 8014ad0:	aa1e      	add	r2, sp, #120	; 0x78
 8014ad2:	3339      	adds	r3, #57	; 0x39
 8014ad4:	189b      	adds	r3, r3, r2
 8014ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ad8:	1a9b      	subs	r3, r3, r2
 8014ada:	222a      	movs	r2, #42	; 0x2a
 8014adc:	a91e      	add	r1, sp, #120	; 0x78
 8014ade:	1852      	adds	r2, r2, r1
 8014ae0:	18d3      	adds	r3, r2, r3
 8014ae2:	aa28      	add	r2, sp, #160	; 0xa0
 8014ae4:	1a9b      	subs	r3, r3, r2
 8014ae6:	931e      	str	r3, [sp, #120]	; 0x78
 8014ae8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aec:	4694      	mov	ip, r2
 8014aee:	4463      	add	r3, ip
 8014af0:	9309      	str	r3, [sp, #36]	; 0x24
 8014af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	dc01      	bgt.n	8014afc <_svfprintf_r+0x68c>
 8014af8:	07f3      	lsls	r3, r6, #31
 8014afa:	d504      	bpl.n	8014b06 <_svfprintf_r+0x696>
 8014afc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b00:	4694      	mov	ip, r2
 8014b02:	4463      	add	r3, ip
 8014b04:	9309      	str	r3, [sp, #36]	; 0x24
 8014b06:	2280      	movs	r2, #128	; 0x80
 8014b08:	4b6e      	ldr	r3, [pc, #440]	; (8014cc4 <_svfprintf_r+0x854>)
 8014b0a:	0052      	lsls	r2, r2, #1
 8014b0c:	4033      	ands	r3, r6
 8014b0e:	431a      	orrs	r2, r3
 8014b10:	2300      	movs	r3, #0
 8014b12:	001d      	movs	r5, r3
 8014b14:	921a      	str	r2, [sp, #104]	; 0x68
 8014b16:	9310      	str	r3, [sp, #64]	; 0x40
 8014b18:	9311      	str	r3, [sp, #68]	; 0x44
 8014b1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b1c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8014b1e:	9319      	str	r3, [sp, #100]	; 0x64
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d006      	beq.n	8014b32 <_svfprintf_r+0x6c2>
 8014b24:	231b      	movs	r3, #27
 8014b26:	aa1e      	add	r2, sp, #120	; 0x78
 8014b28:	189b      	adds	r3, r3, r2
 8014b2a:	222d      	movs	r2, #45	; 0x2d
 8014b2c:	701a      	strb	r2, [r3, #0]
 8014b2e:	2300      	movs	r3, #0
 8014b30:	9319      	str	r3, [sp, #100]	; 0x64
 8014b32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b36:	931a      	str	r3, [sp, #104]	; 0x68
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	da00      	bge.n	8014b3e <_svfprintf_r+0x6ce>
 8014b3c:	921a      	str	r2, [sp, #104]	; 0x68
 8014b3e:	231b      	movs	r3, #27
 8014b40:	aa1e      	add	r2, sp, #120	; 0x78
 8014b42:	189b      	adds	r3, r3, r2
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	1e5a      	subs	r2, r3, #1
 8014b48:	4193      	sbcs	r3, r2
 8014b4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b4c:	18d3      	adds	r3, r2, r3
 8014b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8014b50:	0032      	movs	r2, r6
 8014b52:	2302      	movs	r3, #2
 8014b54:	401a      	ands	r2, r3
 8014b56:	9220      	str	r2, [sp, #128]	; 0x80
 8014b58:	421e      	tst	r6, r3
 8014b5a:	d002      	beq.n	8014b62 <_svfprintf_r+0x6f2>
 8014b5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014b5e:	3302      	adds	r3, #2
 8014b60:	931a      	str	r3, [sp, #104]	; 0x68
 8014b62:	2384      	movs	r3, #132	; 0x84
 8014b64:	0032      	movs	r2, r6
 8014b66:	401a      	ands	r2, r3
 8014b68:	9221      	str	r2, [sp, #132]	; 0x84
 8014b6a:	421e      	tst	r6, r3
 8014b6c:	d120      	bne.n	8014bb0 <_svfprintf_r+0x740>
 8014b6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014b70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014b72:	1a9c      	subs	r4, r3, r2
 8014b74:	2c00      	cmp	r4, #0
 8014b76:	dd1b      	ble.n	8014bb0 <_svfprintf_r+0x740>
 8014b78:	0039      	movs	r1, r7
 8014b7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014b7c:	4852      	ldr	r0, [pc, #328]	; (8014cc8 <_svfprintf_r+0x858>)
 8014b7e:	9322      	str	r3, [sp, #136]	; 0x88
 8014b80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014b82:	3301      	adds	r3, #1
 8014b84:	3108      	adds	r1, #8
 8014b86:	6038      	str	r0, [r7, #0]
 8014b88:	2c10      	cmp	r4, #16
 8014b8a:	dd00      	ble.n	8014b8e <_svfprintf_r+0x71e>
 8014b8c:	e319      	b.n	80151c2 <_svfprintf_r+0xd52>
 8014b8e:	607c      	str	r4, [r7, #4]
 8014b90:	18a4      	adds	r4, r4, r2
 8014b92:	000f      	movs	r7, r1
 8014b94:	942e      	str	r4, [sp, #184]	; 0xb8
 8014b96:	932d      	str	r3, [sp, #180]	; 0xb4
 8014b98:	2b07      	cmp	r3, #7
 8014b9a:	dd09      	ble.n	8014bb0 <_svfprintf_r+0x740>
 8014b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ba0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ba2:	f002 fedf 	bl	8017964 <__ssprint_r>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d001      	beq.n	8014bae <_svfprintf_r+0x73e>
 8014baa:	f000 fe60 	bl	801586e <_svfprintf_r+0x13fe>
 8014bae:	af2f      	add	r7, sp, #188	; 0xbc
 8014bb0:	231b      	movs	r3, #27
 8014bb2:	aa1e      	add	r2, sp, #120	; 0x78
 8014bb4:	189b      	adds	r3, r3, r2
 8014bb6:	781a      	ldrb	r2, [r3, #0]
 8014bb8:	2a00      	cmp	r2, #0
 8014bba:	d017      	beq.n	8014bec <_svfprintf_r+0x77c>
 8014bbc:	603b      	str	r3, [r7, #0]
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014bc2:	607b      	str	r3, [r7, #4]
 8014bc4:	0013      	movs	r3, r2
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	932e      	str	r3, [sp, #184]	; 0xb8
 8014bca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014bcc:	3708      	adds	r7, #8
 8014bce:	9322      	str	r3, [sp, #136]	; 0x88
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014bd4:	2b07      	cmp	r3, #7
 8014bd6:	dd09      	ble.n	8014bec <_svfprintf_r+0x77c>
 8014bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014bda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014bdc:	aa2c      	add	r2, sp, #176	; 0xb0
 8014bde:	f002 fec1 	bl	8017964 <__ssprint_r>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d001      	beq.n	8014bea <_svfprintf_r+0x77a>
 8014be6:	f000 fe42 	bl	801586e <_svfprintf_r+0x13fe>
 8014bea:	af2f      	add	r7, sp, #188	; 0xbc
 8014bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d019      	beq.n	8014c26 <_svfprintf_r+0x7b6>
 8014bf2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014bf4:	9320      	str	r3, [sp, #128]	; 0x80
 8014bf6:	ab25      	add	r3, sp, #148	; 0x94
 8014bf8:	603b      	str	r3, [r7, #0]
 8014bfa:	2302      	movs	r3, #2
 8014bfc:	607b      	str	r3, [r7, #4]
 8014bfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014c00:	3708      	adds	r7, #8
 8014c02:	3302      	adds	r3, #2
 8014c04:	932e      	str	r3, [sp, #184]	; 0xb8
 8014c06:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c08:	9320      	str	r3, [sp, #128]	; 0x80
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c0e:	2b07      	cmp	r3, #7
 8014c10:	dd09      	ble.n	8014c26 <_svfprintf_r+0x7b6>
 8014c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c16:	aa2c      	add	r2, sp, #176	; 0xb0
 8014c18:	f002 fea4 	bl	8017964 <__ssprint_r>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d001      	beq.n	8014c24 <_svfprintf_r+0x7b4>
 8014c20:	f000 fe25 	bl	801586e <_svfprintf_r+0x13fe>
 8014c24:	af2f      	add	r7, sp, #188	; 0xbc
 8014c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c28:	2b80      	cmp	r3, #128	; 0x80
 8014c2a:	d120      	bne.n	8014c6e <_svfprintf_r+0x7fe>
 8014c2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014c2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014c30:	1a9c      	subs	r4, r3, r2
 8014c32:	2c00      	cmp	r4, #0
 8014c34:	dd1b      	ble.n	8014c6e <_svfprintf_r+0x7fe>
 8014c36:	0039      	movs	r1, r7
 8014c38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c3a:	4824      	ldr	r0, [pc, #144]	; (8014ccc <_svfprintf_r+0x85c>)
 8014c3c:	9320      	str	r3, [sp, #128]	; 0x80
 8014c3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014c40:	3301      	adds	r3, #1
 8014c42:	3108      	adds	r1, #8
 8014c44:	6038      	str	r0, [r7, #0]
 8014c46:	2c10      	cmp	r4, #16
 8014c48:	dd00      	ble.n	8014c4c <_svfprintf_r+0x7dc>
 8014c4a:	e2cd      	b.n	80151e8 <_svfprintf_r+0xd78>
 8014c4c:	607c      	str	r4, [r7, #4]
 8014c4e:	18a4      	adds	r4, r4, r2
 8014c50:	000f      	movs	r7, r1
 8014c52:	942e      	str	r4, [sp, #184]	; 0xb8
 8014c54:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c56:	2b07      	cmp	r3, #7
 8014c58:	dd09      	ble.n	8014c6e <_svfprintf_r+0x7fe>
 8014c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c5e:	aa2c      	add	r2, sp, #176	; 0xb0
 8014c60:	f002 fe80 	bl	8017964 <__ssprint_r>
 8014c64:	2800      	cmp	r0, #0
 8014c66:	d001      	beq.n	8014c6c <_svfprintf_r+0x7fc>
 8014c68:	f000 fe01 	bl	801586e <_svfprintf_r+0x13fe>
 8014c6c:	af2f      	add	r7, sp, #188	; 0xbc
 8014c6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c72:	1a9c      	subs	r4, r3, r2
 8014c74:	2c00      	cmp	r4, #0
 8014c76:	dd2b      	ble.n	8014cd0 <_svfprintf_r+0x860>
 8014c78:	0039      	movs	r1, r7
 8014c7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014c7c:	4813      	ldr	r0, [pc, #76]	; (8014ccc <_svfprintf_r+0x85c>)
 8014c7e:	9319      	str	r3, [sp, #100]	; 0x64
 8014c80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8014c82:	3301      	adds	r3, #1
 8014c84:	3108      	adds	r1, #8
 8014c86:	6038      	str	r0, [r7, #0]
 8014c88:	2c10      	cmp	r4, #16
 8014c8a:	dd00      	ble.n	8014c8e <_svfprintf_r+0x81e>
 8014c8c:	e2bf      	b.n	801520e <_svfprintf_r+0xd9e>
 8014c8e:	18a2      	adds	r2, r4, r2
 8014c90:	607c      	str	r4, [r7, #4]
 8014c92:	922e      	str	r2, [sp, #184]	; 0xb8
 8014c94:	000f      	movs	r7, r1
 8014c96:	932d      	str	r3, [sp, #180]	; 0xb4
 8014c98:	2b07      	cmp	r3, #7
 8014c9a:	dd19      	ble.n	8014cd0 <_svfprintf_r+0x860>
 8014c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014ca0:	aa2c      	add	r2, sp, #176	; 0xb0
 8014ca2:	f002 fe5f 	bl	8017964 <__ssprint_r>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	d001      	beq.n	8014cae <_svfprintf_r+0x83e>
 8014caa:	f000 fde0 	bl	801586e <_svfprintf_r+0x13fe>
 8014cae:	af2f      	add	r7, sp, #188	; 0xbc
 8014cb0:	e00e      	b.n	8014cd0 <_svfprintf_r+0x860>
 8014cb2:	46c0      	nop			; (mov r8, r8)
 8014cb4:	0801c538 	.word	0x0801c538
 8014cb8:	0801c549 	.word	0x0801c549
 8014cbc:	40300000 	.word	0x40300000
 8014cc0:	3fe00000 	.word	0x3fe00000
 8014cc4:	fffffbff 	.word	0xfffffbff
 8014cc8:	0801c55c 	.word	0x0801c55c
 8014ccc:	0801c56c 	.word	0x0801c56c
 8014cd0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8014cd2:	9319      	str	r3, [sp, #100]	; 0x64
 8014cd4:	05f3      	lsls	r3, r6, #23
 8014cd6:	d500      	bpl.n	8014cda <_svfprintf_r+0x86a>
 8014cd8:	e2b2      	b.n	8015240 <_svfprintf_r+0xdd0>
 8014cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cdc:	9b08      	ldr	r3, [sp, #32]
 8014cde:	4694      	mov	ip, r2
 8014ce0:	603b      	str	r3, [r7, #0]
 8014ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce4:	607b      	str	r3, [r7, #4]
 8014ce6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014ce8:	4463      	add	r3, ip
 8014cea:	932e      	str	r3, [sp, #184]	; 0xb8
 8014cec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8014cee:	9308      	str	r3, [sp, #32]
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	932d      	str	r3, [sp, #180]	; 0xb4
 8014cf4:	2b07      	cmp	r3, #7
 8014cf6:	dd00      	ble.n	8014cfa <_svfprintf_r+0x88a>
 8014cf8:	e393      	b.n	8015422 <_svfprintf_r+0xfb2>
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	e2e7      	b.n	80152ce <_svfprintf_r+0xe5e>
 8014cfe:	9b08      	ldr	r3, [sp, #32]
 8014d00:	930c      	str	r3, [sp, #48]	; 0x30
 8014d02:	e605      	b.n	8014910 <_svfprintf_r+0x4a0>
 8014d04:	2306      	movs	r3, #6
 8014d06:	e5f2      	b.n	80148ee <_svfprintf_r+0x47e>
 8014d08:	930e      	str	r3, [sp, #56]	; 0x38
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	e60f      	b.n	801492e <_svfprintf_r+0x4be>
 8014d0e:	7018      	strb	r0, [r3, #0]
 8014d10:	e679      	b.n	8014a06 <_svfprintf_r+0x596>
 8014d12:	7018      	strb	r0, [r3, #0]
 8014d14:	3301      	adds	r3, #1
 8014d16:	1aca      	subs	r2, r1, r3
 8014d18:	d5fb      	bpl.n	8014d12 <_svfprintf_r+0x8a2>
 8014d1a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	3201      	adds	r2, #1
 8014d20:	db01      	blt.n	8014d26 <_svfprintf_r+0x8b6>
 8014d22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014d24:	3301      	adds	r3, #1
 8014d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d28:	18d3      	adds	r3, r2, r3
 8014d2a:	9323      	str	r3, [sp, #140]	; 0x8c
 8014d2c:	e679      	b.n	8014a22 <_svfprintf_r+0x5b2>
 8014d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d30:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014d32:	2030      	movs	r0, #48	; 0x30
 8014d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d36:	1851      	adds	r1, r2, r1
 8014d38:	e7ed      	b.n	8014d16 <_svfprintf_r+0x8a6>
 8014d3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d3c:	2303      	movs	r3, #3
 8014d3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014d40:	2a46      	cmp	r2, #70	; 0x46
 8014d42:	d006      	beq.n	8014d52 <_svfprintf_r+0x8e2>
 8014d44:	0014      	movs	r4, r2
 8014d46:	3c45      	subs	r4, #69	; 0x45
 8014d48:	4262      	negs	r2, r4
 8014d4a:	4154      	adcs	r4, r2
 8014d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	1914      	adds	r4, r2, r4
 8014d52:	aa2a      	add	r2, sp, #168	; 0xa8
 8014d54:	9204      	str	r2, [sp, #16]
 8014d56:	aa27      	add	r2, sp, #156	; 0x9c
 8014d58:	9203      	str	r2, [sp, #12]
 8014d5a:	aa26      	add	r2, sp, #152	; 0x98
 8014d5c:	9202      	str	r2, [sp, #8]
 8014d5e:	9300      	str	r3, [sp, #0]
 8014d60:	002a      	movs	r2, r5
 8014d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014d66:	9401      	str	r4, [sp, #4]
 8014d68:	f000 fe9c 	bl	8015aa4 <_dtoa_r>
 8014d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d6e:	9008      	str	r0, [sp, #32]
 8014d70:	2b47      	cmp	r3, #71	; 0x47
 8014d72:	d103      	bne.n	8014d7c <_svfprintf_r+0x90c>
 8014d74:	07f3      	lsls	r3, r6, #31
 8014d76:	d401      	bmi.n	8014d7c <_svfprintf_r+0x90c>
 8014d78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014d7a:	e653      	b.n	8014a24 <_svfprintf_r+0x5b4>
 8014d7c:	9b08      	ldr	r3, [sp, #32]
 8014d7e:	191b      	adds	r3, r3, r4
 8014d80:	9311      	str	r3, [sp, #68]	; 0x44
 8014d82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d84:	2b46      	cmp	r3, #70	; 0x46
 8014d86:	d113      	bne.n	8014db0 <_svfprintf_r+0x940>
 8014d88:	9b08      	ldr	r3, [sp, #32]
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	2b30      	cmp	r3, #48	; 0x30
 8014d8e:	d10a      	bne.n	8014da6 <_svfprintf_r+0x936>
 8014d90:	2200      	movs	r2, #0
 8014d92:	2300      	movs	r3, #0
 8014d94:	0028      	movs	r0, r5
 8014d96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014d98:	f7eb fb60 	bl	800045c <__aeabi_dcmpeq>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d102      	bne.n	8014da6 <_svfprintf_r+0x936>
 8014da0:	2301      	movs	r3, #1
 8014da2:	1b1c      	subs	r4, r3, r4
 8014da4:	9426      	str	r4, [sp, #152]	; 0x98
 8014da6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014daa:	4694      	mov	ip, r2
 8014dac:	4463      	add	r3, ip
 8014dae:	9311      	str	r3, [sp, #68]	; 0x44
 8014db0:	2200      	movs	r2, #0
 8014db2:	2300      	movs	r3, #0
 8014db4:	0028      	movs	r0, r5
 8014db6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014db8:	f7eb fb50 	bl	800045c <__aeabi_dcmpeq>
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	d001      	beq.n	8014dc4 <_svfprintf_r+0x954>
 8014dc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dc2:	932a      	str	r3, [sp, #168]	; 0xa8
 8014dc4:	2230      	movs	r2, #48	; 0x30
 8014dc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8014dc8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014dca:	4299      	cmp	r1, r3
 8014dcc:	d9d4      	bls.n	8014d78 <_svfprintf_r+0x908>
 8014dce:	1c59      	adds	r1, r3, #1
 8014dd0:	912a      	str	r1, [sp, #168]	; 0xa8
 8014dd2:	701a      	strb	r2, [r3, #0]
 8014dd4:	e7f7      	b.n	8014dc6 <_svfprintf_r+0x956>
 8014dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014dd8:	2b46      	cmp	r3, #70	; 0x46
 8014dda:	d000      	beq.n	8014dde <_svfprintf_r+0x96e>
 8014ddc:	e633      	b.n	8014a46 <_svfprintf_r+0x5d6>
 8014dde:	2201      	movs	r2, #1
 8014de0:	0033      	movs	r3, r6
 8014de2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014de4:	4013      	ands	r3, r2
 8014de6:	430b      	orrs	r3, r1
 8014de8:	2d00      	cmp	r5, #0
 8014dea:	dd1c      	ble.n	8014e26 <_svfprintf_r+0x9b6>
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d046      	beq.n	8014e7e <_svfprintf_r+0xa0e>
 8014df0:	000a      	movs	r2, r1
 8014df2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014df4:	18eb      	adds	r3, r5, r3
 8014df6:	18d3      	adds	r3, r2, r3
 8014df8:	9309      	str	r3, [sp, #36]	; 0x24
 8014dfa:	2366      	movs	r3, #102	; 0x66
 8014dfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014dfe:	e023      	b.n	8014e48 <_svfprintf_r+0x9d8>
 8014e00:	781c      	ldrb	r4, [r3, #0]
 8014e02:	3301      	adds	r3, #1
 8014e04:	700c      	strb	r4, [r1, #0]
 8014e06:	3101      	adds	r1, #1
 8014e08:	e65c      	b.n	8014ac4 <_svfprintf_r+0x654>
 8014e0a:	222a      	movs	r2, #42	; 0x2a
 8014e0c:	ab1e      	add	r3, sp, #120	; 0x78
 8014e0e:	18d2      	adds	r2, r2, r3
 8014e10:	2800      	cmp	r0, #0
 8014e12:	d104      	bne.n	8014e1e <_svfprintf_r+0x9ae>
 8014e14:	2330      	movs	r3, #48	; 0x30
 8014e16:	222b      	movs	r2, #43	; 0x2b
 8014e18:	708b      	strb	r3, [r1, #2]
 8014e1a:	ab1e      	add	r3, sp, #120	; 0x78
 8014e1c:	18d2      	adds	r2, r2, r3
 8014e1e:	3430      	adds	r4, #48	; 0x30
 8014e20:	1c53      	adds	r3, r2, #1
 8014e22:	7014      	strb	r4, [r2, #0]
 8014e24:	e65d      	b.n	8014ae2 <_svfprintf_r+0x672>
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d02b      	beq.n	8014e82 <_svfprintf_r+0xa12>
 8014e2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e2e:	3301      	adds	r3, #1
 8014e30:	e7e1      	b.n	8014df6 <_svfprintf_r+0x986>
 8014e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e34:	429d      	cmp	r5, r3
 8014e36:	db15      	blt.n	8014e64 <_svfprintf_r+0x9f4>
 8014e38:	2367      	movs	r3, #103	; 0x67
 8014e3a:	9509      	str	r5, [sp, #36]	; 0x24
 8014e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e3e:	07f3      	lsls	r3, r6, #31
 8014e40:	d502      	bpl.n	8014e48 <_svfprintf_r+0x9d8>
 8014e42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014e44:	18eb      	adds	r3, r5, r3
 8014e46:	9309      	str	r3, [sp, #36]	; 0x24
 8014e48:	2380      	movs	r3, #128	; 0x80
 8014e4a:	0032      	movs	r2, r6
 8014e4c:	00db      	lsls	r3, r3, #3
 8014e4e:	401a      	ands	r2, r3
 8014e50:	9211      	str	r2, [sp, #68]	; 0x44
 8014e52:	2200      	movs	r2, #0
 8014e54:	9210      	str	r2, [sp, #64]	; 0x40
 8014e56:	421e      	tst	r6, r3
 8014e58:	d100      	bne.n	8014e5c <_svfprintf_r+0x9ec>
 8014e5a:	e65e      	b.n	8014b1a <_svfprintf_r+0x6aa>
 8014e5c:	4295      	cmp	r5, r2
 8014e5e:	dc32      	bgt.n	8014ec6 <_svfprintf_r+0xa56>
 8014e60:	9211      	str	r2, [sp, #68]	; 0x44
 8014e62:	e65a      	b.n	8014b1a <_svfprintf_r+0x6aa>
 8014e64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e68:	4694      	mov	ip, r2
 8014e6a:	4463      	add	r3, ip
 8014e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e6e:	2367      	movs	r3, #103	; 0x67
 8014e70:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e72:	2d00      	cmp	r5, #0
 8014e74:	dce8      	bgt.n	8014e48 <_svfprintf_r+0x9d8>
 8014e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e78:	1b58      	subs	r0, r3, r5
 8014e7a:	1c43      	adds	r3, r0, #1
 8014e7c:	e7e3      	b.n	8014e46 <_svfprintf_r+0x9d6>
 8014e7e:	9509      	str	r5, [sp, #36]	; 0x24
 8014e80:	e7bb      	b.n	8014dfa <_svfprintf_r+0x98a>
 8014e82:	2366      	movs	r3, #102	; 0x66
 8014e84:	9209      	str	r2, [sp, #36]	; 0x24
 8014e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e88:	e7de      	b.n	8014e48 <_svfprintf_r+0x9d8>
 8014e8a:	42ab      	cmp	r3, r5
 8014e8c:	da0e      	bge.n	8014eac <_svfprintf_r+0xa3c>
 8014e8e:	1aed      	subs	r5, r5, r3
 8014e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e92:	785b      	ldrb	r3, [r3, #1]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d012      	beq.n	8014ebe <_svfprintf_r+0xa4e>
 8014e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8014e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8014ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	2bff      	cmp	r3, #255	; 0xff
 8014eaa:	d1ee      	bne.n	8014e8a <_svfprintf_r+0xa1a>
 8014eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014eb0:	189b      	adds	r3, r3, r2
 8014eb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014eb4:	4353      	muls	r3, r2
 8014eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eb8:	189b      	adds	r3, r3, r2
 8014eba:	9309      	str	r3, [sp, #36]	; 0x24
 8014ebc:	e62d      	b.n	8014b1a <_svfprintf_r+0x6aa>
 8014ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	9310      	str	r3, [sp, #64]	; 0x40
 8014ec4:	e7ee      	b.n	8014ea4 <_svfprintf_r+0xa34>
 8014ec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ec8:	9311      	str	r3, [sp, #68]	; 0x44
 8014eca:	e7eb      	b.n	8014ea4 <_svfprintf_r+0xa34>
 8014ecc:	1d23      	adds	r3, r4, #4
 8014ece:	930d      	str	r3, [sp, #52]	; 0x34
 8014ed0:	06b3      	lsls	r3, r6, #26
 8014ed2:	d509      	bpl.n	8014ee8 <_svfprintf_r+0xa78>
 8014ed4:	6823      	ldr	r3, [r4, #0]
 8014ed6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	17d2      	asrs	r2, r2, #31
 8014edc:	605a      	str	r2, [r3, #4]
 8014ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ee0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014ee2:	9308      	str	r3, [sp, #32]
 8014ee4:	f7ff fb00 	bl	80144e8 <_svfprintf_r+0x78>
 8014ee8:	06f3      	lsls	r3, r6, #27
 8014eea:	d503      	bpl.n	8014ef4 <_svfprintf_r+0xa84>
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ef0:	601a      	str	r2, [r3, #0]
 8014ef2:	e7f4      	b.n	8014ede <_svfprintf_r+0xa6e>
 8014ef4:	0673      	lsls	r3, r6, #25
 8014ef6:	d503      	bpl.n	8014f00 <_svfprintf_r+0xa90>
 8014ef8:	6823      	ldr	r3, [r4, #0]
 8014efa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014efc:	801a      	strh	r2, [r3, #0]
 8014efe:	e7ee      	b.n	8014ede <_svfprintf_r+0xa6e>
 8014f00:	05b3      	lsls	r3, r6, #22
 8014f02:	d5f3      	bpl.n	8014eec <_svfprintf_r+0xa7c>
 8014f04:	6823      	ldr	r3, [r4, #0]
 8014f06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f08:	701a      	strb	r2, [r3, #0]
 8014f0a:	e7e8      	b.n	8014ede <_svfprintf_r+0xa6e>
 8014f0c:	2310      	movs	r3, #16
 8014f0e:	431e      	orrs	r6, r3
 8014f10:	2320      	movs	r3, #32
 8014f12:	0030      	movs	r0, r6
 8014f14:	4018      	ands	r0, r3
 8014f16:	421e      	tst	r6, r3
 8014f18:	d00f      	beq.n	8014f3a <_svfprintf_r+0xaca>
 8014f1a:	3b19      	subs	r3, #25
 8014f1c:	3407      	adds	r4, #7
 8014f1e:	439c      	bics	r4, r3
 8014f20:	0022      	movs	r2, r4
 8014f22:	ca18      	ldmia	r2!, {r3, r4}
 8014f24:	9306      	str	r3, [sp, #24]
 8014f26:	9407      	str	r4, [sp, #28]
 8014f28:	920d      	str	r2, [sp, #52]	; 0x34
 8014f2a:	4bc2      	ldr	r3, [pc, #776]	; (8015234 <_svfprintf_r+0xdc4>)
 8014f2c:	401e      	ands	r6, r3
 8014f2e:	2300      	movs	r3, #0
 8014f30:	221b      	movs	r2, #27
 8014f32:	a91e      	add	r1, sp, #120	; 0x78
 8014f34:	1852      	adds	r2, r2, r1
 8014f36:	2100      	movs	r1, #0
 8014f38:	e424      	b.n	8014784 <_svfprintf_r+0x314>
 8014f3a:	0022      	movs	r2, r4
 8014f3c:	ca08      	ldmia	r2!, {r3}
 8014f3e:	0031      	movs	r1, r6
 8014f40:	920d      	str	r2, [sp, #52]	; 0x34
 8014f42:	2210      	movs	r2, #16
 8014f44:	4011      	ands	r1, r2
 8014f46:	4216      	tst	r6, r2
 8014f48:	d002      	beq.n	8014f50 <_svfprintf_r+0xae0>
 8014f4a:	9306      	str	r3, [sp, #24]
 8014f4c:	9007      	str	r0, [sp, #28]
 8014f4e:	e7ec      	b.n	8014f2a <_svfprintf_r+0xaba>
 8014f50:	2240      	movs	r2, #64	; 0x40
 8014f52:	0030      	movs	r0, r6
 8014f54:	4010      	ands	r0, r2
 8014f56:	4216      	tst	r6, r2
 8014f58:	d003      	beq.n	8014f62 <_svfprintf_r+0xaf2>
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	9306      	str	r3, [sp, #24]
 8014f5e:	9107      	str	r1, [sp, #28]
 8014f60:	e7e3      	b.n	8014f2a <_svfprintf_r+0xaba>
 8014f62:	2280      	movs	r2, #128	; 0x80
 8014f64:	0031      	movs	r1, r6
 8014f66:	0092      	lsls	r2, r2, #2
 8014f68:	4011      	ands	r1, r2
 8014f6a:	4216      	tst	r6, r2
 8014f6c:	d0f6      	beq.n	8014f5c <_svfprintf_r+0xaec>
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	e7eb      	b.n	8014f4a <_svfprintf_r+0xada>
 8014f72:	0023      	movs	r3, r4
 8014f74:	cb04      	ldmia	r3!, {r2}
 8014f76:	a925      	add	r1, sp, #148	; 0x94
 8014f78:	9206      	str	r2, [sp, #24]
 8014f7a:	2230      	movs	r2, #48	; 0x30
 8014f7c:	930d      	str	r3, [sp, #52]	; 0x34
 8014f7e:	2300      	movs	r3, #0
 8014f80:	700a      	strb	r2, [r1, #0]
 8014f82:	3248      	adds	r2, #72	; 0x48
 8014f84:	704a      	strb	r2, [r1, #1]
 8014f86:	49ac      	ldr	r1, [pc, #688]	; (8015238 <_svfprintf_r+0xdc8>)
 8014f88:	9307      	str	r3, [sp, #28]
 8014f8a:	3302      	adds	r3, #2
 8014f8c:	431e      	orrs	r6, r3
 8014f8e:	911f      	str	r1, [sp, #124]	; 0x7c
 8014f90:	920f      	str	r2, [sp, #60]	; 0x3c
 8014f92:	e7cd      	b.n	8014f30 <_svfprintf_r+0xac0>
 8014f94:	0023      	movs	r3, r4
 8014f96:	cb04      	ldmia	r3!, {r2}
 8014f98:	2400      	movs	r4, #0
 8014f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8014f9c:	231b      	movs	r3, #27
 8014f9e:	9208      	str	r2, [sp, #32]
 8014fa0:	aa1e      	add	r2, sp, #120	; 0x78
 8014fa2:	189b      	adds	r3, r3, r2
 8014fa4:	701c      	strb	r4, [r3, #0]
 8014fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa8:	3301      	adds	r3, #1
 8014faa:	d00e      	beq.n	8014fca <_svfprintf_r+0xb5a>
 8014fac:	0021      	movs	r1, r4
 8014fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fb0:	9808      	ldr	r0, [sp, #32]
 8014fb2:	f002 f807 	bl	8016fc4 <memchr>
 8014fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8014fb8:	42a0      	cmp	r0, r4
 8014fba:	d100      	bne.n	8014fbe <_svfprintf_r+0xb4e>
 8014fbc:	e0fe      	b.n	80151bc <_svfprintf_r+0xd4c>
 8014fbe:	9a08      	ldr	r2, [sp, #32]
 8014fc0:	1a83      	subs	r3, r0, r2
 8014fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8014fc4:	0023      	movs	r3, r4
 8014fc6:	940c      	str	r4, [sp, #48]	; 0x30
 8014fc8:	e441      	b.n	801484e <_svfprintf_r+0x3de>
 8014fca:	9808      	ldr	r0, [sp, #32]
 8014fcc:	f7eb f8a4 	bl	8000118 <strlen>
 8014fd0:	9009      	str	r0, [sp, #36]	; 0x24
 8014fd2:	e7f7      	b.n	8014fc4 <_svfprintf_r+0xb54>
 8014fd4:	2310      	movs	r3, #16
 8014fd6:	431e      	orrs	r6, r3
 8014fd8:	2320      	movs	r3, #32
 8014fda:	0030      	movs	r0, r6
 8014fdc:	4018      	ands	r0, r3
 8014fde:	421e      	tst	r6, r3
 8014fe0:	d009      	beq.n	8014ff6 <_svfprintf_r+0xb86>
 8014fe2:	3b19      	subs	r3, #25
 8014fe4:	3407      	adds	r4, #7
 8014fe6:	439c      	bics	r4, r3
 8014fe8:	0022      	movs	r2, r4
 8014fea:	ca18      	ldmia	r2!, {r3, r4}
 8014fec:	9306      	str	r3, [sp, #24]
 8014fee:	9407      	str	r4, [sp, #28]
 8014ff0:	920d      	str	r2, [sp, #52]	; 0x34
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	e79c      	b.n	8014f30 <_svfprintf_r+0xac0>
 8014ff6:	0022      	movs	r2, r4
 8014ff8:	ca08      	ldmia	r2!, {r3}
 8014ffa:	0031      	movs	r1, r6
 8014ffc:	920d      	str	r2, [sp, #52]	; 0x34
 8014ffe:	2210      	movs	r2, #16
 8015000:	4011      	ands	r1, r2
 8015002:	4216      	tst	r6, r2
 8015004:	d002      	beq.n	801500c <_svfprintf_r+0xb9c>
 8015006:	9306      	str	r3, [sp, #24]
 8015008:	9007      	str	r0, [sp, #28]
 801500a:	e7f2      	b.n	8014ff2 <_svfprintf_r+0xb82>
 801500c:	2240      	movs	r2, #64	; 0x40
 801500e:	0030      	movs	r0, r6
 8015010:	4010      	ands	r0, r2
 8015012:	4216      	tst	r6, r2
 8015014:	d003      	beq.n	801501e <_svfprintf_r+0xbae>
 8015016:	b29b      	uxth	r3, r3
 8015018:	9306      	str	r3, [sp, #24]
 801501a:	9107      	str	r1, [sp, #28]
 801501c:	e7e9      	b.n	8014ff2 <_svfprintf_r+0xb82>
 801501e:	2280      	movs	r2, #128	; 0x80
 8015020:	0031      	movs	r1, r6
 8015022:	0092      	lsls	r2, r2, #2
 8015024:	4011      	ands	r1, r2
 8015026:	4216      	tst	r6, r2
 8015028:	d0f6      	beq.n	8015018 <_svfprintf_r+0xba8>
 801502a:	b2db      	uxtb	r3, r3
 801502c:	e7eb      	b.n	8015006 <_svfprintf_r+0xb96>
 801502e:	4b83      	ldr	r3, [pc, #524]	; (801523c <_svfprintf_r+0xdcc>)
 8015030:	0030      	movs	r0, r6
 8015032:	931f      	str	r3, [sp, #124]	; 0x7c
 8015034:	2320      	movs	r3, #32
 8015036:	4018      	ands	r0, r3
 8015038:	421e      	tst	r6, r3
 801503a:	d01a      	beq.n	8015072 <_svfprintf_r+0xc02>
 801503c:	3b19      	subs	r3, #25
 801503e:	3407      	adds	r4, #7
 8015040:	439c      	bics	r4, r3
 8015042:	0022      	movs	r2, r4
 8015044:	ca18      	ldmia	r2!, {r3, r4}
 8015046:	9306      	str	r3, [sp, #24]
 8015048:	9407      	str	r4, [sp, #28]
 801504a:	920d      	str	r2, [sp, #52]	; 0x34
 801504c:	07f3      	lsls	r3, r6, #31
 801504e:	d50a      	bpl.n	8015066 <_svfprintf_r+0xbf6>
 8015050:	9b06      	ldr	r3, [sp, #24]
 8015052:	9a07      	ldr	r2, [sp, #28]
 8015054:	4313      	orrs	r3, r2
 8015056:	d006      	beq.n	8015066 <_svfprintf_r+0xbf6>
 8015058:	2230      	movs	r2, #48	; 0x30
 801505a:	ab25      	add	r3, sp, #148	; 0x94
 801505c:	701a      	strb	r2, [r3, #0]
 801505e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015060:	705a      	strb	r2, [r3, #1]
 8015062:	2302      	movs	r3, #2
 8015064:	431e      	orrs	r6, r3
 8015066:	4b73      	ldr	r3, [pc, #460]	; (8015234 <_svfprintf_r+0xdc4>)
 8015068:	401e      	ands	r6, r3
 801506a:	2302      	movs	r3, #2
 801506c:	e760      	b.n	8014f30 <_svfprintf_r+0xac0>
 801506e:	4b72      	ldr	r3, [pc, #456]	; (8015238 <_svfprintf_r+0xdc8>)
 8015070:	e7de      	b.n	8015030 <_svfprintf_r+0xbc0>
 8015072:	0022      	movs	r2, r4
 8015074:	ca08      	ldmia	r2!, {r3}
 8015076:	0031      	movs	r1, r6
 8015078:	920d      	str	r2, [sp, #52]	; 0x34
 801507a:	2210      	movs	r2, #16
 801507c:	4011      	ands	r1, r2
 801507e:	4216      	tst	r6, r2
 8015080:	d002      	beq.n	8015088 <_svfprintf_r+0xc18>
 8015082:	9306      	str	r3, [sp, #24]
 8015084:	9007      	str	r0, [sp, #28]
 8015086:	e7e1      	b.n	801504c <_svfprintf_r+0xbdc>
 8015088:	2240      	movs	r2, #64	; 0x40
 801508a:	0030      	movs	r0, r6
 801508c:	4010      	ands	r0, r2
 801508e:	4216      	tst	r6, r2
 8015090:	d003      	beq.n	801509a <_svfprintf_r+0xc2a>
 8015092:	b29b      	uxth	r3, r3
 8015094:	9306      	str	r3, [sp, #24]
 8015096:	9107      	str	r1, [sp, #28]
 8015098:	e7d8      	b.n	801504c <_svfprintf_r+0xbdc>
 801509a:	2280      	movs	r2, #128	; 0x80
 801509c:	0031      	movs	r1, r6
 801509e:	0092      	lsls	r2, r2, #2
 80150a0:	4011      	ands	r1, r2
 80150a2:	4216      	tst	r6, r2
 80150a4:	d0f6      	beq.n	8015094 <_svfprintf_r+0xc24>
 80150a6:	b2db      	uxtb	r3, r3
 80150a8:	e7eb      	b.n	8015082 <_svfprintf_r+0xc12>
 80150aa:	9b07      	ldr	r3, [sp, #28]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d10b      	bne.n	80150c8 <_svfprintf_r+0xc58>
 80150b0:	9b06      	ldr	r3, [sp, #24]
 80150b2:	2b09      	cmp	r3, #9
 80150b4:	d808      	bhi.n	80150c8 <_svfprintf_r+0xc58>
 80150b6:	20e7      	movs	r0, #231	; 0xe7
 80150b8:	ab1e      	add	r3, sp, #120	; 0x78
 80150ba:	18c0      	adds	r0, r0, r3
 80150bc:	9b06      	ldr	r3, [sp, #24]
 80150be:	3330      	adds	r3, #48	; 0x30
 80150c0:	7003      	strb	r3, [r0, #0]
 80150c2:	9008      	str	r0, [sp, #32]
 80150c4:	f000 fc30 	bl	8015928 <_svfprintf_r+0x14b8>
 80150c8:	2480      	movs	r4, #128	; 0x80
 80150ca:	2300      	movs	r3, #0
 80150cc:	00e4      	lsls	r4, r4, #3
 80150ce:	930e      	str	r3, [sp, #56]	; 0x38
 80150d0:	a858      	add	r0, sp, #352	; 0x160
 80150d2:	402c      	ands	r4, r5
 80150d4:	1e43      	subs	r3, r0, #1
 80150d6:	9308      	str	r3, [sp, #32]
 80150d8:	220a      	movs	r2, #10
 80150da:	9806      	ldr	r0, [sp, #24]
 80150dc:	9907      	ldr	r1, [sp, #28]
 80150de:	2300      	movs	r3, #0
 80150e0:	f7eb fa24 	bl	800052c <__aeabi_uldivmod>
 80150e4:	9b08      	ldr	r3, [sp, #32]
 80150e6:	3230      	adds	r2, #48	; 0x30
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150ec:	3301      	adds	r3, #1
 80150ee:	930e      	str	r3, [sp, #56]	; 0x38
 80150f0:	2c00      	cmp	r4, #0
 80150f2:	d01d      	beq.n	8015130 <_svfprintf_r+0xcc0>
 80150f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d118      	bne.n	8015130 <_svfprintf_r+0xcc0>
 80150fe:	2aff      	cmp	r2, #255	; 0xff
 8015100:	d016      	beq.n	8015130 <_svfprintf_r+0xcc0>
 8015102:	9b07      	ldr	r3, [sp, #28]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d102      	bne.n	801510e <_svfprintf_r+0xc9e>
 8015108:	9b06      	ldr	r3, [sp, #24]
 801510a:	2b09      	cmp	r3, #9
 801510c:	d910      	bls.n	8015130 <_svfprintf_r+0xcc0>
 801510e:	9b08      	ldr	r3, [sp, #32]
 8015110:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015112:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015114:	1a9b      	subs	r3, r3, r2
 8015116:	0018      	movs	r0, r3
 8015118:	9308      	str	r3, [sp, #32]
 801511a:	f7fe fa86 	bl	801362a <strncpy>
 801511e:	2200      	movs	r2, #0
 8015120:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015122:	920e      	str	r2, [sp, #56]	; 0x38
 8015124:	785b      	ldrb	r3, [r3, #1]
 8015126:	1e5a      	subs	r2, r3, #1
 8015128:	4193      	sbcs	r3, r2
 801512a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801512c:	18d3      	adds	r3, r2, r3
 801512e:	9312      	str	r3, [sp, #72]	; 0x48
 8015130:	2300      	movs	r3, #0
 8015132:	9806      	ldr	r0, [sp, #24]
 8015134:	9907      	ldr	r1, [sp, #28]
 8015136:	220a      	movs	r2, #10
 8015138:	f7eb f9f8 	bl	800052c <__aeabi_uldivmod>
 801513c:	9b07      	ldr	r3, [sp, #28]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d103      	bne.n	801514a <_svfprintf_r+0xcda>
 8015142:	9b06      	ldr	r3, [sp, #24]
 8015144:	2b09      	cmp	r3, #9
 8015146:	d800      	bhi.n	801514a <_svfprintf_r+0xcda>
 8015148:	e3ee      	b.n	8015928 <_svfprintf_r+0x14b8>
 801514a:	9006      	str	r0, [sp, #24]
 801514c:	9107      	str	r1, [sp, #28]
 801514e:	9808      	ldr	r0, [sp, #32]
 8015150:	e7c0      	b.n	80150d4 <_svfprintf_r+0xc64>
 8015152:	200f      	movs	r0, #15
 8015154:	ab58      	add	r3, sp, #352	; 0x160
 8015156:	9308      	str	r3, [sp, #32]
 8015158:	9b08      	ldr	r3, [sp, #32]
 801515a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801515c:	3b01      	subs	r3, #1
 801515e:	9308      	str	r3, [sp, #32]
 8015160:	9b06      	ldr	r3, [sp, #24]
 8015162:	4003      	ands	r3, r0
 8015164:	5cd3      	ldrb	r3, [r2, r3]
 8015166:	9a08      	ldr	r2, [sp, #32]
 8015168:	7013      	strb	r3, [r2, #0]
 801516a:	9b07      	ldr	r3, [sp, #28]
 801516c:	0719      	lsls	r1, r3, #28
 801516e:	9b06      	ldr	r3, [sp, #24]
 8015170:	091a      	lsrs	r2, r3, #4
 8015172:	9b07      	ldr	r3, [sp, #28]
 8015174:	4311      	orrs	r1, r2
 8015176:	091b      	lsrs	r3, r3, #4
 8015178:	9307      	str	r3, [sp, #28]
 801517a:	000b      	movs	r3, r1
 801517c:	9a07      	ldr	r2, [sp, #28]
 801517e:	9106      	str	r1, [sp, #24]
 8015180:	4313      	orrs	r3, r2
 8015182:	d1e9      	bne.n	8015158 <_svfprintf_r+0xce8>
 8015184:	e3d0      	b.n	8015928 <_svfprintf_r+0x14b8>
 8015186:	aa58      	add	r2, sp, #352	; 0x160
 8015188:	9208      	str	r2, [sp, #32]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d000      	beq.n	8015190 <_svfprintf_r+0xd20>
 801518e:	e3cb      	b.n	8015928 <_svfprintf_r+0x14b8>
 8015190:	07f3      	lsls	r3, r6, #31
 8015192:	d400      	bmi.n	8015196 <_svfprintf_r+0xd26>
 8015194:	e3c8      	b.n	8015928 <_svfprintf_r+0x14b8>
 8015196:	20e7      	movs	r0, #231	; 0xe7
 8015198:	ab1e      	add	r3, sp, #120	; 0x78
 801519a:	18c0      	adds	r0, r0, r3
 801519c:	2330      	movs	r3, #48	; 0x30
 801519e:	e78f      	b.n	80150c0 <_svfprintf_r+0xc50>
 80151a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d100      	bne.n	80151a8 <_svfprintf_r+0xd38>
 80151a6:	e383      	b.n	80158b0 <_svfprintf_r+0x1440>
 80151a8:	221b      	movs	r2, #27
 80151aa:	a83f      	add	r0, sp, #252	; 0xfc
 80151ac:	7003      	strb	r3, [r0, #0]
 80151ae:	2300      	movs	r3, #0
 80151b0:	a91e      	add	r1, sp, #120	; 0x78
 80151b2:	1852      	adds	r2, r2, r1
 80151b4:	7013      	strb	r3, [r2, #0]
 80151b6:	940d      	str	r4, [sp, #52]	; 0x34
 80151b8:	f7ff fabf 	bl	801473a <_svfprintf_r+0x2ca>
 80151bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151be:	f7ff fb46 	bl	801484e <_svfprintf_r+0x3de>
 80151c2:	2010      	movs	r0, #16
 80151c4:	1812      	adds	r2, r2, r0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	922e      	str	r2, [sp, #184]	; 0xb8
 80151ca:	932d      	str	r3, [sp, #180]	; 0xb4
 80151cc:	2b07      	cmp	r3, #7
 80151ce:	dd08      	ble.n	80151e2 <_svfprintf_r+0xd72>
 80151d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80151d6:	f002 fbc5 	bl	8017964 <__ssprint_r>
 80151da:	2800      	cmp	r0, #0
 80151dc:	d000      	beq.n	80151e0 <_svfprintf_r+0xd70>
 80151de:	e346      	b.n	801586e <_svfprintf_r+0x13fe>
 80151e0:	a92f      	add	r1, sp, #188	; 0xbc
 80151e2:	000f      	movs	r7, r1
 80151e4:	3c10      	subs	r4, #16
 80151e6:	e4c7      	b.n	8014b78 <_svfprintf_r+0x708>
 80151e8:	2010      	movs	r0, #16
 80151ea:	1812      	adds	r2, r2, r0
 80151ec:	6078      	str	r0, [r7, #4]
 80151ee:	922e      	str	r2, [sp, #184]	; 0xb8
 80151f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80151f2:	2b07      	cmp	r3, #7
 80151f4:	dd08      	ble.n	8015208 <_svfprintf_r+0xd98>
 80151f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80151fa:	aa2c      	add	r2, sp, #176	; 0xb0
 80151fc:	f002 fbb2 	bl	8017964 <__ssprint_r>
 8015200:	2800      	cmp	r0, #0
 8015202:	d000      	beq.n	8015206 <_svfprintf_r+0xd96>
 8015204:	e333      	b.n	801586e <_svfprintf_r+0x13fe>
 8015206:	a92f      	add	r1, sp, #188	; 0xbc
 8015208:	000f      	movs	r7, r1
 801520a:	3c10      	subs	r4, #16
 801520c:	e513      	b.n	8014c36 <_svfprintf_r+0x7c6>
 801520e:	2010      	movs	r0, #16
 8015210:	1812      	adds	r2, r2, r0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	922e      	str	r2, [sp, #184]	; 0xb8
 8015216:	932d      	str	r3, [sp, #180]	; 0xb4
 8015218:	2b07      	cmp	r3, #7
 801521a:	dd08      	ble.n	801522e <_svfprintf_r+0xdbe>
 801521c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801521e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015220:	aa2c      	add	r2, sp, #176	; 0xb0
 8015222:	f002 fb9f 	bl	8017964 <__ssprint_r>
 8015226:	2800      	cmp	r0, #0
 8015228:	d000      	beq.n	801522c <_svfprintf_r+0xdbc>
 801522a:	e320      	b.n	801586e <_svfprintf_r+0x13fe>
 801522c:	a92f      	add	r1, sp, #188	; 0xbc
 801522e:	000f      	movs	r7, r1
 8015230:	3c10      	subs	r4, #16
 8015232:	e521      	b.n	8014c78 <_svfprintf_r+0x808>
 8015234:	fffffbff 	.word	0xfffffbff
 8015238:	0801c538 	.word	0x0801c538
 801523c:	0801c549 	.word	0x0801c549
 8015240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015242:	2b65      	cmp	r3, #101	; 0x65
 8015244:	dc00      	bgt.n	8015248 <_svfprintf_r+0xdd8>
 8015246:	e257      	b.n	80156f8 <_svfprintf_r+0x1288>
 8015248:	9814      	ldr	r0, [sp, #80]	; 0x50
 801524a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801524c:	2200      	movs	r2, #0
 801524e:	2300      	movs	r3, #0
 8015250:	f7eb f904 	bl	800045c <__aeabi_dcmpeq>
 8015254:	2800      	cmp	r0, #0
 8015256:	d07c      	beq.n	8015352 <_svfprintf_r+0xee2>
 8015258:	4b80      	ldr	r3, [pc, #512]	; (801545c <_svfprintf_r+0xfec>)
 801525a:	603b      	str	r3, [r7, #0]
 801525c:	2301      	movs	r3, #1
 801525e:	607b      	str	r3, [r7, #4]
 8015260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015262:	3708      	adds	r7, #8
 8015264:	3301      	adds	r3, #1
 8015266:	932e      	str	r3, [sp, #184]	; 0xb8
 8015268:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801526a:	9308      	str	r3, [sp, #32]
 801526c:	3301      	adds	r3, #1
 801526e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015270:	2b07      	cmp	r3, #7
 8015272:	dd08      	ble.n	8015286 <_svfprintf_r+0xe16>
 8015274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015276:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015278:	aa2c      	add	r2, sp, #176	; 0xb0
 801527a:	f002 fb73 	bl	8017964 <__ssprint_r>
 801527e:	2800      	cmp	r0, #0
 8015280:	d000      	beq.n	8015284 <_svfprintf_r+0xe14>
 8015282:	e2f4      	b.n	801586e <_svfprintf_r+0x13fe>
 8015284:	af2f      	add	r7, sp, #188	; 0xbc
 8015286:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801528a:	4293      	cmp	r3, r2
 801528c:	db01      	blt.n	8015292 <_svfprintf_r+0xe22>
 801528e:	07f3      	lsls	r3, r6, #31
 8015290:	d51d      	bpl.n	80152ce <_svfprintf_r+0xe5e>
 8015292:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015294:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015296:	4694      	mov	ip, r2
 8015298:	603b      	str	r3, [r7, #0]
 801529a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801529c:	607b      	str	r3, [r7, #4]
 801529e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152a0:	3708      	adds	r7, #8
 80152a2:	4463      	add	r3, ip
 80152a4:	932e      	str	r3, [sp, #184]	; 0xb8
 80152a6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152a8:	9308      	str	r3, [sp, #32]
 80152aa:	3301      	adds	r3, #1
 80152ac:	932d      	str	r3, [sp, #180]	; 0xb4
 80152ae:	2b07      	cmp	r3, #7
 80152b0:	dd08      	ble.n	80152c4 <_svfprintf_r+0xe54>
 80152b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80152b8:	f002 fb54 	bl	8017964 <__ssprint_r>
 80152bc:	2800      	cmp	r0, #0
 80152be:	d000      	beq.n	80152c2 <_svfprintf_r+0xe52>
 80152c0:	e2d5      	b.n	801586e <_svfprintf_r+0x13fe>
 80152c2:	af2f      	add	r7, sp, #188	; 0xbc
 80152c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152c6:	2510      	movs	r5, #16
 80152c8:	1e5c      	subs	r4, r3, #1
 80152ca:	2c00      	cmp	r4, #0
 80152cc:	dc2f      	bgt.n	801532e <_svfprintf_r+0xebe>
 80152ce:	0773      	lsls	r3, r6, #29
 80152d0:	d500      	bpl.n	80152d4 <_svfprintf_r+0xe64>
 80152d2:	e2ae      	b.n	8015832 <_svfprintf_r+0x13c2>
 80152d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80152d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80152d8:	4293      	cmp	r3, r2
 80152da:	da00      	bge.n	80152de <_svfprintf_r+0xe6e>
 80152dc:	0013      	movs	r3, r2
 80152de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80152e0:	18d3      	adds	r3, r2, r3
 80152e2:	9317      	str	r3, [sp, #92]	; 0x5c
 80152e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152e6:	9308      	str	r3, [sp, #32]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d007      	beq.n	80152fc <_svfprintf_r+0xe8c>
 80152ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152f0:	aa2c      	add	r2, sp, #176	; 0xb0
 80152f2:	f002 fb37 	bl	8017964 <__ssprint_r>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d000      	beq.n	80152fc <_svfprintf_r+0xe8c>
 80152fa:	e2b8      	b.n	801586e <_svfprintf_r+0x13fe>
 80152fc:	2300      	movs	r3, #0
 80152fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015302:	2b00      	cmp	r3, #0
 8015304:	d000      	beq.n	8015308 <_svfprintf_r+0xe98>
 8015306:	e2ce      	b.n	80158a6 <_svfprintf_r+0x1436>
 8015308:	af2f      	add	r7, sp, #188	; 0xbc
 801530a:	e5e8      	b.n	8014ede <_svfprintf_r+0xa6e>
 801530c:	3210      	adds	r2, #16
 801530e:	607d      	str	r5, [r7, #4]
 8015310:	922e      	str	r2, [sp, #184]	; 0xb8
 8015312:	932d      	str	r3, [sp, #180]	; 0xb4
 8015314:	2b07      	cmp	r3, #7
 8015316:	dd08      	ble.n	801532a <_svfprintf_r+0xeba>
 8015318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801531a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801531c:	aa2c      	add	r2, sp, #176	; 0xb0
 801531e:	f002 fb21 	bl	8017964 <__ssprint_r>
 8015322:	2800      	cmp	r0, #0
 8015324:	d000      	beq.n	8015328 <_svfprintf_r+0xeb8>
 8015326:	e2a2      	b.n	801586e <_svfprintf_r+0x13fe>
 8015328:	a92f      	add	r1, sp, #188	; 0xbc
 801532a:	000f      	movs	r7, r1
 801532c:	3c10      	subs	r4, #16
 801532e:	0039      	movs	r1, r7
 8015330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015332:	484b      	ldr	r0, [pc, #300]	; (8015460 <_svfprintf_r+0xff0>)
 8015334:	9308      	str	r3, [sp, #32]
 8015336:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015338:	3301      	adds	r3, #1
 801533a:	3108      	adds	r1, #8
 801533c:	6038      	str	r0, [r7, #0]
 801533e:	2c10      	cmp	r4, #16
 8015340:	dce4      	bgt.n	801530c <_svfprintf_r+0xe9c>
 8015342:	607c      	str	r4, [r7, #4]
 8015344:	18a4      	adds	r4, r4, r2
 8015346:	000f      	movs	r7, r1
 8015348:	942e      	str	r4, [sp, #184]	; 0xb8
 801534a:	932d      	str	r3, [sp, #180]	; 0xb4
 801534c:	2b07      	cmp	r3, #7
 801534e:	ddbe      	ble.n	80152ce <_svfprintf_r+0xe5e>
 8015350:	e067      	b.n	8015422 <_svfprintf_r+0xfb2>
 8015352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015354:	2b00      	cmp	r3, #0
 8015356:	dd00      	ble.n	801535a <_svfprintf_r+0xeea>
 8015358:	e084      	b.n	8015464 <_svfprintf_r+0xff4>
 801535a:	4b40      	ldr	r3, [pc, #256]	; (801545c <_svfprintf_r+0xfec>)
 801535c:	603b      	str	r3, [r7, #0]
 801535e:	2301      	movs	r3, #1
 8015360:	607b      	str	r3, [r7, #4]
 8015362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015364:	3708      	adds	r7, #8
 8015366:	3301      	adds	r3, #1
 8015368:	932e      	str	r3, [sp, #184]	; 0xb8
 801536a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801536c:	9309      	str	r3, [sp, #36]	; 0x24
 801536e:	3301      	adds	r3, #1
 8015370:	932d      	str	r3, [sp, #180]	; 0xb4
 8015372:	2b07      	cmp	r3, #7
 8015374:	dd08      	ble.n	8015388 <_svfprintf_r+0xf18>
 8015376:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015378:	980a      	ldr	r0, [sp, #40]	; 0x28
 801537a:	aa2c      	add	r2, sp, #176	; 0xb0
 801537c:	f002 faf2 	bl	8017964 <__ssprint_r>
 8015380:	2800      	cmp	r0, #0
 8015382:	d000      	beq.n	8015386 <_svfprintf_r+0xf16>
 8015384:	e273      	b.n	801586e <_svfprintf_r+0x13fe>
 8015386:	af2f      	add	r7, sp, #188	; 0xbc
 8015388:	9926      	ldr	r1, [sp, #152]	; 0x98
 801538a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801538c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801538e:	430b      	orrs	r3, r1
 8015390:	2101      	movs	r1, #1
 8015392:	4031      	ands	r1, r6
 8015394:	430b      	orrs	r3, r1
 8015396:	d09a      	beq.n	80152ce <_svfprintf_r+0xe5e>
 8015398:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801539a:	603b      	str	r3, [r7, #0]
 801539c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801539e:	607b      	str	r3, [r7, #4]
 80153a0:	189a      	adds	r2, r3, r2
 80153a2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80153a6:	9309      	str	r3, [sp, #36]	; 0x24
 80153a8:	3301      	adds	r3, #1
 80153aa:	932d      	str	r3, [sp, #180]	; 0xb4
 80153ac:	3708      	adds	r7, #8
 80153ae:	2b07      	cmp	r3, #7
 80153b0:	dd08      	ble.n	80153c4 <_svfprintf_r+0xf54>
 80153b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80153b8:	f002 fad4 	bl	8017964 <__ssprint_r>
 80153bc:	2800      	cmp	r0, #0
 80153be:	d000      	beq.n	80153c2 <_svfprintf_r+0xf52>
 80153c0:	e255      	b.n	801586e <_svfprintf_r+0x13fe>
 80153c2:	af2f      	add	r7, sp, #188	; 0xbc
 80153c4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80153c6:	2c00      	cmp	r4, #0
 80153c8:	da1a      	bge.n	8015400 <_svfprintf_r+0xf90>
 80153ca:	0039      	movs	r1, r7
 80153cc:	2510      	movs	r5, #16
 80153ce:	4264      	negs	r4, r4
 80153d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80153d2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80153d4:	9309      	str	r3, [sp, #36]	; 0x24
 80153d6:	1c5a      	adds	r2, r3, #1
 80153d8:	4b21      	ldr	r3, [pc, #132]	; (8015460 <_svfprintf_r+0xff0>)
 80153da:	3708      	adds	r7, #8
 80153dc:	600b      	str	r3, [r1, #0]
 80153de:	2c10      	cmp	r4, #16
 80153e0:	dc29      	bgt.n	8015436 <_svfprintf_r+0xfc6>
 80153e2:	604c      	str	r4, [r1, #4]
 80153e4:	1824      	adds	r4, r4, r0
 80153e6:	942e      	str	r4, [sp, #184]	; 0xb8
 80153e8:	922d      	str	r2, [sp, #180]	; 0xb4
 80153ea:	2a07      	cmp	r2, #7
 80153ec:	dd08      	ble.n	8015400 <_svfprintf_r+0xf90>
 80153ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80153f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80153f4:	f002 fab6 	bl	8017964 <__ssprint_r>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d000      	beq.n	80153fe <_svfprintf_r+0xf8e>
 80153fc:	e237      	b.n	801586e <_svfprintf_r+0x13fe>
 80153fe:	af2f      	add	r7, sp, #188	; 0xbc
 8015400:	9b08      	ldr	r3, [sp, #32]
 8015402:	603b      	str	r3, [r7, #0]
 8015404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015406:	607b      	str	r3, [r7, #4]
 8015408:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801540a:	001a      	movs	r2, r3
 801540c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801540e:	469c      	mov	ip, r3
 8015410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015412:	4462      	add	r2, ip
 8015414:	922e      	str	r2, [sp, #184]	; 0xb8
 8015416:	1c5a      	adds	r2, r3, #1
 8015418:	9308      	str	r3, [sp, #32]
 801541a:	922d      	str	r2, [sp, #180]	; 0xb4
 801541c:	2a07      	cmp	r2, #7
 801541e:	dc00      	bgt.n	8015422 <_svfprintf_r+0xfb2>
 8015420:	e46b      	b.n	8014cfa <_svfprintf_r+0x88a>
 8015422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015424:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015426:	aa2c      	add	r2, sp, #176	; 0xb0
 8015428:	f002 fa9c 	bl	8017964 <__ssprint_r>
 801542c:	2800      	cmp	r0, #0
 801542e:	d000      	beq.n	8015432 <_svfprintf_r+0xfc2>
 8015430:	e21d      	b.n	801586e <_svfprintf_r+0x13fe>
 8015432:	af2f      	add	r7, sp, #188	; 0xbc
 8015434:	e74b      	b.n	80152ce <_svfprintf_r+0xe5e>
 8015436:	3010      	adds	r0, #16
 8015438:	604d      	str	r5, [r1, #4]
 801543a:	902e      	str	r0, [sp, #184]	; 0xb8
 801543c:	922d      	str	r2, [sp, #180]	; 0xb4
 801543e:	2a07      	cmp	r2, #7
 8015440:	dd08      	ble.n	8015454 <_svfprintf_r+0xfe4>
 8015442:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015446:	aa2c      	add	r2, sp, #176	; 0xb0
 8015448:	f002 fa8c 	bl	8017964 <__ssprint_r>
 801544c:	2800      	cmp	r0, #0
 801544e:	d000      	beq.n	8015452 <_svfprintf_r+0xfe2>
 8015450:	e20d      	b.n	801586e <_svfprintf_r+0x13fe>
 8015452:	af2f      	add	r7, sp, #188	; 0xbc
 8015454:	0039      	movs	r1, r7
 8015456:	3c10      	subs	r4, #16
 8015458:	e7ba      	b.n	80153d0 <_svfprintf_r+0xf60>
 801545a:	46c0      	nop			; (mov r8, r8)
 801545c:	0801c55a 	.word	0x0801c55a
 8015460:	0801c56c 	.word	0x0801c56c
 8015464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015466:	002c      	movs	r4, r5
 8015468:	429d      	cmp	r5, r3
 801546a:	dd00      	ble.n	801546e <_svfprintf_r+0xffe>
 801546c:	001c      	movs	r4, r3
 801546e:	2c00      	cmp	r4, #0
 8015470:	dd15      	ble.n	801549e <_svfprintf_r+0x102e>
 8015472:	9b08      	ldr	r3, [sp, #32]
 8015474:	607c      	str	r4, [r7, #4]
 8015476:	603b      	str	r3, [r7, #0]
 8015478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801547a:	3708      	adds	r7, #8
 801547c:	18e3      	adds	r3, r4, r3
 801547e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015480:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015482:	9309      	str	r3, [sp, #36]	; 0x24
 8015484:	3301      	adds	r3, #1
 8015486:	932d      	str	r3, [sp, #180]	; 0xb4
 8015488:	2b07      	cmp	r3, #7
 801548a:	dd08      	ble.n	801549e <_svfprintf_r+0x102e>
 801548c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801548e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015490:	aa2c      	add	r2, sp, #176	; 0xb0
 8015492:	f002 fa67 	bl	8017964 <__ssprint_r>
 8015496:	2800      	cmp	r0, #0
 8015498:	d000      	beq.n	801549c <_svfprintf_r+0x102c>
 801549a:	e1e8      	b.n	801586e <_svfprintf_r+0x13fe>
 801549c:	af2f      	add	r7, sp, #188	; 0xbc
 801549e:	43e3      	mvns	r3, r4
 80154a0:	17db      	asrs	r3, r3, #31
 80154a2:	401c      	ands	r4, r3
 80154a4:	1b2c      	subs	r4, r5, r4
 80154a6:	2c00      	cmp	r4, #0
 80154a8:	dd1a      	ble.n	80154e0 <_svfprintf_r+0x1070>
 80154aa:	0039      	movs	r1, r7
 80154ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80154ae:	48ca      	ldr	r0, [pc, #808]	; (80157d8 <_svfprintf_r+0x1368>)
 80154b0:	9309      	str	r3, [sp, #36]	; 0x24
 80154b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80154b4:	3301      	adds	r3, #1
 80154b6:	3108      	adds	r1, #8
 80154b8:	6038      	str	r0, [r7, #0]
 80154ba:	2c10      	cmp	r4, #16
 80154bc:	dd00      	ble.n	80154c0 <_svfprintf_r+0x1050>
 80154be:	e089      	b.n	80155d4 <_svfprintf_r+0x1164>
 80154c0:	607c      	str	r4, [r7, #4]
 80154c2:	18a4      	adds	r4, r4, r2
 80154c4:	000f      	movs	r7, r1
 80154c6:	942e      	str	r4, [sp, #184]	; 0xb8
 80154c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80154ca:	2b07      	cmp	r3, #7
 80154cc:	dd08      	ble.n	80154e0 <_svfprintf_r+0x1070>
 80154ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80154d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80154d4:	f002 fa46 	bl	8017964 <__ssprint_r>
 80154d8:	2800      	cmp	r0, #0
 80154da:	d000      	beq.n	80154de <_svfprintf_r+0x106e>
 80154dc:	e1c7      	b.n	801586e <_svfprintf_r+0x13fe>
 80154de:	af2f      	add	r7, sp, #188	; 0xbc
 80154e0:	9b08      	ldr	r3, [sp, #32]
 80154e2:	195d      	adds	r5, r3, r5
 80154e4:	0573      	lsls	r3, r6, #21
 80154e6:	d50d      	bpl.n	8015504 <_svfprintf_r+0x1094>
 80154e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d000      	beq.n	80154f0 <_svfprintf_r+0x1080>
 80154ee:	e084      	b.n	80155fa <_svfprintf_r+0x118a>
 80154f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d000      	beq.n	80154f8 <_svfprintf_r+0x1088>
 80154f6:	e083      	b.n	8015600 <_svfprintf_r+0x1190>
 80154f8:	9b08      	ldr	r3, [sp, #32]
 80154fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154fc:	189b      	adds	r3, r3, r2
 80154fe:	429d      	cmp	r5, r3
 8015500:	d900      	bls.n	8015504 <_svfprintf_r+0x1094>
 8015502:	001d      	movs	r5, r3
 8015504:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015508:	4293      	cmp	r3, r2
 801550a:	db01      	blt.n	8015510 <_svfprintf_r+0x10a0>
 801550c:	07f3      	lsls	r3, r6, #31
 801550e:	d518      	bpl.n	8015542 <_svfprintf_r+0x10d2>
 8015510:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015512:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015514:	4694      	mov	ip, r2
 8015516:	603b      	str	r3, [r7, #0]
 8015518:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801551a:	607b      	str	r3, [r7, #4]
 801551c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801551e:	3708      	adds	r7, #8
 8015520:	4463      	add	r3, ip
 8015522:	932e      	str	r3, [sp, #184]	; 0xb8
 8015524:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015526:	9309      	str	r3, [sp, #36]	; 0x24
 8015528:	3301      	adds	r3, #1
 801552a:	932d      	str	r3, [sp, #180]	; 0xb4
 801552c:	2b07      	cmp	r3, #7
 801552e:	dd08      	ble.n	8015542 <_svfprintf_r+0x10d2>
 8015530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015532:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015534:	aa2c      	add	r2, sp, #176	; 0xb0
 8015536:	f002 fa15 	bl	8017964 <__ssprint_r>
 801553a:	2800      	cmp	r0, #0
 801553c:	d000      	beq.n	8015540 <_svfprintf_r+0x10d0>
 801553e:	e196      	b.n	801586e <_svfprintf_r+0x13fe>
 8015540:	af2f      	add	r7, sp, #188	; 0xbc
 8015542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015544:	9808      	ldr	r0, [sp, #32]
 8015546:	469c      	mov	ip, r3
 8015548:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801554a:	4460      	add	r0, ip
 801554c:	1b40      	subs	r0, r0, r5
 801554e:	1a9c      	subs	r4, r3, r2
 8015550:	4284      	cmp	r4, r0
 8015552:	dd00      	ble.n	8015556 <_svfprintf_r+0x10e6>
 8015554:	0004      	movs	r4, r0
 8015556:	2c00      	cmp	r4, #0
 8015558:	dd14      	ble.n	8015584 <_svfprintf_r+0x1114>
 801555a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801555c:	603d      	str	r5, [r7, #0]
 801555e:	191b      	adds	r3, r3, r4
 8015560:	932e      	str	r3, [sp, #184]	; 0xb8
 8015562:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015564:	607c      	str	r4, [r7, #4]
 8015566:	9308      	str	r3, [sp, #32]
 8015568:	3301      	adds	r3, #1
 801556a:	932d      	str	r3, [sp, #180]	; 0xb4
 801556c:	3708      	adds	r7, #8
 801556e:	2b07      	cmp	r3, #7
 8015570:	dd08      	ble.n	8015584 <_svfprintf_r+0x1114>
 8015572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015574:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015576:	aa2c      	add	r2, sp, #176	; 0xb0
 8015578:	f002 f9f4 	bl	8017964 <__ssprint_r>
 801557c:	2800      	cmp	r0, #0
 801557e:	d000      	beq.n	8015582 <_svfprintf_r+0x1112>
 8015580:	e175      	b.n	801586e <_svfprintf_r+0x13fe>
 8015582:	af2f      	add	r7, sp, #188	; 0xbc
 8015584:	43e3      	mvns	r3, r4
 8015586:	17db      	asrs	r3, r3, #31
 8015588:	401c      	ands	r4, r3
 801558a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801558c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801558e:	2510      	movs	r5, #16
 8015590:	1a9b      	subs	r3, r3, r2
 8015592:	1b1c      	subs	r4, r3, r4
 8015594:	2c00      	cmp	r4, #0
 8015596:	dc00      	bgt.n	801559a <_svfprintf_r+0x112a>
 8015598:	e699      	b.n	80152ce <_svfprintf_r+0xe5e>
 801559a:	0039      	movs	r1, r7
 801559c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801559e:	488e      	ldr	r0, [pc, #568]	; (80157d8 <_svfprintf_r+0x1368>)
 80155a0:	9308      	str	r3, [sp, #32]
 80155a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80155a4:	3301      	adds	r3, #1
 80155a6:	3108      	adds	r1, #8
 80155a8:	6038      	str	r0, [r7, #0]
 80155aa:	2c10      	cmp	r4, #16
 80155ac:	dc00      	bgt.n	80155b0 <_svfprintf_r+0x1140>
 80155ae:	e6c8      	b.n	8015342 <_svfprintf_r+0xed2>
 80155b0:	3210      	adds	r2, #16
 80155b2:	607d      	str	r5, [r7, #4]
 80155b4:	922e      	str	r2, [sp, #184]	; 0xb8
 80155b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80155b8:	2b07      	cmp	r3, #7
 80155ba:	dd08      	ble.n	80155ce <_svfprintf_r+0x115e>
 80155bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80155c2:	f002 f9cf 	bl	8017964 <__ssprint_r>
 80155c6:	2800      	cmp	r0, #0
 80155c8:	d000      	beq.n	80155cc <_svfprintf_r+0x115c>
 80155ca:	e150      	b.n	801586e <_svfprintf_r+0x13fe>
 80155cc:	a92f      	add	r1, sp, #188	; 0xbc
 80155ce:	000f      	movs	r7, r1
 80155d0:	3c10      	subs	r4, #16
 80155d2:	e7e2      	b.n	801559a <_svfprintf_r+0x112a>
 80155d4:	2010      	movs	r0, #16
 80155d6:	1812      	adds	r2, r2, r0
 80155d8:	6078      	str	r0, [r7, #4]
 80155da:	922e      	str	r2, [sp, #184]	; 0xb8
 80155dc:	932d      	str	r3, [sp, #180]	; 0xb4
 80155de:	2b07      	cmp	r3, #7
 80155e0:	dd08      	ble.n	80155f4 <_svfprintf_r+0x1184>
 80155e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80155e8:	f002 f9bc 	bl	8017964 <__ssprint_r>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	d000      	beq.n	80155f2 <_svfprintf_r+0x1182>
 80155f0:	e13d      	b.n	801586e <_svfprintf_r+0x13fe>
 80155f2:	a92f      	add	r1, sp, #188	; 0xbc
 80155f4:	000f      	movs	r7, r1
 80155f6:	3c10      	subs	r4, #16
 80155f8:	e757      	b.n	80154aa <_svfprintf_r+0x103a>
 80155fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d061      	beq.n	80156c4 <_svfprintf_r+0x1254>
 8015600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015602:	3b01      	subs	r3, #1
 8015604:	9310      	str	r3, [sp, #64]	; 0x40
 8015606:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801560a:	4694      	mov	ip, r2
 801560c:	603b      	str	r3, [r7, #0]
 801560e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015610:	607b      	str	r3, [r7, #4]
 8015612:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015614:	3708      	adds	r7, #8
 8015616:	4463      	add	r3, ip
 8015618:	932e      	str	r3, [sp, #184]	; 0xb8
 801561a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801561c:	9309      	str	r3, [sp, #36]	; 0x24
 801561e:	3301      	adds	r3, #1
 8015620:	932d      	str	r3, [sp, #180]	; 0xb4
 8015622:	2b07      	cmp	r3, #7
 8015624:	dd08      	ble.n	8015638 <_svfprintf_r+0x11c8>
 8015626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015628:	980a      	ldr	r0, [sp, #40]	; 0x28
 801562a:	aa2c      	add	r2, sp, #176	; 0xb0
 801562c:	f002 f99a 	bl	8017964 <__ssprint_r>
 8015630:	2800      	cmp	r0, #0
 8015632:	d000      	beq.n	8015636 <_svfprintf_r+0x11c6>
 8015634:	e11b      	b.n	801586e <_svfprintf_r+0x13fe>
 8015636:	af2f      	add	r7, sp, #188	; 0xbc
 8015638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801563a:	9b08      	ldr	r3, [sp, #32]
 801563c:	189b      	adds	r3, r3, r2
 801563e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015640:	1b5b      	subs	r3, r3, r5
 8015642:	7814      	ldrb	r4, [r2, #0]
 8015644:	429c      	cmp	r4, r3
 8015646:	dd00      	ble.n	801564a <_svfprintf_r+0x11da>
 8015648:	001c      	movs	r4, r3
 801564a:	2c00      	cmp	r4, #0
 801564c:	dd14      	ble.n	8015678 <_svfprintf_r+0x1208>
 801564e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015650:	603d      	str	r5, [r7, #0]
 8015652:	18e3      	adds	r3, r4, r3
 8015654:	932e      	str	r3, [sp, #184]	; 0xb8
 8015656:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015658:	607c      	str	r4, [r7, #4]
 801565a:	9309      	str	r3, [sp, #36]	; 0x24
 801565c:	3301      	adds	r3, #1
 801565e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015660:	3708      	adds	r7, #8
 8015662:	2b07      	cmp	r3, #7
 8015664:	dd08      	ble.n	8015678 <_svfprintf_r+0x1208>
 8015666:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015668:	980a      	ldr	r0, [sp, #40]	; 0x28
 801566a:	aa2c      	add	r2, sp, #176	; 0xb0
 801566c:	f002 f97a 	bl	8017964 <__ssprint_r>
 8015670:	2800      	cmp	r0, #0
 8015672:	d000      	beq.n	8015676 <_svfprintf_r+0x1206>
 8015674:	e0fb      	b.n	801586e <_svfprintf_r+0x13fe>
 8015676:	af2f      	add	r7, sp, #188	; 0xbc
 8015678:	43e3      	mvns	r3, r4
 801567a:	17db      	asrs	r3, r3, #31
 801567c:	401c      	ands	r4, r3
 801567e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	1b1c      	subs	r4, r3, r4
 8015684:	2c00      	cmp	r4, #0
 8015686:	dd19      	ble.n	80156bc <_svfprintf_r+0x124c>
 8015688:	0039      	movs	r1, r7
 801568a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801568c:	4852      	ldr	r0, [pc, #328]	; (80157d8 <_svfprintf_r+0x1368>)
 801568e:	9309      	str	r3, [sp, #36]	; 0x24
 8015690:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015692:	3301      	adds	r3, #1
 8015694:	3108      	adds	r1, #8
 8015696:	6038      	str	r0, [r7, #0]
 8015698:	2c10      	cmp	r4, #16
 801569a:	dc1a      	bgt.n	80156d2 <_svfprintf_r+0x1262>
 801569c:	607c      	str	r4, [r7, #4]
 801569e:	1914      	adds	r4, r2, r4
 80156a0:	000f      	movs	r7, r1
 80156a2:	942e      	str	r4, [sp, #184]	; 0xb8
 80156a4:	932d      	str	r3, [sp, #180]	; 0xb4
 80156a6:	2b07      	cmp	r3, #7
 80156a8:	dd08      	ble.n	80156bc <_svfprintf_r+0x124c>
 80156aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80156b0:	f002 f958 	bl	8017964 <__ssprint_r>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d000      	beq.n	80156ba <_svfprintf_r+0x124a>
 80156b8:	e0d9      	b.n	801586e <_svfprintf_r+0x13fe>
 80156ba:	af2f      	add	r7, sp, #188	; 0xbc
 80156bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	18ed      	adds	r5, r5, r3
 80156c2:	e711      	b.n	80154e8 <_svfprintf_r+0x1078>
 80156c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156c6:	3b01      	subs	r3, #1
 80156c8:	9312      	str	r3, [sp, #72]	; 0x48
 80156ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80156cc:	3b01      	subs	r3, #1
 80156ce:	9311      	str	r3, [sp, #68]	; 0x44
 80156d0:	e799      	b.n	8015606 <_svfprintf_r+0x1196>
 80156d2:	2010      	movs	r0, #16
 80156d4:	1812      	adds	r2, r2, r0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	922e      	str	r2, [sp, #184]	; 0xb8
 80156da:	932d      	str	r3, [sp, #180]	; 0xb4
 80156dc:	2b07      	cmp	r3, #7
 80156de:	dd08      	ble.n	80156f2 <_svfprintf_r+0x1282>
 80156e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156e4:	aa2c      	add	r2, sp, #176	; 0xb0
 80156e6:	f002 f93d 	bl	8017964 <__ssprint_r>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d000      	beq.n	80156f0 <_svfprintf_r+0x1280>
 80156ee:	e0be      	b.n	801586e <_svfprintf_r+0x13fe>
 80156f0:	a92f      	add	r1, sp, #188	; 0xbc
 80156f2:	000f      	movs	r7, r1
 80156f4:	3c10      	subs	r4, #16
 80156f6:	e7c7      	b.n	8015688 <_svfprintf_r+0x1218>
 80156f8:	003c      	movs	r4, r7
 80156fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156fc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80156fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015700:	9309      	str	r3, [sp, #36]	; 0x24
 8015702:	3101      	adds	r1, #1
 8015704:	3301      	adds	r3, #1
 8015706:	3408      	adds	r4, #8
 8015708:	2a01      	cmp	r2, #1
 801570a:	dc03      	bgt.n	8015714 <_svfprintf_r+0x12a4>
 801570c:	2201      	movs	r2, #1
 801570e:	4216      	tst	r6, r2
 8015710:	d100      	bne.n	8015714 <_svfprintf_r+0x12a4>
 8015712:	e089      	b.n	8015828 <_svfprintf_r+0x13b8>
 8015714:	9a08      	ldr	r2, [sp, #32]
 8015716:	912e      	str	r1, [sp, #184]	; 0xb8
 8015718:	603a      	str	r2, [r7, #0]
 801571a:	2201      	movs	r2, #1
 801571c:	932d      	str	r3, [sp, #180]	; 0xb4
 801571e:	607a      	str	r2, [r7, #4]
 8015720:	2b07      	cmp	r3, #7
 8015722:	dd08      	ble.n	8015736 <_svfprintf_r+0x12c6>
 8015724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015726:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015728:	aa2c      	add	r2, sp, #176	; 0xb0
 801572a:	f002 f91b 	bl	8017964 <__ssprint_r>
 801572e:	2800      	cmp	r0, #0
 8015730:	d000      	beq.n	8015734 <_svfprintf_r+0x12c4>
 8015732:	e09c      	b.n	801586e <_svfprintf_r+0x13fe>
 8015734:	ac2f      	add	r4, sp, #188	; 0xbc
 8015736:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015738:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801573a:	4694      	mov	ip, r2
 801573c:	6023      	str	r3, [r4, #0]
 801573e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015740:	6063      	str	r3, [r4, #4]
 8015742:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015744:	3408      	adds	r4, #8
 8015746:	4463      	add	r3, ip
 8015748:	932e      	str	r3, [sp, #184]	; 0xb8
 801574a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801574c:	9309      	str	r3, [sp, #36]	; 0x24
 801574e:	3301      	adds	r3, #1
 8015750:	932d      	str	r3, [sp, #180]	; 0xb4
 8015752:	2b07      	cmp	r3, #7
 8015754:	dd08      	ble.n	8015768 <_svfprintf_r+0x12f8>
 8015756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015758:	980a      	ldr	r0, [sp, #40]	; 0x28
 801575a:	aa2c      	add	r2, sp, #176	; 0xb0
 801575c:	f002 f902 	bl	8017964 <__ssprint_r>
 8015760:	2800      	cmp	r0, #0
 8015762:	d000      	beq.n	8015766 <_svfprintf_r+0x12f6>
 8015764:	e083      	b.n	801586e <_svfprintf_r+0x13fe>
 8015766:	ac2f      	add	r4, sp, #188	; 0xbc
 8015768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801576a:	2200      	movs	r2, #0
 801576c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801576e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015770:	1e5d      	subs	r5, r3, #1
 8015772:	2300      	movs	r3, #0
 8015774:	f7ea fe72 	bl	800045c <__aeabi_dcmpeq>
 8015778:	2800      	cmp	r0, #0
 801577a:	d12f      	bne.n	80157dc <_svfprintf_r+0x136c>
 801577c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801577e:	9808      	ldr	r0, [sp, #32]
 8015780:	9309      	str	r3, [sp, #36]	; 0x24
 8015782:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015786:	1c59      	adds	r1, r3, #1
 8015788:	930f      	str	r3, [sp, #60]	; 0x3c
 801578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578c:	3001      	adds	r0, #1
 801578e:	3b01      	subs	r3, #1
 8015790:	189b      	adds	r3, r3, r2
 8015792:	6020      	str	r0, [r4, #0]
 8015794:	6065      	str	r5, [r4, #4]
 8015796:	932e      	str	r3, [sp, #184]	; 0xb8
 8015798:	912d      	str	r1, [sp, #180]	; 0xb4
 801579a:	3408      	adds	r4, #8
 801579c:	2907      	cmp	r1, #7
 801579e:	dd07      	ble.n	80157b0 <_svfprintf_r+0x1340>
 80157a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80157a4:	aa2c      	add	r2, sp, #176	; 0xb0
 80157a6:	f002 f8dd 	bl	8017964 <__ssprint_r>
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d15f      	bne.n	801586e <_svfprintf_r+0x13fe>
 80157ae:	ac2f      	add	r4, sp, #188	; 0xbc
 80157b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80157b2:	ab28      	add	r3, sp, #160	; 0xa0
 80157b4:	4694      	mov	ip, r2
 80157b6:	6023      	str	r3, [r4, #0]
 80157b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80157ba:	6063      	str	r3, [r4, #4]
 80157bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80157be:	4463      	add	r3, ip
 80157c0:	932e      	str	r3, [sp, #184]	; 0xb8
 80157c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157c4:	9308      	str	r3, [sp, #32]
 80157c6:	3301      	adds	r3, #1
 80157c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80157ca:	2b07      	cmp	r3, #7
 80157cc:	dd00      	ble.n	80157d0 <_svfprintf_r+0x1360>
 80157ce:	e628      	b.n	8015422 <_svfprintf_r+0xfb2>
 80157d0:	3408      	adds	r4, #8
 80157d2:	0027      	movs	r7, r4
 80157d4:	e57b      	b.n	80152ce <_svfprintf_r+0xe5e>
 80157d6:	46c0      	nop			; (mov r8, r8)
 80157d8:	0801c56c 	.word	0x0801c56c
 80157dc:	2710      	movs	r7, #16
 80157de:	2d00      	cmp	r5, #0
 80157e0:	dde6      	ble.n	80157b0 <_svfprintf_r+0x1340>
 80157e2:	0021      	movs	r1, r4
 80157e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80157e6:	4857      	ldr	r0, [pc, #348]	; (8015944 <_svfprintf_r+0x14d4>)
 80157e8:	9308      	str	r3, [sp, #32]
 80157ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80157ec:	3301      	adds	r3, #1
 80157ee:	3108      	adds	r1, #8
 80157f0:	6020      	str	r0, [r4, #0]
 80157f2:	2d10      	cmp	r5, #16
 80157f4:	dc07      	bgt.n	8015806 <_svfprintf_r+0x1396>
 80157f6:	6065      	str	r5, [r4, #4]
 80157f8:	000c      	movs	r4, r1
 80157fa:	18ad      	adds	r5, r5, r2
 80157fc:	952e      	str	r5, [sp, #184]	; 0xb8
 80157fe:	932d      	str	r3, [sp, #180]	; 0xb4
 8015800:	2b07      	cmp	r3, #7
 8015802:	ddd5      	ble.n	80157b0 <_svfprintf_r+0x1340>
 8015804:	e7cc      	b.n	80157a0 <_svfprintf_r+0x1330>
 8015806:	3210      	adds	r2, #16
 8015808:	6067      	str	r7, [r4, #4]
 801580a:	922e      	str	r2, [sp, #184]	; 0xb8
 801580c:	932d      	str	r3, [sp, #180]	; 0xb4
 801580e:	2b07      	cmp	r3, #7
 8015810:	dd07      	ble.n	8015822 <_svfprintf_r+0x13b2>
 8015812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015814:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015816:	aa2c      	add	r2, sp, #176	; 0xb0
 8015818:	f002 f8a4 	bl	8017964 <__ssprint_r>
 801581c:	2800      	cmp	r0, #0
 801581e:	d126      	bne.n	801586e <_svfprintf_r+0x13fe>
 8015820:	a92f      	add	r1, sp, #188	; 0xbc
 8015822:	000c      	movs	r4, r1
 8015824:	3d10      	subs	r5, #16
 8015826:	e7dc      	b.n	80157e2 <_svfprintf_r+0x1372>
 8015828:	9808      	ldr	r0, [sp, #32]
 801582a:	912e      	str	r1, [sp, #184]	; 0xb8
 801582c:	c705      	stmia	r7!, {r0, r2}
 801582e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015830:	e7e6      	b.n	8015800 <_svfprintf_r+0x1390>
 8015832:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015834:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015836:	2510      	movs	r5, #16
 8015838:	1a9c      	subs	r4, r3, r2
 801583a:	2c00      	cmp	r4, #0
 801583c:	dc00      	bgt.n	8015840 <_svfprintf_r+0x13d0>
 801583e:	e549      	b.n	80152d4 <_svfprintf_r+0xe64>
 8015840:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015842:	4941      	ldr	r1, [pc, #260]	; (8015948 <_svfprintf_r+0x14d8>)
 8015844:	9308      	str	r3, [sp, #32]
 8015846:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015848:	3301      	adds	r3, #1
 801584a:	6039      	str	r1, [r7, #0]
 801584c:	2c10      	cmp	r4, #16
 801584e:	dc19      	bgt.n	8015884 <_svfprintf_r+0x1414>
 8015850:	607c      	str	r4, [r7, #4]
 8015852:	18a4      	adds	r4, r4, r2
 8015854:	942e      	str	r4, [sp, #184]	; 0xb8
 8015856:	932d      	str	r3, [sp, #180]	; 0xb4
 8015858:	2b07      	cmp	r3, #7
 801585a:	dc00      	bgt.n	801585e <_svfprintf_r+0x13ee>
 801585c:	e53a      	b.n	80152d4 <_svfprintf_r+0xe64>
 801585e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015860:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015862:	aa2c      	add	r2, sp, #176	; 0xb0
 8015864:	f002 f87e 	bl	8017964 <__ssprint_r>
 8015868:	2800      	cmp	r0, #0
 801586a:	d100      	bne.n	801586e <_svfprintf_r+0x13fe>
 801586c:	e532      	b.n	80152d4 <_svfprintf_r+0xe64>
 801586e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015870:	2b00      	cmp	r3, #0
 8015872:	d101      	bne.n	8015878 <_svfprintf_r+0x1408>
 8015874:	f7ff f827 	bl	80148c6 <_svfprintf_r+0x456>
 8015878:	0019      	movs	r1, r3
 801587a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801587c:	f000 ff5a 	bl	8016734 <_free_r>
 8015880:	f7ff f821 	bl	80148c6 <_svfprintf_r+0x456>
 8015884:	3210      	adds	r2, #16
 8015886:	607d      	str	r5, [r7, #4]
 8015888:	922e      	str	r2, [sp, #184]	; 0xb8
 801588a:	932d      	str	r3, [sp, #180]	; 0xb4
 801588c:	3708      	adds	r7, #8
 801588e:	2b07      	cmp	r3, #7
 8015890:	dd07      	ble.n	80158a2 <_svfprintf_r+0x1432>
 8015892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015894:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015896:	aa2c      	add	r2, sp, #176	; 0xb0
 8015898:	f002 f864 	bl	8017964 <__ssprint_r>
 801589c:	2800      	cmp	r0, #0
 801589e:	d1e6      	bne.n	801586e <_svfprintf_r+0x13fe>
 80158a0:	af2f      	add	r7, sp, #188	; 0xbc
 80158a2:	3c10      	subs	r4, #16
 80158a4:	e7cc      	b.n	8015840 <_svfprintf_r+0x13d0>
 80158a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158aa:	f000 ff43 	bl	8016734 <_free_r>
 80158ae:	e52b      	b.n	8015308 <_svfprintf_r+0xe98>
 80158b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80158b2:	9306      	str	r3, [sp, #24]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d101      	bne.n	80158bc <_svfprintf_r+0x144c>
 80158b8:	f7ff f805 	bl	80148c6 <_svfprintf_r+0x456>
 80158bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80158c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80158c2:	f002 f84f 	bl	8017964 <__ssprint_r>
 80158c6:	f7fe fffe 	bl	80148c6 <_svfprintf_r+0x456>
 80158ca:	0035      	movs	r5, r6
 80158cc:	2a00      	cmp	r2, #0
 80158ce:	d101      	bne.n	80158d4 <_svfprintf_r+0x1464>
 80158d0:	f7fe ff6d 	bl	80147ae <_svfprintf_r+0x33e>
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d101      	bne.n	80158dc <_svfprintf_r+0x146c>
 80158d8:	f7ff fbe7 	bl	80150aa <_svfprintf_r+0xc3a>
 80158dc:	2b02      	cmp	r3, #2
 80158de:	d100      	bne.n	80158e2 <_svfprintf_r+0x1472>
 80158e0:	e437      	b.n	8015152 <_svfprintf_r+0xce2>
 80158e2:	2607      	movs	r6, #7
 80158e4:	ab58      	add	r3, sp, #352	; 0x160
 80158e6:	9308      	str	r3, [sp, #32]
 80158e8:	9a08      	ldr	r2, [sp, #32]
 80158ea:	0013      	movs	r3, r2
 80158ec:	3b01      	subs	r3, #1
 80158ee:	9308      	str	r3, [sp, #32]
 80158f0:	9b06      	ldr	r3, [sp, #24]
 80158f2:	9908      	ldr	r1, [sp, #32]
 80158f4:	4033      	ands	r3, r6
 80158f6:	3330      	adds	r3, #48	; 0x30
 80158f8:	700b      	strb	r3, [r1, #0]
 80158fa:	9907      	ldr	r1, [sp, #28]
 80158fc:	074c      	lsls	r4, r1, #29
 80158fe:	9906      	ldr	r1, [sp, #24]
 8015900:	08c8      	lsrs	r0, r1, #3
 8015902:	9907      	ldr	r1, [sp, #28]
 8015904:	4304      	orrs	r4, r0
 8015906:	08c9      	lsrs	r1, r1, #3
 8015908:	9107      	str	r1, [sp, #28]
 801590a:	0021      	movs	r1, r4
 801590c:	9807      	ldr	r0, [sp, #28]
 801590e:	9406      	str	r4, [sp, #24]
 8015910:	4301      	orrs	r1, r0
 8015912:	d1e9      	bne.n	80158e8 <_svfprintf_r+0x1478>
 8015914:	07e9      	lsls	r1, r5, #31
 8015916:	d507      	bpl.n	8015928 <_svfprintf_r+0x14b8>
 8015918:	2b30      	cmp	r3, #48	; 0x30
 801591a:	d005      	beq.n	8015928 <_svfprintf_r+0x14b8>
 801591c:	2330      	movs	r3, #48	; 0x30
 801591e:	9808      	ldr	r0, [sp, #32]
 8015920:	3801      	subs	r0, #1
 8015922:	7003      	strb	r3, [r0, #0]
 8015924:	1e93      	subs	r3, r2, #2
 8015926:	9308      	str	r3, [sp, #32]
 8015928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801592a:	9a08      	ldr	r2, [sp, #32]
 801592c:	9319      	str	r3, [sp, #100]	; 0x64
 801592e:	ab58      	add	r3, sp, #352	; 0x160
 8015930:	1a9b      	subs	r3, r3, r2
 8015932:	9309      	str	r3, [sp, #36]	; 0x24
 8015934:	2300      	movs	r3, #0
 8015936:	002e      	movs	r6, r5
 8015938:	930c      	str	r3, [sp, #48]	; 0x30
 801593a:	001d      	movs	r5, r3
 801593c:	9310      	str	r3, [sp, #64]	; 0x40
 801593e:	9311      	str	r3, [sp, #68]	; 0x44
 8015940:	f7ff f8f7 	bl	8014b32 <_svfprintf_r+0x6c2>
 8015944:	0801c56c 	.word	0x0801c56c
 8015948:	0801c55c 	.word	0x0801c55c

0801594c <sysconf>:
 801594c:	2380      	movs	r3, #128	; 0x80
 801594e:	b510      	push	{r4, lr}
 8015950:	015b      	lsls	r3, r3, #5
 8015952:	2808      	cmp	r0, #8
 8015954:	d004      	beq.n	8015960 <sysconf+0x14>
 8015956:	f7fd f9bb 	bl	8012cd0 <__errno>
 801595a:	2316      	movs	r3, #22
 801595c:	6003      	str	r3, [r0, #0]
 801595e:	3b17      	subs	r3, #23
 8015960:	0018      	movs	r0, r3
 8015962:	bd10      	pop	{r4, pc}

08015964 <register_fini>:
 8015964:	4b03      	ldr	r3, [pc, #12]	; (8015974 <register_fini+0x10>)
 8015966:	b510      	push	{r4, lr}
 8015968:	2b00      	cmp	r3, #0
 801596a:	d002      	beq.n	8015972 <register_fini+0xe>
 801596c:	4802      	ldr	r0, [pc, #8]	; (8015978 <register_fini+0x14>)
 801596e:	f000 f805 	bl	801597c <atexit>
 8015972:	bd10      	pop	{r4, pc}
 8015974:	00000000 	.word	0x00000000
 8015978:	08016665 	.word	0x08016665

0801597c <atexit>:
 801597c:	2300      	movs	r3, #0
 801597e:	b510      	push	{r4, lr}
 8015980:	0001      	movs	r1, r0
 8015982:	001a      	movs	r2, r3
 8015984:	0018      	movs	r0, r3
 8015986:	f002 f87b 	bl	8017a80 <__register_exitproc>
 801598a:	bd10      	pop	{r4, pc}

0801598c <quorem>:
 801598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801598e:	0006      	movs	r6, r0
 8015990:	690b      	ldr	r3, [r1, #16]
 8015992:	6932      	ldr	r2, [r6, #16]
 8015994:	b087      	sub	sp, #28
 8015996:	2000      	movs	r0, #0
 8015998:	9103      	str	r1, [sp, #12]
 801599a:	429a      	cmp	r2, r3
 801599c:	db65      	blt.n	8015a6a <quorem+0xde>
 801599e:	3b01      	subs	r3, #1
 80159a0:	009c      	lsls	r4, r3, #2
 80159a2:	9300      	str	r3, [sp, #0]
 80159a4:	000b      	movs	r3, r1
 80159a6:	3314      	adds	r3, #20
 80159a8:	9305      	str	r3, [sp, #20]
 80159aa:	191b      	adds	r3, r3, r4
 80159ac:	9304      	str	r3, [sp, #16]
 80159ae:	0033      	movs	r3, r6
 80159b0:	3314      	adds	r3, #20
 80159b2:	9302      	str	r3, [sp, #8]
 80159b4:	191c      	adds	r4, r3, r4
 80159b6:	9b04      	ldr	r3, [sp, #16]
 80159b8:	6827      	ldr	r7, [r4, #0]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	0038      	movs	r0, r7
 80159be:	1c5d      	adds	r5, r3, #1
 80159c0:	0029      	movs	r1, r5
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	f7ea fbc4 	bl	8000150 <__udivsi3>
 80159c8:	9001      	str	r0, [sp, #4]
 80159ca:	42af      	cmp	r7, r5
 80159cc:	d324      	bcc.n	8015a18 <quorem+0x8c>
 80159ce:	2500      	movs	r5, #0
 80159d0:	46ac      	mov	ip, r5
 80159d2:	9802      	ldr	r0, [sp, #8]
 80159d4:	9f05      	ldr	r7, [sp, #20]
 80159d6:	cf08      	ldmia	r7!, {r3}
 80159d8:	9a01      	ldr	r2, [sp, #4]
 80159da:	b299      	uxth	r1, r3
 80159dc:	4351      	muls	r1, r2
 80159de:	0c1b      	lsrs	r3, r3, #16
 80159e0:	4353      	muls	r3, r2
 80159e2:	1949      	adds	r1, r1, r5
 80159e4:	0c0a      	lsrs	r2, r1, #16
 80159e6:	189b      	adds	r3, r3, r2
 80159e8:	6802      	ldr	r2, [r0, #0]
 80159ea:	b289      	uxth	r1, r1
 80159ec:	b292      	uxth	r2, r2
 80159ee:	4462      	add	r2, ip
 80159f0:	1a52      	subs	r2, r2, r1
 80159f2:	6801      	ldr	r1, [r0, #0]
 80159f4:	0c1d      	lsrs	r5, r3, #16
 80159f6:	0c09      	lsrs	r1, r1, #16
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	1acb      	subs	r3, r1, r3
 80159fc:	1411      	asrs	r1, r2, #16
 80159fe:	185b      	adds	r3, r3, r1
 8015a00:	1419      	asrs	r1, r3, #16
 8015a02:	b292      	uxth	r2, r2
 8015a04:	041b      	lsls	r3, r3, #16
 8015a06:	431a      	orrs	r2, r3
 8015a08:	9b04      	ldr	r3, [sp, #16]
 8015a0a:	468c      	mov	ip, r1
 8015a0c:	c004      	stmia	r0!, {r2}
 8015a0e:	42bb      	cmp	r3, r7
 8015a10:	d2e1      	bcs.n	80159d6 <quorem+0x4a>
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d030      	beq.n	8015a7a <quorem+0xee>
 8015a18:	0030      	movs	r0, r6
 8015a1a:	9903      	ldr	r1, [sp, #12]
 8015a1c:	f001 fd70 	bl	8017500 <__mcmp>
 8015a20:	2800      	cmp	r0, #0
 8015a22:	db21      	blt.n	8015a68 <quorem+0xdc>
 8015a24:	0030      	movs	r0, r6
 8015a26:	2400      	movs	r4, #0
 8015a28:	9b01      	ldr	r3, [sp, #4]
 8015a2a:	9903      	ldr	r1, [sp, #12]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	9301      	str	r3, [sp, #4]
 8015a30:	3014      	adds	r0, #20
 8015a32:	3114      	adds	r1, #20
 8015a34:	6803      	ldr	r3, [r0, #0]
 8015a36:	c920      	ldmia	r1!, {r5}
 8015a38:	b29a      	uxth	r2, r3
 8015a3a:	1914      	adds	r4, r2, r4
 8015a3c:	b2aa      	uxth	r2, r5
 8015a3e:	1aa2      	subs	r2, r4, r2
 8015a40:	0c1b      	lsrs	r3, r3, #16
 8015a42:	0c2d      	lsrs	r5, r5, #16
 8015a44:	1414      	asrs	r4, r2, #16
 8015a46:	1b5b      	subs	r3, r3, r5
 8015a48:	191b      	adds	r3, r3, r4
 8015a4a:	141c      	asrs	r4, r3, #16
 8015a4c:	b292      	uxth	r2, r2
 8015a4e:	041b      	lsls	r3, r3, #16
 8015a50:	4313      	orrs	r3, r2
 8015a52:	c008      	stmia	r0!, {r3}
 8015a54:	9b04      	ldr	r3, [sp, #16]
 8015a56:	428b      	cmp	r3, r1
 8015a58:	d2ec      	bcs.n	8015a34 <quorem+0xa8>
 8015a5a:	9b00      	ldr	r3, [sp, #0]
 8015a5c:	9a02      	ldr	r2, [sp, #8]
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	18d3      	adds	r3, r2, r3
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	2a00      	cmp	r2, #0
 8015a66:	d015      	beq.n	8015a94 <quorem+0x108>
 8015a68:	9801      	ldr	r0, [sp, #4]
 8015a6a:	b007      	add	sp, #28
 8015a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a6e:	6823      	ldr	r3, [r4, #0]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d106      	bne.n	8015a82 <quorem+0xf6>
 8015a74:	9b00      	ldr	r3, [sp, #0]
 8015a76:	3b01      	subs	r3, #1
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	9b02      	ldr	r3, [sp, #8]
 8015a7c:	3c04      	subs	r4, #4
 8015a7e:	42a3      	cmp	r3, r4
 8015a80:	d3f5      	bcc.n	8015a6e <quorem+0xe2>
 8015a82:	9b00      	ldr	r3, [sp, #0]
 8015a84:	6133      	str	r3, [r6, #16]
 8015a86:	e7c7      	b.n	8015a18 <quorem+0x8c>
 8015a88:	681a      	ldr	r2, [r3, #0]
 8015a8a:	2a00      	cmp	r2, #0
 8015a8c:	d106      	bne.n	8015a9c <quorem+0x110>
 8015a8e:	9a00      	ldr	r2, [sp, #0]
 8015a90:	3a01      	subs	r2, #1
 8015a92:	9200      	str	r2, [sp, #0]
 8015a94:	9a02      	ldr	r2, [sp, #8]
 8015a96:	3b04      	subs	r3, #4
 8015a98:	429a      	cmp	r2, r3
 8015a9a:	d3f5      	bcc.n	8015a88 <quorem+0xfc>
 8015a9c:	9b00      	ldr	r3, [sp, #0]
 8015a9e:	6133      	str	r3, [r6, #16]
 8015aa0:	e7e2      	b.n	8015a68 <quorem+0xdc>
	...

08015aa4 <_dtoa_r>:
 8015aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aa6:	0014      	movs	r4, r2
 8015aa8:	001d      	movs	r5, r3
 8015aaa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015aac:	b09d      	sub	sp, #116	; 0x74
 8015aae:	9408      	str	r4, [sp, #32]
 8015ab0:	9509      	str	r5, [sp, #36]	; 0x24
 8015ab2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8015ab4:	9004      	str	r0, [sp, #16]
 8015ab6:	2900      	cmp	r1, #0
 8015ab8:	d009      	beq.n	8015ace <_dtoa_r+0x2a>
 8015aba:	2301      	movs	r3, #1
 8015abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015abe:	4093      	lsls	r3, r2
 8015ac0:	604a      	str	r2, [r1, #4]
 8015ac2:	608b      	str	r3, [r1, #8]
 8015ac4:	f001 fac4 	bl	8017050 <_Bfree>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	9a04      	ldr	r2, [sp, #16]
 8015acc:	6413      	str	r3, [r2, #64]	; 0x40
 8015ace:	2d00      	cmp	r5, #0
 8015ad0:	da1e      	bge.n	8015b10 <_dtoa_r+0x6c>
 8015ad2:	2301      	movs	r3, #1
 8015ad4:	6033      	str	r3, [r6, #0]
 8015ad6:	006b      	lsls	r3, r5, #1
 8015ad8:	085b      	lsrs	r3, r3, #1
 8015ada:	9309      	str	r3, [sp, #36]	; 0x24
 8015adc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015ade:	4bb6      	ldr	r3, [pc, #728]	; (8015db8 <_dtoa_r+0x314>)
 8015ae0:	4ab5      	ldr	r2, [pc, #724]	; (8015db8 <_dtoa_r+0x314>)
 8015ae2:	403b      	ands	r3, r7
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	d116      	bne.n	8015b16 <_dtoa_r+0x72>
 8015ae8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015aea:	4bb4      	ldr	r3, [pc, #720]	; (8015dbc <_dtoa_r+0x318>)
 8015aec:	6013      	str	r3, [r2, #0]
 8015aee:	033a      	lsls	r2, r7, #12
 8015af0:	0b12      	lsrs	r2, r2, #12
 8015af2:	4314      	orrs	r4, r2
 8015af4:	d101      	bne.n	8015afa <_dtoa_r+0x56>
 8015af6:	f000 fd9e 	bl	8016636 <_dtoa_r+0xb92>
 8015afa:	48b1      	ldr	r0, [pc, #708]	; (8015dc0 <_dtoa_r+0x31c>)
 8015afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015afe:	9006      	str	r0, [sp, #24]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d002      	beq.n	8015b0a <_dtoa_r+0x66>
 8015b04:	4baf      	ldr	r3, [pc, #700]	; (8015dc4 <_dtoa_r+0x320>)
 8015b06:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015b08:	6013      	str	r3, [r2, #0]
 8015b0a:	9806      	ldr	r0, [sp, #24]
 8015b0c:	b01d      	add	sp, #116	; 0x74
 8015b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b10:	2300      	movs	r3, #0
 8015b12:	6033      	str	r3, [r6, #0]
 8015b14:	e7e2      	b.n	8015adc <_dtoa_r+0x38>
 8015b16:	9a08      	ldr	r2, [sp, #32]
 8015b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b1a:	9210      	str	r2, [sp, #64]	; 0x40
 8015b1c:	9311      	str	r3, [sp, #68]	; 0x44
 8015b1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b22:	2200      	movs	r2, #0
 8015b24:	2300      	movs	r3, #0
 8015b26:	f7ea fc99 	bl	800045c <__aeabi_dcmpeq>
 8015b2a:	1e06      	subs	r6, r0, #0
 8015b2c:	d009      	beq.n	8015b42 <_dtoa_r+0x9e>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015b32:	6013      	str	r3, [r2, #0]
 8015b34:	4ba4      	ldr	r3, [pc, #656]	; (8015dc8 <_dtoa_r+0x324>)
 8015b36:	9306      	str	r3, [sp, #24]
 8015b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d0e5      	beq.n	8015b0a <_dtoa_r+0x66>
 8015b3e:	4ba3      	ldr	r3, [pc, #652]	; (8015dcc <_dtoa_r+0x328>)
 8015b40:	e7e1      	b.n	8015b06 <_dtoa_r+0x62>
 8015b42:	ab1a      	add	r3, sp, #104	; 0x68
 8015b44:	9301      	str	r3, [sp, #4]
 8015b46:	ab1b      	add	r3, sp, #108	; 0x6c
 8015b48:	9300      	str	r3, [sp, #0]
 8015b4a:	9804      	ldr	r0, [sp, #16]
 8015b4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b50:	f001 fdfe 	bl	8017750 <__d2b>
 8015b54:	007b      	lsls	r3, r7, #1
 8015b56:	9005      	str	r0, [sp, #20]
 8015b58:	0d5b      	lsrs	r3, r3, #21
 8015b5a:	d100      	bne.n	8015b5e <_dtoa_r+0xba>
 8015b5c:	e07c      	b.n	8015c58 <_dtoa_r+0x1b4>
 8015b5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b60:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b64:	4c9a      	ldr	r4, [pc, #616]	; (8015dd0 <_dtoa_r+0x32c>)
 8015b66:	0312      	lsls	r2, r2, #12
 8015b68:	0b12      	lsrs	r2, r2, #12
 8015b6a:	4314      	orrs	r4, r2
 8015b6c:	0021      	movs	r1, r4
 8015b6e:	4a99      	ldr	r2, [pc, #612]	; (8015dd4 <_dtoa_r+0x330>)
 8015b70:	9617      	str	r6, [sp, #92]	; 0x5c
 8015b72:	189f      	adds	r7, r3, r2
 8015b74:	2200      	movs	r2, #0
 8015b76:	4b98      	ldr	r3, [pc, #608]	; (8015dd8 <_dtoa_r+0x334>)
 8015b78:	f7ec fc0a 	bl	8002390 <__aeabi_dsub>
 8015b7c:	4a97      	ldr	r2, [pc, #604]	; (8015ddc <_dtoa_r+0x338>)
 8015b7e:	4b98      	ldr	r3, [pc, #608]	; (8015de0 <_dtoa_r+0x33c>)
 8015b80:	f7ec f99a 	bl	8001eb8 <__aeabi_dmul>
 8015b84:	4a97      	ldr	r2, [pc, #604]	; (8015de4 <_dtoa_r+0x340>)
 8015b86:	4b98      	ldr	r3, [pc, #608]	; (8015de8 <_dtoa_r+0x344>)
 8015b88:	f7eb fa58 	bl	800103c <__aeabi_dadd>
 8015b8c:	0004      	movs	r4, r0
 8015b8e:	0038      	movs	r0, r7
 8015b90:	000d      	movs	r5, r1
 8015b92:	f7ec ffe3 	bl	8002b5c <__aeabi_i2d>
 8015b96:	4a95      	ldr	r2, [pc, #596]	; (8015dec <_dtoa_r+0x348>)
 8015b98:	4b95      	ldr	r3, [pc, #596]	; (8015df0 <_dtoa_r+0x34c>)
 8015b9a:	f7ec f98d 	bl	8001eb8 <__aeabi_dmul>
 8015b9e:	0002      	movs	r2, r0
 8015ba0:	000b      	movs	r3, r1
 8015ba2:	0020      	movs	r0, r4
 8015ba4:	0029      	movs	r1, r5
 8015ba6:	f7eb fa49 	bl	800103c <__aeabi_dadd>
 8015baa:	0004      	movs	r4, r0
 8015bac:	000d      	movs	r5, r1
 8015bae:	f7ec ff9f 	bl	8002af0 <__aeabi_d2iz>
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	9003      	str	r0, [sp, #12]
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	0020      	movs	r0, r4
 8015bba:	0029      	movs	r1, r5
 8015bbc:	f7ea fc54 	bl	8000468 <__aeabi_dcmplt>
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	d00b      	beq.n	8015bdc <_dtoa_r+0x138>
 8015bc4:	9803      	ldr	r0, [sp, #12]
 8015bc6:	f7ec ffc9 	bl	8002b5c <__aeabi_i2d>
 8015bca:	002b      	movs	r3, r5
 8015bcc:	0022      	movs	r2, r4
 8015bce:	f7ea fc45 	bl	800045c <__aeabi_dcmpeq>
 8015bd2:	4243      	negs	r3, r0
 8015bd4:	4158      	adcs	r0, r3
 8015bd6:	9b03      	ldr	r3, [sp, #12]
 8015bd8:	1a1b      	subs	r3, r3, r0
 8015bda:	9303      	str	r3, [sp, #12]
 8015bdc:	2301      	movs	r3, #1
 8015bde:	9315      	str	r3, [sp, #84]	; 0x54
 8015be0:	9b03      	ldr	r3, [sp, #12]
 8015be2:	2b16      	cmp	r3, #22
 8015be4:	d80f      	bhi.n	8015c06 <_dtoa_r+0x162>
 8015be6:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015be8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015bea:	00da      	lsls	r2, r3, #3
 8015bec:	4b81      	ldr	r3, [pc, #516]	; (8015df4 <_dtoa_r+0x350>)
 8015bee:	189b      	adds	r3, r3, r2
 8015bf0:	681a      	ldr	r2, [r3, #0]
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	f7ea fc38 	bl	8000468 <__aeabi_dcmplt>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d049      	beq.n	8015c90 <_dtoa_r+0x1ec>
 8015bfc:	9b03      	ldr	r3, [sp, #12]
 8015bfe:	3b01      	subs	r3, #1
 8015c00:	9303      	str	r3, [sp, #12]
 8015c02:	2300      	movs	r3, #0
 8015c04:	9315      	str	r3, [sp, #84]	; 0x54
 8015c06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015c08:	1bdf      	subs	r7, r3, r7
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8015c0e:	003b      	movs	r3, r7
 8015c10:	3b01      	subs	r3, #1
 8015c12:	930c      	str	r3, [sp, #48]	; 0x30
 8015c14:	d504      	bpl.n	8015c20 <_dtoa_r+0x17c>
 8015c16:	2301      	movs	r3, #1
 8015c18:	1bdb      	subs	r3, r3, r7
 8015c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8015c20:	9b03      	ldr	r3, [sp, #12]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	db36      	blt.n	8015c94 <_dtoa_r+0x1f0>
 8015c26:	9a03      	ldr	r2, [sp, #12]
 8015c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c2a:	4694      	mov	ip, r2
 8015c2c:	4463      	add	r3, ip
 8015c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8015c30:	2300      	movs	r3, #0
 8015c32:	9214      	str	r2, [sp, #80]	; 0x50
 8015c34:	930d      	str	r3, [sp, #52]	; 0x34
 8015c36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c38:	2401      	movs	r4, #1
 8015c3a:	2b09      	cmp	r3, #9
 8015c3c:	d867      	bhi.n	8015d0e <_dtoa_r+0x26a>
 8015c3e:	2b05      	cmp	r3, #5
 8015c40:	dd02      	ble.n	8015c48 <_dtoa_r+0x1a4>
 8015c42:	2400      	movs	r4, #0
 8015c44:	3b04      	subs	r3, #4
 8015c46:	9322      	str	r3, [sp, #136]	; 0x88
 8015c48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015c4a:	1e98      	subs	r0, r3, #2
 8015c4c:	2803      	cmp	r0, #3
 8015c4e:	d867      	bhi.n	8015d20 <_dtoa_r+0x27c>
 8015c50:	f7ea fa6a 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015c54:	5b363829 	.word	0x5b363829
 8015c58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015c5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015c5c:	189e      	adds	r6, r3, r2
 8015c5e:	4b66      	ldr	r3, [pc, #408]	; (8015df8 <_dtoa_r+0x354>)
 8015c60:	18f2      	adds	r2, r6, r3
 8015c62:	2a20      	cmp	r2, #32
 8015c64:	dd0f      	ble.n	8015c86 <_dtoa_r+0x1e2>
 8015c66:	2340      	movs	r3, #64	; 0x40
 8015c68:	0038      	movs	r0, r7
 8015c6a:	1a9b      	subs	r3, r3, r2
 8015c6c:	4098      	lsls	r0, r3
 8015c6e:	4b63      	ldr	r3, [pc, #396]	; (8015dfc <_dtoa_r+0x358>)
 8015c70:	18f3      	adds	r3, r6, r3
 8015c72:	40dc      	lsrs	r4, r3
 8015c74:	4320      	orrs	r0, r4
 8015c76:	f7ec ffa1 	bl	8002bbc <__aeabi_ui2d>
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	4c60      	ldr	r4, [pc, #384]	; (8015e00 <_dtoa_r+0x35c>)
 8015c7e:	1e77      	subs	r7, r6, #1
 8015c80:	1909      	adds	r1, r1, r4
 8015c82:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c84:	e776      	b.n	8015b74 <_dtoa_r+0xd0>
 8015c86:	2320      	movs	r3, #32
 8015c88:	0020      	movs	r0, r4
 8015c8a:	1a9b      	subs	r3, r3, r2
 8015c8c:	4098      	lsls	r0, r3
 8015c8e:	e7f2      	b.n	8015c76 <_dtoa_r+0x1d2>
 8015c90:	9015      	str	r0, [sp, #84]	; 0x54
 8015c92:	e7b8      	b.n	8015c06 <_dtoa_r+0x162>
 8015c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c96:	9a03      	ldr	r2, [sp, #12]
 8015c98:	1a9b      	subs	r3, r3, r2
 8015c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8015c9c:	4253      	negs	r3, r2
 8015c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	9314      	str	r3, [sp, #80]	; 0x50
 8015ca4:	e7c7      	b.n	8015c36 <_dtoa_r+0x192>
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015caa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cae:	9307      	str	r3, [sp, #28]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	dc13      	bgt.n	8015cdc <_dtoa_r+0x238>
 8015cb4:	2301      	movs	r3, #1
 8015cb6:	001a      	movs	r2, r3
 8015cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cba:	9307      	str	r3, [sp, #28]
 8015cbc:	9223      	str	r2, [sp, #140]	; 0x8c
 8015cbe:	e00d      	b.n	8015cdc <_dtoa_r+0x238>
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	e7f1      	b.n	8015ca8 <_dtoa_r+0x204>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015cc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cca:	4694      	mov	ip, r2
 8015ccc:	9b03      	ldr	r3, [sp, #12]
 8015cce:	4463      	add	r3, ip
 8015cd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	9307      	str	r3, [sp, #28]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	dc00      	bgt.n	8015cdc <_dtoa_r+0x238>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	2200      	movs	r2, #0
 8015cde:	9904      	ldr	r1, [sp, #16]
 8015ce0:	644a      	str	r2, [r1, #68]	; 0x44
 8015ce2:	3204      	adds	r2, #4
 8015ce4:	0010      	movs	r0, r2
 8015ce6:	9904      	ldr	r1, [sp, #16]
 8015ce8:	3014      	adds	r0, #20
 8015cea:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8015cec:	4298      	cmp	r0, r3
 8015cee:	d91b      	bls.n	8015d28 <_dtoa_r+0x284>
 8015cf0:	9804      	ldr	r0, [sp, #16]
 8015cf2:	f001 f985 	bl	8017000 <_Balloc>
 8015cf6:	9006      	str	r0, [sp, #24]
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d11a      	bne.n	8015d32 <_dtoa_r+0x28e>
 8015cfc:	21d5      	movs	r1, #213	; 0xd5
 8015cfe:	0002      	movs	r2, r0
 8015d00:	4b40      	ldr	r3, [pc, #256]	; (8015e04 <_dtoa_r+0x360>)
 8015d02:	0049      	lsls	r1, r1, #1
 8015d04:	4840      	ldr	r0, [pc, #256]	; (8015e08 <_dtoa_r+0x364>)
 8015d06:	f001 fefd 	bl	8017b04 <__assert_func>
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	e7db      	b.n	8015cc6 <_dtoa_r+0x222>
 8015d0e:	2300      	movs	r3, #0
 8015d10:	940f      	str	r4, [sp, #60]	; 0x3c
 8015d12:	9322      	str	r3, [sp, #136]	; 0x88
 8015d14:	3b01      	subs	r3, #1
 8015d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d18:	9307      	str	r3, [sp, #28]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	3313      	adds	r3, #19
 8015d1e:	e7cd      	b.n	8015cbc <_dtoa_r+0x218>
 8015d20:	2301      	movs	r3, #1
 8015d22:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d24:	3b02      	subs	r3, #2
 8015d26:	e7f6      	b.n	8015d16 <_dtoa_r+0x272>
 8015d28:	9804      	ldr	r0, [sp, #16]
 8015d2a:	3101      	adds	r1, #1
 8015d2c:	6441      	str	r1, [r0, #68]	; 0x44
 8015d2e:	0052      	lsls	r2, r2, #1
 8015d30:	e7d8      	b.n	8015ce4 <_dtoa_r+0x240>
 8015d32:	9b04      	ldr	r3, [sp, #16]
 8015d34:	9a06      	ldr	r2, [sp, #24]
 8015d36:	641a      	str	r2, [r3, #64]	; 0x40
 8015d38:	9b07      	ldr	r3, [sp, #28]
 8015d3a:	2b0e      	cmp	r3, #14
 8015d3c:	d900      	bls.n	8015d40 <_dtoa_r+0x29c>
 8015d3e:	e0de      	b.n	8015efe <_dtoa_r+0x45a>
 8015d40:	2c00      	cmp	r4, #0
 8015d42:	d100      	bne.n	8015d46 <_dtoa_r+0x2a2>
 8015d44:	e0db      	b.n	8015efe <_dtoa_r+0x45a>
 8015d46:	9b03      	ldr	r3, [sp, #12]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	dd61      	ble.n	8015e10 <_dtoa_r+0x36c>
 8015d4c:	001a      	movs	r2, r3
 8015d4e:	210f      	movs	r1, #15
 8015d50:	4b28      	ldr	r3, [pc, #160]	; (8015df4 <_dtoa_r+0x350>)
 8015d52:	400a      	ands	r2, r1
 8015d54:	00d2      	lsls	r2, r2, #3
 8015d56:	189b      	adds	r3, r3, r2
 8015d58:	681d      	ldr	r5, [r3, #0]
 8015d5a:	685e      	ldr	r6, [r3, #4]
 8015d5c:	9b03      	ldr	r3, [sp, #12]
 8015d5e:	2702      	movs	r7, #2
 8015d60:	111c      	asrs	r4, r3, #4
 8015d62:	05db      	lsls	r3, r3, #23
 8015d64:	d50a      	bpl.n	8015d7c <_dtoa_r+0x2d8>
 8015d66:	4b29      	ldr	r3, [pc, #164]	; (8015e0c <_dtoa_r+0x368>)
 8015d68:	400c      	ands	r4, r1
 8015d6a:	6a1a      	ldr	r2, [r3, #32]
 8015d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d6e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015d70:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015d72:	f7eb fc9f 	bl	80016b4 <__aeabi_ddiv>
 8015d76:	9008      	str	r0, [sp, #32]
 8015d78:	9109      	str	r1, [sp, #36]	; 0x24
 8015d7a:	3701      	adds	r7, #1
 8015d7c:	4b23      	ldr	r3, [pc, #140]	; (8015e0c <_dtoa_r+0x368>)
 8015d7e:	930e      	str	r3, [sp, #56]	; 0x38
 8015d80:	2c00      	cmp	r4, #0
 8015d82:	d108      	bne.n	8015d96 <_dtoa_r+0x2f2>
 8015d84:	9808      	ldr	r0, [sp, #32]
 8015d86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d88:	002a      	movs	r2, r5
 8015d8a:	0033      	movs	r3, r6
 8015d8c:	f7eb fc92 	bl	80016b4 <__aeabi_ddiv>
 8015d90:	9008      	str	r0, [sp, #32]
 8015d92:	9109      	str	r1, [sp, #36]	; 0x24
 8015d94:	e057      	b.n	8015e46 <_dtoa_r+0x3a2>
 8015d96:	2301      	movs	r3, #1
 8015d98:	421c      	tst	r4, r3
 8015d9a:	d009      	beq.n	8015db0 <_dtoa_r+0x30c>
 8015d9c:	18ff      	adds	r7, r7, r3
 8015d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015da0:	0028      	movs	r0, r5
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	0031      	movs	r1, r6
 8015da8:	f7ec f886 	bl	8001eb8 <__aeabi_dmul>
 8015dac:	0005      	movs	r5, r0
 8015dae:	000e      	movs	r6, r1
 8015db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015db2:	1064      	asrs	r4, r4, #1
 8015db4:	3308      	adds	r3, #8
 8015db6:	e7e2      	b.n	8015d7e <_dtoa_r+0x2da>
 8015db8:	7ff00000 	.word	0x7ff00000
 8015dbc:	0000270f 	.word	0x0000270f
 8015dc0:	0801c57c 	.word	0x0801c57c
 8015dc4:	0801c57f 	.word	0x0801c57f
 8015dc8:	0801c55a 	.word	0x0801c55a
 8015dcc:	0801c55b 	.word	0x0801c55b
 8015dd0:	3ff00000 	.word	0x3ff00000
 8015dd4:	fffffc01 	.word	0xfffffc01
 8015dd8:	3ff80000 	.word	0x3ff80000
 8015ddc:	636f4361 	.word	0x636f4361
 8015de0:	3fd287a7 	.word	0x3fd287a7
 8015de4:	8b60c8b3 	.word	0x8b60c8b3
 8015de8:	3fc68a28 	.word	0x3fc68a28
 8015dec:	509f79fb 	.word	0x509f79fb
 8015df0:	3fd34413 	.word	0x3fd34413
 8015df4:	0801c6f8 	.word	0x0801c6f8
 8015df8:	00000432 	.word	0x00000432
 8015dfc:	00000412 	.word	0x00000412
 8015e00:	fe100000 	.word	0xfe100000
 8015e04:	0801c589 	.word	0x0801c589
 8015e08:	0801c59a 	.word	0x0801c59a
 8015e0c:	0801c6d0 	.word	0x0801c6d0
 8015e10:	9b03      	ldr	r3, [sp, #12]
 8015e12:	2702      	movs	r7, #2
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d016      	beq.n	8015e46 <_dtoa_r+0x3a2>
 8015e18:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e1c:	425c      	negs	r4, r3
 8015e1e:	230f      	movs	r3, #15
 8015e20:	4ad4      	ldr	r2, [pc, #848]	; (8016174 <_dtoa_r+0x6d0>)
 8015e22:	4023      	ands	r3, r4
 8015e24:	00db      	lsls	r3, r3, #3
 8015e26:	18d3      	adds	r3, r2, r3
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	685b      	ldr	r3, [r3, #4]
 8015e2c:	f7ec f844 	bl	8001eb8 <__aeabi_dmul>
 8015e30:	2601      	movs	r6, #1
 8015e32:	2300      	movs	r3, #0
 8015e34:	9008      	str	r0, [sp, #32]
 8015e36:	9109      	str	r1, [sp, #36]	; 0x24
 8015e38:	4dcf      	ldr	r5, [pc, #828]	; (8016178 <_dtoa_r+0x6d4>)
 8015e3a:	1124      	asrs	r4, r4, #4
 8015e3c:	2c00      	cmp	r4, #0
 8015e3e:	d000      	beq.n	8015e42 <_dtoa_r+0x39e>
 8015e40:	e08d      	b.n	8015f5e <_dtoa_r+0x4ba>
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d1a4      	bne.n	8015d90 <_dtoa_r+0x2ec>
 8015e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d100      	bne.n	8015e4e <_dtoa_r+0x3aa>
 8015e4c:	e092      	b.n	8015f74 <_dtoa_r+0x4d0>
 8015e4e:	9c08      	ldr	r4, [sp, #32]
 8015e50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015e52:	2200      	movs	r2, #0
 8015e54:	0020      	movs	r0, r4
 8015e56:	0029      	movs	r1, r5
 8015e58:	4bc8      	ldr	r3, [pc, #800]	; (801617c <_dtoa_r+0x6d8>)
 8015e5a:	f7ea fb05 	bl	8000468 <__aeabi_dcmplt>
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	d100      	bne.n	8015e64 <_dtoa_r+0x3c0>
 8015e62:	e087      	b.n	8015f74 <_dtoa_r+0x4d0>
 8015e64:	9b07      	ldr	r3, [sp, #28]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d100      	bne.n	8015e6c <_dtoa_r+0x3c8>
 8015e6a:	e083      	b.n	8015f74 <_dtoa_r+0x4d0>
 8015e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	dd41      	ble.n	8015ef6 <_dtoa_r+0x452>
 8015e72:	9b03      	ldr	r3, [sp, #12]
 8015e74:	2200      	movs	r2, #0
 8015e76:	3b01      	subs	r3, #1
 8015e78:	930e      	str	r3, [sp, #56]	; 0x38
 8015e7a:	0020      	movs	r0, r4
 8015e7c:	0029      	movs	r1, r5
 8015e7e:	4bc0      	ldr	r3, [pc, #768]	; (8016180 <_dtoa_r+0x6dc>)
 8015e80:	f7ec f81a 	bl	8001eb8 <__aeabi_dmul>
 8015e84:	9008      	str	r0, [sp, #32]
 8015e86:	9109      	str	r1, [sp, #36]	; 0x24
 8015e88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015e8a:	3701      	adds	r7, #1
 8015e8c:	0038      	movs	r0, r7
 8015e8e:	9c08      	ldr	r4, [sp, #32]
 8015e90:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015e92:	f7ec fe63 	bl	8002b5c <__aeabi_i2d>
 8015e96:	0022      	movs	r2, r4
 8015e98:	002b      	movs	r3, r5
 8015e9a:	f7ec f80d 	bl	8001eb8 <__aeabi_dmul>
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	4bb8      	ldr	r3, [pc, #736]	; (8016184 <_dtoa_r+0x6e0>)
 8015ea2:	f7eb f8cb 	bl	800103c <__aeabi_dadd>
 8015ea6:	9012      	str	r0, [sp, #72]	; 0x48
 8015ea8:	9113      	str	r1, [sp, #76]	; 0x4c
 8015eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015eae:	9208      	str	r2, [sp, #32]
 8015eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015eb4:	4ab4      	ldr	r2, [pc, #720]	; (8016188 <_dtoa_r+0x6e4>)
 8015eb6:	189f      	adds	r7, r3, r2
 8015eb8:	9709      	str	r7, [sp, #36]	; 0x24
 8015eba:	2e00      	cmp	r6, #0
 8015ebc:	d15e      	bne.n	8015f7c <_dtoa_r+0x4d8>
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	0020      	movs	r0, r4
 8015ec2:	0029      	movs	r1, r5
 8015ec4:	4bb1      	ldr	r3, [pc, #708]	; (801618c <_dtoa_r+0x6e8>)
 8015ec6:	f7ec fa63 	bl	8002390 <__aeabi_dsub>
 8015eca:	003b      	movs	r3, r7
 8015ecc:	9a08      	ldr	r2, [sp, #32]
 8015ece:	0004      	movs	r4, r0
 8015ed0:	000d      	movs	r5, r1
 8015ed2:	f7ea fadd 	bl	8000490 <__aeabi_dcmpgt>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d000      	beq.n	8015edc <_dtoa_r+0x438>
 8015eda:	e2a3      	b.n	8016424 <_dtoa_r+0x980>
 8015edc:	48ac      	ldr	r0, [pc, #688]	; (8016190 <_dtoa_r+0x6ec>)
 8015ede:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015ee0:	4684      	mov	ip, r0
 8015ee2:	4461      	add	r1, ip
 8015ee4:	000b      	movs	r3, r1
 8015ee6:	0020      	movs	r0, r4
 8015ee8:	0029      	movs	r1, r5
 8015eea:	9a08      	ldr	r2, [sp, #32]
 8015eec:	f7ea fabc 	bl	8000468 <__aeabi_dcmplt>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d000      	beq.n	8015ef6 <_dtoa_r+0x452>
 8015ef4:	e294      	b.n	8016420 <_dtoa_r+0x97c>
 8015ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ef8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8015efa:	9308      	str	r3, [sp, #32]
 8015efc:	9409      	str	r4, [sp, #36]	; 0x24
 8015efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	da00      	bge.n	8015f06 <_dtoa_r+0x462>
 8015f04:	e16a      	b.n	80161dc <_dtoa_r+0x738>
 8015f06:	9a03      	ldr	r2, [sp, #12]
 8015f08:	2a0e      	cmp	r2, #14
 8015f0a:	dd00      	ble.n	8015f0e <_dtoa_r+0x46a>
 8015f0c:	e166      	b.n	80161dc <_dtoa_r+0x738>
 8015f0e:	4b99      	ldr	r3, [pc, #612]	; (8016174 <_dtoa_r+0x6d0>)
 8015f10:	00d2      	lsls	r2, r2, #3
 8015f12:	189b      	adds	r3, r3, r2
 8015f14:	681e      	ldr	r6, [r3, #0]
 8015f16:	685f      	ldr	r7, [r3, #4]
 8015f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	db00      	blt.n	8015f20 <_dtoa_r+0x47c>
 8015f1e:	e0d7      	b.n	80160d0 <_dtoa_r+0x62c>
 8015f20:	9b07      	ldr	r3, [sp, #28]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	dd00      	ble.n	8015f28 <_dtoa_r+0x484>
 8015f26:	e0d3      	b.n	80160d0 <_dtoa_r+0x62c>
 8015f28:	d000      	beq.n	8015f2c <_dtoa_r+0x488>
 8015f2a:	e278      	b.n	801641e <_dtoa_r+0x97a>
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	0030      	movs	r0, r6
 8015f30:	0039      	movs	r1, r7
 8015f32:	4b96      	ldr	r3, [pc, #600]	; (801618c <_dtoa_r+0x6e8>)
 8015f34:	f7eb ffc0 	bl	8001eb8 <__aeabi_dmul>
 8015f38:	9a08      	ldr	r2, [sp, #32]
 8015f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f3c:	f7ea fab2 	bl	80004a4 <__aeabi_dcmpge>
 8015f40:	9e07      	ldr	r6, [sp, #28]
 8015f42:	0037      	movs	r7, r6
 8015f44:	2800      	cmp	r0, #0
 8015f46:	d000      	beq.n	8015f4a <_dtoa_r+0x4a6>
 8015f48:	e24f      	b.n	80163ea <_dtoa_r+0x946>
 8015f4a:	9b06      	ldr	r3, [sp, #24]
 8015f4c:	9a06      	ldr	r2, [sp, #24]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	9308      	str	r3, [sp, #32]
 8015f52:	2331      	movs	r3, #49	; 0x31
 8015f54:	7013      	strb	r3, [r2, #0]
 8015f56:	9b03      	ldr	r3, [sp, #12]
 8015f58:	3301      	adds	r3, #1
 8015f5a:	9303      	str	r3, [sp, #12]
 8015f5c:	e24a      	b.n	80163f4 <_dtoa_r+0x950>
 8015f5e:	4234      	tst	r4, r6
 8015f60:	d005      	beq.n	8015f6e <_dtoa_r+0x4ca>
 8015f62:	682a      	ldr	r2, [r5, #0]
 8015f64:	686b      	ldr	r3, [r5, #4]
 8015f66:	f7eb ffa7 	bl	8001eb8 <__aeabi_dmul>
 8015f6a:	0033      	movs	r3, r6
 8015f6c:	3701      	adds	r7, #1
 8015f6e:	1064      	asrs	r4, r4, #1
 8015f70:	3508      	adds	r5, #8
 8015f72:	e763      	b.n	8015e3c <_dtoa_r+0x398>
 8015f74:	9b03      	ldr	r3, [sp, #12]
 8015f76:	9e07      	ldr	r6, [sp, #28]
 8015f78:	930e      	str	r3, [sp, #56]	; 0x38
 8015f7a:	e787      	b.n	8015e8c <_dtoa_r+0x3e8>
 8015f7c:	4b7d      	ldr	r3, [pc, #500]	; (8016174 <_dtoa_r+0x6d0>)
 8015f7e:	1e72      	subs	r2, r6, #1
 8015f80:	00d2      	lsls	r2, r2, #3
 8015f82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f84:	189b      	adds	r3, r3, r2
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	2900      	cmp	r1, #0
 8015f8c:	d04e      	beq.n	801602c <_dtoa_r+0x588>
 8015f8e:	2000      	movs	r0, #0
 8015f90:	4980      	ldr	r1, [pc, #512]	; (8016194 <_dtoa_r+0x6f0>)
 8015f92:	f7eb fb8f 	bl	80016b4 <__aeabi_ddiv>
 8015f96:	9a08      	ldr	r2, [sp, #32]
 8015f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f9a:	f7ec f9f9 	bl	8002390 <__aeabi_dsub>
 8015f9e:	9b06      	ldr	r3, [sp, #24]
 8015fa0:	9012      	str	r0, [sp, #72]	; 0x48
 8015fa2:	9113      	str	r1, [sp, #76]	; 0x4c
 8015fa4:	9316      	str	r3, [sp, #88]	; 0x58
 8015fa6:	18f3      	adds	r3, r6, r3
 8015fa8:	9319      	str	r3, [sp, #100]	; 0x64
 8015faa:	0020      	movs	r0, r4
 8015fac:	0029      	movs	r1, r5
 8015fae:	f7ec fd9f 	bl	8002af0 <__aeabi_d2iz>
 8015fb2:	9018      	str	r0, [sp, #96]	; 0x60
 8015fb4:	f7ec fdd2 	bl	8002b5c <__aeabi_i2d>
 8015fb8:	0002      	movs	r2, r0
 8015fba:	000b      	movs	r3, r1
 8015fbc:	0020      	movs	r0, r4
 8015fbe:	0029      	movs	r1, r5
 8015fc0:	f7ec f9e6 	bl	8002390 <__aeabi_dsub>
 8015fc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fc6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015fc8:	3301      	adds	r3, #1
 8015fca:	9308      	str	r3, [sp, #32]
 8015fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fce:	3430      	adds	r4, #48	; 0x30
 8015fd0:	701c      	strb	r4, [r3, #0]
 8015fd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015fd6:	0006      	movs	r6, r0
 8015fd8:	000f      	movs	r7, r1
 8015fda:	f7ea fa45 	bl	8000468 <__aeabi_dcmplt>
 8015fde:	2800      	cmp	r0, #0
 8015fe0:	d16c      	bne.n	80160bc <_dtoa_r+0x618>
 8015fe2:	0032      	movs	r2, r6
 8015fe4:	003b      	movs	r3, r7
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	4964      	ldr	r1, [pc, #400]	; (801617c <_dtoa_r+0x6d8>)
 8015fea:	f7ec f9d1 	bl	8002390 <__aeabi_dsub>
 8015fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ff2:	f7ea fa39 	bl	8000468 <__aeabi_dcmplt>
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	d000      	beq.n	8015ffc <_dtoa_r+0x558>
 8015ffa:	e0cf      	b.n	801619c <_dtoa_r+0x6f8>
 8015ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ffe:	9a08      	ldr	r2, [sp, #32]
 8016000:	4293      	cmp	r3, r2
 8016002:	d100      	bne.n	8016006 <_dtoa_r+0x562>
 8016004:	e777      	b.n	8015ef6 <_dtoa_r+0x452>
 8016006:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016008:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801600a:	2200      	movs	r2, #0
 801600c:	4b5c      	ldr	r3, [pc, #368]	; (8016180 <_dtoa_r+0x6dc>)
 801600e:	f7eb ff53 	bl	8001eb8 <__aeabi_dmul>
 8016012:	4b5b      	ldr	r3, [pc, #364]	; (8016180 <_dtoa_r+0x6dc>)
 8016014:	9012      	str	r0, [sp, #72]	; 0x48
 8016016:	9113      	str	r1, [sp, #76]	; 0x4c
 8016018:	2200      	movs	r2, #0
 801601a:	0030      	movs	r0, r6
 801601c:	0039      	movs	r1, r7
 801601e:	f7eb ff4b 	bl	8001eb8 <__aeabi_dmul>
 8016022:	9b08      	ldr	r3, [sp, #32]
 8016024:	0004      	movs	r4, r0
 8016026:	000d      	movs	r5, r1
 8016028:	9316      	str	r3, [sp, #88]	; 0x58
 801602a:	e7be      	b.n	8015faa <_dtoa_r+0x506>
 801602c:	9808      	ldr	r0, [sp, #32]
 801602e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016030:	f7eb ff42 	bl	8001eb8 <__aeabi_dmul>
 8016034:	9f06      	ldr	r7, [sp, #24]
 8016036:	9012      	str	r0, [sp, #72]	; 0x48
 8016038:	9113      	str	r1, [sp, #76]	; 0x4c
 801603a:	19bb      	adds	r3, r7, r6
 801603c:	9316      	str	r3, [sp, #88]	; 0x58
 801603e:	0029      	movs	r1, r5
 8016040:	0020      	movs	r0, r4
 8016042:	f7ec fd55 	bl	8002af0 <__aeabi_d2iz>
 8016046:	9008      	str	r0, [sp, #32]
 8016048:	f7ec fd88 	bl	8002b5c <__aeabi_i2d>
 801604c:	000b      	movs	r3, r1
 801604e:	0002      	movs	r2, r0
 8016050:	0029      	movs	r1, r5
 8016052:	0020      	movs	r0, r4
 8016054:	f7ec f99c 	bl	8002390 <__aeabi_dsub>
 8016058:	9b08      	ldr	r3, [sp, #32]
 801605a:	0004      	movs	r4, r0
 801605c:	3330      	adds	r3, #48	; 0x30
 801605e:	703b      	strb	r3, [r7, #0]
 8016060:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016062:	3701      	adds	r7, #1
 8016064:	000d      	movs	r5, r1
 8016066:	429f      	cmp	r7, r3
 8016068:	d12b      	bne.n	80160c2 <_dtoa_r+0x61e>
 801606a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801606c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801606e:	9b06      	ldr	r3, [sp, #24]
 8016070:	2200      	movs	r2, #0
 8016072:	199b      	adds	r3, r3, r6
 8016074:	9308      	str	r3, [sp, #32]
 8016076:	4b47      	ldr	r3, [pc, #284]	; (8016194 <_dtoa_r+0x6f0>)
 8016078:	f7ea ffe0 	bl	800103c <__aeabi_dadd>
 801607c:	0002      	movs	r2, r0
 801607e:	000b      	movs	r3, r1
 8016080:	0020      	movs	r0, r4
 8016082:	0029      	movs	r1, r5
 8016084:	f7ea fa04 	bl	8000490 <__aeabi_dcmpgt>
 8016088:	2800      	cmp	r0, #0
 801608a:	d000      	beq.n	801608e <_dtoa_r+0x5ea>
 801608c:	e086      	b.n	801619c <_dtoa_r+0x6f8>
 801608e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016092:	2000      	movs	r0, #0
 8016094:	493f      	ldr	r1, [pc, #252]	; (8016194 <_dtoa_r+0x6f0>)
 8016096:	f7ec f97b 	bl	8002390 <__aeabi_dsub>
 801609a:	0002      	movs	r2, r0
 801609c:	000b      	movs	r3, r1
 801609e:	0020      	movs	r0, r4
 80160a0:	0029      	movs	r1, r5
 80160a2:	f7ea f9e1 	bl	8000468 <__aeabi_dcmplt>
 80160a6:	2800      	cmp	r0, #0
 80160a8:	d100      	bne.n	80160ac <_dtoa_r+0x608>
 80160aa:	e724      	b.n	8015ef6 <_dtoa_r+0x452>
 80160ac:	9b08      	ldr	r3, [sp, #32]
 80160ae:	001a      	movs	r2, r3
 80160b0:	3a01      	subs	r2, #1
 80160b2:	9208      	str	r2, [sp, #32]
 80160b4:	7812      	ldrb	r2, [r2, #0]
 80160b6:	2a30      	cmp	r2, #48	; 0x30
 80160b8:	d0f8      	beq.n	80160ac <_dtoa_r+0x608>
 80160ba:	9308      	str	r3, [sp, #32]
 80160bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160be:	9303      	str	r3, [sp, #12]
 80160c0:	e046      	b.n	8016150 <_dtoa_r+0x6ac>
 80160c2:	2200      	movs	r2, #0
 80160c4:	4b2e      	ldr	r3, [pc, #184]	; (8016180 <_dtoa_r+0x6dc>)
 80160c6:	f7eb fef7 	bl	8001eb8 <__aeabi_dmul>
 80160ca:	0004      	movs	r4, r0
 80160cc:	000d      	movs	r5, r1
 80160ce:	e7b6      	b.n	801603e <_dtoa_r+0x59a>
 80160d0:	9b06      	ldr	r3, [sp, #24]
 80160d2:	9a06      	ldr	r2, [sp, #24]
 80160d4:	930a      	str	r3, [sp, #40]	; 0x28
 80160d6:	9b07      	ldr	r3, [sp, #28]
 80160d8:	9c08      	ldr	r4, [sp, #32]
 80160da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80160dc:	3b01      	subs	r3, #1
 80160de:	189b      	adds	r3, r3, r2
 80160e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80160e2:	0032      	movs	r2, r6
 80160e4:	003b      	movs	r3, r7
 80160e6:	0020      	movs	r0, r4
 80160e8:	0029      	movs	r1, r5
 80160ea:	f7eb fae3 	bl	80016b4 <__aeabi_ddiv>
 80160ee:	f7ec fcff 	bl	8002af0 <__aeabi_d2iz>
 80160f2:	9007      	str	r0, [sp, #28]
 80160f4:	f7ec fd32 	bl	8002b5c <__aeabi_i2d>
 80160f8:	0032      	movs	r2, r6
 80160fa:	003b      	movs	r3, r7
 80160fc:	f7eb fedc 	bl	8001eb8 <__aeabi_dmul>
 8016100:	0002      	movs	r2, r0
 8016102:	000b      	movs	r3, r1
 8016104:	0020      	movs	r0, r4
 8016106:	0029      	movs	r1, r5
 8016108:	f7ec f942 	bl	8002390 <__aeabi_dsub>
 801610c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801610e:	001a      	movs	r2, r3
 8016110:	3201      	adds	r2, #1
 8016112:	920a      	str	r2, [sp, #40]	; 0x28
 8016114:	9208      	str	r2, [sp, #32]
 8016116:	9a07      	ldr	r2, [sp, #28]
 8016118:	3230      	adds	r2, #48	; 0x30
 801611a:	701a      	strb	r2, [r3, #0]
 801611c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801611e:	429a      	cmp	r2, r3
 8016120:	d14f      	bne.n	80161c2 <_dtoa_r+0x71e>
 8016122:	0002      	movs	r2, r0
 8016124:	000b      	movs	r3, r1
 8016126:	f7ea ff89 	bl	800103c <__aeabi_dadd>
 801612a:	0032      	movs	r2, r6
 801612c:	003b      	movs	r3, r7
 801612e:	0004      	movs	r4, r0
 8016130:	000d      	movs	r5, r1
 8016132:	f7ea f9ad 	bl	8000490 <__aeabi_dcmpgt>
 8016136:	2800      	cmp	r0, #0
 8016138:	d12e      	bne.n	8016198 <_dtoa_r+0x6f4>
 801613a:	0032      	movs	r2, r6
 801613c:	003b      	movs	r3, r7
 801613e:	0020      	movs	r0, r4
 8016140:	0029      	movs	r1, r5
 8016142:	f7ea f98b 	bl	800045c <__aeabi_dcmpeq>
 8016146:	2800      	cmp	r0, #0
 8016148:	d002      	beq.n	8016150 <_dtoa_r+0x6ac>
 801614a:	9b07      	ldr	r3, [sp, #28]
 801614c:	07db      	lsls	r3, r3, #31
 801614e:	d423      	bmi.n	8016198 <_dtoa_r+0x6f4>
 8016150:	9804      	ldr	r0, [sp, #16]
 8016152:	9905      	ldr	r1, [sp, #20]
 8016154:	f000 ff7c 	bl	8017050 <_Bfree>
 8016158:	2300      	movs	r3, #0
 801615a:	9a08      	ldr	r2, [sp, #32]
 801615c:	9803      	ldr	r0, [sp, #12]
 801615e:	7013      	strb	r3, [r2, #0]
 8016160:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016162:	3001      	adds	r0, #1
 8016164:	6018      	str	r0, [r3, #0]
 8016166:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016168:	2b00      	cmp	r3, #0
 801616a:	d100      	bne.n	801616e <_dtoa_r+0x6ca>
 801616c:	e4cd      	b.n	8015b0a <_dtoa_r+0x66>
 801616e:	601a      	str	r2, [r3, #0]
 8016170:	e4cb      	b.n	8015b0a <_dtoa_r+0x66>
 8016172:	46c0      	nop			; (mov r8, r8)
 8016174:	0801c6f8 	.word	0x0801c6f8
 8016178:	0801c6d0 	.word	0x0801c6d0
 801617c:	3ff00000 	.word	0x3ff00000
 8016180:	40240000 	.word	0x40240000
 8016184:	401c0000 	.word	0x401c0000
 8016188:	fcc00000 	.word	0xfcc00000
 801618c:	40140000 	.word	0x40140000
 8016190:	7cc00000 	.word	0x7cc00000
 8016194:	3fe00000 	.word	0x3fe00000
 8016198:	9b03      	ldr	r3, [sp, #12]
 801619a:	930e      	str	r3, [sp, #56]	; 0x38
 801619c:	9b08      	ldr	r3, [sp, #32]
 801619e:	9308      	str	r3, [sp, #32]
 80161a0:	3b01      	subs	r3, #1
 80161a2:	781a      	ldrb	r2, [r3, #0]
 80161a4:	2a39      	cmp	r2, #57	; 0x39
 80161a6:	d108      	bne.n	80161ba <_dtoa_r+0x716>
 80161a8:	9a06      	ldr	r2, [sp, #24]
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d1f7      	bne.n	801619e <_dtoa_r+0x6fa>
 80161ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161b0:	9906      	ldr	r1, [sp, #24]
 80161b2:	3201      	adds	r2, #1
 80161b4:	920e      	str	r2, [sp, #56]	; 0x38
 80161b6:	2230      	movs	r2, #48	; 0x30
 80161b8:	700a      	strb	r2, [r1, #0]
 80161ba:	781a      	ldrb	r2, [r3, #0]
 80161bc:	3201      	adds	r2, #1
 80161be:	701a      	strb	r2, [r3, #0]
 80161c0:	e77c      	b.n	80160bc <_dtoa_r+0x618>
 80161c2:	2200      	movs	r2, #0
 80161c4:	4ba7      	ldr	r3, [pc, #668]	; (8016464 <_dtoa_r+0x9c0>)
 80161c6:	f7eb fe77 	bl	8001eb8 <__aeabi_dmul>
 80161ca:	2200      	movs	r2, #0
 80161cc:	2300      	movs	r3, #0
 80161ce:	0004      	movs	r4, r0
 80161d0:	000d      	movs	r5, r1
 80161d2:	f7ea f943 	bl	800045c <__aeabi_dcmpeq>
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d083      	beq.n	80160e2 <_dtoa_r+0x63e>
 80161da:	e7b9      	b.n	8016150 <_dtoa_r+0x6ac>
 80161dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80161de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80161e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80161e2:	2f00      	cmp	r7, #0
 80161e4:	d012      	beq.n	801620c <_dtoa_r+0x768>
 80161e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80161e8:	2a01      	cmp	r2, #1
 80161ea:	dc6e      	bgt.n	80162ca <_dtoa_r+0x826>
 80161ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80161ee:	2a00      	cmp	r2, #0
 80161f0:	d065      	beq.n	80162be <_dtoa_r+0x81a>
 80161f2:	4a9d      	ldr	r2, [pc, #628]	; (8016468 <_dtoa_r+0x9c4>)
 80161f4:	189b      	adds	r3, r3, r2
 80161f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161f8:	2101      	movs	r1, #1
 80161fa:	18d2      	adds	r2, r2, r3
 80161fc:	920a      	str	r2, [sp, #40]	; 0x28
 80161fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016200:	9804      	ldr	r0, [sp, #16]
 8016202:	18d3      	adds	r3, r2, r3
 8016204:	930c      	str	r3, [sp, #48]	; 0x30
 8016206:	f001 f805 	bl	8017214 <__i2b>
 801620a:	0007      	movs	r7, r0
 801620c:	2c00      	cmp	r4, #0
 801620e:	dd0e      	ble.n	801622e <_dtoa_r+0x78a>
 8016210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016212:	2b00      	cmp	r3, #0
 8016214:	dd0b      	ble.n	801622e <_dtoa_r+0x78a>
 8016216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016218:	0023      	movs	r3, r4
 801621a:	4294      	cmp	r4, r2
 801621c:	dd00      	ble.n	8016220 <_dtoa_r+0x77c>
 801621e:	0013      	movs	r3, r2
 8016220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016222:	1ae4      	subs	r4, r4, r3
 8016224:	1ad2      	subs	r2, r2, r3
 8016226:	920a      	str	r2, [sp, #40]	; 0x28
 8016228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801622a:	1ad3      	subs	r3, r2, r3
 801622c:	930c      	str	r3, [sp, #48]	; 0x30
 801622e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016230:	2b00      	cmp	r3, #0
 8016232:	d01e      	beq.n	8016272 <_dtoa_r+0x7ce>
 8016234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016236:	2b00      	cmp	r3, #0
 8016238:	d05c      	beq.n	80162f4 <_dtoa_r+0x850>
 801623a:	2d00      	cmp	r5, #0
 801623c:	dd10      	ble.n	8016260 <_dtoa_r+0x7bc>
 801623e:	0039      	movs	r1, r7
 8016240:	002a      	movs	r2, r5
 8016242:	9804      	ldr	r0, [sp, #16]
 8016244:	f001 f8ac 	bl	80173a0 <__pow5mult>
 8016248:	9a05      	ldr	r2, [sp, #20]
 801624a:	0001      	movs	r1, r0
 801624c:	0007      	movs	r7, r0
 801624e:	9804      	ldr	r0, [sp, #16]
 8016250:	f000 fff6 	bl	8017240 <__multiply>
 8016254:	0006      	movs	r6, r0
 8016256:	9905      	ldr	r1, [sp, #20]
 8016258:	9804      	ldr	r0, [sp, #16]
 801625a:	f000 fef9 	bl	8017050 <_Bfree>
 801625e:	9605      	str	r6, [sp, #20]
 8016260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016262:	1b5a      	subs	r2, r3, r5
 8016264:	42ab      	cmp	r3, r5
 8016266:	d004      	beq.n	8016272 <_dtoa_r+0x7ce>
 8016268:	9905      	ldr	r1, [sp, #20]
 801626a:	9804      	ldr	r0, [sp, #16]
 801626c:	f001 f898 	bl	80173a0 <__pow5mult>
 8016270:	9005      	str	r0, [sp, #20]
 8016272:	2101      	movs	r1, #1
 8016274:	9804      	ldr	r0, [sp, #16]
 8016276:	f000 ffcd 	bl	8017214 <__i2b>
 801627a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801627c:	0006      	movs	r6, r0
 801627e:	2b00      	cmp	r3, #0
 8016280:	dd3a      	ble.n	80162f8 <_dtoa_r+0x854>
 8016282:	001a      	movs	r2, r3
 8016284:	0001      	movs	r1, r0
 8016286:	9804      	ldr	r0, [sp, #16]
 8016288:	f001 f88a 	bl	80173a0 <__pow5mult>
 801628c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801628e:	0006      	movs	r6, r0
 8016290:	2500      	movs	r5, #0
 8016292:	2b01      	cmp	r3, #1
 8016294:	dc38      	bgt.n	8016308 <_dtoa_r+0x864>
 8016296:	2500      	movs	r5, #0
 8016298:	9b08      	ldr	r3, [sp, #32]
 801629a:	42ab      	cmp	r3, r5
 801629c:	d130      	bne.n	8016300 <_dtoa_r+0x85c>
 801629e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162a0:	031b      	lsls	r3, r3, #12
 80162a2:	42ab      	cmp	r3, r5
 80162a4:	d12c      	bne.n	8016300 <_dtoa_r+0x85c>
 80162a6:	4b71      	ldr	r3, [pc, #452]	; (801646c <_dtoa_r+0x9c8>)
 80162a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162aa:	4213      	tst	r3, r2
 80162ac:	d028      	beq.n	8016300 <_dtoa_r+0x85c>
 80162ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162b0:	3501      	adds	r5, #1
 80162b2:	3301      	adds	r3, #1
 80162b4:	930a      	str	r3, [sp, #40]	; 0x28
 80162b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162b8:	3301      	adds	r3, #1
 80162ba:	930c      	str	r3, [sp, #48]	; 0x30
 80162bc:	e020      	b.n	8016300 <_dtoa_r+0x85c>
 80162be:	2336      	movs	r3, #54	; 0x36
 80162c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80162c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80162c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80162c6:	1a9b      	subs	r3, r3, r2
 80162c8:	e795      	b.n	80161f6 <_dtoa_r+0x752>
 80162ca:	9b07      	ldr	r3, [sp, #28]
 80162cc:	1e5d      	subs	r5, r3, #1
 80162ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162d0:	42ab      	cmp	r3, r5
 80162d2:	db07      	blt.n	80162e4 <_dtoa_r+0x840>
 80162d4:	1b5d      	subs	r5, r3, r5
 80162d6:	9b07      	ldr	r3, [sp, #28]
 80162d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80162da:	2b00      	cmp	r3, #0
 80162dc:	da8b      	bge.n	80161f6 <_dtoa_r+0x752>
 80162de:	1ae4      	subs	r4, r4, r3
 80162e0:	2300      	movs	r3, #0
 80162e2:	e788      	b.n	80161f6 <_dtoa_r+0x752>
 80162e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80162e8:	1aeb      	subs	r3, r5, r3
 80162ea:	18d3      	adds	r3, r2, r3
 80162ec:	950d      	str	r5, [sp, #52]	; 0x34
 80162ee:	9314      	str	r3, [sp, #80]	; 0x50
 80162f0:	2500      	movs	r5, #0
 80162f2:	e7f0      	b.n	80162d6 <_dtoa_r+0x832>
 80162f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162f6:	e7b7      	b.n	8016268 <_dtoa_r+0x7c4>
 80162f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80162fa:	2500      	movs	r5, #0
 80162fc:	2b01      	cmp	r3, #1
 80162fe:	ddca      	ble.n	8016296 <_dtoa_r+0x7f2>
 8016300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016302:	2001      	movs	r0, #1
 8016304:	2b00      	cmp	r3, #0
 8016306:	d008      	beq.n	801631a <_dtoa_r+0x876>
 8016308:	6933      	ldr	r3, [r6, #16]
 801630a:	3303      	adds	r3, #3
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	18f3      	adds	r3, r6, r3
 8016310:	6858      	ldr	r0, [r3, #4]
 8016312:	f000 ff37 	bl	8017184 <__hi0bits>
 8016316:	2320      	movs	r3, #32
 8016318:	1a18      	subs	r0, r3, r0
 801631a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801631c:	221f      	movs	r2, #31
 801631e:	1818      	adds	r0, r3, r0
 8016320:	0003      	movs	r3, r0
 8016322:	4013      	ands	r3, r2
 8016324:	4210      	tst	r0, r2
 8016326:	d046      	beq.n	80163b6 <_dtoa_r+0x912>
 8016328:	3201      	adds	r2, #1
 801632a:	1ad2      	subs	r2, r2, r3
 801632c:	2a04      	cmp	r2, #4
 801632e:	dd3f      	ble.n	80163b0 <_dtoa_r+0x90c>
 8016330:	221c      	movs	r2, #28
 8016332:	1ad3      	subs	r3, r2, r3
 8016334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016336:	18e4      	adds	r4, r4, r3
 8016338:	18d2      	adds	r2, r2, r3
 801633a:	920a      	str	r2, [sp, #40]	; 0x28
 801633c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801633e:	18d3      	adds	r3, r2, r3
 8016340:	930c      	str	r3, [sp, #48]	; 0x30
 8016342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016344:	2b00      	cmp	r3, #0
 8016346:	dd05      	ble.n	8016354 <_dtoa_r+0x8b0>
 8016348:	001a      	movs	r2, r3
 801634a:	9905      	ldr	r1, [sp, #20]
 801634c:	9804      	ldr	r0, [sp, #16]
 801634e:	f001 f869 	bl	8017424 <__lshift>
 8016352:	9005      	str	r0, [sp, #20]
 8016354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016356:	2b00      	cmp	r3, #0
 8016358:	dd05      	ble.n	8016366 <_dtoa_r+0x8c2>
 801635a:	0031      	movs	r1, r6
 801635c:	001a      	movs	r2, r3
 801635e:	9804      	ldr	r0, [sp, #16]
 8016360:	f001 f860 	bl	8017424 <__lshift>
 8016364:	0006      	movs	r6, r0
 8016366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016368:	2b00      	cmp	r3, #0
 801636a:	d026      	beq.n	80163ba <_dtoa_r+0x916>
 801636c:	0031      	movs	r1, r6
 801636e:	9805      	ldr	r0, [sp, #20]
 8016370:	f001 f8c6 	bl	8017500 <__mcmp>
 8016374:	2800      	cmp	r0, #0
 8016376:	da20      	bge.n	80163ba <_dtoa_r+0x916>
 8016378:	9b03      	ldr	r3, [sp, #12]
 801637a:	220a      	movs	r2, #10
 801637c:	3b01      	subs	r3, #1
 801637e:	9303      	str	r3, [sp, #12]
 8016380:	9905      	ldr	r1, [sp, #20]
 8016382:	2300      	movs	r3, #0
 8016384:	9804      	ldr	r0, [sp, #16]
 8016386:	f000 fe6d 	bl	8017064 <__multadd>
 801638a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801638c:	9005      	str	r0, [sp, #20]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d100      	bne.n	8016394 <_dtoa_r+0x8f0>
 8016392:	e15a      	b.n	801664a <_dtoa_r+0xba6>
 8016394:	2300      	movs	r3, #0
 8016396:	0039      	movs	r1, r7
 8016398:	220a      	movs	r2, #10
 801639a:	9804      	ldr	r0, [sp, #16]
 801639c:	f000 fe62 	bl	8017064 <__multadd>
 80163a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163a2:	0007      	movs	r7, r0
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	dc47      	bgt.n	8016438 <_dtoa_r+0x994>
 80163a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80163aa:	2b02      	cmp	r3, #2
 80163ac:	dc0d      	bgt.n	80163ca <_dtoa_r+0x926>
 80163ae:	e043      	b.n	8016438 <_dtoa_r+0x994>
 80163b0:	2a04      	cmp	r2, #4
 80163b2:	d0c6      	beq.n	8016342 <_dtoa_r+0x89e>
 80163b4:	0013      	movs	r3, r2
 80163b6:	331c      	adds	r3, #28
 80163b8:	e7bc      	b.n	8016334 <_dtoa_r+0x890>
 80163ba:	9b07      	ldr	r3, [sp, #28]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	dc35      	bgt.n	801642c <_dtoa_r+0x988>
 80163c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80163c2:	2b02      	cmp	r3, #2
 80163c4:	dd32      	ble.n	801642c <_dtoa_r+0x988>
 80163c6:	9b07      	ldr	r3, [sp, #28]
 80163c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80163ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d10c      	bne.n	80163ea <_dtoa_r+0x946>
 80163d0:	0031      	movs	r1, r6
 80163d2:	2205      	movs	r2, #5
 80163d4:	9804      	ldr	r0, [sp, #16]
 80163d6:	f000 fe45 	bl	8017064 <__multadd>
 80163da:	0006      	movs	r6, r0
 80163dc:	0001      	movs	r1, r0
 80163de:	9805      	ldr	r0, [sp, #20]
 80163e0:	f001 f88e 	bl	8017500 <__mcmp>
 80163e4:	2800      	cmp	r0, #0
 80163e6:	dd00      	ble.n	80163ea <_dtoa_r+0x946>
 80163e8:	e5af      	b.n	8015f4a <_dtoa_r+0x4a6>
 80163ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80163ec:	43db      	mvns	r3, r3
 80163ee:	9303      	str	r3, [sp, #12]
 80163f0:	9b06      	ldr	r3, [sp, #24]
 80163f2:	9308      	str	r3, [sp, #32]
 80163f4:	2500      	movs	r5, #0
 80163f6:	0031      	movs	r1, r6
 80163f8:	9804      	ldr	r0, [sp, #16]
 80163fa:	f000 fe29 	bl	8017050 <_Bfree>
 80163fe:	2f00      	cmp	r7, #0
 8016400:	d100      	bne.n	8016404 <_dtoa_r+0x960>
 8016402:	e6a5      	b.n	8016150 <_dtoa_r+0x6ac>
 8016404:	2d00      	cmp	r5, #0
 8016406:	d005      	beq.n	8016414 <_dtoa_r+0x970>
 8016408:	42bd      	cmp	r5, r7
 801640a:	d003      	beq.n	8016414 <_dtoa_r+0x970>
 801640c:	0029      	movs	r1, r5
 801640e:	9804      	ldr	r0, [sp, #16]
 8016410:	f000 fe1e 	bl	8017050 <_Bfree>
 8016414:	0039      	movs	r1, r7
 8016416:	9804      	ldr	r0, [sp, #16]
 8016418:	f000 fe1a 	bl	8017050 <_Bfree>
 801641c:	e698      	b.n	8016150 <_dtoa_r+0x6ac>
 801641e:	2600      	movs	r6, #0
 8016420:	0037      	movs	r7, r6
 8016422:	e7e2      	b.n	80163ea <_dtoa_r+0x946>
 8016424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016426:	0037      	movs	r7, r6
 8016428:	9303      	str	r3, [sp, #12]
 801642a:	e58e      	b.n	8015f4a <_dtoa_r+0x4a6>
 801642c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d100      	bne.n	8016434 <_dtoa_r+0x990>
 8016432:	e0c2      	b.n	80165ba <_dtoa_r+0xb16>
 8016434:	9b07      	ldr	r3, [sp, #28]
 8016436:	930b      	str	r3, [sp, #44]	; 0x2c
 8016438:	2c00      	cmp	r4, #0
 801643a:	dd05      	ble.n	8016448 <_dtoa_r+0x9a4>
 801643c:	0039      	movs	r1, r7
 801643e:	0022      	movs	r2, r4
 8016440:	9804      	ldr	r0, [sp, #16]
 8016442:	f000 ffef 	bl	8017424 <__lshift>
 8016446:	0007      	movs	r7, r0
 8016448:	0038      	movs	r0, r7
 801644a:	2d00      	cmp	r5, #0
 801644c:	d021      	beq.n	8016492 <_dtoa_r+0x9ee>
 801644e:	6879      	ldr	r1, [r7, #4]
 8016450:	9804      	ldr	r0, [sp, #16]
 8016452:	f000 fdd5 	bl	8017000 <_Balloc>
 8016456:	1e04      	subs	r4, r0, #0
 8016458:	d10e      	bne.n	8016478 <_dtoa_r+0x9d4>
 801645a:	0002      	movs	r2, r0
 801645c:	4b04      	ldr	r3, [pc, #16]	; (8016470 <_dtoa_r+0x9cc>)
 801645e:	4905      	ldr	r1, [pc, #20]	; (8016474 <_dtoa_r+0x9d0>)
 8016460:	e450      	b.n	8015d04 <_dtoa_r+0x260>
 8016462:	46c0      	nop			; (mov r8, r8)
 8016464:	40240000 	.word	0x40240000
 8016468:	00000433 	.word	0x00000433
 801646c:	7ff00000 	.word	0x7ff00000
 8016470:	0801c589 	.word	0x0801c589
 8016474:	000002ea 	.word	0x000002ea
 8016478:	0039      	movs	r1, r7
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	310c      	adds	r1, #12
 801647e:	1c9a      	adds	r2, r3, #2
 8016480:	0092      	lsls	r2, r2, #2
 8016482:	300c      	adds	r0, #12
 8016484:	f7fc fe82 	bl	801318c <memcpy>
 8016488:	2201      	movs	r2, #1
 801648a:	0021      	movs	r1, r4
 801648c:	9804      	ldr	r0, [sp, #16]
 801648e:	f000 ffc9 	bl	8017424 <__lshift>
 8016492:	9b06      	ldr	r3, [sp, #24]
 8016494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016496:	9307      	str	r3, [sp, #28]
 8016498:	3b01      	subs	r3, #1
 801649a:	189b      	adds	r3, r3, r2
 801649c:	2201      	movs	r2, #1
 801649e:	003d      	movs	r5, r7
 80164a0:	0007      	movs	r7, r0
 80164a2:	930e      	str	r3, [sp, #56]	; 0x38
 80164a4:	9b08      	ldr	r3, [sp, #32]
 80164a6:	4013      	ands	r3, r2
 80164a8:	930d      	str	r3, [sp, #52]	; 0x34
 80164aa:	0031      	movs	r1, r6
 80164ac:	9805      	ldr	r0, [sp, #20]
 80164ae:	f7ff fa6d 	bl	801598c <quorem>
 80164b2:	0029      	movs	r1, r5
 80164b4:	0004      	movs	r4, r0
 80164b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80164b8:	9805      	ldr	r0, [sp, #20]
 80164ba:	f001 f821 	bl	8017500 <__mcmp>
 80164be:	003a      	movs	r2, r7
 80164c0:	900c      	str	r0, [sp, #48]	; 0x30
 80164c2:	0031      	movs	r1, r6
 80164c4:	9804      	ldr	r0, [sp, #16]
 80164c6:	f001 f837 	bl	8017538 <__mdiff>
 80164ca:	68c3      	ldr	r3, [r0, #12]
 80164cc:	3430      	adds	r4, #48	; 0x30
 80164ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80164d0:	2301      	movs	r3, #1
 80164d2:	930a      	str	r3, [sp, #40]	; 0x28
 80164d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164d6:	9008      	str	r0, [sp, #32]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d104      	bne.n	80164e6 <_dtoa_r+0xa42>
 80164dc:	0001      	movs	r1, r0
 80164de:	9805      	ldr	r0, [sp, #20]
 80164e0:	f001 f80e 	bl	8017500 <__mcmp>
 80164e4:	900a      	str	r0, [sp, #40]	; 0x28
 80164e6:	9908      	ldr	r1, [sp, #32]
 80164e8:	9804      	ldr	r0, [sp, #16]
 80164ea:	f000 fdb1 	bl	8017050 <_Bfree>
 80164ee:	9b07      	ldr	r3, [sp, #28]
 80164f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80164f2:	3301      	adds	r3, #1
 80164f4:	9308      	str	r3, [sp, #32]
 80164f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80164f8:	4313      	orrs	r3, r2
 80164fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80164fc:	4313      	orrs	r3, r2
 80164fe:	d109      	bne.n	8016514 <_dtoa_r+0xa70>
 8016500:	2c39      	cmp	r4, #57	; 0x39
 8016502:	d022      	beq.n	801654a <_dtoa_r+0xaa6>
 8016504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016506:	2b00      	cmp	r3, #0
 8016508:	dd01      	ble.n	801650e <_dtoa_r+0xa6a>
 801650a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801650c:	3431      	adds	r4, #49	; 0x31
 801650e:	9b07      	ldr	r3, [sp, #28]
 8016510:	701c      	strb	r4, [r3, #0]
 8016512:	e770      	b.n	80163f6 <_dtoa_r+0x952>
 8016514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016516:	2b00      	cmp	r3, #0
 8016518:	db04      	blt.n	8016524 <_dtoa_r+0xa80>
 801651a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801651c:	4313      	orrs	r3, r2
 801651e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016520:	4313      	orrs	r3, r2
 8016522:	d11e      	bne.n	8016562 <_dtoa_r+0xabe>
 8016524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016526:	2b00      	cmp	r3, #0
 8016528:	ddf1      	ble.n	801650e <_dtoa_r+0xa6a>
 801652a:	9905      	ldr	r1, [sp, #20]
 801652c:	2201      	movs	r2, #1
 801652e:	9804      	ldr	r0, [sp, #16]
 8016530:	f000 ff78 	bl	8017424 <__lshift>
 8016534:	0031      	movs	r1, r6
 8016536:	9005      	str	r0, [sp, #20]
 8016538:	f000 ffe2 	bl	8017500 <__mcmp>
 801653c:	2800      	cmp	r0, #0
 801653e:	dc02      	bgt.n	8016546 <_dtoa_r+0xaa2>
 8016540:	d1e5      	bne.n	801650e <_dtoa_r+0xa6a>
 8016542:	07e3      	lsls	r3, r4, #31
 8016544:	d5e3      	bpl.n	801650e <_dtoa_r+0xa6a>
 8016546:	2c39      	cmp	r4, #57	; 0x39
 8016548:	d1df      	bne.n	801650a <_dtoa_r+0xa66>
 801654a:	2339      	movs	r3, #57	; 0x39
 801654c:	9a07      	ldr	r2, [sp, #28]
 801654e:	7013      	strb	r3, [r2, #0]
 8016550:	9b08      	ldr	r3, [sp, #32]
 8016552:	9308      	str	r3, [sp, #32]
 8016554:	3b01      	subs	r3, #1
 8016556:	781a      	ldrb	r2, [r3, #0]
 8016558:	2a39      	cmp	r2, #57	; 0x39
 801655a:	d063      	beq.n	8016624 <_dtoa_r+0xb80>
 801655c:	3201      	adds	r2, #1
 801655e:	701a      	strb	r2, [r3, #0]
 8016560:	e749      	b.n	80163f6 <_dtoa_r+0x952>
 8016562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016564:	2b00      	cmp	r3, #0
 8016566:	dd03      	ble.n	8016570 <_dtoa_r+0xacc>
 8016568:	2c39      	cmp	r4, #57	; 0x39
 801656a:	d0ee      	beq.n	801654a <_dtoa_r+0xaa6>
 801656c:	3401      	adds	r4, #1
 801656e:	e7ce      	b.n	801650e <_dtoa_r+0xa6a>
 8016570:	9b07      	ldr	r3, [sp, #28]
 8016572:	9a07      	ldr	r2, [sp, #28]
 8016574:	701c      	strb	r4, [r3, #0]
 8016576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016578:	4293      	cmp	r3, r2
 801657a:	d03e      	beq.n	80165fa <_dtoa_r+0xb56>
 801657c:	2300      	movs	r3, #0
 801657e:	220a      	movs	r2, #10
 8016580:	9905      	ldr	r1, [sp, #20]
 8016582:	9804      	ldr	r0, [sp, #16]
 8016584:	f000 fd6e 	bl	8017064 <__multadd>
 8016588:	2300      	movs	r3, #0
 801658a:	9005      	str	r0, [sp, #20]
 801658c:	220a      	movs	r2, #10
 801658e:	0029      	movs	r1, r5
 8016590:	9804      	ldr	r0, [sp, #16]
 8016592:	42bd      	cmp	r5, r7
 8016594:	d106      	bne.n	80165a4 <_dtoa_r+0xb00>
 8016596:	f000 fd65 	bl	8017064 <__multadd>
 801659a:	0005      	movs	r5, r0
 801659c:	0007      	movs	r7, r0
 801659e:	9b08      	ldr	r3, [sp, #32]
 80165a0:	9307      	str	r3, [sp, #28]
 80165a2:	e782      	b.n	80164aa <_dtoa_r+0xa06>
 80165a4:	f000 fd5e 	bl	8017064 <__multadd>
 80165a8:	0039      	movs	r1, r7
 80165aa:	0005      	movs	r5, r0
 80165ac:	2300      	movs	r3, #0
 80165ae:	220a      	movs	r2, #10
 80165b0:	9804      	ldr	r0, [sp, #16]
 80165b2:	f000 fd57 	bl	8017064 <__multadd>
 80165b6:	0007      	movs	r7, r0
 80165b8:	e7f1      	b.n	801659e <_dtoa_r+0xafa>
 80165ba:	9b07      	ldr	r3, [sp, #28]
 80165bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80165be:	2500      	movs	r5, #0
 80165c0:	0031      	movs	r1, r6
 80165c2:	9805      	ldr	r0, [sp, #20]
 80165c4:	f7ff f9e2 	bl	801598c <quorem>
 80165c8:	9b06      	ldr	r3, [sp, #24]
 80165ca:	3030      	adds	r0, #48	; 0x30
 80165cc:	5558      	strb	r0, [r3, r5]
 80165ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165d0:	3501      	adds	r5, #1
 80165d2:	0004      	movs	r4, r0
 80165d4:	42ab      	cmp	r3, r5
 80165d6:	dd07      	ble.n	80165e8 <_dtoa_r+0xb44>
 80165d8:	2300      	movs	r3, #0
 80165da:	220a      	movs	r2, #10
 80165dc:	9905      	ldr	r1, [sp, #20]
 80165de:	9804      	ldr	r0, [sp, #16]
 80165e0:	f000 fd40 	bl	8017064 <__multadd>
 80165e4:	9005      	str	r0, [sp, #20]
 80165e6:	e7eb      	b.n	80165c0 <_dtoa_r+0xb1c>
 80165e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165ea:	2001      	movs	r0, #1
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	dd00      	ble.n	80165f2 <_dtoa_r+0xb4e>
 80165f0:	0018      	movs	r0, r3
 80165f2:	2500      	movs	r5, #0
 80165f4:	9b06      	ldr	r3, [sp, #24]
 80165f6:	181b      	adds	r3, r3, r0
 80165f8:	9308      	str	r3, [sp, #32]
 80165fa:	9905      	ldr	r1, [sp, #20]
 80165fc:	2201      	movs	r2, #1
 80165fe:	9804      	ldr	r0, [sp, #16]
 8016600:	f000 ff10 	bl	8017424 <__lshift>
 8016604:	0031      	movs	r1, r6
 8016606:	9005      	str	r0, [sp, #20]
 8016608:	f000 ff7a 	bl	8017500 <__mcmp>
 801660c:	2800      	cmp	r0, #0
 801660e:	dc9f      	bgt.n	8016550 <_dtoa_r+0xaac>
 8016610:	d101      	bne.n	8016616 <_dtoa_r+0xb72>
 8016612:	07e3      	lsls	r3, r4, #31
 8016614:	d49c      	bmi.n	8016550 <_dtoa_r+0xaac>
 8016616:	9b08      	ldr	r3, [sp, #32]
 8016618:	9308      	str	r3, [sp, #32]
 801661a:	3b01      	subs	r3, #1
 801661c:	781a      	ldrb	r2, [r3, #0]
 801661e:	2a30      	cmp	r2, #48	; 0x30
 8016620:	d0fa      	beq.n	8016618 <_dtoa_r+0xb74>
 8016622:	e6e8      	b.n	80163f6 <_dtoa_r+0x952>
 8016624:	9a06      	ldr	r2, [sp, #24]
 8016626:	429a      	cmp	r2, r3
 8016628:	d193      	bne.n	8016552 <_dtoa_r+0xaae>
 801662a:	9b03      	ldr	r3, [sp, #12]
 801662c:	3301      	adds	r3, #1
 801662e:	9303      	str	r3, [sp, #12]
 8016630:	2331      	movs	r3, #49	; 0x31
 8016632:	7013      	strb	r3, [r2, #0]
 8016634:	e6df      	b.n	80163f6 <_dtoa_r+0x952>
 8016636:	4b09      	ldr	r3, [pc, #36]	; (801665c <_dtoa_r+0xbb8>)
 8016638:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801663a:	9306      	str	r3, [sp, #24]
 801663c:	4b08      	ldr	r3, [pc, #32]	; (8016660 <_dtoa_r+0xbbc>)
 801663e:	2a00      	cmp	r2, #0
 8016640:	d001      	beq.n	8016646 <_dtoa_r+0xba2>
 8016642:	f7ff fa60 	bl	8015b06 <_dtoa_r+0x62>
 8016646:	f7ff fa60 	bl	8015b0a <_dtoa_r+0x66>
 801664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801664c:	2b00      	cmp	r3, #0
 801664e:	dcb6      	bgt.n	80165be <_dtoa_r+0xb1a>
 8016650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016652:	2b02      	cmp	r3, #2
 8016654:	dd00      	ble.n	8016658 <_dtoa_r+0xbb4>
 8016656:	e6b8      	b.n	80163ca <_dtoa_r+0x926>
 8016658:	e7b1      	b.n	80165be <_dtoa_r+0xb1a>
 801665a:	46c0      	nop			; (mov r8, r8)
 801665c:	0801c580 	.word	0x0801c580
 8016660:	0801c588 	.word	0x0801c588

08016664 <__libc_fini_array>:
 8016664:	b570      	push	{r4, r5, r6, lr}
 8016666:	4d07      	ldr	r5, [pc, #28]	; (8016684 <__libc_fini_array+0x20>)
 8016668:	4c07      	ldr	r4, [pc, #28]	; (8016688 <__libc_fini_array+0x24>)
 801666a:	1b64      	subs	r4, r4, r5
 801666c:	10a4      	asrs	r4, r4, #2
 801666e:	2c00      	cmp	r4, #0
 8016670:	d102      	bne.n	8016678 <__libc_fini_array+0x14>
 8016672:	f002 fe17 	bl	80192a4 <_fini>
 8016676:	bd70      	pop	{r4, r5, r6, pc}
 8016678:	3c01      	subs	r4, #1
 801667a:	00a3      	lsls	r3, r4, #2
 801667c:	58eb      	ldr	r3, [r5, r3]
 801667e:	4798      	blx	r3
 8016680:	e7f5      	b.n	801666e <__libc_fini_array+0xa>
 8016682:	46c0      	nop			; (mov r8, r8)
 8016684:	0801c838 	.word	0x0801c838
 8016688:	0801c83c 	.word	0x0801c83c

0801668c <_malloc_trim_r>:
 801668c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801668e:	0004      	movs	r4, r0
 8016690:	2008      	movs	r0, #8
 8016692:	000d      	movs	r5, r1
 8016694:	f7ff f95a 	bl	801594c <sysconf>
 8016698:	0006      	movs	r6, r0
 801669a:	0020      	movs	r0, r4
 801669c:	f7fc fd88 	bl	80131b0 <__malloc_lock>
 80166a0:	2203      	movs	r2, #3
 80166a2:	4f21      	ldr	r7, [pc, #132]	; (8016728 <_malloc_trim_r+0x9c>)
 80166a4:	0031      	movs	r1, r6
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	4393      	bics	r3, r2
 80166ac:	1b58      	subs	r0, r3, r5
 80166ae:	3811      	subs	r0, #17
 80166b0:	1980      	adds	r0, r0, r6
 80166b2:	9301      	str	r3, [sp, #4]
 80166b4:	f7e9 fd4c 	bl	8000150 <__udivsi3>
 80166b8:	1e45      	subs	r5, r0, #1
 80166ba:	4375      	muls	r5, r6
 80166bc:	42ae      	cmp	r6, r5
 80166be:	dd04      	ble.n	80166ca <_malloc_trim_r+0x3e>
 80166c0:	0020      	movs	r0, r4
 80166c2:	f7fc fd7d 	bl	80131c0 <__malloc_unlock>
 80166c6:	2000      	movs	r0, #0
 80166c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80166ca:	2100      	movs	r1, #0
 80166cc:	0020      	movs	r0, r4
 80166ce:	f7fc ff45 	bl	801355c <_sbrk_r>
 80166d2:	68bb      	ldr	r3, [r7, #8]
 80166d4:	9a01      	ldr	r2, [sp, #4]
 80166d6:	189b      	adds	r3, r3, r2
 80166d8:	4298      	cmp	r0, r3
 80166da:	d1f1      	bne.n	80166c0 <_malloc_trim_r+0x34>
 80166dc:	0020      	movs	r0, r4
 80166de:	4269      	negs	r1, r5
 80166e0:	f7fc ff3c 	bl	801355c <_sbrk_r>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d110      	bne.n	801670a <_malloc_trim_r+0x7e>
 80166e8:	2100      	movs	r1, #0
 80166ea:	0020      	movs	r0, r4
 80166ec:	f7fc ff36 	bl	801355c <_sbrk_r>
 80166f0:	68ba      	ldr	r2, [r7, #8]
 80166f2:	1a81      	subs	r1, r0, r2
 80166f4:	290f      	cmp	r1, #15
 80166f6:	dde3      	ble.n	80166c0 <_malloc_trim_r+0x34>
 80166f8:	4b0c      	ldr	r3, [pc, #48]	; (801672c <_malloc_trim_r+0xa0>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	1ac0      	subs	r0, r0, r3
 80166fe:	4b0c      	ldr	r3, [pc, #48]	; (8016730 <_malloc_trim_r+0xa4>)
 8016700:	6018      	str	r0, [r3, #0]
 8016702:	2301      	movs	r3, #1
 8016704:	430b      	orrs	r3, r1
 8016706:	6053      	str	r3, [r2, #4]
 8016708:	e7da      	b.n	80166c0 <_malloc_trim_r+0x34>
 801670a:	2601      	movs	r6, #1
 801670c:	9b01      	ldr	r3, [sp, #4]
 801670e:	68ba      	ldr	r2, [r7, #8]
 8016710:	1b5b      	subs	r3, r3, r5
 8016712:	4333      	orrs	r3, r6
 8016714:	6053      	str	r3, [r2, #4]
 8016716:	4b06      	ldr	r3, [pc, #24]	; (8016730 <_malloc_trim_r+0xa4>)
 8016718:	0020      	movs	r0, r4
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	1b55      	subs	r5, r2, r5
 801671e:	601d      	str	r5, [r3, #0]
 8016720:	f7fc fd4e 	bl	80131c0 <__malloc_unlock>
 8016724:	0030      	movs	r0, r6
 8016726:	e7cf      	b.n	80166c8 <_malloc_trim_r+0x3c>
 8016728:	20000500 	.word	0x20000500
 801672c:	20000908 	.word	0x20000908
 8016730:	20006da0 	.word	0x20006da0

08016734 <_free_r>:
 8016734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016736:	1e0d      	subs	r5, r1, #0
 8016738:	9001      	str	r0, [sp, #4]
 801673a:	d02d      	beq.n	8016798 <_free_r+0x64>
 801673c:	f7fc fd38 	bl	80131b0 <__malloc_lock>
 8016740:	2301      	movs	r3, #1
 8016742:	0029      	movs	r1, r5
 8016744:	469c      	mov	ip, r3
 8016746:	3908      	subs	r1, #8
 8016748:	684f      	ldr	r7, [r1, #4]
 801674a:	4662      	mov	r2, ip
 801674c:	003b      	movs	r3, r7
 801674e:	4666      	mov	r6, ip
 8016750:	4393      	bics	r3, r2
 8016752:	18c8      	adds	r0, r1, r3
 8016754:	6845      	ldr	r5, [r0, #4]
 8016756:	3202      	adds	r2, #2
 8016758:	4395      	bics	r5, r2
 801675a:	4a4a      	ldr	r2, [pc, #296]	; (8016884 <_free_r+0x150>)
 801675c:	4037      	ands	r7, r6
 801675e:	6896      	ldr	r6, [r2, #8]
 8016760:	4286      	cmp	r6, r0
 8016762:	d11a      	bne.n	801679a <_free_r+0x66>
 8016764:	195b      	adds	r3, r3, r5
 8016766:	2f00      	cmp	r7, #0
 8016768:	d106      	bne.n	8016778 <_free_r+0x44>
 801676a:	6808      	ldr	r0, [r1, #0]
 801676c:	1a09      	subs	r1, r1, r0
 801676e:	688d      	ldr	r5, [r1, #8]
 8016770:	181b      	adds	r3, r3, r0
 8016772:	68c8      	ldr	r0, [r1, #12]
 8016774:	60e8      	str	r0, [r5, #12]
 8016776:	6085      	str	r5, [r0, #8]
 8016778:	2001      	movs	r0, #1
 801677a:	4318      	orrs	r0, r3
 801677c:	6048      	str	r0, [r1, #4]
 801677e:	6091      	str	r1, [r2, #8]
 8016780:	4a41      	ldr	r2, [pc, #260]	; (8016888 <_free_r+0x154>)
 8016782:	6812      	ldr	r2, [r2, #0]
 8016784:	429a      	cmp	r2, r3
 8016786:	d804      	bhi.n	8016792 <_free_r+0x5e>
 8016788:	4b40      	ldr	r3, [pc, #256]	; (801688c <_free_r+0x158>)
 801678a:	9801      	ldr	r0, [sp, #4]
 801678c:	6819      	ldr	r1, [r3, #0]
 801678e:	f7ff ff7d 	bl	801668c <_malloc_trim_r>
 8016792:	9801      	ldr	r0, [sp, #4]
 8016794:	f7fc fd14 	bl	80131c0 <__malloc_unlock>
 8016798:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801679a:	2600      	movs	r6, #0
 801679c:	6045      	str	r5, [r0, #4]
 801679e:	42b7      	cmp	r7, r6
 80167a0:	d109      	bne.n	80167b6 <_free_r+0x82>
 80167a2:	680f      	ldr	r7, [r1, #0]
 80167a4:	4c3a      	ldr	r4, [pc, #232]	; (8016890 <_free_r+0x15c>)
 80167a6:	1bc9      	subs	r1, r1, r7
 80167a8:	19db      	adds	r3, r3, r7
 80167aa:	688f      	ldr	r7, [r1, #8]
 80167ac:	42a7      	cmp	r7, r4
 80167ae:	d02c      	beq.n	801680a <_free_r+0xd6>
 80167b0:	68cc      	ldr	r4, [r1, #12]
 80167b2:	60fc      	str	r4, [r7, #12]
 80167b4:	60a7      	str	r7, [r4, #8]
 80167b6:	1947      	adds	r7, r0, r5
 80167b8:	687c      	ldr	r4, [r7, #4]
 80167ba:	2701      	movs	r7, #1
 80167bc:	423c      	tst	r4, r7
 80167be:	d10b      	bne.n	80167d8 <_free_r+0xa4>
 80167c0:	195b      	adds	r3, r3, r5
 80167c2:	6885      	ldr	r5, [r0, #8]
 80167c4:	2e00      	cmp	r6, #0
 80167c6:	d122      	bne.n	801680e <_free_r+0xda>
 80167c8:	4c31      	ldr	r4, [pc, #196]	; (8016890 <_free_r+0x15c>)
 80167ca:	42a5      	cmp	r5, r4
 80167cc:	d11f      	bne.n	801680e <_free_r+0xda>
 80167ce:	003e      	movs	r6, r7
 80167d0:	6151      	str	r1, [r2, #20]
 80167d2:	6111      	str	r1, [r2, #16]
 80167d4:	60cd      	str	r5, [r1, #12]
 80167d6:	608d      	str	r5, [r1, #8]
 80167d8:	2501      	movs	r5, #1
 80167da:	0028      	movs	r0, r5
 80167dc:	4318      	orrs	r0, r3
 80167de:	6048      	str	r0, [r1, #4]
 80167e0:	50cb      	str	r3, [r1, r3]
 80167e2:	2e00      	cmp	r6, #0
 80167e4:	d1d5      	bne.n	8016792 <_free_r+0x5e>
 80167e6:	2080      	movs	r0, #128	; 0x80
 80167e8:	0080      	lsls	r0, r0, #2
 80167ea:	4283      	cmp	r3, r0
 80167ec:	d213      	bcs.n	8016816 <_free_r+0xe2>
 80167ee:	08d8      	lsrs	r0, r3, #3
 80167f0:	095b      	lsrs	r3, r3, #5
 80167f2:	409d      	lsls	r5, r3
 80167f4:	6853      	ldr	r3, [r2, #4]
 80167f6:	00c0      	lsls	r0, r0, #3
 80167f8:	431d      	orrs	r5, r3
 80167fa:	6055      	str	r5, [r2, #4]
 80167fc:	1882      	adds	r2, r0, r2
 80167fe:	6893      	ldr	r3, [r2, #8]
 8016800:	60ca      	str	r2, [r1, #12]
 8016802:	608b      	str	r3, [r1, #8]
 8016804:	6091      	str	r1, [r2, #8]
 8016806:	60d9      	str	r1, [r3, #12]
 8016808:	e7c3      	b.n	8016792 <_free_r+0x5e>
 801680a:	4666      	mov	r6, ip
 801680c:	e7d3      	b.n	80167b6 <_free_r+0x82>
 801680e:	68c0      	ldr	r0, [r0, #12]
 8016810:	60e8      	str	r0, [r5, #12]
 8016812:	6085      	str	r5, [r0, #8]
 8016814:	e7e0      	b.n	80167d8 <_free_r+0xa4>
 8016816:	0a5d      	lsrs	r5, r3, #9
 8016818:	2d04      	cmp	r5, #4
 801681a:	d812      	bhi.n	8016842 <_free_r+0x10e>
 801681c:	0998      	lsrs	r0, r3, #6
 801681e:	3038      	adds	r0, #56	; 0x38
 8016820:	00c6      	lsls	r6, r0, #3
 8016822:	18b6      	adds	r6, r6, r2
 8016824:	68b5      	ldr	r5, [r6, #8]
 8016826:	2703      	movs	r7, #3
 8016828:	42ae      	cmp	r6, r5
 801682a:	d125      	bne.n	8016878 <_free_r+0x144>
 801682c:	2301      	movs	r3, #1
 801682e:	1080      	asrs	r0, r0, #2
 8016830:	4083      	lsls	r3, r0
 8016832:	6850      	ldr	r0, [r2, #4]
 8016834:	4303      	orrs	r3, r0
 8016836:	6053      	str	r3, [r2, #4]
 8016838:	60ce      	str	r6, [r1, #12]
 801683a:	608d      	str	r5, [r1, #8]
 801683c:	60b1      	str	r1, [r6, #8]
 801683e:	60e9      	str	r1, [r5, #12]
 8016840:	e7a7      	b.n	8016792 <_free_r+0x5e>
 8016842:	2d14      	cmp	r5, #20
 8016844:	d802      	bhi.n	801684c <_free_r+0x118>
 8016846:	0028      	movs	r0, r5
 8016848:	305b      	adds	r0, #91	; 0x5b
 801684a:	e7e9      	b.n	8016820 <_free_r+0xec>
 801684c:	2d54      	cmp	r5, #84	; 0x54
 801684e:	d802      	bhi.n	8016856 <_free_r+0x122>
 8016850:	0b18      	lsrs	r0, r3, #12
 8016852:	306e      	adds	r0, #110	; 0x6e
 8016854:	e7e4      	b.n	8016820 <_free_r+0xec>
 8016856:	20aa      	movs	r0, #170	; 0xaa
 8016858:	0040      	lsls	r0, r0, #1
 801685a:	4285      	cmp	r5, r0
 801685c:	d802      	bhi.n	8016864 <_free_r+0x130>
 801685e:	0bd8      	lsrs	r0, r3, #15
 8016860:	3077      	adds	r0, #119	; 0x77
 8016862:	e7dd      	b.n	8016820 <_free_r+0xec>
 8016864:	4e0b      	ldr	r6, [pc, #44]	; (8016894 <_free_r+0x160>)
 8016866:	207e      	movs	r0, #126	; 0x7e
 8016868:	42b5      	cmp	r5, r6
 801686a:	d8d9      	bhi.n	8016820 <_free_r+0xec>
 801686c:	0c98      	lsrs	r0, r3, #18
 801686e:	307c      	adds	r0, #124	; 0x7c
 8016870:	e7d6      	b.n	8016820 <_free_r+0xec>
 8016872:	68ad      	ldr	r5, [r5, #8]
 8016874:	42ae      	cmp	r6, r5
 8016876:	d003      	beq.n	8016880 <_free_r+0x14c>
 8016878:	686a      	ldr	r2, [r5, #4]
 801687a:	43ba      	bics	r2, r7
 801687c:	429a      	cmp	r2, r3
 801687e:	d8f8      	bhi.n	8016872 <_free_r+0x13e>
 8016880:	68ee      	ldr	r6, [r5, #12]
 8016882:	e7d9      	b.n	8016838 <_free_r+0x104>
 8016884:	20000500 	.word	0x20000500
 8016888:	2000090c 	.word	0x2000090c
 801688c:	20006dd0 	.word	0x20006dd0
 8016890:	20000508 	.word	0x20000508
 8016894:	00000554 	.word	0x00000554

08016898 <rshift>:
 8016898:	0002      	movs	r2, r0
 801689a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801689c:	6904      	ldr	r4, [r0, #16]
 801689e:	3214      	adds	r2, #20
 80168a0:	0013      	movs	r3, r2
 80168a2:	b085      	sub	sp, #20
 80168a4:	114f      	asrs	r7, r1, #5
 80168a6:	42bc      	cmp	r4, r7
 80168a8:	dd31      	ble.n	801690e <rshift+0x76>
 80168aa:	00bb      	lsls	r3, r7, #2
 80168ac:	18d3      	adds	r3, r2, r3
 80168ae:	261f      	movs	r6, #31
 80168b0:	9301      	str	r3, [sp, #4]
 80168b2:	000b      	movs	r3, r1
 80168b4:	00a5      	lsls	r5, r4, #2
 80168b6:	4033      	ands	r3, r6
 80168b8:	1955      	adds	r5, r2, r5
 80168ba:	9302      	str	r3, [sp, #8]
 80168bc:	4231      	tst	r1, r6
 80168be:	d10c      	bne.n	80168da <rshift+0x42>
 80168c0:	0016      	movs	r6, r2
 80168c2:	9901      	ldr	r1, [sp, #4]
 80168c4:	428d      	cmp	r5, r1
 80168c6:	d838      	bhi.n	801693a <rshift+0xa2>
 80168c8:	9901      	ldr	r1, [sp, #4]
 80168ca:	2300      	movs	r3, #0
 80168cc:	3903      	subs	r1, #3
 80168ce:	428d      	cmp	r5, r1
 80168d0:	d301      	bcc.n	80168d6 <rshift+0x3e>
 80168d2:	1be3      	subs	r3, r4, r7
 80168d4:	009b      	lsls	r3, r3, #2
 80168d6:	18d3      	adds	r3, r2, r3
 80168d8:	e019      	b.n	801690e <rshift+0x76>
 80168da:	2120      	movs	r1, #32
 80168dc:	9b02      	ldr	r3, [sp, #8]
 80168de:	9e01      	ldr	r6, [sp, #4]
 80168e0:	1acb      	subs	r3, r1, r3
 80168e2:	9303      	str	r3, [sp, #12]
 80168e4:	ce02      	ldmia	r6!, {r1}
 80168e6:	9b02      	ldr	r3, [sp, #8]
 80168e8:	4694      	mov	ip, r2
 80168ea:	40d9      	lsrs	r1, r3
 80168ec:	9100      	str	r1, [sp, #0]
 80168ee:	42b5      	cmp	r5, r6
 80168f0:	d816      	bhi.n	8016920 <rshift+0x88>
 80168f2:	9e01      	ldr	r6, [sp, #4]
 80168f4:	2300      	movs	r3, #0
 80168f6:	3601      	adds	r6, #1
 80168f8:	42b5      	cmp	r5, r6
 80168fa:	d302      	bcc.n	8016902 <rshift+0x6a>
 80168fc:	1be3      	subs	r3, r4, r7
 80168fe:	009b      	lsls	r3, r3, #2
 8016900:	3b04      	subs	r3, #4
 8016902:	9900      	ldr	r1, [sp, #0]
 8016904:	18d3      	adds	r3, r2, r3
 8016906:	6019      	str	r1, [r3, #0]
 8016908:	2900      	cmp	r1, #0
 801690a:	d000      	beq.n	801690e <rshift+0x76>
 801690c:	3304      	adds	r3, #4
 801690e:	1a99      	subs	r1, r3, r2
 8016910:	1089      	asrs	r1, r1, #2
 8016912:	6101      	str	r1, [r0, #16]
 8016914:	4293      	cmp	r3, r2
 8016916:	d101      	bne.n	801691c <rshift+0x84>
 8016918:	2300      	movs	r3, #0
 801691a:	6143      	str	r3, [r0, #20]
 801691c:	b005      	add	sp, #20
 801691e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016920:	6833      	ldr	r3, [r6, #0]
 8016922:	9903      	ldr	r1, [sp, #12]
 8016924:	408b      	lsls	r3, r1
 8016926:	9900      	ldr	r1, [sp, #0]
 8016928:	4319      	orrs	r1, r3
 801692a:	4663      	mov	r3, ip
 801692c:	c302      	stmia	r3!, {r1}
 801692e:	469c      	mov	ip, r3
 8016930:	ce02      	ldmia	r6!, {r1}
 8016932:	9b02      	ldr	r3, [sp, #8]
 8016934:	40d9      	lsrs	r1, r3
 8016936:	9100      	str	r1, [sp, #0]
 8016938:	e7d9      	b.n	80168ee <rshift+0x56>
 801693a:	c908      	ldmia	r1!, {r3}
 801693c:	c608      	stmia	r6!, {r3}
 801693e:	e7c1      	b.n	80168c4 <rshift+0x2c>

08016940 <__hexdig_fun>:
 8016940:	0002      	movs	r2, r0
 8016942:	3a30      	subs	r2, #48	; 0x30
 8016944:	0003      	movs	r3, r0
 8016946:	2a09      	cmp	r2, #9
 8016948:	d802      	bhi.n	8016950 <__hexdig_fun+0x10>
 801694a:	3b20      	subs	r3, #32
 801694c:	b2d8      	uxtb	r0, r3
 801694e:	4770      	bx	lr
 8016950:	0002      	movs	r2, r0
 8016952:	3a61      	subs	r2, #97	; 0x61
 8016954:	2a05      	cmp	r2, #5
 8016956:	d801      	bhi.n	801695c <__hexdig_fun+0x1c>
 8016958:	3b47      	subs	r3, #71	; 0x47
 801695a:	e7f7      	b.n	801694c <__hexdig_fun+0xc>
 801695c:	001a      	movs	r2, r3
 801695e:	3a41      	subs	r2, #65	; 0x41
 8016960:	2000      	movs	r0, #0
 8016962:	2a05      	cmp	r2, #5
 8016964:	d8f3      	bhi.n	801694e <__hexdig_fun+0xe>
 8016966:	3b27      	subs	r3, #39	; 0x27
 8016968:	e7f0      	b.n	801694c <__hexdig_fun+0xc>
	...

0801696c <__gethex>:
 801696c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801696e:	b08d      	sub	sp, #52	; 0x34
 8016970:	930a      	str	r3, [sp, #40]	; 0x28
 8016972:	4bbf      	ldr	r3, [pc, #764]	; (8016c70 <__gethex+0x304>)
 8016974:	9005      	str	r0, [sp, #20]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	9109      	str	r1, [sp, #36]	; 0x24
 801697a:	0018      	movs	r0, r3
 801697c:	9202      	str	r2, [sp, #8]
 801697e:	9307      	str	r3, [sp, #28]
 8016980:	f7e9 fbca 	bl	8000118 <strlen>
 8016984:	2202      	movs	r2, #2
 8016986:	9b07      	ldr	r3, [sp, #28]
 8016988:	4252      	negs	r2, r2
 801698a:	181b      	adds	r3, r3, r0
 801698c:	3b01      	subs	r3, #1
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	9003      	str	r0, [sp, #12]
 8016992:	930b      	str	r3, [sp, #44]	; 0x2c
 8016994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016996:	6819      	ldr	r1, [r3, #0]
 8016998:	1c8b      	adds	r3, r1, #2
 801699a:	1a52      	subs	r2, r2, r1
 801699c:	18d1      	adds	r1, r2, r3
 801699e:	9301      	str	r3, [sp, #4]
 80169a0:	9108      	str	r1, [sp, #32]
 80169a2:	9901      	ldr	r1, [sp, #4]
 80169a4:	3301      	adds	r3, #1
 80169a6:	7808      	ldrb	r0, [r1, #0]
 80169a8:	2830      	cmp	r0, #48	; 0x30
 80169aa:	d0f7      	beq.n	801699c <__gethex+0x30>
 80169ac:	f7ff ffc8 	bl	8016940 <__hexdig_fun>
 80169b0:	2300      	movs	r3, #0
 80169b2:	001c      	movs	r4, r3
 80169b4:	9304      	str	r3, [sp, #16]
 80169b6:	4298      	cmp	r0, r3
 80169b8:	d11f      	bne.n	80169fa <__gethex+0x8e>
 80169ba:	9a03      	ldr	r2, [sp, #12]
 80169bc:	9907      	ldr	r1, [sp, #28]
 80169be:	9801      	ldr	r0, [sp, #4]
 80169c0:	f7fc fe21 	bl	8013606 <strncmp>
 80169c4:	0007      	movs	r7, r0
 80169c6:	42a0      	cmp	r0, r4
 80169c8:	d000      	beq.n	80169cc <__gethex+0x60>
 80169ca:	e06b      	b.n	8016aa4 <__gethex+0x138>
 80169cc:	9b01      	ldr	r3, [sp, #4]
 80169ce:	9a03      	ldr	r2, [sp, #12]
 80169d0:	5c98      	ldrb	r0, [r3, r2]
 80169d2:	189d      	adds	r5, r3, r2
 80169d4:	f7ff ffb4 	bl	8016940 <__hexdig_fun>
 80169d8:	2301      	movs	r3, #1
 80169da:	9304      	str	r3, [sp, #16]
 80169dc:	42a0      	cmp	r0, r4
 80169de:	d030      	beq.n	8016a42 <__gethex+0xd6>
 80169e0:	9501      	str	r5, [sp, #4]
 80169e2:	9b01      	ldr	r3, [sp, #4]
 80169e4:	7818      	ldrb	r0, [r3, #0]
 80169e6:	2830      	cmp	r0, #48	; 0x30
 80169e8:	d009      	beq.n	80169fe <__gethex+0x92>
 80169ea:	f7ff ffa9 	bl	8016940 <__hexdig_fun>
 80169ee:	4242      	negs	r2, r0
 80169f0:	4142      	adcs	r2, r0
 80169f2:	2301      	movs	r3, #1
 80169f4:	002c      	movs	r4, r5
 80169f6:	9204      	str	r2, [sp, #16]
 80169f8:	9308      	str	r3, [sp, #32]
 80169fa:	9d01      	ldr	r5, [sp, #4]
 80169fc:	e004      	b.n	8016a08 <__gethex+0x9c>
 80169fe:	9b01      	ldr	r3, [sp, #4]
 8016a00:	3301      	adds	r3, #1
 8016a02:	9301      	str	r3, [sp, #4]
 8016a04:	e7ed      	b.n	80169e2 <__gethex+0x76>
 8016a06:	3501      	adds	r5, #1
 8016a08:	7828      	ldrb	r0, [r5, #0]
 8016a0a:	f7ff ff99 	bl	8016940 <__hexdig_fun>
 8016a0e:	1e07      	subs	r7, r0, #0
 8016a10:	d1f9      	bne.n	8016a06 <__gethex+0x9a>
 8016a12:	0028      	movs	r0, r5
 8016a14:	9a03      	ldr	r2, [sp, #12]
 8016a16:	9907      	ldr	r1, [sp, #28]
 8016a18:	f7fc fdf5 	bl	8013606 <strncmp>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	d10e      	bne.n	8016a3e <__gethex+0xd2>
 8016a20:	2c00      	cmp	r4, #0
 8016a22:	d107      	bne.n	8016a34 <__gethex+0xc8>
 8016a24:	9b03      	ldr	r3, [sp, #12]
 8016a26:	18ed      	adds	r5, r5, r3
 8016a28:	002c      	movs	r4, r5
 8016a2a:	7828      	ldrb	r0, [r5, #0]
 8016a2c:	f7ff ff88 	bl	8016940 <__hexdig_fun>
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d102      	bne.n	8016a3a <__gethex+0xce>
 8016a34:	1b64      	subs	r4, r4, r5
 8016a36:	00a7      	lsls	r7, r4, #2
 8016a38:	e003      	b.n	8016a42 <__gethex+0xd6>
 8016a3a:	3501      	adds	r5, #1
 8016a3c:	e7f5      	b.n	8016a2a <__gethex+0xbe>
 8016a3e:	2c00      	cmp	r4, #0
 8016a40:	d1f8      	bne.n	8016a34 <__gethex+0xc8>
 8016a42:	2220      	movs	r2, #32
 8016a44:	782b      	ldrb	r3, [r5, #0]
 8016a46:	002e      	movs	r6, r5
 8016a48:	4393      	bics	r3, r2
 8016a4a:	2b50      	cmp	r3, #80	; 0x50
 8016a4c:	d11d      	bne.n	8016a8a <__gethex+0x11e>
 8016a4e:	786b      	ldrb	r3, [r5, #1]
 8016a50:	2b2b      	cmp	r3, #43	; 0x2b
 8016a52:	d02c      	beq.n	8016aae <__gethex+0x142>
 8016a54:	2b2d      	cmp	r3, #45	; 0x2d
 8016a56:	d02e      	beq.n	8016ab6 <__gethex+0x14a>
 8016a58:	2300      	movs	r3, #0
 8016a5a:	1c6e      	adds	r6, r5, #1
 8016a5c:	9306      	str	r3, [sp, #24]
 8016a5e:	7830      	ldrb	r0, [r6, #0]
 8016a60:	f7ff ff6e 	bl	8016940 <__hexdig_fun>
 8016a64:	1e43      	subs	r3, r0, #1
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	2b18      	cmp	r3, #24
 8016a6a:	d82b      	bhi.n	8016ac4 <__gethex+0x158>
 8016a6c:	3810      	subs	r0, #16
 8016a6e:	0004      	movs	r4, r0
 8016a70:	7870      	ldrb	r0, [r6, #1]
 8016a72:	f7ff ff65 	bl	8016940 <__hexdig_fun>
 8016a76:	1e43      	subs	r3, r0, #1
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	3601      	adds	r6, #1
 8016a7c:	2b18      	cmp	r3, #24
 8016a7e:	d91c      	bls.n	8016aba <__gethex+0x14e>
 8016a80:	9b06      	ldr	r3, [sp, #24]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d000      	beq.n	8016a88 <__gethex+0x11c>
 8016a86:	4264      	negs	r4, r4
 8016a88:	193f      	adds	r7, r7, r4
 8016a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a8c:	601e      	str	r6, [r3, #0]
 8016a8e:	9b04      	ldr	r3, [sp, #16]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d019      	beq.n	8016ac8 <__gethex+0x15c>
 8016a94:	2600      	movs	r6, #0
 8016a96:	9b08      	ldr	r3, [sp, #32]
 8016a98:	42b3      	cmp	r3, r6
 8016a9a:	d100      	bne.n	8016a9e <__gethex+0x132>
 8016a9c:	3606      	adds	r6, #6
 8016a9e:	0030      	movs	r0, r6
 8016aa0:	b00d      	add	sp, #52	; 0x34
 8016aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	2700      	movs	r7, #0
 8016aa8:	9d01      	ldr	r5, [sp, #4]
 8016aaa:	9304      	str	r3, [sp, #16]
 8016aac:	e7c9      	b.n	8016a42 <__gethex+0xd6>
 8016aae:	2300      	movs	r3, #0
 8016ab0:	9306      	str	r3, [sp, #24]
 8016ab2:	1cae      	adds	r6, r5, #2
 8016ab4:	e7d3      	b.n	8016a5e <__gethex+0xf2>
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	e7fa      	b.n	8016ab0 <__gethex+0x144>
 8016aba:	230a      	movs	r3, #10
 8016abc:	435c      	muls	r4, r3
 8016abe:	1824      	adds	r4, r4, r0
 8016ac0:	3c10      	subs	r4, #16
 8016ac2:	e7d5      	b.n	8016a70 <__gethex+0x104>
 8016ac4:	002e      	movs	r6, r5
 8016ac6:	e7e0      	b.n	8016a8a <__gethex+0x11e>
 8016ac8:	9b01      	ldr	r3, [sp, #4]
 8016aca:	9904      	ldr	r1, [sp, #16]
 8016acc:	1aeb      	subs	r3, r5, r3
 8016ace:	3b01      	subs	r3, #1
 8016ad0:	2b07      	cmp	r3, #7
 8016ad2:	dc0a      	bgt.n	8016aea <__gethex+0x17e>
 8016ad4:	9805      	ldr	r0, [sp, #20]
 8016ad6:	f000 fa93 	bl	8017000 <_Balloc>
 8016ada:	1e04      	subs	r4, r0, #0
 8016adc:	d108      	bne.n	8016af0 <__gethex+0x184>
 8016ade:	0002      	movs	r2, r0
 8016ae0:	21de      	movs	r1, #222	; 0xde
 8016ae2:	4b64      	ldr	r3, [pc, #400]	; (8016c74 <__gethex+0x308>)
 8016ae4:	4864      	ldr	r0, [pc, #400]	; (8016c78 <__gethex+0x30c>)
 8016ae6:	f001 f80d 	bl	8017b04 <__assert_func>
 8016aea:	3101      	adds	r1, #1
 8016aec:	105b      	asrs	r3, r3, #1
 8016aee:	e7ef      	b.n	8016ad0 <__gethex+0x164>
 8016af0:	0003      	movs	r3, r0
 8016af2:	3314      	adds	r3, #20
 8016af4:	9304      	str	r3, [sp, #16]
 8016af6:	9309      	str	r3, [sp, #36]	; 0x24
 8016af8:	2300      	movs	r3, #0
 8016afa:	001e      	movs	r6, r3
 8016afc:	9306      	str	r3, [sp, #24]
 8016afe:	9b01      	ldr	r3, [sp, #4]
 8016b00:	42ab      	cmp	r3, r5
 8016b02:	d340      	bcc.n	8016b86 <__gethex+0x21a>
 8016b04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016b06:	9b04      	ldr	r3, [sp, #16]
 8016b08:	c540      	stmia	r5!, {r6}
 8016b0a:	1aed      	subs	r5, r5, r3
 8016b0c:	10ad      	asrs	r5, r5, #2
 8016b0e:	0030      	movs	r0, r6
 8016b10:	6125      	str	r5, [r4, #16]
 8016b12:	f000 fb37 	bl	8017184 <__hi0bits>
 8016b16:	9b02      	ldr	r3, [sp, #8]
 8016b18:	016d      	lsls	r5, r5, #5
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	1a2e      	subs	r6, r5, r0
 8016b1e:	9301      	str	r3, [sp, #4]
 8016b20:	429e      	cmp	r6, r3
 8016b22:	dd5a      	ble.n	8016bda <__gethex+0x26e>
 8016b24:	1af6      	subs	r6, r6, r3
 8016b26:	0031      	movs	r1, r6
 8016b28:	0020      	movs	r0, r4
 8016b2a:	f000 febf 	bl	80178ac <__any_on>
 8016b2e:	1e05      	subs	r5, r0, #0
 8016b30:	d016      	beq.n	8016b60 <__gethex+0x1f4>
 8016b32:	2501      	movs	r5, #1
 8016b34:	211f      	movs	r1, #31
 8016b36:	0028      	movs	r0, r5
 8016b38:	1e73      	subs	r3, r6, #1
 8016b3a:	4019      	ands	r1, r3
 8016b3c:	4088      	lsls	r0, r1
 8016b3e:	0001      	movs	r1, r0
 8016b40:	115a      	asrs	r2, r3, #5
 8016b42:	9804      	ldr	r0, [sp, #16]
 8016b44:	0092      	lsls	r2, r2, #2
 8016b46:	5812      	ldr	r2, [r2, r0]
 8016b48:	420a      	tst	r2, r1
 8016b4a:	d009      	beq.n	8016b60 <__gethex+0x1f4>
 8016b4c:	42ab      	cmp	r3, r5
 8016b4e:	dd06      	ble.n	8016b5e <__gethex+0x1f2>
 8016b50:	0020      	movs	r0, r4
 8016b52:	1eb1      	subs	r1, r6, #2
 8016b54:	f000 feaa 	bl	80178ac <__any_on>
 8016b58:	3502      	adds	r5, #2
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	d100      	bne.n	8016b60 <__gethex+0x1f4>
 8016b5e:	2502      	movs	r5, #2
 8016b60:	0031      	movs	r1, r6
 8016b62:	0020      	movs	r0, r4
 8016b64:	f7ff fe98 	bl	8016898 <rshift>
 8016b68:	19bf      	adds	r7, r7, r6
 8016b6a:	9b02      	ldr	r3, [sp, #8]
 8016b6c:	689b      	ldr	r3, [r3, #8]
 8016b6e:	9303      	str	r3, [sp, #12]
 8016b70:	42bb      	cmp	r3, r7
 8016b72:	da42      	bge.n	8016bfa <__gethex+0x28e>
 8016b74:	0021      	movs	r1, r4
 8016b76:	9805      	ldr	r0, [sp, #20]
 8016b78:	f000 fa6a 	bl	8017050 <_Bfree>
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b80:	26a3      	movs	r6, #163	; 0xa3
 8016b82:	6013      	str	r3, [r2, #0]
 8016b84:	e78b      	b.n	8016a9e <__gethex+0x132>
 8016b86:	1e6b      	subs	r3, r5, #1
 8016b88:	9308      	str	r3, [sp, #32]
 8016b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	4293      	cmp	r3, r2
 8016b90:	d014      	beq.n	8016bbc <__gethex+0x250>
 8016b92:	9b06      	ldr	r3, [sp, #24]
 8016b94:	2b20      	cmp	r3, #32
 8016b96:	d104      	bne.n	8016ba2 <__gethex+0x236>
 8016b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b9a:	c340      	stmia	r3!, {r6}
 8016b9c:	2600      	movs	r6, #0
 8016b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016ba0:	9606      	str	r6, [sp, #24]
 8016ba2:	9b08      	ldr	r3, [sp, #32]
 8016ba4:	7818      	ldrb	r0, [r3, #0]
 8016ba6:	f7ff fecb 	bl	8016940 <__hexdig_fun>
 8016baa:	230f      	movs	r3, #15
 8016bac:	4018      	ands	r0, r3
 8016bae:	9b06      	ldr	r3, [sp, #24]
 8016bb0:	9d08      	ldr	r5, [sp, #32]
 8016bb2:	4098      	lsls	r0, r3
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	4306      	orrs	r6, r0
 8016bb8:	9306      	str	r3, [sp, #24]
 8016bba:	e7a0      	b.n	8016afe <__gethex+0x192>
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	9a03      	ldr	r2, [sp, #12]
 8016bc0:	1a9d      	subs	r5, r3, r2
 8016bc2:	9b08      	ldr	r3, [sp, #32]
 8016bc4:	195d      	adds	r5, r3, r5
 8016bc6:	9b01      	ldr	r3, [sp, #4]
 8016bc8:	429d      	cmp	r5, r3
 8016bca:	d3e2      	bcc.n	8016b92 <__gethex+0x226>
 8016bcc:	0028      	movs	r0, r5
 8016bce:	9907      	ldr	r1, [sp, #28]
 8016bd0:	f7fc fd19 	bl	8013606 <strncmp>
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d1dc      	bne.n	8016b92 <__gethex+0x226>
 8016bd8:	e791      	b.n	8016afe <__gethex+0x192>
 8016bda:	9b01      	ldr	r3, [sp, #4]
 8016bdc:	2500      	movs	r5, #0
 8016bde:	429e      	cmp	r6, r3
 8016be0:	dac3      	bge.n	8016b6a <__gethex+0x1fe>
 8016be2:	1b9e      	subs	r6, r3, r6
 8016be4:	0021      	movs	r1, r4
 8016be6:	0032      	movs	r2, r6
 8016be8:	9805      	ldr	r0, [sp, #20]
 8016bea:	f000 fc1b 	bl	8017424 <__lshift>
 8016bee:	0003      	movs	r3, r0
 8016bf0:	3314      	adds	r3, #20
 8016bf2:	0004      	movs	r4, r0
 8016bf4:	1bbf      	subs	r7, r7, r6
 8016bf6:	9304      	str	r3, [sp, #16]
 8016bf8:	e7b7      	b.n	8016b6a <__gethex+0x1fe>
 8016bfa:	9b02      	ldr	r3, [sp, #8]
 8016bfc:	685e      	ldr	r6, [r3, #4]
 8016bfe:	42be      	cmp	r6, r7
 8016c00:	dd71      	ble.n	8016ce6 <__gethex+0x37a>
 8016c02:	9b01      	ldr	r3, [sp, #4]
 8016c04:	1bf6      	subs	r6, r6, r7
 8016c06:	42b3      	cmp	r3, r6
 8016c08:	dc38      	bgt.n	8016c7c <__gethex+0x310>
 8016c0a:	9b02      	ldr	r3, [sp, #8]
 8016c0c:	68db      	ldr	r3, [r3, #12]
 8016c0e:	2b02      	cmp	r3, #2
 8016c10:	d026      	beq.n	8016c60 <__gethex+0x2f4>
 8016c12:	2b03      	cmp	r3, #3
 8016c14:	d028      	beq.n	8016c68 <__gethex+0x2fc>
 8016c16:	2b01      	cmp	r3, #1
 8016c18:	d119      	bne.n	8016c4e <__gethex+0x2e2>
 8016c1a:	9b01      	ldr	r3, [sp, #4]
 8016c1c:	42b3      	cmp	r3, r6
 8016c1e:	d116      	bne.n	8016c4e <__gethex+0x2e2>
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d10d      	bne.n	8016c40 <__gethex+0x2d4>
 8016c24:	9b02      	ldr	r3, [sp, #8]
 8016c26:	2662      	movs	r6, #98	; 0x62
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	9301      	str	r3, [sp, #4]
 8016c2c:	9a01      	ldr	r2, [sp, #4]
 8016c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	2301      	movs	r3, #1
 8016c34:	9a04      	ldr	r2, [sp, #16]
 8016c36:	6123      	str	r3, [r4, #16]
 8016c38:	6013      	str	r3, [r2, #0]
 8016c3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c3c:	601c      	str	r4, [r3, #0]
 8016c3e:	e72e      	b.n	8016a9e <__gethex+0x132>
 8016c40:	9901      	ldr	r1, [sp, #4]
 8016c42:	0020      	movs	r0, r4
 8016c44:	3901      	subs	r1, #1
 8016c46:	f000 fe31 	bl	80178ac <__any_on>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	d1ea      	bne.n	8016c24 <__gethex+0x2b8>
 8016c4e:	0021      	movs	r1, r4
 8016c50:	9805      	ldr	r0, [sp, #20]
 8016c52:	f000 f9fd 	bl	8017050 <_Bfree>
 8016c56:	2300      	movs	r3, #0
 8016c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c5a:	2650      	movs	r6, #80	; 0x50
 8016c5c:	6013      	str	r3, [r2, #0]
 8016c5e:	e71e      	b.n	8016a9e <__gethex+0x132>
 8016c60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d1f3      	bne.n	8016c4e <__gethex+0x2e2>
 8016c66:	e7dd      	b.n	8016c24 <__gethex+0x2b8>
 8016c68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1da      	bne.n	8016c24 <__gethex+0x2b8>
 8016c6e:	e7ee      	b.n	8016c4e <__gethex+0x2e2>
 8016c70:	0801c65c 	.word	0x0801c65c
 8016c74:	0801c589 	.word	0x0801c589
 8016c78:	0801c5f5 	.word	0x0801c5f5
 8016c7c:	1e77      	subs	r7, r6, #1
 8016c7e:	2d00      	cmp	r5, #0
 8016c80:	d12f      	bne.n	8016ce2 <__gethex+0x376>
 8016c82:	2f00      	cmp	r7, #0
 8016c84:	d004      	beq.n	8016c90 <__gethex+0x324>
 8016c86:	0039      	movs	r1, r7
 8016c88:	0020      	movs	r0, r4
 8016c8a:	f000 fe0f 	bl	80178ac <__any_on>
 8016c8e:	0005      	movs	r5, r0
 8016c90:	231f      	movs	r3, #31
 8016c92:	117a      	asrs	r2, r7, #5
 8016c94:	401f      	ands	r7, r3
 8016c96:	3b1e      	subs	r3, #30
 8016c98:	40bb      	lsls	r3, r7
 8016c9a:	9904      	ldr	r1, [sp, #16]
 8016c9c:	0092      	lsls	r2, r2, #2
 8016c9e:	5852      	ldr	r2, [r2, r1]
 8016ca0:	421a      	tst	r2, r3
 8016ca2:	d001      	beq.n	8016ca8 <__gethex+0x33c>
 8016ca4:	2302      	movs	r3, #2
 8016ca6:	431d      	orrs	r5, r3
 8016ca8:	9b01      	ldr	r3, [sp, #4]
 8016caa:	0031      	movs	r1, r6
 8016cac:	1b9b      	subs	r3, r3, r6
 8016cae:	2602      	movs	r6, #2
 8016cb0:	0020      	movs	r0, r4
 8016cb2:	9301      	str	r3, [sp, #4]
 8016cb4:	f7ff fdf0 	bl	8016898 <rshift>
 8016cb8:	9b02      	ldr	r3, [sp, #8]
 8016cba:	685f      	ldr	r7, [r3, #4]
 8016cbc:	2d00      	cmp	r5, #0
 8016cbe:	d041      	beq.n	8016d44 <__gethex+0x3d8>
 8016cc0:	9b02      	ldr	r3, [sp, #8]
 8016cc2:	68db      	ldr	r3, [r3, #12]
 8016cc4:	2b02      	cmp	r3, #2
 8016cc6:	d010      	beq.n	8016cea <__gethex+0x37e>
 8016cc8:	2b03      	cmp	r3, #3
 8016cca:	d012      	beq.n	8016cf2 <__gethex+0x386>
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d106      	bne.n	8016cde <__gethex+0x372>
 8016cd0:	07aa      	lsls	r2, r5, #30
 8016cd2:	d504      	bpl.n	8016cde <__gethex+0x372>
 8016cd4:	9a04      	ldr	r2, [sp, #16]
 8016cd6:	6810      	ldr	r0, [r2, #0]
 8016cd8:	4305      	orrs	r5, r0
 8016cda:	421d      	tst	r5, r3
 8016cdc:	d10c      	bne.n	8016cf8 <__gethex+0x38c>
 8016cde:	2310      	movs	r3, #16
 8016ce0:	e02f      	b.n	8016d42 <__gethex+0x3d6>
 8016ce2:	2501      	movs	r5, #1
 8016ce4:	e7d4      	b.n	8016c90 <__gethex+0x324>
 8016ce6:	2601      	movs	r6, #1
 8016ce8:	e7e8      	b.n	8016cbc <__gethex+0x350>
 8016cea:	2301      	movs	r3, #1
 8016cec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016cee:	1a9b      	subs	r3, r3, r2
 8016cf0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016cf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d0f2      	beq.n	8016cde <__gethex+0x372>
 8016cf8:	6923      	ldr	r3, [r4, #16]
 8016cfa:	2000      	movs	r0, #0
 8016cfc:	9303      	str	r3, [sp, #12]
 8016cfe:	009b      	lsls	r3, r3, #2
 8016d00:	9304      	str	r3, [sp, #16]
 8016d02:	0023      	movs	r3, r4
 8016d04:	9a04      	ldr	r2, [sp, #16]
 8016d06:	3314      	adds	r3, #20
 8016d08:	1899      	adds	r1, r3, r2
 8016d0a:	681a      	ldr	r2, [r3, #0]
 8016d0c:	1c55      	adds	r5, r2, #1
 8016d0e:	d01e      	beq.n	8016d4e <__gethex+0x3e2>
 8016d10:	3201      	adds	r2, #1
 8016d12:	601a      	str	r2, [r3, #0]
 8016d14:	0023      	movs	r3, r4
 8016d16:	3314      	adds	r3, #20
 8016d18:	2e02      	cmp	r6, #2
 8016d1a:	d140      	bne.n	8016d9e <__gethex+0x432>
 8016d1c:	9a02      	ldr	r2, [sp, #8]
 8016d1e:	9901      	ldr	r1, [sp, #4]
 8016d20:	6812      	ldr	r2, [r2, #0]
 8016d22:	3a01      	subs	r2, #1
 8016d24:	428a      	cmp	r2, r1
 8016d26:	d10b      	bne.n	8016d40 <__gethex+0x3d4>
 8016d28:	114a      	asrs	r2, r1, #5
 8016d2a:	211f      	movs	r1, #31
 8016d2c:	9801      	ldr	r0, [sp, #4]
 8016d2e:	0092      	lsls	r2, r2, #2
 8016d30:	4001      	ands	r1, r0
 8016d32:	2001      	movs	r0, #1
 8016d34:	0005      	movs	r5, r0
 8016d36:	408d      	lsls	r5, r1
 8016d38:	58d3      	ldr	r3, [r2, r3]
 8016d3a:	422b      	tst	r3, r5
 8016d3c:	d000      	beq.n	8016d40 <__gethex+0x3d4>
 8016d3e:	2601      	movs	r6, #1
 8016d40:	2320      	movs	r3, #32
 8016d42:	431e      	orrs	r6, r3
 8016d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d46:	601c      	str	r4, [r3, #0]
 8016d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d4a:	601f      	str	r7, [r3, #0]
 8016d4c:	e6a7      	b.n	8016a9e <__gethex+0x132>
 8016d4e:	c301      	stmia	r3!, {r0}
 8016d50:	4299      	cmp	r1, r3
 8016d52:	d8da      	bhi.n	8016d0a <__gethex+0x39e>
 8016d54:	9b03      	ldr	r3, [sp, #12]
 8016d56:	68a2      	ldr	r2, [r4, #8]
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	db17      	blt.n	8016d8c <__gethex+0x420>
 8016d5c:	6863      	ldr	r3, [r4, #4]
 8016d5e:	9805      	ldr	r0, [sp, #20]
 8016d60:	1c59      	adds	r1, r3, #1
 8016d62:	f000 f94d 	bl	8017000 <_Balloc>
 8016d66:	1e05      	subs	r5, r0, #0
 8016d68:	d103      	bne.n	8016d72 <__gethex+0x406>
 8016d6a:	0002      	movs	r2, r0
 8016d6c:	2184      	movs	r1, #132	; 0x84
 8016d6e:	4b1c      	ldr	r3, [pc, #112]	; (8016de0 <__gethex+0x474>)
 8016d70:	e6b8      	b.n	8016ae4 <__gethex+0x178>
 8016d72:	0021      	movs	r1, r4
 8016d74:	6923      	ldr	r3, [r4, #16]
 8016d76:	310c      	adds	r1, #12
 8016d78:	1c9a      	adds	r2, r3, #2
 8016d7a:	0092      	lsls	r2, r2, #2
 8016d7c:	300c      	adds	r0, #12
 8016d7e:	f7fc fa05 	bl	801318c <memcpy>
 8016d82:	0021      	movs	r1, r4
 8016d84:	9805      	ldr	r0, [sp, #20]
 8016d86:	f000 f963 	bl	8017050 <_Bfree>
 8016d8a:	002c      	movs	r4, r5
 8016d8c:	6923      	ldr	r3, [r4, #16]
 8016d8e:	1c5a      	adds	r2, r3, #1
 8016d90:	6122      	str	r2, [r4, #16]
 8016d92:	2201      	movs	r2, #1
 8016d94:	3304      	adds	r3, #4
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	18e3      	adds	r3, r4, r3
 8016d9a:	605a      	str	r2, [r3, #4]
 8016d9c:	e7ba      	b.n	8016d14 <__gethex+0x3a8>
 8016d9e:	6922      	ldr	r2, [r4, #16]
 8016da0:	9903      	ldr	r1, [sp, #12]
 8016da2:	428a      	cmp	r2, r1
 8016da4:	dd09      	ble.n	8016dba <__gethex+0x44e>
 8016da6:	2101      	movs	r1, #1
 8016da8:	0020      	movs	r0, r4
 8016daa:	f7ff fd75 	bl	8016898 <rshift>
 8016dae:	9b02      	ldr	r3, [sp, #8]
 8016db0:	3701      	adds	r7, #1
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	42bb      	cmp	r3, r7
 8016db6:	dac2      	bge.n	8016d3e <__gethex+0x3d2>
 8016db8:	e6dc      	b.n	8016b74 <__gethex+0x208>
 8016dba:	221f      	movs	r2, #31
 8016dbc:	9d01      	ldr	r5, [sp, #4]
 8016dbe:	9901      	ldr	r1, [sp, #4]
 8016dc0:	2601      	movs	r6, #1
 8016dc2:	4015      	ands	r5, r2
 8016dc4:	4211      	tst	r1, r2
 8016dc6:	d0bb      	beq.n	8016d40 <__gethex+0x3d4>
 8016dc8:	9a04      	ldr	r2, [sp, #16]
 8016dca:	189b      	adds	r3, r3, r2
 8016dcc:	3b04      	subs	r3, #4
 8016dce:	6818      	ldr	r0, [r3, #0]
 8016dd0:	f000 f9d8 	bl	8017184 <__hi0bits>
 8016dd4:	2320      	movs	r3, #32
 8016dd6:	1b5d      	subs	r5, r3, r5
 8016dd8:	42a8      	cmp	r0, r5
 8016dda:	dbe4      	blt.n	8016da6 <__gethex+0x43a>
 8016ddc:	e7b0      	b.n	8016d40 <__gethex+0x3d4>
 8016dde:	46c0      	nop			; (mov r8, r8)
 8016de0:	0801c589 	.word	0x0801c589

08016de4 <L_shift>:
 8016de4:	2308      	movs	r3, #8
 8016de6:	b570      	push	{r4, r5, r6, lr}
 8016de8:	2520      	movs	r5, #32
 8016dea:	1a9a      	subs	r2, r3, r2
 8016dec:	0092      	lsls	r2, r2, #2
 8016dee:	1aad      	subs	r5, r5, r2
 8016df0:	6843      	ldr	r3, [r0, #4]
 8016df2:	6806      	ldr	r6, [r0, #0]
 8016df4:	001c      	movs	r4, r3
 8016df6:	40ac      	lsls	r4, r5
 8016df8:	40d3      	lsrs	r3, r2
 8016dfa:	4334      	orrs	r4, r6
 8016dfc:	6004      	str	r4, [r0, #0]
 8016dfe:	6043      	str	r3, [r0, #4]
 8016e00:	3004      	adds	r0, #4
 8016e02:	4288      	cmp	r0, r1
 8016e04:	d3f4      	bcc.n	8016df0 <L_shift+0xc>
 8016e06:	bd70      	pop	{r4, r5, r6, pc}

08016e08 <__match>:
 8016e08:	b530      	push	{r4, r5, lr}
 8016e0a:	6803      	ldr	r3, [r0, #0]
 8016e0c:	780c      	ldrb	r4, [r1, #0]
 8016e0e:	3301      	adds	r3, #1
 8016e10:	2c00      	cmp	r4, #0
 8016e12:	d102      	bne.n	8016e1a <__match+0x12>
 8016e14:	6003      	str	r3, [r0, #0]
 8016e16:	2001      	movs	r0, #1
 8016e18:	bd30      	pop	{r4, r5, pc}
 8016e1a:	781a      	ldrb	r2, [r3, #0]
 8016e1c:	0015      	movs	r5, r2
 8016e1e:	3d41      	subs	r5, #65	; 0x41
 8016e20:	2d19      	cmp	r5, #25
 8016e22:	d800      	bhi.n	8016e26 <__match+0x1e>
 8016e24:	3220      	adds	r2, #32
 8016e26:	3101      	adds	r1, #1
 8016e28:	42a2      	cmp	r2, r4
 8016e2a:	d0ef      	beq.n	8016e0c <__match+0x4>
 8016e2c:	2000      	movs	r0, #0
 8016e2e:	e7f3      	b.n	8016e18 <__match+0x10>

08016e30 <__hexnan>:
 8016e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e32:	680b      	ldr	r3, [r1, #0]
 8016e34:	b08b      	sub	sp, #44	; 0x2c
 8016e36:	9201      	str	r2, [sp, #4]
 8016e38:	9901      	ldr	r1, [sp, #4]
 8016e3a:	115a      	asrs	r2, r3, #5
 8016e3c:	0092      	lsls	r2, r2, #2
 8016e3e:	188a      	adds	r2, r1, r2
 8016e40:	9202      	str	r2, [sp, #8]
 8016e42:	0019      	movs	r1, r3
 8016e44:	221f      	movs	r2, #31
 8016e46:	4011      	ands	r1, r2
 8016e48:	9008      	str	r0, [sp, #32]
 8016e4a:	9106      	str	r1, [sp, #24]
 8016e4c:	4213      	tst	r3, r2
 8016e4e:	d002      	beq.n	8016e56 <__hexnan+0x26>
 8016e50:	9b02      	ldr	r3, [sp, #8]
 8016e52:	3304      	adds	r3, #4
 8016e54:	9302      	str	r3, [sp, #8]
 8016e56:	9b02      	ldr	r3, [sp, #8]
 8016e58:	2500      	movs	r5, #0
 8016e5a:	1f1e      	subs	r6, r3, #4
 8016e5c:	0037      	movs	r7, r6
 8016e5e:	0034      	movs	r4, r6
 8016e60:	9b08      	ldr	r3, [sp, #32]
 8016e62:	6035      	str	r5, [r6, #0]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	9507      	str	r5, [sp, #28]
 8016e68:	9305      	str	r3, [sp, #20]
 8016e6a:	9503      	str	r5, [sp, #12]
 8016e6c:	9b05      	ldr	r3, [sp, #20]
 8016e6e:	3301      	adds	r3, #1
 8016e70:	9309      	str	r3, [sp, #36]	; 0x24
 8016e72:	9b05      	ldr	r3, [sp, #20]
 8016e74:	785b      	ldrb	r3, [r3, #1]
 8016e76:	9304      	str	r3, [sp, #16]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d028      	beq.n	8016ece <__hexnan+0x9e>
 8016e7c:	9804      	ldr	r0, [sp, #16]
 8016e7e:	f7ff fd5f 	bl	8016940 <__hexdig_fun>
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d154      	bne.n	8016f30 <__hexnan+0x100>
 8016e86:	9b04      	ldr	r3, [sp, #16]
 8016e88:	2b20      	cmp	r3, #32
 8016e8a:	d819      	bhi.n	8016ec0 <__hexnan+0x90>
 8016e8c:	9b03      	ldr	r3, [sp, #12]
 8016e8e:	9a07      	ldr	r2, [sp, #28]
 8016e90:	4293      	cmp	r3, r2
 8016e92:	dd12      	ble.n	8016eba <__hexnan+0x8a>
 8016e94:	42bc      	cmp	r4, r7
 8016e96:	d206      	bcs.n	8016ea6 <__hexnan+0x76>
 8016e98:	2d07      	cmp	r5, #7
 8016e9a:	dc04      	bgt.n	8016ea6 <__hexnan+0x76>
 8016e9c:	002a      	movs	r2, r5
 8016e9e:	0039      	movs	r1, r7
 8016ea0:	0020      	movs	r0, r4
 8016ea2:	f7ff ff9f 	bl	8016de4 <L_shift>
 8016ea6:	9b01      	ldr	r3, [sp, #4]
 8016ea8:	2508      	movs	r5, #8
 8016eaa:	429c      	cmp	r4, r3
 8016eac:	d905      	bls.n	8016eba <__hexnan+0x8a>
 8016eae:	1f27      	subs	r7, r4, #4
 8016eb0:	2500      	movs	r5, #0
 8016eb2:	003c      	movs	r4, r7
 8016eb4:	9b03      	ldr	r3, [sp, #12]
 8016eb6:	603d      	str	r5, [r7, #0]
 8016eb8:	9307      	str	r3, [sp, #28]
 8016eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ebc:	9305      	str	r3, [sp, #20]
 8016ebe:	e7d5      	b.n	8016e6c <__hexnan+0x3c>
 8016ec0:	9b04      	ldr	r3, [sp, #16]
 8016ec2:	2b29      	cmp	r3, #41	; 0x29
 8016ec4:	d159      	bne.n	8016f7a <__hexnan+0x14a>
 8016ec6:	9b05      	ldr	r3, [sp, #20]
 8016ec8:	9a08      	ldr	r2, [sp, #32]
 8016eca:	3302      	adds	r3, #2
 8016ecc:	6013      	str	r3, [r2, #0]
 8016ece:	9b03      	ldr	r3, [sp, #12]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d052      	beq.n	8016f7a <__hexnan+0x14a>
 8016ed4:	42bc      	cmp	r4, r7
 8016ed6:	d206      	bcs.n	8016ee6 <__hexnan+0xb6>
 8016ed8:	2d07      	cmp	r5, #7
 8016eda:	dc04      	bgt.n	8016ee6 <__hexnan+0xb6>
 8016edc:	002a      	movs	r2, r5
 8016ede:	0039      	movs	r1, r7
 8016ee0:	0020      	movs	r0, r4
 8016ee2:	f7ff ff7f 	bl	8016de4 <L_shift>
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	429c      	cmp	r4, r3
 8016eea:	d935      	bls.n	8016f58 <__hexnan+0x128>
 8016eec:	001a      	movs	r2, r3
 8016eee:	0023      	movs	r3, r4
 8016ef0:	cb02      	ldmia	r3!, {r1}
 8016ef2:	c202      	stmia	r2!, {r1}
 8016ef4:	429e      	cmp	r6, r3
 8016ef6:	d2fb      	bcs.n	8016ef0 <__hexnan+0xc0>
 8016ef8:	9b02      	ldr	r3, [sp, #8]
 8016efa:	1c61      	adds	r1, r4, #1
 8016efc:	1eda      	subs	r2, r3, #3
 8016efe:	2304      	movs	r3, #4
 8016f00:	4291      	cmp	r1, r2
 8016f02:	d805      	bhi.n	8016f10 <__hexnan+0xe0>
 8016f04:	9b02      	ldr	r3, [sp, #8]
 8016f06:	3b04      	subs	r3, #4
 8016f08:	1b1b      	subs	r3, r3, r4
 8016f0a:	089b      	lsrs	r3, r3, #2
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	9a01      	ldr	r2, [sp, #4]
 8016f12:	18d3      	adds	r3, r2, r3
 8016f14:	2200      	movs	r2, #0
 8016f16:	c304      	stmia	r3!, {r2}
 8016f18:	429e      	cmp	r6, r3
 8016f1a:	d2fc      	bcs.n	8016f16 <__hexnan+0xe6>
 8016f1c:	6833      	ldr	r3, [r6, #0]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d104      	bne.n	8016f2c <__hexnan+0xfc>
 8016f22:	9b01      	ldr	r3, [sp, #4]
 8016f24:	429e      	cmp	r6, r3
 8016f26:	d126      	bne.n	8016f76 <__hexnan+0x146>
 8016f28:	2301      	movs	r3, #1
 8016f2a:	6033      	str	r3, [r6, #0]
 8016f2c:	2005      	movs	r0, #5
 8016f2e:	e025      	b.n	8016f7c <__hexnan+0x14c>
 8016f30:	9b03      	ldr	r3, [sp, #12]
 8016f32:	3501      	adds	r5, #1
 8016f34:	3301      	adds	r3, #1
 8016f36:	9303      	str	r3, [sp, #12]
 8016f38:	2d08      	cmp	r5, #8
 8016f3a:	dd06      	ble.n	8016f4a <__hexnan+0x11a>
 8016f3c:	9b01      	ldr	r3, [sp, #4]
 8016f3e:	429c      	cmp	r4, r3
 8016f40:	d9bb      	bls.n	8016eba <__hexnan+0x8a>
 8016f42:	2300      	movs	r3, #0
 8016f44:	2501      	movs	r5, #1
 8016f46:	3c04      	subs	r4, #4
 8016f48:	6023      	str	r3, [r4, #0]
 8016f4a:	220f      	movs	r2, #15
 8016f4c:	6823      	ldr	r3, [r4, #0]
 8016f4e:	4010      	ands	r0, r2
 8016f50:	011b      	lsls	r3, r3, #4
 8016f52:	4318      	orrs	r0, r3
 8016f54:	6020      	str	r0, [r4, #0]
 8016f56:	e7b0      	b.n	8016eba <__hexnan+0x8a>
 8016f58:	9b06      	ldr	r3, [sp, #24]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d0de      	beq.n	8016f1c <__hexnan+0xec>
 8016f5e:	2120      	movs	r1, #32
 8016f60:	9a06      	ldr	r2, [sp, #24]
 8016f62:	9b02      	ldr	r3, [sp, #8]
 8016f64:	1a89      	subs	r1, r1, r2
 8016f66:	2201      	movs	r2, #1
 8016f68:	4252      	negs	r2, r2
 8016f6a:	40ca      	lsrs	r2, r1
 8016f6c:	3b04      	subs	r3, #4
 8016f6e:	6819      	ldr	r1, [r3, #0]
 8016f70:	400a      	ands	r2, r1
 8016f72:	601a      	str	r2, [r3, #0]
 8016f74:	e7d2      	b.n	8016f1c <__hexnan+0xec>
 8016f76:	3e04      	subs	r6, #4
 8016f78:	e7d0      	b.n	8016f1c <__hexnan+0xec>
 8016f7a:	2004      	movs	r0, #4
 8016f7c:	b00b      	add	sp, #44	; 0x2c
 8016f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f80 <__locale_mb_cur_max>:
 8016f80:	2394      	movs	r3, #148	; 0x94
 8016f82:	4a02      	ldr	r2, [pc, #8]	; (8016f8c <__locale_mb_cur_max+0xc>)
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	5cd0      	ldrb	r0, [r2, r3]
 8016f88:	4770      	bx	lr
 8016f8a:	46c0      	nop			; (mov r8, r8)
 8016f8c:	20000918 	.word	0x20000918

08016f90 <_localeconv_r>:
 8016f90:	4800      	ldr	r0, [pc, #0]	; (8016f94 <_localeconv_r+0x4>)
 8016f92:	4770      	bx	lr
 8016f94:	20000a08 	.word	0x20000a08

08016f98 <__retarget_lock_init_recursive>:
 8016f98:	4770      	bx	lr

08016f9a <__retarget_lock_close_recursive>:
 8016f9a:	4770      	bx	lr

08016f9c <__retarget_lock_acquire_recursive>:
 8016f9c:	4770      	bx	lr

08016f9e <__retarget_lock_release_recursive>:
 8016f9e:	4770      	bx	lr

08016fa0 <__ascii_mbtowc>:
 8016fa0:	b082      	sub	sp, #8
 8016fa2:	2900      	cmp	r1, #0
 8016fa4:	d100      	bne.n	8016fa8 <__ascii_mbtowc+0x8>
 8016fa6:	a901      	add	r1, sp, #4
 8016fa8:	1e10      	subs	r0, r2, #0
 8016faa:	d006      	beq.n	8016fba <__ascii_mbtowc+0x1a>
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d006      	beq.n	8016fbe <__ascii_mbtowc+0x1e>
 8016fb0:	7813      	ldrb	r3, [r2, #0]
 8016fb2:	600b      	str	r3, [r1, #0]
 8016fb4:	7810      	ldrb	r0, [r2, #0]
 8016fb6:	1e43      	subs	r3, r0, #1
 8016fb8:	4198      	sbcs	r0, r3
 8016fba:	b002      	add	sp, #8
 8016fbc:	4770      	bx	lr
 8016fbe:	2002      	movs	r0, #2
 8016fc0:	4240      	negs	r0, r0
 8016fc2:	e7fa      	b.n	8016fba <__ascii_mbtowc+0x1a>

08016fc4 <memchr>:
 8016fc4:	b2c9      	uxtb	r1, r1
 8016fc6:	1882      	adds	r2, r0, r2
 8016fc8:	4290      	cmp	r0, r2
 8016fca:	d101      	bne.n	8016fd0 <memchr+0xc>
 8016fcc:	2000      	movs	r0, #0
 8016fce:	4770      	bx	lr
 8016fd0:	7803      	ldrb	r3, [r0, #0]
 8016fd2:	428b      	cmp	r3, r1
 8016fd4:	d0fb      	beq.n	8016fce <memchr+0xa>
 8016fd6:	3001      	adds	r0, #1
 8016fd8:	e7f6      	b.n	8016fc8 <memchr+0x4>

08016fda <memmove>:
 8016fda:	b510      	push	{r4, lr}
 8016fdc:	4288      	cmp	r0, r1
 8016fde:	d902      	bls.n	8016fe6 <memmove+0xc>
 8016fe0:	188b      	adds	r3, r1, r2
 8016fe2:	4298      	cmp	r0, r3
 8016fe4:	d303      	bcc.n	8016fee <memmove+0x14>
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	e007      	b.n	8016ffa <memmove+0x20>
 8016fea:	5c8b      	ldrb	r3, [r1, r2]
 8016fec:	5483      	strb	r3, [r0, r2]
 8016fee:	3a01      	subs	r2, #1
 8016ff0:	d2fb      	bcs.n	8016fea <memmove+0x10>
 8016ff2:	bd10      	pop	{r4, pc}
 8016ff4:	5ccc      	ldrb	r4, [r1, r3]
 8016ff6:	54c4      	strb	r4, [r0, r3]
 8016ff8:	3301      	adds	r3, #1
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d1fa      	bne.n	8016ff4 <memmove+0x1a>
 8016ffe:	e7f8      	b.n	8016ff2 <memmove+0x18>

08017000 <_Balloc>:
 8017000:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017002:	b570      	push	{r4, r5, r6, lr}
 8017004:	0006      	movs	r6, r0
 8017006:	000c      	movs	r4, r1
 8017008:	2b00      	cmp	r3, #0
 801700a:	d012      	beq.n	8017032 <_Balloc+0x32>
 801700c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 801700e:	00a3      	lsls	r3, r4, #2
 8017010:	18d3      	adds	r3, r2, r3
 8017012:	6818      	ldr	r0, [r3, #0]
 8017014:	2800      	cmp	r0, #0
 8017016:	d115      	bne.n	8017044 <_Balloc+0x44>
 8017018:	2101      	movs	r1, #1
 801701a:	000d      	movs	r5, r1
 801701c:	40a5      	lsls	r5, r4
 801701e:	1d6a      	adds	r2, r5, #5
 8017020:	0030      	movs	r0, r6
 8017022:	0092      	lsls	r2, r2, #2
 8017024:	f7fb fe04 	bl	8012c30 <_calloc_r>
 8017028:	2800      	cmp	r0, #0
 801702a:	d009      	beq.n	8017040 <_Balloc+0x40>
 801702c:	6044      	str	r4, [r0, #4]
 801702e:	6085      	str	r5, [r0, #8]
 8017030:	e00a      	b.n	8017048 <_Balloc+0x48>
 8017032:	2221      	movs	r2, #33	; 0x21
 8017034:	2104      	movs	r1, #4
 8017036:	f7fb fdfb 	bl	8012c30 <_calloc_r>
 801703a:	64f0      	str	r0, [r6, #76]	; 0x4c
 801703c:	2800      	cmp	r0, #0
 801703e:	d1e5      	bne.n	801700c <_Balloc+0xc>
 8017040:	2000      	movs	r0, #0
 8017042:	bd70      	pop	{r4, r5, r6, pc}
 8017044:	6802      	ldr	r2, [r0, #0]
 8017046:	601a      	str	r2, [r3, #0]
 8017048:	2300      	movs	r3, #0
 801704a:	6103      	str	r3, [r0, #16]
 801704c:	60c3      	str	r3, [r0, #12]
 801704e:	e7f8      	b.n	8017042 <_Balloc+0x42>

08017050 <_Bfree>:
 8017050:	2900      	cmp	r1, #0
 8017052:	d006      	beq.n	8017062 <_Bfree+0x12>
 8017054:	684b      	ldr	r3, [r1, #4]
 8017056:	009a      	lsls	r2, r3, #2
 8017058:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801705a:	189b      	adds	r3, r3, r2
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	600a      	str	r2, [r1, #0]
 8017060:	6019      	str	r1, [r3, #0]
 8017062:	4770      	bx	lr

08017064 <__multadd>:
 8017064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017066:	000e      	movs	r6, r1
 8017068:	9001      	str	r0, [sp, #4]
 801706a:	000c      	movs	r4, r1
 801706c:	001d      	movs	r5, r3
 801706e:	2000      	movs	r0, #0
 8017070:	690f      	ldr	r7, [r1, #16]
 8017072:	3614      	adds	r6, #20
 8017074:	6833      	ldr	r3, [r6, #0]
 8017076:	3001      	adds	r0, #1
 8017078:	b299      	uxth	r1, r3
 801707a:	4351      	muls	r1, r2
 801707c:	0c1b      	lsrs	r3, r3, #16
 801707e:	4353      	muls	r3, r2
 8017080:	1949      	adds	r1, r1, r5
 8017082:	0c0d      	lsrs	r5, r1, #16
 8017084:	195b      	adds	r3, r3, r5
 8017086:	0c1d      	lsrs	r5, r3, #16
 8017088:	b289      	uxth	r1, r1
 801708a:	041b      	lsls	r3, r3, #16
 801708c:	185b      	adds	r3, r3, r1
 801708e:	c608      	stmia	r6!, {r3}
 8017090:	4287      	cmp	r7, r0
 8017092:	dcef      	bgt.n	8017074 <__multadd+0x10>
 8017094:	2d00      	cmp	r5, #0
 8017096:	d022      	beq.n	80170de <__multadd+0x7a>
 8017098:	68a3      	ldr	r3, [r4, #8]
 801709a:	42bb      	cmp	r3, r7
 801709c:	dc19      	bgt.n	80170d2 <__multadd+0x6e>
 801709e:	6863      	ldr	r3, [r4, #4]
 80170a0:	9801      	ldr	r0, [sp, #4]
 80170a2:	1c59      	adds	r1, r3, #1
 80170a4:	f7ff ffac 	bl	8017000 <_Balloc>
 80170a8:	1e06      	subs	r6, r0, #0
 80170aa:	d105      	bne.n	80170b8 <__multadd+0x54>
 80170ac:	0002      	movs	r2, r0
 80170ae:	21b5      	movs	r1, #181	; 0xb5
 80170b0:	4b0c      	ldr	r3, [pc, #48]	; (80170e4 <__multadd+0x80>)
 80170b2:	480d      	ldr	r0, [pc, #52]	; (80170e8 <__multadd+0x84>)
 80170b4:	f000 fd26 	bl	8017b04 <__assert_func>
 80170b8:	0021      	movs	r1, r4
 80170ba:	6923      	ldr	r3, [r4, #16]
 80170bc:	310c      	adds	r1, #12
 80170be:	1c9a      	adds	r2, r3, #2
 80170c0:	0092      	lsls	r2, r2, #2
 80170c2:	300c      	adds	r0, #12
 80170c4:	f7fc f862 	bl	801318c <memcpy>
 80170c8:	0021      	movs	r1, r4
 80170ca:	9801      	ldr	r0, [sp, #4]
 80170cc:	f7ff ffc0 	bl	8017050 <_Bfree>
 80170d0:	0034      	movs	r4, r6
 80170d2:	1d3b      	adds	r3, r7, #4
 80170d4:	009b      	lsls	r3, r3, #2
 80170d6:	18e3      	adds	r3, r4, r3
 80170d8:	605d      	str	r5, [r3, #4]
 80170da:	1c7b      	adds	r3, r7, #1
 80170dc:	6123      	str	r3, [r4, #16]
 80170de:	0020      	movs	r0, r4
 80170e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80170e2:	46c0      	nop			; (mov r8, r8)
 80170e4:	0801c589 	.word	0x0801c589
 80170e8:	0801c670 	.word	0x0801c670

080170ec <__s2b>:
 80170ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80170ee:	0006      	movs	r6, r0
 80170f0:	0018      	movs	r0, r3
 80170f2:	000c      	movs	r4, r1
 80170f4:	3008      	adds	r0, #8
 80170f6:	2109      	movs	r1, #9
 80170f8:	9301      	str	r3, [sp, #4]
 80170fa:	0015      	movs	r5, r2
 80170fc:	f7e9 f8b2 	bl	8000264 <__divsi3>
 8017100:	2301      	movs	r3, #1
 8017102:	2100      	movs	r1, #0
 8017104:	4283      	cmp	r3, r0
 8017106:	db0a      	blt.n	801711e <__s2b+0x32>
 8017108:	0030      	movs	r0, r6
 801710a:	f7ff ff79 	bl	8017000 <_Balloc>
 801710e:	1e01      	subs	r1, r0, #0
 8017110:	d108      	bne.n	8017124 <__s2b+0x38>
 8017112:	0002      	movs	r2, r0
 8017114:	4b19      	ldr	r3, [pc, #100]	; (801717c <__s2b+0x90>)
 8017116:	481a      	ldr	r0, [pc, #104]	; (8017180 <__s2b+0x94>)
 8017118:	31ce      	adds	r1, #206	; 0xce
 801711a:	f000 fcf3 	bl	8017b04 <__assert_func>
 801711e:	005b      	lsls	r3, r3, #1
 8017120:	3101      	adds	r1, #1
 8017122:	e7ef      	b.n	8017104 <__s2b+0x18>
 8017124:	9b08      	ldr	r3, [sp, #32]
 8017126:	6143      	str	r3, [r0, #20]
 8017128:	2301      	movs	r3, #1
 801712a:	6103      	str	r3, [r0, #16]
 801712c:	2d09      	cmp	r5, #9
 801712e:	dd18      	ble.n	8017162 <__s2b+0x76>
 8017130:	0023      	movs	r3, r4
 8017132:	3309      	adds	r3, #9
 8017134:	001f      	movs	r7, r3
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	1964      	adds	r4, r4, r5
 801713a:	783b      	ldrb	r3, [r7, #0]
 801713c:	220a      	movs	r2, #10
 801713e:	0030      	movs	r0, r6
 8017140:	3b30      	subs	r3, #48	; 0x30
 8017142:	f7ff ff8f 	bl	8017064 <__multadd>
 8017146:	3701      	adds	r7, #1
 8017148:	0001      	movs	r1, r0
 801714a:	42a7      	cmp	r7, r4
 801714c:	d1f5      	bne.n	801713a <__s2b+0x4e>
 801714e:	002c      	movs	r4, r5
 8017150:	9b00      	ldr	r3, [sp, #0]
 8017152:	3c08      	subs	r4, #8
 8017154:	191c      	adds	r4, r3, r4
 8017156:	002f      	movs	r7, r5
 8017158:	9b01      	ldr	r3, [sp, #4]
 801715a:	429f      	cmp	r7, r3
 801715c:	db04      	blt.n	8017168 <__s2b+0x7c>
 801715e:	0008      	movs	r0, r1
 8017160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017162:	2509      	movs	r5, #9
 8017164:	340a      	adds	r4, #10
 8017166:	e7f6      	b.n	8017156 <__s2b+0x6a>
 8017168:	1b63      	subs	r3, r4, r5
 801716a:	5ddb      	ldrb	r3, [r3, r7]
 801716c:	220a      	movs	r2, #10
 801716e:	0030      	movs	r0, r6
 8017170:	3b30      	subs	r3, #48	; 0x30
 8017172:	f7ff ff77 	bl	8017064 <__multadd>
 8017176:	3701      	adds	r7, #1
 8017178:	0001      	movs	r1, r0
 801717a:	e7ed      	b.n	8017158 <__s2b+0x6c>
 801717c:	0801c589 	.word	0x0801c589
 8017180:	0801c670 	.word	0x0801c670

08017184 <__hi0bits>:
 8017184:	0003      	movs	r3, r0
 8017186:	0c02      	lsrs	r2, r0, #16
 8017188:	2000      	movs	r0, #0
 801718a:	4282      	cmp	r2, r0
 801718c:	d101      	bne.n	8017192 <__hi0bits+0xe>
 801718e:	041b      	lsls	r3, r3, #16
 8017190:	3010      	adds	r0, #16
 8017192:	0e1a      	lsrs	r2, r3, #24
 8017194:	d101      	bne.n	801719a <__hi0bits+0x16>
 8017196:	3008      	adds	r0, #8
 8017198:	021b      	lsls	r3, r3, #8
 801719a:	0f1a      	lsrs	r2, r3, #28
 801719c:	d101      	bne.n	80171a2 <__hi0bits+0x1e>
 801719e:	3004      	adds	r0, #4
 80171a0:	011b      	lsls	r3, r3, #4
 80171a2:	0f9a      	lsrs	r2, r3, #30
 80171a4:	d101      	bne.n	80171aa <__hi0bits+0x26>
 80171a6:	3002      	adds	r0, #2
 80171a8:	009b      	lsls	r3, r3, #2
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	db03      	blt.n	80171b6 <__hi0bits+0x32>
 80171ae:	3001      	adds	r0, #1
 80171b0:	005b      	lsls	r3, r3, #1
 80171b2:	d400      	bmi.n	80171b6 <__hi0bits+0x32>
 80171b4:	2020      	movs	r0, #32
 80171b6:	4770      	bx	lr

080171b8 <__lo0bits>:
 80171b8:	6803      	ldr	r3, [r0, #0]
 80171ba:	0002      	movs	r2, r0
 80171bc:	2107      	movs	r1, #7
 80171be:	0018      	movs	r0, r3
 80171c0:	4008      	ands	r0, r1
 80171c2:	420b      	tst	r3, r1
 80171c4:	d00d      	beq.n	80171e2 <__lo0bits+0x2a>
 80171c6:	3906      	subs	r1, #6
 80171c8:	2000      	movs	r0, #0
 80171ca:	420b      	tst	r3, r1
 80171cc:	d105      	bne.n	80171da <__lo0bits+0x22>
 80171ce:	3002      	adds	r0, #2
 80171d0:	4203      	tst	r3, r0
 80171d2:	d003      	beq.n	80171dc <__lo0bits+0x24>
 80171d4:	40cb      	lsrs	r3, r1
 80171d6:	0008      	movs	r0, r1
 80171d8:	6013      	str	r3, [r2, #0]
 80171da:	4770      	bx	lr
 80171dc:	089b      	lsrs	r3, r3, #2
 80171de:	6013      	str	r3, [r2, #0]
 80171e0:	e7fb      	b.n	80171da <__lo0bits+0x22>
 80171e2:	b299      	uxth	r1, r3
 80171e4:	2900      	cmp	r1, #0
 80171e6:	d101      	bne.n	80171ec <__lo0bits+0x34>
 80171e8:	2010      	movs	r0, #16
 80171ea:	0c1b      	lsrs	r3, r3, #16
 80171ec:	b2d9      	uxtb	r1, r3
 80171ee:	2900      	cmp	r1, #0
 80171f0:	d101      	bne.n	80171f6 <__lo0bits+0x3e>
 80171f2:	3008      	adds	r0, #8
 80171f4:	0a1b      	lsrs	r3, r3, #8
 80171f6:	0719      	lsls	r1, r3, #28
 80171f8:	d101      	bne.n	80171fe <__lo0bits+0x46>
 80171fa:	3004      	adds	r0, #4
 80171fc:	091b      	lsrs	r3, r3, #4
 80171fe:	0799      	lsls	r1, r3, #30
 8017200:	d101      	bne.n	8017206 <__lo0bits+0x4e>
 8017202:	3002      	adds	r0, #2
 8017204:	089b      	lsrs	r3, r3, #2
 8017206:	07d9      	lsls	r1, r3, #31
 8017208:	d4e9      	bmi.n	80171de <__lo0bits+0x26>
 801720a:	3001      	adds	r0, #1
 801720c:	085b      	lsrs	r3, r3, #1
 801720e:	d1e6      	bne.n	80171de <__lo0bits+0x26>
 8017210:	2020      	movs	r0, #32
 8017212:	e7e2      	b.n	80171da <__lo0bits+0x22>

08017214 <__i2b>:
 8017214:	b510      	push	{r4, lr}
 8017216:	000c      	movs	r4, r1
 8017218:	2101      	movs	r1, #1
 801721a:	f7ff fef1 	bl	8017000 <_Balloc>
 801721e:	2800      	cmp	r0, #0
 8017220:	d106      	bne.n	8017230 <__i2b+0x1c>
 8017222:	21a0      	movs	r1, #160	; 0xa0
 8017224:	0002      	movs	r2, r0
 8017226:	4b04      	ldr	r3, [pc, #16]	; (8017238 <__i2b+0x24>)
 8017228:	4804      	ldr	r0, [pc, #16]	; (801723c <__i2b+0x28>)
 801722a:	0049      	lsls	r1, r1, #1
 801722c:	f000 fc6a 	bl	8017b04 <__assert_func>
 8017230:	2301      	movs	r3, #1
 8017232:	6144      	str	r4, [r0, #20]
 8017234:	6103      	str	r3, [r0, #16]
 8017236:	bd10      	pop	{r4, pc}
 8017238:	0801c589 	.word	0x0801c589
 801723c:	0801c670 	.word	0x0801c670

08017240 <__multiply>:
 8017240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017242:	690b      	ldr	r3, [r1, #16]
 8017244:	0014      	movs	r4, r2
 8017246:	6912      	ldr	r2, [r2, #16]
 8017248:	000d      	movs	r5, r1
 801724a:	b089      	sub	sp, #36	; 0x24
 801724c:	4293      	cmp	r3, r2
 801724e:	da01      	bge.n	8017254 <__multiply+0x14>
 8017250:	0025      	movs	r5, r4
 8017252:	000c      	movs	r4, r1
 8017254:	692f      	ldr	r7, [r5, #16]
 8017256:	6926      	ldr	r6, [r4, #16]
 8017258:	6869      	ldr	r1, [r5, #4]
 801725a:	19bb      	adds	r3, r7, r6
 801725c:	9302      	str	r3, [sp, #8]
 801725e:	68ab      	ldr	r3, [r5, #8]
 8017260:	19ba      	adds	r2, r7, r6
 8017262:	4293      	cmp	r3, r2
 8017264:	da00      	bge.n	8017268 <__multiply+0x28>
 8017266:	3101      	adds	r1, #1
 8017268:	f7ff feca 	bl	8017000 <_Balloc>
 801726c:	9001      	str	r0, [sp, #4]
 801726e:	2800      	cmp	r0, #0
 8017270:	d106      	bne.n	8017280 <__multiply+0x40>
 8017272:	215e      	movs	r1, #94	; 0x5e
 8017274:	0002      	movs	r2, r0
 8017276:	4b48      	ldr	r3, [pc, #288]	; (8017398 <__multiply+0x158>)
 8017278:	4848      	ldr	r0, [pc, #288]	; (801739c <__multiply+0x15c>)
 801727a:	31ff      	adds	r1, #255	; 0xff
 801727c:	f000 fc42 	bl	8017b04 <__assert_func>
 8017280:	9b01      	ldr	r3, [sp, #4]
 8017282:	2200      	movs	r2, #0
 8017284:	3314      	adds	r3, #20
 8017286:	469c      	mov	ip, r3
 8017288:	19bb      	adds	r3, r7, r6
 801728a:	009b      	lsls	r3, r3, #2
 801728c:	4463      	add	r3, ip
 801728e:	9303      	str	r3, [sp, #12]
 8017290:	4663      	mov	r3, ip
 8017292:	9903      	ldr	r1, [sp, #12]
 8017294:	428b      	cmp	r3, r1
 8017296:	d32c      	bcc.n	80172f2 <__multiply+0xb2>
 8017298:	002b      	movs	r3, r5
 801729a:	0022      	movs	r2, r4
 801729c:	3314      	adds	r3, #20
 801729e:	00bf      	lsls	r7, r7, #2
 80172a0:	3214      	adds	r2, #20
 80172a2:	9306      	str	r3, [sp, #24]
 80172a4:	00b6      	lsls	r6, r6, #2
 80172a6:	19db      	adds	r3, r3, r7
 80172a8:	9304      	str	r3, [sp, #16]
 80172aa:	1993      	adds	r3, r2, r6
 80172ac:	9307      	str	r3, [sp, #28]
 80172ae:	2304      	movs	r3, #4
 80172b0:	9305      	str	r3, [sp, #20]
 80172b2:	002b      	movs	r3, r5
 80172b4:	9904      	ldr	r1, [sp, #16]
 80172b6:	3315      	adds	r3, #21
 80172b8:	9200      	str	r2, [sp, #0]
 80172ba:	4299      	cmp	r1, r3
 80172bc:	d305      	bcc.n	80172ca <__multiply+0x8a>
 80172be:	1b4b      	subs	r3, r1, r5
 80172c0:	3b15      	subs	r3, #21
 80172c2:	089b      	lsrs	r3, r3, #2
 80172c4:	3301      	adds	r3, #1
 80172c6:	009b      	lsls	r3, r3, #2
 80172c8:	9305      	str	r3, [sp, #20]
 80172ca:	9b07      	ldr	r3, [sp, #28]
 80172cc:	9a00      	ldr	r2, [sp, #0]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d311      	bcc.n	80172f6 <__multiply+0xb6>
 80172d2:	9b02      	ldr	r3, [sp, #8]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dd06      	ble.n	80172e6 <__multiply+0xa6>
 80172d8:	9b03      	ldr	r3, [sp, #12]
 80172da:	3b04      	subs	r3, #4
 80172dc:	9303      	str	r3, [sp, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	9300      	str	r3, [sp, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d053      	beq.n	801738e <__multiply+0x14e>
 80172e6:	9b01      	ldr	r3, [sp, #4]
 80172e8:	9a02      	ldr	r2, [sp, #8]
 80172ea:	0018      	movs	r0, r3
 80172ec:	611a      	str	r2, [r3, #16]
 80172ee:	b009      	add	sp, #36	; 0x24
 80172f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172f2:	c304      	stmia	r3!, {r2}
 80172f4:	e7cd      	b.n	8017292 <__multiply+0x52>
 80172f6:	9b00      	ldr	r3, [sp, #0]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	b298      	uxth	r0, r3
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d01b      	beq.n	8017338 <__multiply+0xf8>
 8017300:	4667      	mov	r7, ip
 8017302:	2400      	movs	r4, #0
 8017304:	9e06      	ldr	r6, [sp, #24]
 8017306:	ce02      	ldmia	r6!, {r1}
 8017308:	683a      	ldr	r2, [r7, #0]
 801730a:	b28b      	uxth	r3, r1
 801730c:	4343      	muls	r3, r0
 801730e:	b292      	uxth	r2, r2
 8017310:	189b      	adds	r3, r3, r2
 8017312:	191b      	adds	r3, r3, r4
 8017314:	0c0c      	lsrs	r4, r1, #16
 8017316:	4344      	muls	r4, r0
 8017318:	683a      	ldr	r2, [r7, #0]
 801731a:	0c11      	lsrs	r1, r2, #16
 801731c:	1861      	adds	r1, r4, r1
 801731e:	0c1c      	lsrs	r4, r3, #16
 8017320:	1909      	adds	r1, r1, r4
 8017322:	0c0c      	lsrs	r4, r1, #16
 8017324:	b29b      	uxth	r3, r3
 8017326:	0409      	lsls	r1, r1, #16
 8017328:	430b      	orrs	r3, r1
 801732a:	c708      	stmia	r7!, {r3}
 801732c:	9b04      	ldr	r3, [sp, #16]
 801732e:	42b3      	cmp	r3, r6
 8017330:	d8e9      	bhi.n	8017306 <__multiply+0xc6>
 8017332:	4663      	mov	r3, ip
 8017334:	9a05      	ldr	r2, [sp, #20]
 8017336:	509c      	str	r4, [r3, r2]
 8017338:	9b00      	ldr	r3, [sp, #0]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	0c1e      	lsrs	r6, r3, #16
 801733e:	d020      	beq.n	8017382 <__multiply+0x142>
 8017340:	4663      	mov	r3, ip
 8017342:	002c      	movs	r4, r5
 8017344:	4660      	mov	r0, ip
 8017346:	2700      	movs	r7, #0
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	3414      	adds	r4, #20
 801734c:	6822      	ldr	r2, [r4, #0]
 801734e:	b29b      	uxth	r3, r3
 8017350:	b291      	uxth	r1, r2
 8017352:	4371      	muls	r1, r6
 8017354:	6802      	ldr	r2, [r0, #0]
 8017356:	0c12      	lsrs	r2, r2, #16
 8017358:	1889      	adds	r1, r1, r2
 801735a:	19cf      	adds	r7, r1, r7
 801735c:	0439      	lsls	r1, r7, #16
 801735e:	430b      	orrs	r3, r1
 8017360:	6003      	str	r3, [r0, #0]
 8017362:	cc02      	ldmia	r4!, {r1}
 8017364:	6843      	ldr	r3, [r0, #4]
 8017366:	0c09      	lsrs	r1, r1, #16
 8017368:	4371      	muls	r1, r6
 801736a:	b29b      	uxth	r3, r3
 801736c:	0c3f      	lsrs	r7, r7, #16
 801736e:	18cb      	adds	r3, r1, r3
 8017370:	9a04      	ldr	r2, [sp, #16]
 8017372:	19db      	adds	r3, r3, r7
 8017374:	0c1f      	lsrs	r7, r3, #16
 8017376:	3004      	adds	r0, #4
 8017378:	42a2      	cmp	r2, r4
 801737a:	d8e7      	bhi.n	801734c <__multiply+0x10c>
 801737c:	4662      	mov	r2, ip
 801737e:	9905      	ldr	r1, [sp, #20]
 8017380:	5053      	str	r3, [r2, r1]
 8017382:	9b00      	ldr	r3, [sp, #0]
 8017384:	3304      	adds	r3, #4
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	2304      	movs	r3, #4
 801738a:	449c      	add	ip, r3
 801738c:	e79d      	b.n	80172ca <__multiply+0x8a>
 801738e:	9b02      	ldr	r3, [sp, #8]
 8017390:	3b01      	subs	r3, #1
 8017392:	9302      	str	r3, [sp, #8]
 8017394:	e79d      	b.n	80172d2 <__multiply+0x92>
 8017396:	46c0      	nop			; (mov r8, r8)
 8017398:	0801c589 	.word	0x0801c589
 801739c:	0801c670 	.word	0x0801c670

080173a0 <__pow5mult>:
 80173a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173a2:	2303      	movs	r3, #3
 80173a4:	0015      	movs	r5, r2
 80173a6:	0007      	movs	r7, r0
 80173a8:	000e      	movs	r6, r1
 80173aa:	401a      	ands	r2, r3
 80173ac:	421d      	tst	r5, r3
 80173ae:	d008      	beq.n	80173c2 <__pow5mult+0x22>
 80173b0:	491a      	ldr	r1, [pc, #104]	; (801741c <__pow5mult+0x7c>)
 80173b2:	3a01      	subs	r2, #1
 80173b4:	0092      	lsls	r2, r2, #2
 80173b6:	5852      	ldr	r2, [r2, r1]
 80173b8:	2300      	movs	r3, #0
 80173ba:	0031      	movs	r1, r6
 80173bc:	f7ff fe52 	bl	8017064 <__multadd>
 80173c0:	0006      	movs	r6, r0
 80173c2:	10ad      	asrs	r5, r5, #2
 80173c4:	d027      	beq.n	8017416 <__pow5mult+0x76>
 80173c6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80173c8:	2c00      	cmp	r4, #0
 80173ca:	d107      	bne.n	80173dc <__pow5mult+0x3c>
 80173cc:	0038      	movs	r0, r7
 80173ce:	4914      	ldr	r1, [pc, #80]	; (8017420 <__pow5mult+0x80>)
 80173d0:	f7ff ff20 	bl	8017214 <__i2b>
 80173d4:	2300      	movs	r3, #0
 80173d6:	0004      	movs	r4, r0
 80173d8:	64b8      	str	r0, [r7, #72]	; 0x48
 80173da:	6003      	str	r3, [r0, #0]
 80173dc:	2301      	movs	r3, #1
 80173de:	421d      	tst	r5, r3
 80173e0:	d00a      	beq.n	80173f8 <__pow5mult+0x58>
 80173e2:	0031      	movs	r1, r6
 80173e4:	0022      	movs	r2, r4
 80173e6:	0038      	movs	r0, r7
 80173e8:	f7ff ff2a 	bl	8017240 <__multiply>
 80173ec:	0031      	movs	r1, r6
 80173ee:	9001      	str	r0, [sp, #4]
 80173f0:	0038      	movs	r0, r7
 80173f2:	f7ff fe2d 	bl	8017050 <_Bfree>
 80173f6:	9e01      	ldr	r6, [sp, #4]
 80173f8:	106d      	asrs	r5, r5, #1
 80173fa:	d00c      	beq.n	8017416 <__pow5mult+0x76>
 80173fc:	6820      	ldr	r0, [r4, #0]
 80173fe:	2800      	cmp	r0, #0
 8017400:	d107      	bne.n	8017412 <__pow5mult+0x72>
 8017402:	0022      	movs	r2, r4
 8017404:	0021      	movs	r1, r4
 8017406:	0038      	movs	r0, r7
 8017408:	f7ff ff1a 	bl	8017240 <__multiply>
 801740c:	2300      	movs	r3, #0
 801740e:	6020      	str	r0, [r4, #0]
 8017410:	6003      	str	r3, [r0, #0]
 8017412:	0004      	movs	r4, r0
 8017414:	e7e2      	b.n	80173dc <__pow5mult+0x3c>
 8017416:	0030      	movs	r0, r6
 8017418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801741a:	46c0      	nop			; (mov r8, r8)
 801741c:	0801c7c0 	.word	0x0801c7c0
 8017420:	00000271 	.word	0x00000271

08017424 <__lshift>:
 8017424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017426:	000c      	movs	r4, r1
 8017428:	0017      	movs	r7, r2
 801742a:	6923      	ldr	r3, [r4, #16]
 801742c:	1155      	asrs	r5, r2, #5
 801742e:	b087      	sub	sp, #28
 8017430:	18eb      	adds	r3, r5, r3
 8017432:	9302      	str	r3, [sp, #8]
 8017434:	3301      	adds	r3, #1
 8017436:	9301      	str	r3, [sp, #4]
 8017438:	6849      	ldr	r1, [r1, #4]
 801743a:	68a3      	ldr	r3, [r4, #8]
 801743c:	9004      	str	r0, [sp, #16]
 801743e:	9a01      	ldr	r2, [sp, #4]
 8017440:	4293      	cmp	r3, r2
 8017442:	db10      	blt.n	8017466 <__lshift+0x42>
 8017444:	9804      	ldr	r0, [sp, #16]
 8017446:	f7ff fddb 	bl	8017000 <_Balloc>
 801744a:	2300      	movs	r3, #0
 801744c:	0002      	movs	r2, r0
 801744e:	0006      	movs	r6, r0
 8017450:	0019      	movs	r1, r3
 8017452:	3214      	adds	r2, #20
 8017454:	4298      	cmp	r0, r3
 8017456:	d10c      	bne.n	8017472 <__lshift+0x4e>
 8017458:	21da      	movs	r1, #218	; 0xda
 801745a:	0002      	movs	r2, r0
 801745c:	4b26      	ldr	r3, [pc, #152]	; (80174f8 <__lshift+0xd4>)
 801745e:	4827      	ldr	r0, [pc, #156]	; (80174fc <__lshift+0xd8>)
 8017460:	31ff      	adds	r1, #255	; 0xff
 8017462:	f000 fb4f 	bl	8017b04 <__assert_func>
 8017466:	3101      	adds	r1, #1
 8017468:	005b      	lsls	r3, r3, #1
 801746a:	e7e8      	b.n	801743e <__lshift+0x1a>
 801746c:	0098      	lsls	r0, r3, #2
 801746e:	5011      	str	r1, [r2, r0]
 8017470:	3301      	adds	r3, #1
 8017472:	42ab      	cmp	r3, r5
 8017474:	dbfa      	blt.n	801746c <__lshift+0x48>
 8017476:	43eb      	mvns	r3, r5
 8017478:	17db      	asrs	r3, r3, #31
 801747a:	401d      	ands	r5, r3
 801747c:	211f      	movs	r1, #31
 801747e:	0023      	movs	r3, r4
 8017480:	0038      	movs	r0, r7
 8017482:	00ad      	lsls	r5, r5, #2
 8017484:	1955      	adds	r5, r2, r5
 8017486:	6922      	ldr	r2, [r4, #16]
 8017488:	3314      	adds	r3, #20
 801748a:	0092      	lsls	r2, r2, #2
 801748c:	4008      	ands	r0, r1
 801748e:	4684      	mov	ip, r0
 8017490:	189a      	adds	r2, r3, r2
 8017492:	420f      	tst	r7, r1
 8017494:	d02a      	beq.n	80174ec <__lshift+0xc8>
 8017496:	3101      	adds	r1, #1
 8017498:	1a09      	subs	r1, r1, r0
 801749a:	9105      	str	r1, [sp, #20]
 801749c:	2100      	movs	r1, #0
 801749e:	9503      	str	r5, [sp, #12]
 80174a0:	4667      	mov	r7, ip
 80174a2:	6818      	ldr	r0, [r3, #0]
 80174a4:	40b8      	lsls	r0, r7
 80174a6:	4301      	orrs	r1, r0
 80174a8:	9803      	ldr	r0, [sp, #12]
 80174aa:	c002      	stmia	r0!, {r1}
 80174ac:	cb02      	ldmia	r3!, {r1}
 80174ae:	9003      	str	r0, [sp, #12]
 80174b0:	9805      	ldr	r0, [sp, #20]
 80174b2:	40c1      	lsrs	r1, r0
 80174b4:	429a      	cmp	r2, r3
 80174b6:	d8f3      	bhi.n	80174a0 <__lshift+0x7c>
 80174b8:	0020      	movs	r0, r4
 80174ba:	3015      	adds	r0, #21
 80174bc:	2304      	movs	r3, #4
 80174be:	4282      	cmp	r2, r0
 80174c0:	d304      	bcc.n	80174cc <__lshift+0xa8>
 80174c2:	1b13      	subs	r3, r2, r4
 80174c4:	3b15      	subs	r3, #21
 80174c6:	089b      	lsrs	r3, r3, #2
 80174c8:	3301      	adds	r3, #1
 80174ca:	009b      	lsls	r3, r3, #2
 80174cc:	50e9      	str	r1, [r5, r3]
 80174ce:	2900      	cmp	r1, #0
 80174d0:	d002      	beq.n	80174d8 <__lshift+0xb4>
 80174d2:	9b02      	ldr	r3, [sp, #8]
 80174d4:	3302      	adds	r3, #2
 80174d6:	9301      	str	r3, [sp, #4]
 80174d8:	9b01      	ldr	r3, [sp, #4]
 80174da:	9804      	ldr	r0, [sp, #16]
 80174dc:	3b01      	subs	r3, #1
 80174de:	0021      	movs	r1, r4
 80174e0:	6133      	str	r3, [r6, #16]
 80174e2:	f7ff fdb5 	bl	8017050 <_Bfree>
 80174e6:	0030      	movs	r0, r6
 80174e8:	b007      	add	sp, #28
 80174ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ec:	cb02      	ldmia	r3!, {r1}
 80174ee:	c502      	stmia	r5!, {r1}
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d8fb      	bhi.n	80174ec <__lshift+0xc8>
 80174f4:	e7f0      	b.n	80174d8 <__lshift+0xb4>
 80174f6:	46c0      	nop			; (mov r8, r8)
 80174f8:	0801c589 	.word	0x0801c589
 80174fc:	0801c670 	.word	0x0801c670

08017500 <__mcmp>:
 8017500:	6902      	ldr	r2, [r0, #16]
 8017502:	690b      	ldr	r3, [r1, #16]
 8017504:	b530      	push	{r4, r5, lr}
 8017506:	0004      	movs	r4, r0
 8017508:	1ad0      	subs	r0, r2, r3
 801750a:	429a      	cmp	r2, r3
 801750c:	d10d      	bne.n	801752a <__mcmp+0x2a>
 801750e:	009b      	lsls	r3, r3, #2
 8017510:	3414      	adds	r4, #20
 8017512:	3114      	adds	r1, #20
 8017514:	18e2      	adds	r2, r4, r3
 8017516:	18c9      	adds	r1, r1, r3
 8017518:	3a04      	subs	r2, #4
 801751a:	3904      	subs	r1, #4
 801751c:	6815      	ldr	r5, [r2, #0]
 801751e:	680b      	ldr	r3, [r1, #0]
 8017520:	429d      	cmp	r5, r3
 8017522:	d003      	beq.n	801752c <__mcmp+0x2c>
 8017524:	2001      	movs	r0, #1
 8017526:	429d      	cmp	r5, r3
 8017528:	d303      	bcc.n	8017532 <__mcmp+0x32>
 801752a:	bd30      	pop	{r4, r5, pc}
 801752c:	4294      	cmp	r4, r2
 801752e:	d3f3      	bcc.n	8017518 <__mcmp+0x18>
 8017530:	e7fb      	b.n	801752a <__mcmp+0x2a>
 8017532:	4240      	negs	r0, r0
 8017534:	e7f9      	b.n	801752a <__mcmp+0x2a>
	...

08017538 <__mdiff>:
 8017538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801753a:	000e      	movs	r6, r1
 801753c:	0007      	movs	r7, r0
 801753e:	0011      	movs	r1, r2
 8017540:	0030      	movs	r0, r6
 8017542:	b087      	sub	sp, #28
 8017544:	0014      	movs	r4, r2
 8017546:	f7ff ffdb 	bl	8017500 <__mcmp>
 801754a:	1e05      	subs	r5, r0, #0
 801754c:	d110      	bne.n	8017570 <__mdiff+0x38>
 801754e:	0001      	movs	r1, r0
 8017550:	0038      	movs	r0, r7
 8017552:	f7ff fd55 	bl	8017000 <_Balloc>
 8017556:	1e02      	subs	r2, r0, #0
 8017558:	d104      	bne.n	8017564 <__mdiff+0x2c>
 801755a:	4b40      	ldr	r3, [pc, #256]	; (801765c <__mdiff+0x124>)
 801755c:	4940      	ldr	r1, [pc, #256]	; (8017660 <__mdiff+0x128>)
 801755e:	4841      	ldr	r0, [pc, #260]	; (8017664 <__mdiff+0x12c>)
 8017560:	f000 fad0 	bl	8017b04 <__assert_func>
 8017564:	2301      	movs	r3, #1
 8017566:	6145      	str	r5, [r0, #20]
 8017568:	6103      	str	r3, [r0, #16]
 801756a:	0010      	movs	r0, r2
 801756c:	b007      	add	sp, #28
 801756e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017570:	2301      	movs	r3, #1
 8017572:	9301      	str	r3, [sp, #4]
 8017574:	2800      	cmp	r0, #0
 8017576:	db04      	blt.n	8017582 <__mdiff+0x4a>
 8017578:	0023      	movs	r3, r4
 801757a:	0034      	movs	r4, r6
 801757c:	001e      	movs	r6, r3
 801757e:	2300      	movs	r3, #0
 8017580:	9301      	str	r3, [sp, #4]
 8017582:	0038      	movs	r0, r7
 8017584:	6861      	ldr	r1, [r4, #4]
 8017586:	f7ff fd3b 	bl	8017000 <_Balloc>
 801758a:	1e02      	subs	r2, r0, #0
 801758c:	d103      	bne.n	8017596 <__mdiff+0x5e>
 801758e:	2190      	movs	r1, #144	; 0x90
 8017590:	4b32      	ldr	r3, [pc, #200]	; (801765c <__mdiff+0x124>)
 8017592:	0089      	lsls	r1, r1, #2
 8017594:	e7e3      	b.n	801755e <__mdiff+0x26>
 8017596:	9b01      	ldr	r3, [sp, #4]
 8017598:	2700      	movs	r7, #0
 801759a:	60c3      	str	r3, [r0, #12]
 801759c:	6920      	ldr	r0, [r4, #16]
 801759e:	3414      	adds	r4, #20
 80175a0:	9401      	str	r4, [sp, #4]
 80175a2:	9b01      	ldr	r3, [sp, #4]
 80175a4:	0084      	lsls	r4, r0, #2
 80175a6:	191b      	adds	r3, r3, r4
 80175a8:	0034      	movs	r4, r6
 80175aa:	9302      	str	r3, [sp, #8]
 80175ac:	6933      	ldr	r3, [r6, #16]
 80175ae:	3414      	adds	r4, #20
 80175b0:	0099      	lsls	r1, r3, #2
 80175b2:	1863      	adds	r3, r4, r1
 80175b4:	9303      	str	r3, [sp, #12]
 80175b6:	0013      	movs	r3, r2
 80175b8:	3314      	adds	r3, #20
 80175ba:	469c      	mov	ip, r3
 80175bc:	9305      	str	r3, [sp, #20]
 80175be:	9b01      	ldr	r3, [sp, #4]
 80175c0:	9304      	str	r3, [sp, #16]
 80175c2:	9b04      	ldr	r3, [sp, #16]
 80175c4:	cc02      	ldmia	r4!, {r1}
 80175c6:	cb20      	ldmia	r3!, {r5}
 80175c8:	9304      	str	r3, [sp, #16]
 80175ca:	b2ab      	uxth	r3, r5
 80175cc:	19df      	adds	r7, r3, r7
 80175ce:	b28b      	uxth	r3, r1
 80175d0:	1afb      	subs	r3, r7, r3
 80175d2:	0c09      	lsrs	r1, r1, #16
 80175d4:	0c2d      	lsrs	r5, r5, #16
 80175d6:	1a6d      	subs	r5, r5, r1
 80175d8:	1419      	asrs	r1, r3, #16
 80175da:	186d      	adds	r5, r5, r1
 80175dc:	4661      	mov	r1, ip
 80175de:	142f      	asrs	r7, r5, #16
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	042d      	lsls	r5, r5, #16
 80175e4:	432b      	orrs	r3, r5
 80175e6:	c108      	stmia	r1!, {r3}
 80175e8:	9b03      	ldr	r3, [sp, #12]
 80175ea:	468c      	mov	ip, r1
 80175ec:	42a3      	cmp	r3, r4
 80175ee:	d8e8      	bhi.n	80175c2 <__mdiff+0x8a>
 80175f0:	0031      	movs	r1, r6
 80175f2:	9c03      	ldr	r4, [sp, #12]
 80175f4:	3115      	adds	r1, #21
 80175f6:	2304      	movs	r3, #4
 80175f8:	428c      	cmp	r4, r1
 80175fa:	d304      	bcc.n	8017606 <__mdiff+0xce>
 80175fc:	1ba3      	subs	r3, r4, r6
 80175fe:	3b15      	subs	r3, #21
 8017600:	089b      	lsrs	r3, r3, #2
 8017602:	3301      	adds	r3, #1
 8017604:	009b      	lsls	r3, r3, #2
 8017606:	9901      	ldr	r1, [sp, #4]
 8017608:	18cc      	adds	r4, r1, r3
 801760a:	9905      	ldr	r1, [sp, #20]
 801760c:	0026      	movs	r6, r4
 801760e:	18cb      	adds	r3, r1, r3
 8017610:	469c      	mov	ip, r3
 8017612:	9902      	ldr	r1, [sp, #8]
 8017614:	428e      	cmp	r6, r1
 8017616:	d310      	bcc.n	801763a <__mdiff+0x102>
 8017618:	9e02      	ldr	r6, [sp, #8]
 801761a:	1ee1      	subs	r1, r4, #3
 801761c:	2500      	movs	r5, #0
 801761e:	428e      	cmp	r6, r1
 8017620:	d304      	bcc.n	801762c <__mdiff+0xf4>
 8017622:	0031      	movs	r1, r6
 8017624:	3103      	adds	r1, #3
 8017626:	1b0c      	subs	r4, r1, r4
 8017628:	08a4      	lsrs	r4, r4, #2
 801762a:	00a5      	lsls	r5, r4, #2
 801762c:	195b      	adds	r3, r3, r5
 801762e:	3b04      	subs	r3, #4
 8017630:	6819      	ldr	r1, [r3, #0]
 8017632:	2900      	cmp	r1, #0
 8017634:	d00f      	beq.n	8017656 <__mdiff+0x11e>
 8017636:	6110      	str	r0, [r2, #16]
 8017638:	e797      	b.n	801756a <__mdiff+0x32>
 801763a:	ce02      	ldmia	r6!, {r1}
 801763c:	b28d      	uxth	r5, r1
 801763e:	19ed      	adds	r5, r5, r7
 8017640:	0c0f      	lsrs	r7, r1, #16
 8017642:	1429      	asrs	r1, r5, #16
 8017644:	1879      	adds	r1, r7, r1
 8017646:	140f      	asrs	r7, r1, #16
 8017648:	b2ad      	uxth	r5, r5
 801764a:	0409      	lsls	r1, r1, #16
 801764c:	430d      	orrs	r5, r1
 801764e:	4661      	mov	r1, ip
 8017650:	c120      	stmia	r1!, {r5}
 8017652:	468c      	mov	ip, r1
 8017654:	e7dd      	b.n	8017612 <__mdiff+0xda>
 8017656:	3801      	subs	r0, #1
 8017658:	e7e9      	b.n	801762e <__mdiff+0xf6>
 801765a:	46c0      	nop			; (mov r8, r8)
 801765c:	0801c589 	.word	0x0801c589
 8017660:	00000232 	.word	0x00000232
 8017664:	0801c670 	.word	0x0801c670

08017668 <__ulp>:
 8017668:	4b0f      	ldr	r3, [pc, #60]	; (80176a8 <__ulp+0x40>)
 801766a:	4019      	ands	r1, r3
 801766c:	4b0f      	ldr	r3, [pc, #60]	; (80176ac <__ulp+0x44>)
 801766e:	18c9      	adds	r1, r1, r3
 8017670:	2900      	cmp	r1, #0
 8017672:	dd04      	ble.n	801767e <__ulp+0x16>
 8017674:	2200      	movs	r2, #0
 8017676:	000b      	movs	r3, r1
 8017678:	0010      	movs	r0, r2
 801767a:	0019      	movs	r1, r3
 801767c:	4770      	bx	lr
 801767e:	4249      	negs	r1, r1
 8017680:	2200      	movs	r2, #0
 8017682:	2300      	movs	r3, #0
 8017684:	1509      	asrs	r1, r1, #20
 8017686:	2913      	cmp	r1, #19
 8017688:	dc04      	bgt.n	8017694 <__ulp+0x2c>
 801768a:	2080      	movs	r0, #128	; 0x80
 801768c:	0300      	lsls	r0, r0, #12
 801768e:	4108      	asrs	r0, r1
 8017690:	0003      	movs	r3, r0
 8017692:	e7f1      	b.n	8017678 <__ulp+0x10>
 8017694:	3914      	subs	r1, #20
 8017696:	2001      	movs	r0, #1
 8017698:	291e      	cmp	r1, #30
 801769a:	dc02      	bgt.n	80176a2 <__ulp+0x3a>
 801769c:	2080      	movs	r0, #128	; 0x80
 801769e:	0600      	lsls	r0, r0, #24
 80176a0:	40c8      	lsrs	r0, r1
 80176a2:	0002      	movs	r2, r0
 80176a4:	e7e8      	b.n	8017678 <__ulp+0x10>
 80176a6:	46c0      	nop			; (mov r8, r8)
 80176a8:	7ff00000 	.word	0x7ff00000
 80176ac:	fcc00000 	.word	0xfcc00000

080176b0 <__b2d>:
 80176b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176b2:	0006      	movs	r6, r0
 80176b4:	6903      	ldr	r3, [r0, #16]
 80176b6:	3614      	adds	r6, #20
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	18f3      	adds	r3, r6, r3
 80176bc:	1f1d      	subs	r5, r3, #4
 80176be:	682c      	ldr	r4, [r5, #0]
 80176c0:	000f      	movs	r7, r1
 80176c2:	0020      	movs	r0, r4
 80176c4:	9301      	str	r3, [sp, #4]
 80176c6:	f7ff fd5d 	bl	8017184 <__hi0bits>
 80176ca:	2320      	movs	r3, #32
 80176cc:	1a1b      	subs	r3, r3, r0
 80176ce:	491f      	ldr	r1, [pc, #124]	; (801774c <__b2d+0x9c>)
 80176d0:	603b      	str	r3, [r7, #0]
 80176d2:	280a      	cmp	r0, #10
 80176d4:	dc16      	bgt.n	8017704 <__b2d+0x54>
 80176d6:	230b      	movs	r3, #11
 80176d8:	0027      	movs	r7, r4
 80176da:	1a1b      	subs	r3, r3, r0
 80176dc:	40df      	lsrs	r7, r3
 80176de:	4339      	orrs	r1, r7
 80176e0:	469c      	mov	ip, r3
 80176e2:	000b      	movs	r3, r1
 80176e4:	2100      	movs	r1, #0
 80176e6:	42ae      	cmp	r6, r5
 80176e8:	d202      	bcs.n	80176f0 <__b2d+0x40>
 80176ea:	9901      	ldr	r1, [sp, #4]
 80176ec:	3908      	subs	r1, #8
 80176ee:	6809      	ldr	r1, [r1, #0]
 80176f0:	3015      	adds	r0, #21
 80176f2:	4084      	lsls	r4, r0
 80176f4:	4660      	mov	r0, ip
 80176f6:	40c1      	lsrs	r1, r0
 80176f8:	430c      	orrs	r4, r1
 80176fa:	0022      	movs	r2, r4
 80176fc:	0010      	movs	r0, r2
 80176fe:	0019      	movs	r1, r3
 8017700:	b003      	add	sp, #12
 8017702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017704:	2700      	movs	r7, #0
 8017706:	42ae      	cmp	r6, r5
 8017708:	d202      	bcs.n	8017710 <__b2d+0x60>
 801770a:	9d01      	ldr	r5, [sp, #4]
 801770c:	3d08      	subs	r5, #8
 801770e:	682f      	ldr	r7, [r5, #0]
 8017710:	230b      	movs	r3, #11
 8017712:	425b      	negs	r3, r3
 8017714:	469c      	mov	ip, r3
 8017716:	4484      	add	ip, r0
 8017718:	280b      	cmp	r0, #11
 801771a:	d013      	beq.n	8017744 <__b2d+0x94>
 801771c:	4663      	mov	r3, ip
 801771e:	2020      	movs	r0, #32
 8017720:	409c      	lsls	r4, r3
 8017722:	1ac0      	subs	r0, r0, r3
 8017724:	003b      	movs	r3, r7
 8017726:	40c3      	lsrs	r3, r0
 8017728:	431c      	orrs	r4, r3
 801772a:	4321      	orrs	r1, r4
 801772c:	000b      	movs	r3, r1
 801772e:	2100      	movs	r1, #0
 8017730:	42b5      	cmp	r5, r6
 8017732:	d901      	bls.n	8017738 <__b2d+0x88>
 8017734:	3d04      	subs	r5, #4
 8017736:	6829      	ldr	r1, [r5, #0]
 8017738:	4664      	mov	r4, ip
 801773a:	40c1      	lsrs	r1, r0
 801773c:	40a7      	lsls	r7, r4
 801773e:	430f      	orrs	r7, r1
 8017740:	003a      	movs	r2, r7
 8017742:	e7db      	b.n	80176fc <__b2d+0x4c>
 8017744:	4321      	orrs	r1, r4
 8017746:	000b      	movs	r3, r1
 8017748:	e7fa      	b.n	8017740 <__b2d+0x90>
 801774a:	46c0      	nop			; (mov r8, r8)
 801774c:	3ff00000 	.word	0x3ff00000

08017750 <__d2b>:
 8017750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017752:	2101      	movs	r1, #1
 8017754:	0014      	movs	r4, r2
 8017756:	001e      	movs	r6, r3
 8017758:	9f08      	ldr	r7, [sp, #32]
 801775a:	f7ff fc51 	bl	8017000 <_Balloc>
 801775e:	1e05      	subs	r5, r0, #0
 8017760:	d105      	bne.n	801776e <__d2b+0x1e>
 8017762:	0002      	movs	r2, r0
 8017764:	4b26      	ldr	r3, [pc, #152]	; (8017800 <__d2b+0xb0>)
 8017766:	4927      	ldr	r1, [pc, #156]	; (8017804 <__d2b+0xb4>)
 8017768:	4827      	ldr	r0, [pc, #156]	; (8017808 <__d2b+0xb8>)
 801776a:	f000 f9cb 	bl	8017b04 <__assert_func>
 801776e:	0333      	lsls	r3, r6, #12
 8017770:	0076      	lsls	r6, r6, #1
 8017772:	0b1b      	lsrs	r3, r3, #12
 8017774:	0d76      	lsrs	r6, r6, #21
 8017776:	d124      	bne.n	80177c2 <__d2b+0x72>
 8017778:	9301      	str	r3, [sp, #4]
 801777a:	2c00      	cmp	r4, #0
 801777c:	d027      	beq.n	80177ce <__d2b+0x7e>
 801777e:	4668      	mov	r0, sp
 8017780:	9400      	str	r4, [sp, #0]
 8017782:	f7ff fd19 	bl	80171b8 <__lo0bits>
 8017786:	9c00      	ldr	r4, [sp, #0]
 8017788:	2800      	cmp	r0, #0
 801778a:	d01e      	beq.n	80177ca <__d2b+0x7a>
 801778c:	9b01      	ldr	r3, [sp, #4]
 801778e:	2120      	movs	r1, #32
 8017790:	001a      	movs	r2, r3
 8017792:	1a09      	subs	r1, r1, r0
 8017794:	408a      	lsls	r2, r1
 8017796:	40c3      	lsrs	r3, r0
 8017798:	4322      	orrs	r2, r4
 801779a:	616a      	str	r2, [r5, #20]
 801779c:	9301      	str	r3, [sp, #4]
 801779e:	9c01      	ldr	r4, [sp, #4]
 80177a0:	61ac      	str	r4, [r5, #24]
 80177a2:	1e63      	subs	r3, r4, #1
 80177a4:	419c      	sbcs	r4, r3
 80177a6:	3401      	adds	r4, #1
 80177a8:	612c      	str	r4, [r5, #16]
 80177aa:	2e00      	cmp	r6, #0
 80177ac:	d018      	beq.n	80177e0 <__d2b+0x90>
 80177ae:	4b17      	ldr	r3, [pc, #92]	; (801780c <__d2b+0xbc>)
 80177b0:	18f6      	adds	r6, r6, r3
 80177b2:	2335      	movs	r3, #53	; 0x35
 80177b4:	1836      	adds	r6, r6, r0
 80177b6:	1a18      	subs	r0, r3, r0
 80177b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ba:	603e      	str	r6, [r7, #0]
 80177bc:	6018      	str	r0, [r3, #0]
 80177be:	0028      	movs	r0, r5
 80177c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80177c2:	2280      	movs	r2, #128	; 0x80
 80177c4:	0352      	lsls	r2, r2, #13
 80177c6:	4313      	orrs	r3, r2
 80177c8:	e7d6      	b.n	8017778 <__d2b+0x28>
 80177ca:	616c      	str	r4, [r5, #20]
 80177cc:	e7e7      	b.n	801779e <__d2b+0x4e>
 80177ce:	a801      	add	r0, sp, #4
 80177d0:	f7ff fcf2 	bl	80171b8 <__lo0bits>
 80177d4:	2401      	movs	r4, #1
 80177d6:	9b01      	ldr	r3, [sp, #4]
 80177d8:	612c      	str	r4, [r5, #16]
 80177da:	616b      	str	r3, [r5, #20]
 80177dc:	3020      	adds	r0, #32
 80177de:	e7e4      	b.n	80177aa <__d2b+0x5a>
 80177e0:	4b0b      	ldr	r3, [pc, #44]	; (8017810 <__d2b+0xc0>)
 80177e2:	18c0      	adds	r0, r0, r3
 80177e4:	4b0b      	ldr	r3, [pc, #44]	; (8017814 <__d2b+0xc4>)
 80177e6:	6038      	str	r0, [r7, #0]
 80177e8:	18e3      	adds	r3, r4, r3
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	18eb      	adds	r3, r5, r3
 80177ee:	6958      	ldr	r0, [r3, #20]
 80177f0:	f7ff fcc8 	bl	8017184 <__hi0bits>
 80177f4:	0164      	lsls	r4, r4, #5
 80177f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f8:	1a24      	subs	r4, r4, r0
 80177fa:	601c      	str	r4, [r3, #0]
 80177fc:	e7df      	b.n	80177be <__d2b+0x6e>
 80177fe:	46c0      	nop			; (mov r8, r8)
 8017800:	0801c589 	.word	0x0801c589
 8017804:	0000030a 	.word	0x0000030a
 8017808:	0801c670 	.word	0x0801c670
 801780c:	fffffbcd 	.word	0xfffffbcd
 8017810:	fffffbce 	.word	0xfffffbce
 8017814:	3fffffff 	.word	0x3fffffff

08017818 <__ratio>:
 8017818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801781a:	b087      	sub	sp, #28
 801781c:	000f      	movs	r7, r1
 801781e:	a904      	add	r1, sp, #16
 8017820:	0006      	movs	r6, r0
 8017822:	f7ff ff45 	bl	80176b0 <__b2d>
 8017826:	9000      	str	r0, [sp, #0]
 8017828:	9101      	str	r1, [sp, #4]
 801782a:	9c00      	ldr	r4, [sp, #0]
 801782c:	9d01      	ldr	r5, [sp, #4]
 801782e:	0038      	movs	r0, r7
 8017830:	a905      	add	r1, sp, #20
 8017832:	f7ff ff3d 	bl	80176b0 <__b2d>
 8017836:	9002      	str	r0, [sp, #8]
 8017838:	9103      	str	r1, [sp, #12]
 801783a:	9a02      	ldr	r2, [sp, #8]
 801783c:	9b03      	ldr	r3, [sp, #12]
 801783e:	6931      	ldr	r1, [r6, #16]
 8017840:	6938      	ldr	r0, [r7, #16]
 8017842:	9e05      	ldr	r6, [sp, #20]
 8017844:	1a08      	subs	r0, r1, r0
 8017846:	9904      	ldr	r1, [sp, #16]
 8017848:	0140      	lsls	r0, r0, #5
 801784a:	1b89      	subs	r1, r1, r6
 801784c:	1841      	adds	r1, r0, r1
 801784e:	0508      	lsls	r0, r1, #20
 8017850:	2900      	cmp	r1, #0
 8017852:	dd07      	ble.n	8017864 <__ratio+0x4c>
 8017854:	9901      	ldr	r1, [sp, #4]
 8017856:	1845      	adds	r5, r0, r1
 8017858:	0020      	movs	r0, r4
 801785a:	0029      	movs	r1, r5
 801785c:	f7e9 ff2a 	bl	80016b4 <__aeabi_ddiv>
 8017860:	b007      	add	sp, #28
 8017862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017864:	9903      	ldr	r1, [sp, #12]
 8017866:	1a0b      	subs	r3, r1, r0
 8017868:	e7f6      	b.n	8017858 <__ratio+0x40>

0801786a <__copybits>:
 801786a:	b570      	push	{r4, r5, r6, lr}
 801786c:	0014      	movs	r4, r2
 801786e:	0005      	movs	r5, r0
 8017870:	3901      	subs	r1, #1
 8017872:	6913      	ldr	r3, [r2, #16]
 8017874:	1149      	asrs	r1, r1, #5
 8017876:	3101      	adds	r1, #1
 8017878:	0089      	lsls	r1, r1, #2
 801787a:	3414      	adds	r4, #20
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	1841      	adds	r1, r0, r1
 8017880:	18e3      	adds	r3, r4, r3
 8017882:	42a3      	cmp	r3, r4
 8017884:	d80d      	bhi.n	80178a2 <__copybits+0x38>
 8017886:	0014      	movs	r4, r2
 8017888:	3411      	adds	r4, #17
 801788a:	2500      	movs	r5, #0
 801788c:	429c      	cmp	r4, r3
 801788e:	d803      	bhi.n	8017898 <__copybits+0x2e>
 8017890:	1a9b      	subs	r3, r3, r2
 8017892:	3b11      	subs	r3, #17
 8017894:	089b      	lsrs	r3, r3, #2
 8017896:	009d      	lsls	r5, r3, #2
 8017898:	2300      	movs	r3, #0
 801789a:	1940      	adds	r0, r0, r5
 801789c:	4281      	cmp	r1, r0
 801789e:	d803      	bhi.n	80178a8 <__copybits+0x3e>
 80178a0:	bd70      	pop	{r4, r5, r6, pc}
 80178a2:	cc40      	ldmia	r4!, {r6}
 80178a4:	c540      	stmia	r5!, {r6}
 80178a6:	e7ec      	b.n	8017882 <__copybits+0x18>
 80178a8:	c008      	stmia	r0!, {r3}
 80178aa:	e7f7      	b.n	801789c <__copybits+0x32>

080178ac <__any_on>:
 80178ac:	0002      	movs	r2, r0
 80178ae:	6900      	ldr	r0, [r0, #16]
 80178b0:	b510      	push	{r4, lr}
 80178b2:	3214      	adds	r2, #20
 80178b4:	114b      	asrs	r3, r1, #5
 80178b6:	4298      	cmp	r0, r3
 80178b8:	db13      	blt.n	80178e2 <__any_on+0x36>
 80178ba:	dd0c      	ble.n	80178d6 <__any_on+0x2a>
 80178bc:	241f      	movs	r4, #31
 80178be:	0008      	movs	r0, r1
 80178c0:	4020      	ands	r0, r4
 80178c2:	4221      	tst	r1, r4
 80178c4:	d007      	beq.n	80178d6 <__any_on+0x2a>
 80178c6:	0099      	lsls	r1, r3, #2
 80178c8:	588c      	ldr	r4, [r1, r2]
 80178ca:	0021      	movs	r1, r4
 80178cc:	40c1      	lsrs	r1, r0
 80178ce:	4081      	lsls	r1, r0
 80178d0:	2001      	movs	r0, #1
 80178d2:	428c      	cmp	r4, r1
 80178d4:	d104      	bne.n	80178e0 <__any_on+0x34>
 80178d6:	009b      	lsls	r3, r3, #2
 80178d8:	18d3      	adds	r3, r2, r3
 80178da:	4293      	cmp	r3, r2
 80178dc:	d803      	bhi.n	80178e6 <__any_on+0x3a>
 80178de:	2000      	movs	r0, #0
 80178e0:	bd10      	pop	{r4, pc}
 80178e2:	0003      	movs	r3, r0
 80178e4:	e7f7      	b.n	80178d6 <__any_on+0x2a>
 80178e6:	3b04      	subs	r3, #4
 80178e8:	6819      	ldr	r1, [r3, #0]
 80178ea:	2900      	cmp	r1, #0
 80178ec:	d0f5      	beq.n	80178da <__any_on+0x2e>
 80178ee:	2001      	movs	r0, #1
 80178f0:	e7f6      	b.n	80178e0 <__any_on+0x34>
	...

080178f4 <frexp>:
 80178f4:	b570      	push	{r4, r5, r6, lr}
 80178f6:	0014      	movs	r4, r2
 80178f8:	2500      	movs	r5, #0
 80178fa:	6025      	str	r5, [r4, #0]
 80178fc:	4d10      	ldr	r5, [pc, #64]	; (8017940 <frexp+0x4c>)
 80178fe:	004b      	lsls	r3, r1, #1
 8017900:	000a      	movs	r2, r1
 8017902:	085b      	lsrs	r3, r3, #1
 8017904:	42ab      	cmp	r3, r5
 8017906:	dc1a      	bgt.n	801793e <frexp+0x4a>
 8017908:	001d      	movs	r5, r3
 801790a:	4305      	orrs	r5, r0
 801790c:	d017      	beq.n	801793e <frexp+0x4a>
 801790e:	4d0d      	ldr	r5, [pc, #52]	; (8017944 <frexp+0x50>)
 8017910:	4229      	tst	r1, r5
 8017912:	d109      	bne.n	8017928 <frexp+0x34>
 8017914:	2200      	movs	r2, #0
 8017916:	4b0c      	ldr	r3, [pc, #48]	; (8017948 <frexp+0x54>)
 8017918:	f7ea face 	bl	8001eb8 <__aeabi_dmul>
 801791c:	2536      	movs	r5, #54	; 0x36
 801791e:	000a      	movs	r2, r1
 8017920:	004b      	lsls	r3, r1, #1
 8017922:	426d      	negs	r5, r5
 8017924:	085b      	lsrs	r3, r3, #1
 8017926:	6025      	str	r5, [r4, #0]
 8017928:	4d08      	ldr	r5, [pc, #32]	; (801794c <frexp+0x58>)
 801792a:	151b      	asrs	r3, r3, #20
 801792c:	195b      	adds	r3, r3, r5
 801792e:	6825      	ldr	r5, [r4, #0]
 8017930:	18eb      	adds	r3, r5, r3
 8017932:	6023      	str	r3, [r4, #0]
 8017934:	4b06      	ldr	r3, [pc, #24]	; (8017950 <frexp+0x5c>)
 8017936:	401a      	ands	r2, r3
 8017938:	4b06      	ldr	r3, [pc, #24]	; (8017954 <frexp+0x60>)
 801793a:	4313      	orrs	r3, r2
 801793c:	0019      	movs	r1, r3
 801793e:	bd70      	pop	{r4, r5, r6, pc}
 8017940:	7fefffff 	.word	0x7fefffff
 8017944:	7ff00000 	.word	0x7ff00000
 8017948:	43500000 	.word	0x43500000
 801794c:	fffffc02 	.word	0xfffffc02
 8017950:	800fffff 	.word	0x800fffff
 8017954:	3fe00000 	.word	0x3fe00000

08017958 <nan>:
 8017958:	2000      	movs	r0, #0
 801795a:	4901      	ldr	r1, [pc, #4]	; (8017960 <nan+0x8>)
 801795c:	4770      	bx	lr
 801795e:	46c0      	nop			; (mov r8, r8)
 8017960:	7ff80000 	.word	0x7ff80000

08017964 <__ssprint_r>:
 8017964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017966:	6893      	ldr	r3, [r2, #8]
 8017968:	b087      	sub	sp, #28
 801796a:	000c      	movs	r4, r1
 801796c:	0017      	movs	r7, r2
 801796e:	9002      	str	r0, [sp, #8]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d065      	beq.n	8017a40 <__ssprint_r+0xdc>
 8017974:	6813      	ldr	r3, [r2, #0]
 8017976:	9303      	str	r3, [sp, #12]
 8017978:	2300      	movs	r3, #0
 801797a:	9305      	str	r3, [sp, #20]
 801797c:	9301      	str	r3, [sp, #4]
 801797e:	9b01      	ldr	r3, [sp, #4]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d02d      	beq.n	80179e0 <__ssprint_r+0x7c>
 8017984:	68a6      	ldr	r6, [r4, #8]
 8017986:	429e      	cmp	r6, r3
 8017988:	d849      	bhi.n	8017a1e <__ssprint_r+0xba>
 801798a:	2390      	movs	r3, #144	; 0x90
 801798c:	89a2      	ldrh	r2, [r4, #12]
 801798e:	00db      	lsls	r3, r3, #3
 8017990:	421a      	tst	r2, r3
 8017992:	d041      	beq.n	8017a18 <__ssprint_r+0xb4>
 8017994:	2003      	movs	r0, #3
 8017996:	6921      	ldr	r1, [r4, #16]
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	1a5b      	subs	r3, r3, r1
 801799c:	9304      	str	r3, [sp, #16]
 801799e:	6963      	ldr	r3, [r4, #20]
 80179a0:	4343      	muls	r3, r0
 80179a2:	0fdd      	lsrs	r5, r3, #31
 80179a4:	18ed      	adds	r5, r5, r3
 80179a6:	9b04      	ldr	r3, [sp, #16]
 80179a8:	9801      	ldr	r0, [sp, #4]
 80179aa:	3301      	adds	r3, #1
 80179ac:	181b      	adds	r3, r3, r0
 80179ae:	106d      	asrs	r5, r5, #1
 80179b0:	42ab      	cmp	r3, r5
 80179b2:	d900      	bls.n	80179b6 <__ssprint_r+0x52>
 80179b4:	001d      	movs	r5, r3
 80179b6:	0553      	lsls	r3, r2, #21
 80179b8:	d546      	bpl.n	8017a48 <__ssprint_r+0xe4>
 80179ba:	0029      	movs	r1, r5
 80179bc:	9802      	ldr	r0, [sp, #8]
 80179be:	f7fb f9c5 	bl	8012d4c <_malloc_r>
 80179c2:	1e06      	subs	r6, r0, #0
 80179c4:	d116      	bne.n	80179f4 <__ssprint_r+0x90>
 80179c6:	230c      	movs	r3, #12
 80179c8:	9a02      	ldr	r2, [sp, #8]
 80179ca:	2001      	movs	r0, #1
 80179cc:	6013      	str	r3, [r2, #0]
 80179ce:	2340      	movs	r3, #64	; 0x40
 80179d0:	89a2      	ldrh	r2, [r4, #12]
 80179d2:	4240      	negs	r0, r0
 80179d4:	4313      	orrs	r3, r2
 80179d6:	81a3      	strh	r3, [r4, #12]
 80179d8:	2300      	movs	r3, #0
 80179da:	60bb      	str	r3, [r7, #8]
 80179dc:	607b      	str	r3, [r7, #4]
 80179de:	e031      	b.n	8017a44 <__ssprint_r+0xe0>
 80179e0:	9b03      	ldr	r3, [sp, #12]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	9305      	str	r3, [sp, #20]
 80179e6:	9b03      	ldr	r3, [sp, #12]
 80179e8:	685b      	ldr	r3, [r3, #4]
 80179ea:	9301      	str	r3, [sp, #4]
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	3308      	adds	r3, #8
 80179f0:	9303      	str	r3, [sp, #12]
 80179f2:	e7c4      	b.n	801797e <__ssprint_r+0x1a>
 80179f4:	9a04      	ldr	r2, [sp, #16]
 80179f6:	6921      	ldr	r1, [r4, #16]
 80179f8:	f7fb fbc8 	bl	801318c <memcpy>
 80179fc:	89a3      	ldrh	r3, [r4, #12]
 80179fe:	4a18      	ldr	r2, [pc, #96]	; (8017a60 <__ssprint_r+0xfc>)
 8017a00:	401a      	ands	r2, r3
 8017a02:	2380      	movs	r3, #128	; 0x80
 8017a04:	4313      	orrs	r3, r2
 8017a06:	81a3      	strh	r3, [r4, #12]
 8017a08:	9b04      	ldr	r3, [sp, #16]
 8017a0a:	6126      	str	r6, [r4, #16]
 8017a0c:	18f6      	adds	r6, r6, r3
 8017a0e:	6026      	str	r6, [r4, #0]
 8017a10:	6165      	str	r5, [r4, #20]
 8017a12:	9e01      	ldr	r6, [sp, #4]
 8017a14:	1aed      	subs	r5, r5, r3
 8017a16:	60a5      	str	r5, [r4, #8]
 8017a18:	9b01      	ldr	r3, [sp, #4]
 8017a1a:	429e      	cmp	r6, r3
 8017a1c:	d900      	bls.n	8017a20 <__ssprint_r+0xbc>
 8017a1e:	9e01      	ldr	r6, [sp, #4]
 8017a20:	0032      	movs	r2, r6
 8017a22:	9905      	ldr	r1, [sp, #20]
 8017a24:	6820      	ldr	r0, [r4, #0]
 8017a26:	f7ff fad8 	bl	8016fda <memmove>
 8017a2a:	68a3      	ldr	r3, [r4, #8]
 8017a2c:	9a01      	ldr	r2, [sp, #4]
 8017a2e:	1b9b      	subs	r3, r3, r6
 8017a30:	60a3      	str	r3, [r4, #8]
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	199e      	adds	r6, r3, r6
 8017a36:	68bb      	ldr	r3, [r7, #8]
 8017a38:	6026      	str	r6, [r4, #0]
 8017a3a:	1a9b      	subs	r3, r3, r2
 8017a3c:	60bb      	str	r3, [r7, #8]
 8017a3e:	d1cf      	bne.n	80179e0 <__ssprint_r+0x7c>
 8017a40:	2000      	movs	r0, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	b007      	add	sp, #28
 8017a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a48:	002a      	movs	r2, r5
 8017a4a:	9802      	ldr	r0, [sp, #8]
 8017a4c:	f7fb fbe4 	bl	8013218 <_realloc_r>
 8017a50:	1e06      	subs	r6, r0, #0
 8017a52:	d1d9      	bne.n	8017a08 <__ssprint_r+0xa4>
 8017a54:	6921      	ldr	r1, [r4, #16]
 8017a56:	9802      	ldr	r0, [sp, #8]
 8017a58:	f7fe fe6c 	bl	8016734 <_free_r>
 8017a5c:	e7b3      	b.n	80179c6 <__ssprint_r+0x62>
 8017a5e:	46c0      	nop			; (mov r8, r8)
 8017a60:	fffffb7f 	.word	0xfffffb7f

08017a64 <__ascii_wctomb>:
 8017a64:	0003      	movs	r3, r0
 8017a66:	1e08      	subs	r0, r1, #0
 8017a68:	d005      	beq.n	8017a76 <__ascii_wctomb+0x12>
 8017a6a:	2aff      	cmp	r2, #255	; 0xff
 8017a6c:	d904      	bls.n	8017a78 <__ascii_wctomb+0x14>
 8017a6e:	228a      	movs	r2, #138	; 0x8a
 8017a70:	2001      	movs	r0, #1
 8017a72:	601a      	str	r2, [r3, #0]
 8017a74:	4240      	negs	r0, r0
 8017a76:	4770      	bx	lr
 8017a78:	2001      	movs	r0, #1
 8017a7a:	700a      	strb	r2, [r1, #0]
 8017a7c:	e7fb      	b.n	8017a76 <__ascii_wctomb+0x12>
	...

08017a80 <__register_exitproc>:
 8017a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a82:	4f1e      	ldr	r7, [pc, #120]	; (8017afc <__register_exitproc+0x7c>)
 8017a84:	0004      	movs	r4, r0
 8017a86:	6838      	ldr	r0, [r7, #0]
 8017a88:	0016      	movs	r6, r2
 8017a8a:	9100      	str	r1, [sp, #0]
 8017a8c:	9301      	str	r3, [sp, #4]
 8017a8e:	f7ff fa85 	bl	8016f9c <__retarget_lock_acquire_recursive>
 8017a92:	4b1b      	ldr	r3, [pc, #108]	; (8017b00 <__register_exitproc+0x80>)
 8017a94:	6819      	ldr	r1, [r3, #0]
 8017a96:	000b      	movs	r3, r1
 8017a98:	33fc      	adds	r3, #252	; 0xfc
 8017a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017a9c:	2a00      	cmp	r2, #0
 8017a9e:	d103      	bne.n	8017aa8 <__register_exitproc+0x28>
 8017aa0:	000a      	movs	r2, r1
 8017aa2:	324d      	adds	r2, #77	; 0x4d
 8017aa4:	32ff      	adds	r2, #255	; 0xff
 8017aa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8017aa8:	6853      	ldr	r3, [r2, #4]
 8017aaa:	6838      	ldr	r0, [r7, #0]
 8017aac:	2b1f      	cmp	r3, #31
 8017aae:	dd04      	ble.n	8017aba <__register_exitproc+0x3a>
 8017ab0:	f7ff fa75 	bl	8016f9e <__retarget_lock_release_recursive>
 8017ab4:	2001      	movs	r0, #1
 8017ab6:	4240      	negs	r0, r0
 8017ab8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017aba:	2c00      	cmp	r4, #0
 8017abc:	d014      	beq.n	8017ae8 <__register_exitproc+0x68>
 8017abe:	0099      	lsls	r1, r3, #2
 8017ac0:	1851      	adds	r1, r2, r1
 8017ac2:	000f      	movs	r7, r1
 8017ac4:	3788      	adds	r7, #136	; 0x88
 8017ac6:	603e      	str	r6, [r7, #0]
 8017ac8:	2701      	movs	r7, #1
 8017aca:	0016      	movs	r6, r2
 8017acc:	409f      	lsls	r7, r3
 8017ace:	3685      	adds	r6, #133	; 0x85
 8017ad0:	36ff      	adds	r6, #255	; 0xff
 8017ad2:	6875      	ldr	r5, [r6, #4]
 8017ad4:	31fc      	adds	r1, #252	; 0xfc
 8017ad6:	433d      	orrs	r5, r7
 8017ad8:	6075      	str	r5, [r6, #4]
 8017ada:	9d01      	ldr	r5, [sp, #4]
 8017adc:	60cd      	str	r5, [r1, #12]
 8017ade:	2c02      	cmp	r4, #2
 8017ae0:	d102      	bne.n	8017ae8 <__register_exitproc+0x68>
 8017ae2:	68b1      	ldr	r1, [r6, #8]
 8017ae4:	430f      	orrs	r7, r1
 8017ae6:	60b7      	str	r7, [r6, #8]
 8017ae8:	1c59      	adds	r1, r3, #1
 8017aea:	6051      	str	r1, [r2, #4]
 8017aec:	3302      	adds	r3, #2
 8017aee:	9900      	ldr	r1, [sp, #0]
 8017af0:	009b      	lsls	r3, r3, #2
 8017af2:	5099      	str	r1, [r3, r2]
 8017af4:	f7ff fa53 	bl	8016f9e <__retarget_lock_release_recursive>
 8017af8:	2000      	movs	r0, #0
 8017afa:	e7dd      	b.n	8017ab8 <__register_exitproc+0x38>
 8017afc:	20000910 	.word	0x20000910
 8017b00:	0801c4d4 	.word	0x0801c4d4

08017b04 <__assert_func>:
 8017b04:	b530      	push	{r4, r5, lr}
 8017b06:	0014      	movs	r4, r2
 8017b08:	001a      	movs	r2, r3
 8017b0a:	4b09      	ldr	r3, [pc, #36]	; (8017b30 <__assert_func+0x2c>)
 8017b0c:	0005      	movs	r5, r0
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	b085      	sub	sp, #20
 8017b12:	68d8      	ldr	r0, [r3, #12]
 8017b14:	4b07      	ldr	r3, [pc, #28]	; (8017b34 <__assert_func+0x30>)
 8017b16:	2c00      	cmp	r4, #0
 8017b18:	d101      	bne.n	8017b1e <__assert_func+0x1a>
 8017b1a:	4b07      	ldr	r3, [pc, #28]	; (8017b38 <__assert_func+0x34>)
 8017b1c:	001c      	movs	r4, r3
 8017b1e:	9301      	str	r3, [sp, #4]
 8017b20:	9100      	str	r1, [sp, #0]
 8017b22:	002b      	movs	r3, r5
 8017b24:	4905      	ldr	r1, [pc, #20]	; (8017b3c <__assert_func+0x38>)
 8017b26:	9402      	str	r4, [sp, #8]
 8017b28:	f000 f80a 	bl	8017b40 <fiprintf>
 8017b2c:	f000 fde6 	bl	80186fc <abort>
 8017b30:	200000d0 	.word	0x200000d0
 8017b34:	0801c7cc 	.word	0x0801c7cc
 8017b38:	0801c807 	.word	0x0801c807
 8017b3c:	0801c7d9 	.word	0x0801c7d9

08017b40 <fiprintf>:
 8017b40:	b40e      	push	{r1, r2, r3}
 8017b42:	b503      	push	{r0, r1, lr}
 8017b44:	0001      	movs	r1, r0
 8017b46:	ab03      	add	r3, sp, #12
 8017b48:	4804      	ldr	r0, [pc, #16]	; (8017b5c <fiprintf+0x1c>)
 8017b4a:	cb04      	ldmia	r3!, {r2}
 8017b4c:	6800      	ldr	r0, [r0, #0]
 8017b4e:	9301      	str	r3, [sp, #4]
 8017b50:	f000 f83a 	bl	8017bc8 <_vfiprintf_r>
 8017b54:	b002      	add	sp, #8
 8017b56:	bc08      	pop	{r3}
 8017b58:	b003      	add	sp, #12
 8017b5a:	4718      	bx	r3
 8017b5c:	200000d0 	.word	0x200000d0

08017b60 <__sprint_r>:
 8017b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b62:	b085      	sub	sp, #20
 8017b64:	9001      	str	r0, [sp, #4]
 8017b66:	6890      	ldr	r0, [r2, #8]
 8017b68:	000d      	movs	r5, r1
 8017b6a:	0014      	movs	r4, r2
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	d102      	bne.n	8017b76 <__sprint_r+0x16>
 8017b70:	6050      	str	r0, [r2, #4]
 8017b72:	b005      	add	sp, #20
 8017b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b76:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017b78:	049b      	lsls	r3, r3, #18
 8017b7a:	d521      	bpl.n	8017bc0 <__sprint_r+0x60>
 8017b7c:	6817      	ldr	r7, [r2, #0]
 8017b7e:	2600      	movs	r6, #0
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	9302      	str	r3, [sp, #8]
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	9300      	str	r3, [sp, #0]
 8017b88:	089b      	lsrs	r3, r3, #2
 8017b8a:	9303      	str	r3, [sp, #12]
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	42b3      	cmp	r3, r6
 8017b90:	dc0b      	bgt.n	8017baa <__sprint_r+0x4a>
 8017b92:	2303      	movs	r3, #3
 8017b94:	9800      	ldr	r0, [sp, #0]
 8017b96:	3708      	adds	r7, #8
 8017b98:	4398      	bics	r0, r3
 8017b9a:	68a3      	ldr	r3, [r4, #8]
 8017b9c:	1a18      	subs	r0, r3, r0
 8017b9e:	60a0      	str	r0, [r4, #8]
 8017ba0:	d1ed      	bne.n	8017b7e <__sprint_r+0x1e>
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	60a3      	str	r3, [r4, #8]
 8017ba6:	6063      	str	r3, [r4, #4]
 8017ba8:	e7e3      	b.n	8017b72 <__sprint_r+0x12>
 8017baa:	9902      	ldr	r1, [sp, #8]
 8017bac:	00b3      	lsls	r3, r6, #2
 8017bae:	58c9      	ldr	r1, [r1, r3]
 8017bb0:	002a      	movs	r2, r5
 8017bb2:	9801      	ldr	r0, [sp, #4]
 8017bb4:	f000 ff20 	bl	80189f8 <_fputwc_r>
 8017bb8:	1c43      	adds	r3, r0, #1
 8017bba:	d0f2      	beq.n	8017ba2 <__sprint_r+0x42>
 8017bbc:	3601      	adds	r6, #1
 8017bbe:	e7e5      	b.n	8017b8c <__sprint_r+0x2c>
 8017bc0:	9801      	ldr	r0, [sp, #4]
 8017bc2:	f000 ff43 	bl	8018a4c <__sfvwrite_r>
 8017bc6:	e7ec      	b.n	8017ba2 <__sprint_r+0x42>

08017bc8 <_vfiprintf_r>:
 8017bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bca:	b0c3      	sub	sp, #268	; 0x10c
 8017bcc:	000f      	movs	r7, r1
 8017bce:	001c      	movs	r4, r3
 8017bd0:	001e      	movs	r6, r3
 8017bd2:	9006      	str	r0, [sp, #24]
 8017bd4:	9207      	str	r2, [sp, #28]
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	d005      	beq.n	8017be6 <_vfiprintf_r+0x1e>
 8017bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017bdc:	9303      	str	r3, [sp, #12]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d101      	bne.n	8017be6 <_vfiprintf_r+0x1e>
 8017be2:	f000 fea1 	bl	8018928 <__sinit>
 8017be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017be8:	07db      	lsls	r3, r3, #31
 8017bea:	d405      	bmi.n	8017bf8 <_vfiprintf_r+0x30>
 8017bec:	89bb      	ldrh	r3, [r7, #12]
 8017bee:	059b      	lsls	r3, r3, #22
 8017bf0:	d402      	bmi.n	8017bf8 <_vfiprintf_r+0x30>
 8017bf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017bf4:	f7ff f9d2 	bl	8016f9c <__retarget_lock_acquire_recursive>
 8017bf8:	230c      	movs	r3, #12
 8017bfa:	5efa      	ldrsh	r2, [r7, r3]
 8017bfc:	2380      	movs	r3, #128	; 0x80
 8017bfe:	019b      	lsls	r3, r3, #6
 8017c00:	421a      	tst	r2, r3
 8017c02:	d105      	bne.n	8017c10 <_vfiprintf_r+0x48>
 8017c04:	4313      	orrs	r3, r2
 8017c06:	81bb      	strh	r3, [r7, #12]
 8017c08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017c0a:	4ba3      	ldr	r3, [pc, #652]	; (8017e98 <_vfiprintf_r+0x2d0>)
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8017c10:	89bb      	ldrh	r3, [r7, #12]
 8017c12:	071b      	lsls	r3, r3, #28
 8017c14:	d502      	bpl.n	8017c1c <_vfiprintf_r+0x54>
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d115      	bne.n	8017c48 <_vfiprintf_r+0x80>
 8017c1c:	0039      	movs	r1, r7
 8017c1e:	9806      	ldr	r0, [sp, #24]
 8017c20:	f000 fd08 	bl	8018634 <__swsetup_r>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d00f      	beq.n	8017c48 <_vfiprintf_r+0x80>
 8017c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c2a:	07db      	lsls	r3, r3, #31
 8017c2c:	d505      	bpl.n	8017c3a <_vfiprintf_r+0x72>
 8017c2e:	2301      	movs	r3, #1
 8017c30:	425b      	negs	r3, r3
 8017c32:	9308      	str	r3, [sp, #32]
 8017c34:	9808      	ldr	r0, [sp, #32]
 8017c36:	b043      	add	sp, #268	; 0x10c
 8017c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c3a:	89bb      	ldrh	r3, [r7, #12]
 8017c3c:	059b      	lsls	r3, r3, #22
 8017c3e:	d4f6      	bmi.n	8017c2e <_vfiprintf_r+0x66>
 8017c40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017c42:	f7ff f9ac 	bl	8016f9e <__retarget_lock_release_recursive>
 8017c46:	e7f2      	b.n	8017c2e <_vfiprintf_r+0x66>
 8017c48:	231a      	movs	r3, #26
 8017c4a:	89ba      	ldrh	r2, [r7, #12]
 8017c4c:	4013      	ands	r3, r2
 8017c4e:	2b0a      	cmp	r3, #10
 8017c50:	d113      	bne.n	8017c7a <_vfiprintf_r+0xb2>
 8017c52:	210e      	movs	r1, #14
 8017c54:	5e7b      	ldrsh	r3, [r7, r1]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	db0f      	blt.n	8017c7a <_vfiprintf_r+0xb2>
 8017c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c5c:	07db      	lsls	r3, r3, #31
 8017c5e:	d404      	bmi.n	8017c6a <_vfiprintf_r+0xa2>
 8017c60:	0593      	lsls	r3, r2, #22
 8017c62:	d402      	bmi.n	8017c6a <_vfiprintf_r+0xa2>
 8017c64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017c66:	f7ff f99a 	bl	8016f9e <__retarget_lock_release_recursive>
 8017c6a:	0023      	movs	r3, r4
 8017c6c:	0039      	movs	r1, r7
 8017c6e:	9a07      	ldr	r2, [sp, #28]
 8017c70:	9806      	ldr	r0, [sp, #24]
 8017c72:	f000 fc9b 	bl	80185ac <__sbprintf>
 8017c76:	9008      	str	r0, [sp, #32]
 8017c78:	e7dc      	b.n	8017c34 <_vfiprintf_r+0x6c>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	aa19      	add	r2, sp, #100	; 0x64
 8017c7e:	9216      	str	r2, [sp, #88]	; 0x58
 8017c80:	9318      	str	r3, [sp, #96]	; 0x60
 8017c82:	9317      	str	r3, [sp, #92]	; 0x5c
 8017c84:	9203      	str	r2, [sp, #12]
 8017c86:	930c      	str	r3, [sp, #48]	; 0x30
 8017c88:	930d      	str	r3, [sp, #52]	; 0x34
 8017c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8017c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c8e:	9308      	str	r3, [sp, #32]
 8017c90:	9c07      	ldr	r4, [sp, #28]
 8017c92:	7823      	ldrb	r3, [r4, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d002      	beq.n	8017c9e <_vfiprintf_r+0xd6>
 8017c98:	2b25      	cmp	r3, #37	; 0x25
 8017c9a:	d000      	beq.n	8017c9e <_vfiprintf_r+0xd6>
 8017c9c:	e089      	b.n	8017db2 <_vfiprintf_r+0x1ea>
 8017c9e:	9b07      	ldr	r3, [sp, #28]
 8017ca0:	1ae5      	subs	r5, r4, r3
 8017ca2:	429c      	cmp	r4, r3
 8017ca4:	d011      	beq.n	8017cca <_vfiprintf_r+0x102>
 8017ca6:	9b03      	ldr	r3, [sp, #12]
 8017ca8:	9a07      	ldr	r2, [sp, #28]
 8017caa:	c324      	stmia	r3!, {r2, r5}
 8017cac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017cae:	195b      	adds	r3, r3, r5
 8017cb0:	9318      	str	r3, [sp, #96]	; 0x60
 8017cb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017cb4:	9304      	str	r3, [sp, #16]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8017cba:	2b07      	cmp	r3, #7
 8017cbc:	dc7b      	bgt.n	8017db6 <_vfiprintf_r+0x1ee>
 8017cbe:	9b03      	ldr	r3, [sp, #12]
 8017cc0:	3308      	adds	r3, #8
 8017cc2:	9303      	str	r3, [sp, #12]
 8017cc4:	9b08      	ldr	r3, [sp, #32]
 8017cc6:	195b      	adds	r3, r3, r5
 8017cc8:	9308      	str	r3, [sp, #32]
 8017cca:	7823      	ldrb	r3, [r4, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <_vfiprintf_r+0x10c>
 8017cd0:	f000 fc29 	bl	8018526 <_vfiprintf_r+0x95e>
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	a914      	add	r1, sp, #80	; 0x50
 8017cd8:	70ca      	strb	r2, [r1, #3]
 8017cda:	2101      	movs	r1, #1
 8017cdc:	1c63      	adds	r3, r4, #1
 8017cde:	250a      	movs	r5, #10
 8017ce0:	0014      	movs	r4, r2
 8017ce2:	4249      	negs	r1, r1
 8017ce4:	9105      	str	r1, [sp, #20]
 8017ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8017ce8:	1c5a      	adds	r2, r3, #1
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	9207      	str	r2, [sp, #28]
 8017cee:	0018      	movs	r0, r3
 8017cf0:	3820      	subs	r0, #32
 8017cf2:	285a      	cmp	r0, #90	; 0x5a
 8017cf4:	d900      	bls.n	8017cf8 <_vfiprintf_r+0x130>
 8017cf6:	e376      	b.n	80183e6 <_vfiprintf_r+0x81e>
 8017cf8:	f7e8 fa20 	bl	800013c <__gnu_thumb1_case_uhi>
 8017cfc:	037500a2 	.word	0x037500a2
 8017d00:	00ab0375 	.word	0x00ab0375
 8017d04:	03750375 	.word	0x03750375
 8017d08:	00870375 	.word	0x00870375
 8017d0c:	03750375 	.word	0x03750375
 8017d10:	00b500ad 	.word	0x00b500ad
 8017d14:	00b30375 	.word	0x00b30375
 8017d18:	037500b9 	.word	0x037500b9
 8017d1c:	00df00dd 	.word	0x00df00dd
 8017d20:	00df00df 	.word	0x00df00df
 8017d24:	00df00df 	.word	0x00df00df
 8017d28:	00df00df 	.word	0x00df00df
 8017d2c:	00df00df 	.word	0x00df00df
 8017d30:	03750375 	.word	0x03750375
 8017d34:	03750375 	.word	0x03750375
 8017d38:	03750375 	.word	0x03750375
 8017d3c:	03750375 	.word	0x03750375
 8017d40:	01070375 	.word	0x01070375
 8017d44:	037501f9 	.word	0x037501f9
 8017d48:	03750375 	.word	0x03750375
 8017d4c:	03750375 	.word	0x03750375
 8017d50:	03750375 	.word	0x03750375
 8017d54:	03750375 	.word	0x03750375
 8017d58:	02570375 	.word	0x02570375
 8017d5c:	03750375 	.word	0x03750375
 8017d60:	02980375 	.word	0x02980375
 8017d64:	02b10375 	.word	0x02b10375
 8017d68:	03750375 	.word	0x03750375
 8017d6c:	037502ec 	.word	0x037502ec
 8017d70:	03750375 	.word	0x03750375
 8017d74:	03750375 	.word	0x03750375
 8017d78:	03750375 	.word	0x03750375
 8017d7c:	03750375 	.word	0x03750375
 8017d80:	01070375 	.word	0x01070375
 8017d84:	037501fb 	.word	0x037501fb
 8017d88:	03750375 	.word	0x03750375
 8017d8c:	01fb00f0 	.word	0x01fb00f0
 8017d90:	03750103 	.word	0x03750103
 8017d94:	037500fc 	.word	0x037500fc
 8017d98:	0259023a 	.word	0x0259023a
 8017d9c:	01030288 	.word	0x01030288
 8017da0:	02980375 	.word	0x02980375
 8017da4:	02b300a9 	.word	0x02b300a9
 8017da8:	03750375 	.word	0x03750375
 8017dac:	03750067 	.word	0x03750067
 8017db0:	00a9      	.short	0x00a9
 8017db2:	3401      	adds	r4, #1
 8017db4:	e76d      	b.n	8017c92 <_vfiprintf_r+0xca>
 8017db6:	0039      	movs	r1, r7
 8017db8:	9806      	ldr	r0, [sp, #24]
 8017dba:	aa16      	add	r2, sp, #88	; 0x58
 8017dbc:	f7ff fed0 	bl	8017b60 <__sprint_r>
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	d000      	beq.n	8017dc6 <_vfiprintf_r+0x1fe>
 8017dc4:	e38e      	b.n	80184e4 <_vfiprintf_r+0x91c>
 8017dc6:	ab19      	add	r3, sp, #100	; 0x64
 8017dc8:	e77b      	b.n	8017cc2 <_vfiprintf_r+0xfa>
 8017dca:	4a34      	ldr	r2, [pc, #208]	; (8017e9c <_vfiprintf_r+0x2d4>)
 8017dcc:	0020      	movs	r0, r4
 8017dce:	920c      	str	r2, [sp, #48]	; 0x30
 8017dd0:	2220      	movs	r2, #32
 8017dd2:	4010      	ands	r0, r2
 8017dd4:	4214      	tst	r4, r2
 8017dd6:	d100      	bne.n	8017dda <_vfiprintf_r+0x212>
 8017dd8:	e27e      	b.n	80182d8 <_vfiprintf_r+0x710>
 8017dda:	3a19      	subs	r2, #25
 8017ddc:	3607      	adds	r6, #7
 8017dde:	4396      	bics	r6, r2
 8017de0:	0030      	movs	r0, r6
 8017de2:	c806      	ldmia	r0!, {r1, r2}
 8017de4:	9100      	str	r1, [sp, #0]
 8017de6:	9201      	str	r2, [sp, #4]
 8017de8:	9004      	str	r0, [sp, #16]
 8017dea:	07e2      	lsls	r2, r4, #31
 8017dec:	d509      	bpl.n	8017e02 <_vfiprintf_r+0x23a>
 8017dee:	9a00      	ldr	r2, [sp, #0]
 8017df0:	9901      	ldr	r1, [sp, #4]
 8017df2:	430a      	orrs	r2, r1
 8017df4:	d005      	beq.n	8017e02 <_vfiprintf_r+0x23a>
 8017df6:	aa15      	add	r2, sp, #84	; 0x54
 8017df8:	2130      	movs	r1, #48	; 0x30
 8017dfa:	7053      	strb	r3, [r2, #1]
 8017dfc:	2302      	movs	r3, #2
 8017dfe:	7011      	strb	r1, [r2, #0]
 8017e00:	431c      	orrs	r4, r3
 8017e02:	4b27      	ldr	r3, [pc, #156]	; (8017ea0 <_vfiprintf_r+0x2d8>)
 8017e04:	401c      	ands	r4, r3
 8017e06:	2302      	movs	r3, #2
 8017e08:	e1e1      	b.n	80181ce <_vfiprintf_r+0x606>
 8017e0a:	9806      	ldr	r0, [sp, #24]
 8017e0c:	f7ff f8c0 	bl	8016f90 <_localeconv_r>
 8017e10:	6843      	ldr	r3, [r0, #4]
 8017e12:	0018      	movs	r0, r3
 8017e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e16:	f7e8 f97f 	bl	8000118 <strlen>
 8017e1a:	900e      	str	r0, [sp, #56]	; 0x38
 8017e1c:	9806      	ldr	r0, [sp, #24]
 8017e1e:	f7ff f8b7 	bl	8016f90 <_localeconv_r>
 8017e22:	6883      	ldr	r3, [r0, #8]
 8017e24:	930d      	str	r3, [sp, #52]	; 0x34
 8017e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d010      	beq.n	8017e4e <_vfiprintf_r+0x286>
 8017e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d00d      	beq.n	8017e4e <_vfiprintf_r+0x286>
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d00a      	beq.n	8017e4e <_vfiprintf_r+0x286>
 8017e38:	2380      	movs	r3, #128	; 0x80
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	431c      	orrs	r4, r3
 8017e3e:	e006      	b.n	8017e4e <_vfiprintf_r+0x286>
 8017e40:	ab14      	add	r3, sp, #80	; 0x50
 8017e42:	78da      	ldrb	r2, [r3, #3]
 8017e44:	3303      	adds	r3, #3
 8017e46:	2a00      	cmp	r2, #0
 8017e48:	d101      	bne.n	8017e4e <_vfiprintf_r+0x286>
 8017e4a:	3220      	adds	r2, #32
 8017e4c:	701a      	strb	r2, [r3, #0]
 8017e4e:	9b07      	ldr	r3, [sp, #28]
 8017e50:	e74a      	b.n	8017ce8 <_vfiprintf_r+0x120>
 8017e52:	2301      	movs	r3, #1
 8017e54:	e7f2      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017e56:	ce08      	ldmia	r6!, {r3}
 8017e58:	9309      	str	r3, [sp, #36]	; 0x24
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	daf7      	bge.n	8017e4e <_vfiprintf_r+0x286>
 8017e5e:	425b      	negs	r3, r3
 8017e60:	9309      	str	r3, [sp, #36]	; 0x24
 8017e62:	2304      	movs	r3, #4
 8017e64:	e7ea      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017e66:	222b      	movs	r2, #43	; 0x2b
 8017e68:	ab14      	add	r3, sp, #80	; 0x50
 8017e6a:	70da      	strb	r2, [r3, #3]
 8017e6c:	e7ef      	b.n	8017e4e <_vfiprintf_r+0x286>
 8017e6e:	9b07      	ldr	r3, [sp, #28]
 8017e70:	1c5a      	adds	r2, r3, #1
 8017e72:	781b      	ldrb	r3, [r3, #0]
 8017e74:	2b2a      	cmp	r3, #42	; 0x2a
 8017e76:	d015      	beq.n	8017ea4 <_vfiprintf_r+0x2dc>
 8017e78:	2100      	movs	r1, #0
 8017e7a:	9105      	str	r1, [sp, #20]
 8017e7c:	0019      	movs	r1, r3
 8017e7e:	3930      	subs	r1, #48	; 0x30
 8017e80:	9207      	str	r2, [sp, #28]
 8017e82:	2909      	cmp	r1, #9
 8017e84:	d900      	bls.n	8017e88 <_vfiprintf_r+0x2c0>
 8017e86:	e732      	b.n	8017cee <_vfiprintf_r+0x126>
 8017e88:	9805      	ldr	r0, [sp, #20]
 8017e8a:	4368      	muls	r0, r5
 8017e8c:	1843      	adds	r3, r0, r1
 8017e8e:	9305      	str	r3, [sp, #20]
 8017e90:	7813      	ldrb	r3, [r2, #0]
 8017e92:	3201      	adds	r2, #1
 8017e94:	e7f2      	b.n	8017e7c <_vfiprintf_r+0x2b4>
 8017e96:	46c0      	nop			; (mov r8, r8)
 8017e98:	ffffdfff 	.word	0xffffdfff
 8017e9c:	0801c538 	.word	0x0801c538
 8017ea0:	fffffbff 	.word	0xfffffbff
 8017ea4:	ce08      	ldmia	r6!, {r3}
 8017ea6:	9305      	str	r3, [sp, #20]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	da02      	bge.n	8017eb2 <_vfiprintf_r+0x2ea>
 8017eac:	2301      	movs	r3, #1
 8017eae:	425b      	negs	r3, r3
 8017eb0:	9305      	str	r3, [sp, #20]
 8017eb2:	9207      	str	r2, [sp, #28]
 8017eb4:	e7cb      	b.n	8017e4e <_vfiprintf_r+0x286>
 8017eb6:	2380      	movs	r3, #128	; 0x80
 8017eb8:	e7c0      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017eba:	2100      	movs	r1, #0
 8017ebc:	9a07      	ldr	r2, [sp, #28]
 8017ebe:	9109      	str	r1, [sp, #36]	; 0x24
 8017ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ec2:	3b30      	subs	r3, #48	; 0x30
 8017ec4:	4369      	muls	r1, r5
 8017ec6:	185b      	adds	r3, r3, r1
 8017ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8017eca:	0013      	movs	r3, r2
 8017ecc:	781b      	ldrb	r3, [r3, #0]
 8017ece:	3201      	adds	r2, #1
 8017ed0:	0019      	movs	r1, r3
 8017ed2:	3930      	subs	r1, #48	; 0x30
 8017ed4:	9207      	str	r2, [sp, #28]
 8017ed6:	2909      	cmp	r1, #9
 8017ed8:	d9f2      	bls.n	8017ec0 <_vfiprintf_r+0x2f8>
 8017eda:	e708      	b.n	8017cee <_vfiprintf_r+0x126>
 8017edc:	9b07      	ldr	r3, [sp, #28]
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	2b68      	cmp	r3, #104	; 0x68
 8017ee2:	d105      	bne.n	8017ef0 <_vfiprintf_r+0x328>
 8017ee4:	9b07      	ldr	r3, [sp, #28]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	9307      	str	r3, [sp, #28]
 8017eea:	2380      	movs	r3, #128	; 0x80
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	e7a5      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017ef0:	2340      	movs	r3, #64	; 0x40
 8017ef2:	e7a3      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017ef4:	9b07      	ldr	r3, [sp, #28]
 8017ef6:	781b      	ldrb	r3, [r3, #0]
 8017ef8:	2b6c      	cmp	r3, #108	; 0x6c
 8017efa:	d104      	bne.n	8017f06 <_vfiprintf_r+0x33e>
 8017efc:	9b07      	ldr	r3, [sp, #28]
 8017efe:	3301      	adds	r3, #1
 8017f00:	9307      	str	r3, [sp, #28]
 8017f02:	2320      	movs	r3, #32
 8017f04:	e79a      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017f06:	2310      	movs	r3, #16
 8017f08:	e798      	b.n	8017e3c <_vfiprintf_r+0x274>
 8017f0a:	0032      	movs	r2, r6
 8017f0c:	2600      	movs	r6, #0
 8017f0e:	ca08      	ldmia	r2!, {r3}
 8017f10:	ad29      	add	r5, sp, #164	; 0xa4
 8017f12:	702b      	strb	r3, [r5, #0]
 8017f14:	ab14      	add	r3, sp, #80	; 0x50
 8017f16:	70de      	strb	r6, [r3, #3]
 8017f18:	2301      	movs	r3, #1
 8017f1a:	9204      	str	r2, [sp, #16]
 8017f1c:	9305      	str	r3, [sp, #20]
 8017f1e:	960b      	str	r6, [sp, #44]	; 0x2c
 8017f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f22:	9a05      	ldr	r2, [sp, #20]
 8017f24:	930a      	str	r3, [sp, #40]	; 0x28
 8017f26:	4293      	cmp	r3, r2
 8017f28:	da00      	bge.n	8017f2c <_vfiprintf_r+0x364>
 8017f2a:	920a      	str	r2, [sp, #40]	; 0x28
 8017f2c:	ab14      	add	r3, sp, #80	; 0x50
 8017f2e:	3303      	adds	r3, #3
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	1e5a      	subs	r2, r3, #1
 8017f34:	4193      	sbcs	r3, r2
 8017f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f38:	18d3      	adds	r3, r2, r3
 8017f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f3c:	0022      	movs	r2, r4
 8017f3e:	2302      	movs	r3, #2
 8017f40:	401a      	ands	r2, r3
 8017f42:	9210      	str	r2, [sp, #64]	; 0x40
 8017f44:	421c      	tst	r4, r3
 8017f46:	d002      	beq.n	8017f4e <_vfiprintf_r+0x386>
 8017f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f4a:	3302      	adds	r3, #2
 8017f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8017f4e:	2384      	movs	r3, #132	; 0x84
 8017f50:	0022      	movs	r2, r4
 8017f52:	401a      	ands	r2, r3
 8017f54:	9211      	str	r2, [sp, #68]	; 0x44
 8017f56:	421c      	tst	r4, r3
 8017f58:	d122      	bne.n	8017fa0 <_vfiprintf_r+0x3d8>
 8017f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f5e:	1a9e      	subs	r6, r3, r2
 8017f60:	2e00      	cmp	r6, #0
 8017f62:	dd1d      	ble.n	8017fa0 <_vfiprintf_r+0x3d8>
 8017f64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017f66:	9903      	ldr	r1, [sp, #12]
 8017f68:	469c      	mov	ip, r3
 8017f6a:	48d0      	ldr	r0, [pc, #832]	; (80182ac <_vfiprintf_r+0x6e4>)
 8017f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017f6e:	9a03      	ldr	r2, [sp, #12]
 8017f70:	9312      	str	r3, [sp, #72]	; 0x48
 8017f72:	3108      	adds	r1, #8
 8017f74:	3301      	adds	r3, #1
 8017f76:	6010      	str	r0, [r2, #0]
 8017f78:	2e10      	cmp	r6, #16
 8017f7a:	dd00      	ble.n	8017f7e <_vfiprintf_r+0x3b6>
 8017f7c:	e240      	b.n	8018400 <_vfiprintf_r+0x838>
 8017f7e:	6056      	str	r6, [r2, #4]
 8017f80:	4466      	add	r6, ip
 8017f82:	9618      	str	r6, [sp, #96]	; 0x60
 8017f84:	9317      	str	r3, [sp, #92]	; 0x5c
 8017f86:	9103      	str	r1, [sp, #12]
 8017f88:	2b07      	cmp	r3, #7
 8017f8a:	dd09      	ble.n	8017fa0 <_vfiprintf_r+0x3d8>
 8017f8c:	0039      	movs	r1, r7
 8017f8e:	9806      	ldr	r0, [sp, #24]
 8017f90:	aa16      	add	r2, sp, #88	; 0x58
 8017f92:	f7ff fde5 	bl	8017b60 <__sprint_r>
 8017f96:	2800      	cmp	r0, #0
 8017f98:	d000      	beq.n	8017f9c <_vfiprintf_r+0x3d4>
 8017f9a:	e2a3      	b.n	80184e4 <_vfiprintf_r+0x91c>
 8017f9c:	ab19      	add	r3, sp, #100	; 0x64
 8017f9e:	9303      	str	r3, [sp, #12]
 8017fa0:	ab14      	add	r3, sp, #80	; 0x50
 8017fa2:	1cda      	adds	r2, r3, #3
 8017fa4:	78db      	ldrb	r3, [r3, #3]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d012      	beq.n	8017fd0 <_vfiprintf_r+0x408>
 8017faa:	9903      	ldr	r1, [sp, #12]
 8017fac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017fae:	600a      	str	r2, [r1, #0]
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	9312      	str	r3, [sp, #72]	; 0x48
 8017fb4:	604a      	str	r2, [r1, #4]
 8017fb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017fb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017fba:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fbc:	3201      	adds	r2, #1
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	9218      	str	r2, [sp, #96]	; 0x60
 8017fc2:	9317      	str	r3, [sp, #92]	; 0x5c
 8017fc4:	2b07      	cmp	r3, #7
 8017fc6:	dd00      	ble.n	8017fca <_vfiprintf_r+0x402>
 8017fc8:	e22d      	b.n	8018426 <_vfiprintf_r+0x85e>
 8017fca:	000b      	movs	r3, r1
 8017fcc:	3308      	adds	r3, #8
 8017fce:	9303      	str	r3, [sp, #12]
 8017fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d013      	beq.n	8017ffe <_vfiprintf_r+0x436>
 8017fd6:	9903      	ldr	r1, [sp, #12]
 8017fd8:	aa15      	add	r2, sp, #84	; 0x54
 8017fda:	600a      	str	r2, [r1, #0]
 8017fdc:	2202      	movs	r2, #2
 8017fde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017fe0:	604a      	str	r2, [r1, #4]
 8017fe2:	9310      	str	r3, [sp, #64]	; 0x40
 8017fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017fe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017fe8:	3202      	adds	r2, #2
 8017fea:	9312      	str	r3, [sp, #72]	; 0x48
 8017fec:	3301      	adds	r3, #1
 8017fee:	9218      	str	r2, [sp, #96]	; 0x60
 8017ff0:	9317      	str	r3, [sp, #92]	; 0x5c
 8017ff2:	2b07      	cmp	r3, #7
 8017ff4:	dd00      	ble.n	8017ff8 <_vfiprintf_r+0x430>
 8017ff6:	e21f      	b.n	8018438 <_vfiprintf_r+0x870>
 8017ff8:	000b      	movs	r3, r1
 8017ffa:	3308      	adds	r3, #8
 8017ffc:	9303      	str	r3, [sp, #12]
 8017ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018000:	2b80      	cmp	r3, #128	; 0x80
 8018002:	d122      	bne.n	801804a <_vfiprintf_r+0x482>
 8018004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018008:	1a9e      	subs	r6, r3, r2
 801800a:	2e00      	cmp	r6, #0
 801800c:	dd1d      	ble.n	801804a <_vfiprintf_r+0x482>
 801800e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018010:	9903      	ldr	r1, [sp, #12]
 8018012:	469c      	mov	ip, r3
 8018014:	48a6      	ldr	r0, [pc, #664]	; (80182b0 <_vfiprintf_r+0x6e8>)
 8018016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018018:	9a03      	ldr	r2, [sp, #12]
 801801a:	9310      	str	r3, [sp, #64]	; 0x40
 801801c:	3108      	adds	r1, #8
 801801e:	3301      	adds	r3, #1
 8018020:	6010      	str	r0, [r2, #0]
 8018022:	2e10      	cmp	r6, #16
 8018024:	dd00      	ble.n	8018028 <_vfiprintf_r+0x460>
 8018026:	e210      	b.n	801844a <_vfiprintf_r+0x882>
 8018028:	6056      	str	r6, [r2, #4]
 801802a:	4466      	add	r6, ip
 801802c:	9618      	str	r6, [sp, #96]	; 0x60
 801802e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018030:	9103      	str	r1, [sp, #12]
 8018032:	2b07      	cmp	r3, #7
 8018034:	dd09      	ble.n	801804a <_vfiprintf_r+0x482>
 8018036:	0039      	movs	r1, r7
 8018038:	9806      	ldr	r0, [sp, #24]
 801803a:	aa16      	add	r2, sp, #88	; 0x58
 801803c:	f7ff fd90 	bl	8017b60 <__sprint_r>
 8018040:	2800      	cmp	r0, #0
 8018042:	d000      	beq.n	8018046 <_vfiprintf_r+0x47e>
 8018044:	e24e      	b.n	80184e4 <_vfiprintf_r+0x91c>
 8018046:	ab19      	add	r3, sp, #100	; 0x64
 8018048:	9303      	str	r3, [sp, #12]
 801804a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801804c:	9a05      	ldr	r2, [sp, #20]
 801804e:	1a9e      	subs	r6, r3, r2
 8018050:	2e00      	cmp	r6, #0
 8018052:	dd1d      	ble.n	8018090 <_vfiprintf_r+0x4c8>
 8018054:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018056:	9903      	ldr	r1, [sp, #12]
 8018058:	469c      	mov	ip, r3
 801805a:	4895      	ldr	r0, [pc, #596]	; (80182b0 <_vfiprintf_r+0x6e8>)
 801805c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801805e:	9a03      	ldr	r2, [sp, #12]
 8018060:	930b      	str	r3, [sp, #44]	; 0x2c
 8018062:	3108      	adds	r1, #8
 8018064:	3301      	adds	r3, #1
 8018066:	6010      	str	r0, [r2, #0]
 8018068:	2e10      	cmp	r6, #16
 801806a:	dd00      	ble.n	801806e <_vfiprintf_r+0x4a6>
 801806c:	e200      	b.n	8018470 <_vfiprintf_r+0x8a8>
 801806e:	6056      	str	r6, [r2, #4]
 8018070:	4466      	add	r6, ip
 8018072:	9618      	str	r6, [sp, #96]	; 0x60
 8018074:	9317      	str	r3, [sp, #92]	; 0x5c
 8018076:	9103      	str	r1, [sp, #12]
 8018078:	2b07      	cmp	r3, #7
 801807a:	dd09      	ble.n	8018090 <_vfiprintf_r+0x4c8>
 801807c:	0039      	movs	r1, r7
 801807e:	9806      	ldr	r0, [sp, #24]
 8018080:	aa16      	add	r2, sp, #88	; 0x58
 8018082:	f7ff fd6d 	bl	8017b60 <__sprint_r>
 8018086:	2800      	cmp	r0, #0
 8018088:	d000      	beq.n	801808c <_vfiprintf_r+0x4c4>
 801808a:	e22b      	b.n	80184e4 <_vfiprintf_r+0x91c>
 801808c:	ab19      	add	r3, sp, #100	; 0x64
 801808e:	9303      	str	r3, [sp, #12]
 8018090:	9b03      	ldr	r3, [sp, #12]
 8018092:	9a05      	ldr	r2, [sp, #20]
 8018094:	601d      	str	r5, [r3, #0]
 8018096:	605a      	str	r2, [r3, #4]
 8018098:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801809a:	0010      	movs	r0, r2
 801809c:	469c      	mov	ip, r3
 801809e:	930b      	str	r3, [sp, #44]	; 0x2c
 80180a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80180a2:	4460      	add	r0, ip
 80180a4:	9305      	str	r3, [sp, #20]
 80180a6:	3301      	adds	r3, #1
 80180a8:	9018      	str	r0, [sp, #96]	; 0x60
 80180aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80180ac:	2b07      	cmp	r3, #7
 80180ae:	dd00      	ble.n	80180b2 <_vfiprintf_r+0x4ea>
 80180b0:	e1f1      	b.n	8018496 <_vfiprintf_r+0x8ce>
 80180b2:	9b03      	ldr	r3, [sp, #12]
 80180b4:	3308      	adds	r3, #8
 80180b6:	0762      	lsls	r2, r4, #29
 80180b8:	d500      	bpl.n	80180bc <_vfiprintf_r+0x4f4>
 80180ba:	e1f5      	b.n	80184a8 <_vfiprintf_r+0x8e0>
 80180bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180c0:	4293      	cmp	r3, r2
 80180c2:	da00      	bge.n	80180c6 <_vfiprintf_r+0x4fe>
 80180c4:	0013      	movs	r3, r2
 80180c6:	9a08      	ldr	r2, [sp, #32]
 80180c8:	18d3      	adds	r3, r2, r3
 80180ca:	9308      	str	r3, [sp, #32]
 80180cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80180ce:	9303      	str	r3, [sp, #12]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d007      	beq.n	80180e4 <_vfiprintf_r+0x51c>
 80180d4:	0039      	movs	r1, r7
 80180d6:	9806      	ldr	r0, [sp, #24]
 80180d8:	aa16      	add	r2, sp, #88	; 0x58
 80180da:	f7ff fd41 	bl	8017b60 <__sprint_r>
 80180de:	2800      	cmp	r0, #0
 80180e0:	d000      	beq.n	80180e4 <_vfiprintf_r+0x51c>
 80180e2:	e1ff      	b.n	80184e4 <_vfiprintf_r+0x91c>
 80180e4:	2300      	movs	r3, #0
 80180e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80180e8:	ab19      	add	r3, sp, #100	; 0x64
 80180ea:	9303      	str	r3, [sp, #12]
 80180ec:	e049      	b.n	8018182 <_vfiprintf_r+0x5ba>
 80180ee:	2310      	movs	r3, #16
 80180f0:	431c      	orrs	r4, r3
 80180f2:	06a3      	lsls	r3, r4, #26
 80180f4:	d52b      	bpl.n	801814e <_vfiprintf_r+0x586>
 80180f6:	2307      	movs	r3, #7
 80180f8:	3607      	adds	r6, #7
 80180fa:	439e      	bics	r6, r3
 80180fc:	0031      	movs	r1, r6
 80180fe:	c90c      	ldmia	r1!, {r2, r3}
 8018100:	9200      	str	r2, [sp, #0]
 8018102:	9301      	str	r3, [sp, #4]
 8018104:	9104      	str	r1, [sp, #16]
 8018106:	9a01      	ldr	r2, [sp, #4]
 8018108:	2301      	movs	r3, #1
 801810a:	2a00      	cmp	r2, #0
 801810c:	da09      	bge.n	8018122 <_vfiprintf_r+0x55a>
 801810e:	9d00      	ldr	r5, [sp, #0]
 8018110:	9e01      	ldr	r6, [sp, #4]
 8018112:	2200      	movs	r2, #0
 8018114:	4269      	negs	r1, r5
 8018116:	41b2      	sbcs	r2, r6
 8018118:	9100      	str	r1, [sp, #0]
 801811a:	9201      	str	r2, [sp, #4]
 801811c:	212d      	movs	r1, #45	; 0x2d
 801811e:	aa14      	add	r2, sp, #80	; 0x50
 8018120:	70d1      	strb	r1, [r2, #3]
 8018122:	9901      	ldr	r1, [sp, #4]
 8018124:	9a00      	ldr	r2, [sp, #0]
 8018126:	430a      	orrs	r2, r1
 8018128:	9905      	ldr	r1, [sp, #20]
 801812a:	3101      	adds	r1, #1
 801812c:	d100      	bne.n	8018130 <_vfiprintf_r+0x568>
 801812e:	e209      	b.n	8018544 <_vfiprintf_r+0x97c>
 8018130:	2180      	movs	r1, #128	; 0x80
 8018132:	0020      	movs	r0, r4
 8018134:	4388      	bics	r0, r1
 8018136:	900a      	str	r0, [sp, #40]	; 0x28
 8018138:	2a00      	cmp	r2, #0
 801813a:	d000      	beq.n	801813e <_vfiprintf_r+0x576>
 801813c:	e206      	b.n	801854c <_vfiprintf_r+0x984>
 801813e:	9a05      	ldr	r2, [sp, #20]
 8018140:	2a00      	cmp	r2, #0
 8018142:	d100      	bne.n	8018146 <_vfiprintf_r+0x57e>
 8018144:	e143      	b.n	80183ce <_vfiprintf_r+0x806>
 8018146:	2b01      	cmp	r3, #1
 8018148:	d000      	beq.n	801814c <_vfiprintf_r+0x584>
 801814a:	e202      	b.n	8018552 <_vfiprintf_r+0x98a>
 801814c:	e0e6      	b.n	801831c <_vfiprintf_r+0x754>
 801814e:	0032      	movs	r2, r6
 8018150:	ca08      	ldmia	r2!, {r3}
 8018152:	9204      	str	r2, [sp, #16]
 8018154:	06e2      	lsls	r2, r4, #27
 8018156:	d503      	bpl.n	8018160 <_vfiprintf_r+0x598>
 8018158:	9300      	str	r3, [sp, #0]
 801815a:	17db      	asrs	r3, r3, #31
 801815c:	9301      	str	r3, [sp, #4]
 801815e:	e7d2      	b.n	8018106 <_vfiprintf_r+0x53e>
 8018160:	0662      	lsls	r2, r4, #25
 8018162:	d501      	bpl.n	8018168 <_vfiprintf_r+0x5a0>
 8018164:	b21b      	sxth	r3, r3
 8018166:	e7f7      	b.n	8018158 <_vfiprintf_r+0x590>
 8018168:	05a2      	lsls	r2, r4, #22
 801816a:	d5f5      	bpl.n	8018158 <_vfiprintf_r+0x590>
 801816c:	b25b      	sxtb	r3, r3
 801816e:	e7f3      	b.n	8018158 <_vfiprintf_r+0x590>
 8018170:	1d33      	adds	r3, r6, #4
 8018172:	9304      	str	r3, [sp, #16]
 8018174:	06a3      	lsls	r3, r4, #26
 8018176:	d506      	bpl.n	8018186 <_vfiprintf_r+0x5be>
 8018178:	6833      	ldr	r3, [r6, #0]
 801817a:	9a08      	ldr	r2, [sp, #32]
 801817c:	601a      	str	r2, [r3, #0]
 801817e:	17d2      	asrs	r2, r2, #31
 8018180:	605a      	str	r2, [r3, #4]
 8018182:	9e04      	ldr	r6, [sp, #16]
 8018184:	e584      	b.n	8017c90 <_vfiprintf_r+0xc8>
 8018186:	06e3      	lsls	r3, r4, #27
 8018188:	d503      	bpl.n	8018192 <_vfiprintf_r+0x5ca>
 801818a:	6833      	ldr	r3, [r6, #0]
 801818c:	9a08      	ldr	r2, [sp, #32]
 801818e:	601a      	str	r2, [r3, #0]
 8018190:	e7f7      	b.n	8018182 <_vfiprintf_r+0x5ba>
 8018192:	0663      	lsls	r3, r4, #25
 8018194:	d503      	bpl.n	801819e <_vfiprintf_r+0x5d6>
 8018196:	6833      	ldr	r3, [r6, #0]
 8018198:	9a08      	ldr	r2, [sp, #32]
 801819a:	801a      	strh	r2, [r3, #0]
 801819c:	e7f1      	b.n	8018182 <_vfiprintf_r+0x5ba>
 801819e:	05a3      	lsls	r3, r4, #22
 80181a0:	d5f3      	bpl.n	801818a <_vfiprintf_r+0x5c2>
 80181a2:	6833      	ldr	r3, [r6, #0]
 80181a4:	9a08      	ldr	r2, [sp, #32]
 80181a6:	701a      	strb	r2, [r3, #0]
 80181a8:	e7eb      	b.n	8018182 <_vfiprintf_r+0x5ba>
 80181aa:	2310      	movs	r3, #16
 80181ac:	431c      	orrs	r4, r3
 80181ae:	2320      	movs	r3, #32
 80181b0:	0020      	movs	r0, r4
 80181b2:	4018      	ands	r0, r3
 80181b4:	421c      	tst	r4, r3
 80181b6:	d00d      	beq.n	80181d4 <_vfiprintf_r+0x60c>
 80181b8:	3b19      	subs	r3, #25
 80181ba:	3607      	adds	r6, #7
 80181bc:	439e      	bics	r6, r3
 80181be:	0031      	movs	r1, r6
 80181c0:	c90c      	ldmia	r1!, {r2, r3}
 80181c2:	9200      	str	r2, [sp, #0]
 80181c4:	9301      	str	r3, [sp, #4]
 80181c6:	9104      	str	r1, [sp, #16]
 80181c8:	4b3a      	ldr	r3, [pc, #232]	; (80182b4 <_vfiprintf_r+0x6ec>)
 80181ca:	401c      	ands	r4, r3
 80181cc:	2300      	movs	r3, #0
 80181ce:	2100      	movs	r1, #0
 80181d0:	aa14      	add	r2, sp, #80	; 0x50
 80181d2:	e7a5      	b.n	8018120 <_vfiprintf_r+0x558>
 80181d4:	0032      	movs	r2, r6
 80181d6:	ca08      	ldmia	r2!, {r3}
 80181d8:	0021      	movs	r1, r4
 80181da:	9204      	str	r2, [sp, #16]
 80181dc:	2210      	movs	r2, #16
 80181de:	4011      	ands	r1, r2
 80181e0:	4214      	tst	r4, r2
 80181e2:	d002      	beq.n	80181ea <_vfiprintf_r+0x622>
 80181e4:	9300      	str	r3, [sp, #0]
 80181e6:	9001      	str	r0, [sp, #4]
 80181e8:	e7ee      	b.n	80181c8 <_vfiprintf_r+0x600>
 80181ea:	2240      	movs	r2, #64	; 0x40
 80181ec:	0020      	movs	r0, r4
 80181ee:	4010      	ands	r0, r2
 80181f0:	4214      	tst	r4, r2
 80181f2:	d003      	beq.n	80181fc <_vfiprintf_r+0x634>
 80181f4:	b29b      	uxth	r3, r3
 80181f6:	9300      	str	r3, [sp, #0]
 80181f8:	9101      	str	r1, [sp, #4]
 80181fa:	e7e5      	b.n	80181c8 <_vfiprintf_r+0x600>
 80181fc:	2280      	movs	r2, #128	; 0x80
 80181fe:	0021      	movs	r1, r4
 8018200:	0092      	lsls	r2, r2, #2
 8018202:	4011      	ands	r1, r2
 8018204:	4214      	tst	r4, r2
 8018206:	d0f6      	beq.n	80181f6 <_vfiprintf_r+0x62e>
 8018208:	b2db      	uxtb	r3, r3
 801820a:	e7eb      	b.n	80181e4 <_vfiprintf_r+0x61c>
 801820c:	0033      	movs	r3, r6
 801820e:	2130      	movs	r1, #48	; 0x30
 8018210:	cb04      	ldmia	r3!, {r2}
 8018212:	9304      	str	r3, [sp, #16]
 8018214:	2300      	movs	r3, #0
 8018216:	9200      	str	r2, [sp, #0]
 8018218:	aa15      	add	r2, sp, #84	; 0x54
 801821a:	7011      	strb	r1, [r2, #0]
 801821c:	3148      	adds	r1, #72	; 0x48
 801821e:	7051      	strb	r1, [r2, #1]
 8018220:	4a25      	ldr	r2, [pc, #148]	; (80182b8 <_vfiprintf_r+0x6f0>)
 8018222:	9301      	str	r3, [sp, #4]
 8018224:	3302      	adds	r3, #2
 8018226:	431c      	orrs	r4, r3
 8018228:	920c      	str	r2, [sp, #48]	; 0x30
 801822a:	e7d0      	b.n	80181ce <_vfiprintf_r+0x606>
 801822c:	0033      	movs	r3, r6
 801822e:	2600      	movs	r6, #0
 8018230:	cb20      	ldmia	r3!, {r5}
 8018232:	9304      	str	r3, [sp, #16]
 8018234:	ab14      	add	r3, sp, #80	; 0x50
 8018236:	70de      	strb	r6, [r3, #3]
 8018238:	9b05      	ldr	r3, [sp, #20]
 801823a:	3301      	adds	r3, #1
 801823c:	d00a      	beq.n	8018254 <_vfiprintf_r+0x68c>
 801823e:	0031      	movs	r1, r6
 8018240:	0028      	movs	r0, r5
 8018242:	9a05      	ldr	r2, [sp, #20]
 8018244:	f7fe febe 	bl	8016fc4 <memchr>
 8018248:	900b      	str	r0, [sp, #44]	; 0x2c
 801824a:	42b0      	cmp	r0, r6
 801824c:	d100      	bne.n	8018250 <_vfiprintf_r+0x688>
 801824e:	e667      	b.n	8017f20 <_vfiprintf_r+0x358>
 8018250:	1b43      	subs	r3, r0, r5
 8018252:	e663      	b.n	8017f1c <_vfiprintf_r+0x354>
 8018254:	0028      	movs	r0, r5
 8018256:	f7e7 ff5f 	bl	8000118 <strlen>
 801825a:	9005      	str	r0, [sp, #20]
 801825c:	e65f      	b.n	8017f1e <_vfiprintf_r+0x356>
 801825e:	2310      	movs	r3, #16
 8018260:	431c      	orrs	r4, r3
 8018262:	2320      	movs	r3, #32
 8018264:	0020      	movs	r0, r4
 8018266:	4018      	ands	r0, r3
 8018268:	421c      	tst	r4, r3
 801826a:	d009      	beq.n	8018280 <_vfiprintf_r+0x6b8>
 801826c:	3b19      	subs	r3, #25
 801826e:	3607      	adds	r6, #7
 8018270:	439e      	bics	r6, r3
 8018272:	0031      	movs	r1, r6
 8018274:	c90c      	ldmia	r1!, {r2, r3}
 8018276:	9200      	str	r2, [sp, #0]
 8018278:	9301      	str	r3, [sp, #4]
 801827a:	9104      	str	r1, [sp, #16]
 801827c:	2301      	movs	r3, #1
 801827e:	e7a6      	b.n	80181ce <_vfiprintf_r+0x606>
 8018280:	0033      	movs	r3, r6
 8018282:	cb04      	ldmia	r3!, {r2}
 8018284:	0021      	movs	r1, r4
 8018286:	9304      	str	r3, [sp, #16]
 8018288:	2310      	movs	r3, #16
 801828a:	4019      	ands	r1, r3
 801828c:	421c      	tst	r4, r3
 801828e:	d003      	beq.n	8018298 <_vfiprintf_r+0x6d0>
 8018290:	9200      	str	r2, [sp, #0]
 8018292:	9001      	str	r0, [sp, #4]
 8018294:	3b0f      	subs	r3, #15
 8018296:	e79a      	b.n	80181ce <_vfiprintf_r+0x606>
 8018298:	2340      	movs	r3, #64	; 0x40
 801829a:	0020      	movs	r0, r4
 801829c:	4018      	ands	r0, r3
 801829e:	421c      	tst	r4, r3
 80182a0:	d00c      	beq.n	80182bc <_vfiprintf_r+0x6f4>
 80182a2:	b293      	uxth	r3, r2
 80182a4:	9300      	str	r3, [sp, #0]
 80182a6:	9101      	str	r1, [sp, #4]
 80182a8:	e7e8      	b.n	801827c <_vfiprintf_r+0x6b4>
 80182aa:	46c0      	nop			; (mov r8, r8)
 80182ac:	0801c808 	.word	0x0801c808
 80182b0:	0801c818 	.word	0x0801c818
 80182b4:	fffffbff 	.word	0xfffffbff
 80182b8:	0801c538 	.word	0x0801c538
 80182bc:	2380      	movs	r3, #128	; 0x80
 80182be:	0021      	movs	r1, r4
 80182c0:	009b      	lsls	r3, r3, #2
 80182c2:	4019      	ands	r1, r3
 80182c4:	421c      	tst	r4, r3
 80182c6:	d003      	beq.n	80182d0 <_vfiprintf_r+0x708>
 80182c8:	b2d3      	uxtb	r3, r2
 80182ca:	9300      	str	r3, [sp, #0]
 80182cc:	9001      	str	r0, [sp, #4]
 80182ce:	e7d5      	b.n	801827c <_vfiprintf_r+0x6b4>
 80182d0:	9200      	str	r2, [sp, #0]
 80182d2:	e7e8      	b.n	80182a6 <_vfiprintf_r+0x6de>
 80182d4:	4ab3      	ldr	r2, [pc, #716]	; (80185a4 <_vfiprintf_r+0x9dc>)
 80182d6:	e579      	b.n	8017dcc <_vfiprintf_r+0x204>
 80182d8:	0031      	movs	r1, r6
 80182da:	c904      	ldmia	r1!, {r2}
 80182dc:	0025      	movs	r5, r4
 80182de:	9104      	str	r1, [sp, #16]
 80182e0:	2110      	movs	r1, #16
 80182e2:	400d      	ands	r5, r1
 80182e4:	420c      	tst	r4, r1
 80182e6:	d002      	beq.n	80182ee <_vfiprintf_r+0x726>
 80182e8:	9200      	str	r2, [sp, #0]
 80182ea:	9001      	str	r0, [sp, #4]
 80182ec:	e57d      	b.n	8017dea <_vfiprintf_r+0x222>
 80182ee:	2140      	movs	r1, #64	; 0x40
 80182f0:	0020      	movs	r0, r4
 80182f2:	4008      	ands	r0, r1
 80182f4:	420c      	tst	r4, r1
 80182f6:	d003      	beq.n	8018300 <_vfiprintf_r+0x738>
 80182f8:	b292      	uxth	r2, r2
 80182fa:	9200      	str	r2, [sp, #0]
 80182fc:	9501      	str	r5, [sp, #4]
 80182fe:	e574      	b.n	8017dea <_vfiprintf_r+0x222>
 8018300:	2180      	movs	r1, #128	; 0x80
 8018302:	0025      	movs	r5, r4
 8018304:	0089      	lsls	r1, r1, #2
 8018306:	400d      	ands	r5, r1
 8018308:	420c      	tst	r4, r1
 801830a:	d0f6      	beq.n	80182fa <_vfiprintf_r+0x732>
 801830c:	b2d2      	uxtb	r2, r2
 801830e:	e7eb      	b.n	80182e8 <_vfiprintf_r+0x720>
 8018310:	9b01      	ldr	r3, [sp, #4]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d109      	bne.n	801832a <_vfiprintf_r+0x762>
 8018316:	9b00      	ldr	r3, [sp, #0]
 8018318:	2b09      	cmp	r3, #9
 801831a:	d806      	bhi.n	801832a <_vfiprintf_r+0x762>
 801831c:	25b7      	movs	r5, #183	; 0xb7
 801831e:	ab14      	add	r3, sp, #80	; 0x50
 8018320:	18ed      	adds	r5, r5, r3
 8018322:	9b00      	ldr	r3, [sp, #0]
 8018324:	3330      	adds	r3, #48	; 0x30
 8018326:	702b      	strb	r3, [r5, #0]
 8018328:	e134      	b.n	8018594 <_vfiprintf_r+0x9cc>
 801832a:	2680      	movs	r6, #128	; 0x80
 801832c:	2400      	movs	r4, #0
 801832e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018330:	00f6      	lsls	r6, r6, #3
 8018332:	ad42      	add	r5, sp, #264	; 0x108
 8018334:	401e      	ands	r6, r3
 8018336:	220a      	movs	r2, #10
 8018338:	9800      	ldr	r0, [sp, #0]
 801833a:	9901      	ldr	r1, [sp, #4]
 801833c:	2300      	movs	r3, #0
 801833e:	f7e8 f8f5 	bl	800052c <__aeabi_uldivmod>
 8018342:	3d01      	subs	r5, #1
 8018344:	3230      	adds	r2, #48	; 0x30
 8018346:	702a      	strb	r2, [r5, #0]
 8018348:	3401      	adds	r4, #1
 801834a:	2e00      	cmp	r6, #0
 801834c:	d01a      	beq.n	8018384 <_vfiprintf_r+0x7bc>
 801834e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	42a3      	cmp	r3, r4
 8018354:	d116      	bne.n	8018384 <_vfiprintf_r+0x7bc>
 8018356:	2cff      	cmp	r4, #255	; 0xff
 8018358:	d014      	beq.n	8018384 <_vfiprintf_r+0x7bc>
 801835a:	9b01      	ldr	r3, [sp, #4]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d102      	bne.n	8018366 <_vfiprintf_r+0x79e>
 8018360:	9b00      	ldr	r3, [sp, #0]
 8018362:	2b09      	cmp	r3, #9
 8018364:	d90e      	bls.n	8018384 <_vfiprintf_r+0x7bc>
 8018366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801836a:	1aed      	subs	r5, r5, r3
 801836c:	001a      	movs	r2, r3
 801836e:	0028      	movs	r0, r5
 8018370:	f7fb f95b 	bl	801362a <strncpy>
 8018374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018376:	2400      	movs	r4, #0
 8018378:	785b      	ldrb	r3, [r3, #1]
 801837a:	1e5a      	subs	r2, r3, #1
 801837c:	4193      	sbcs	r3, r2
 801837e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018380:	18d3      	adds	r3, r2, r3
 8018382:	930d      	str	r3, [sp, #52]	; 0x34
 8018384:	2300      	movs	r3, #0
 8018386:	9800      	ldr	r0, [sp, #0]
 8018388:	9901      	ldr	r1, [sp, #4]
 801838a:	220a      	movs	r2, #10
 801838c:	f7e8 f8ce 	bl	800052c <__aeabi_uldivmod>
 8018390:	9b01      	ldr	r3, [sp, #4]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d103      	bne.n	801839e <_vfiprintf_r+0x7d6>
 8018396:	9b00      	ldr	r3, [sp, #0]
 8018398:	2b09      	cmp	r3, #9
 801839a:	d800      	bhi.n	801839e <_vfiprintf_r+0x7d6>
 801839c:	e0fa      	b.n	8018594 <_vfiprintf_r+0x9cc>
 801839e:	9000      	str	r0, [sp, #0]
 80183a0:	9101      	str	r1, [sp, #4]
 80183a2:	e7c8      	b.n	8018336 <_vfiprintf_r+0x76e>
 80183a4:	200f      	movs	r0, #15
 80183a6:	9b00      	ldr	r3, [sp, #0]
 80183a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183aa:	4003      	ands	r3, r0
 80183ac:	5cd3      	ldrb	r3, [r2, r3]
 80183ae:	3d01      	subs	r5, #1
 80183b0:	702b      	strb	r3, [r5, #0]
 80183b2:	9b01      	ldr	r3, [sp, #4]
 80183b4:	0719      	lsls	r1, r3, #28
 80183b6:	9b00      	ldr	r3, [sp, #0]
 80183b8:	091a      	lsrs	r2, r3, #4
 80183ba:	9b01      	ldr	r3, [sp, #4]
 80183bc:	4311      	orrs	r1, r2
 80183be:	091b      	lsrs	r3, r3, #4
 80183c0:	9301      	str	r3, [sp, #4]
 80183c2:	000b      	movs	r3, r1
 80183c4:	9a01      	ldr	r2, [sp, #4]
 80183c6:	9100      	str	r1, [sp, #0]
 80183c8:	4313      	orrs	r3, r2
 80183ca:	d1ec      	bne.n	80183a6 <_vfiprintf_r+0x7de>
 80183cc:	e0e2      	b.n	8018594 <_vfiprintf_r+0x9cc>
 80183ce:	ad42      	add	r5, sp, #264	; 0x108
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d000      	beq.n	80183d6 <_vfiprintf_r+0x80e>
 80183d4:	e0de      	b.n	8018594 <_vfiprintf_r+0x9cc>
 80183d6:	07e3      	lsls	r3, r4, #31
 80183d8:	d400      	bmi.n	80183dc <_vfiprintf_r+0x814>
 80183da:	e0db      	b.n	8018594 <_vfiprintf_r+0x9cc>
 80183dc:	25b7      	movs	r5, #183	; 0xb7
 80183de:	ab14      	add	r3, sp, #80	; 0x50
 80183e0:	18ed      	adds	r5, r5, r3
 80183e2:	2330      	movs	r3, #48	; 0x30
 80183e4:	e79f      	b.n	8018326 <_vfiprintf_r+0x75e>
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d100      	bne.n	80183ec <_vfiprintf_r+0x824>
 80183ea:	e09c      	b.n	8018526 <_vfiprintf_r+0x95e>
 80183ec:	ad29      	add	r5, sp, #164	; 0xa4
 80183ee:	702b      	strb	r3, [r5, #0]
 80183f0:	2300      	movs	r3, #0
 80183f2:	aa14      	add	r2, sp, #80	; 0x50
 80183f4:	70d3      	strb	r3, [r2, #3]
 80183f6:	2201      	movs	r2, #1
 80183f8:	9604      	str	r6, [sp, #16]
 80183fa:	9205      	str	r2, [sp, #20]
 80183fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80183fe:	e58f      	b.n	8017f20 <_vfiprintf_r+0x358>
 8018400:	2010      	movs	r0, #16
 8018402:	6050      	str	r0, [r2, #4]
 8018404:	4662      	mov	r2, ip
 8018406:	1812      	adds	r2, r2, r0
 8018408:	9218      	str	r2, [sp, #96]	; 0x60
 801840a:	9317      	str	r3, [sp, #92]	; 0x5c
 801840c:	2b07      	cmp	r3, #7
 801840e:	dd07      	ble.n	8018420 <_vfiprintf_r+0x858>
 8018410:	0039      	movs	r1, r7
 8018412:	9806      	ldr	r0, [sp, #24]
 8018414:	aa16      	add	r2, sp, #88	; 0x58
 8018416:	f7ff fba3 	bl	8017b60 <__sprint_r>
 801841a:	2800      	cmp	r0, #0
 801841c:	d162      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 801841e:	a919      	add	r1, sp, #100	; 0x64
 8018420:	3e10      	subs	r6, #16
 8018422:	9103      	str	r1, [sp, #12]
 8018424:	e59e      	b.n	8017f64 <_vfiprintf_r+0x39c>
 8018426:	0039      	movs	r1, r7
 8018428:	9806      	ldr	r0, [sp, #24]
 801842a:	aa16      	add	r2, sp, #88	; 0x58
 801842c:	f7ff fb98 	bl	8017b60 <__sprint_r>
 8018430:	2800      	cmp	r0, #0
 8018432:	d157      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 8018434:	ab19      	add	r3, sp, #100	; 0x64
 8018436:	e5ca      	b.n	8017fce <_vfiprintf_r+0x406>
 8018438:	0039      	movs	r1, r7
 801843a:	9806      	ldr	r0, [sp, #24]
 801843c:	aa16      	add	r2, sp, #88	; 0x58
 801843e:	f7ff fb8f 	bl	8017b60 <__sprint_r>
 8018442:	2800      	cmp	r0, #0
 8018444:	d14e      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 8018446:	ab19      	add	r3, sp, #100	; 0x64
 8018448:	e5d8      	b.n	8017ffc <_vfiprintf_r+0x434>
 801844a:	2010      	movs	r0, #16
 801844c:	6050      	str	r0, [r2, #4]
 801844e:	4662      	mov	r2, ip
 8018450:	1812      	adds	r2, r2, r0
 8018452:	9218      	str	r2, [sp, #96]	; 0x60
 8018454:	9317      	str	r3, [sp, #92]	; 0x5c
 8018456:	2b07      	cmp	r3, #7
 8018458:	dd07      	ble.n	801846a <_vfiprintf_r+0x8a2>
 801845a:	0039      	movs	r1, r7
 801845c:	9806      	ldr	r0, [sp, #24]
 801845e:	aa16      	add	r2, sp, #88	; 0x58
 8018460:	f7ff fb7e 	bl	8017b60 <__sprint_r>
 8018464:	2800      	cmp	r0, #0
 8018466:	d13d      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 8018468:	a919      	add	r1, sp, #100	; 0x64
 801846a:	3e10      	subs	r6, #16
 801846c:	9103      	str	r1, [sp, #12]
 801846e:	e5ce      	b.n	801800e <_vfiprintf_r+0x446>
 8018470:	2010      	movs	r0, #16
 8018472:	6050      	str	r0, [r2, #4]
 8018474:	4662      	mov	r2, ip
 8018476:	1812      	adds	r2, r2, r0
 8018478:	9218      	str	r2, [sp, #96]	; 0x60
 801847a:	9317      	str	r3, [sp, #92]	; 0x5c
 801847c:	2b07      	cmp	r3, #7
 801847e:	dd07      	ble.n	8018490 <_vfiprintf_r+0x8c8>
 8018480:	0039      	movs	r1, r7
 8018482:	9806      	ldr	r0, [sp, #24]
 8018484:	aa16      	add	r2, sp, #88	; 0x58
 8018486:	f7ff fb6b 	bl	8017b60 <__sprint_r>
 801848a:	2800      	cmp	r0, #0
 801848c:	d12a      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 801848e:	a919      	add	r1, sp, #100	; 0x64
 8018490:	3e10      	subs	r6, #16
 8018492:	9103      	str	r1, [sp, #12]
 8018494:	e5de      	b.n	8018054 <_vfiprintf_r+0x48c>
 8018496:	0039      	movs	r1, r7
 8018498:	9806      	ldr	r0, [sp, #24]
 801849a:	aa16      	add	r2, sp, #88	; 0x58
 801849c:	f7ff fb60 	bl	8017b60 <__sprint_r>
 80184a0:	2800      	cmp	r0, #0
 80184a2:	d11f      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 80184a4:	ab19      	add	r3, sp, #100	; 0x64
 80184a6:	e606      	b.n	80180b6 <_vfiprintf_r+0x4ee>
 80184a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80184ac:	2510      	movs	r5, #16
 80184ae:	1a54      	subs	r4, r2, r1
 80184b0:	2c00      	cmp	r4, #0
 80184b2:	dc00      	bgt.n	80184b6 <_vfiprintf_r+0x8ee>
 80184b4:	e602      	b.n	80180bc <_vfiprintf_r+0x4f4>
 80184b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80184b8:	483b      	ldr	r0, [pc, #236]	; (80185a8 <_vfiprintf_r+0x9e0>)
 80184ba:	9203      	str	r2, [sp, #12]
 80184bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80184be:	3201      	adds	r2, #1
 80184c0:	6018      	str	r0, [r3, #0]
 80184c2:	2c10      	cmp	r4, #16
 80184c4:	dc1e      	bgt.n	8018504 <_vfiprintf_r+0x93c>
 80184c6:	605c      	str	r4, [r3, #4]
 80184c8:	1864      	adds	r4, r4, r1
 80184ca:	9418      	str	r4, [sp, #96]	; 0x60
 80184cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80184ce:	2a07      	cmp	r2, #7
 80184d0:	dc00      	bgt.n	80184d4 <_vfiprintf_r+0x90c>
 80184d2:	e5f3      	b.n	80180bc <_vfiprintf_r+0x4f4>
 80184d4:	0039      	movs	r1, r7
 80184d6:	9806      	ldr	r0, [sp, #24]
 80184d8:	aa16      	add	r2, sp, #88	; 0x58
 80184da:	f7ff fb41 	bl	8017b60 <__sprint_r>
 80184de:	2800      	cmp	r0, #0
 80184e0:	d100      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 80184e2:	e5eb      	b.n	80180bc <_vfiprintf_r+0x4f4>
 80184e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80184e6:	07db      	lsls	r3, r3, #31
 80184e8:	d405      	bmi.n	80184f6 <_vfiprintf_r+0x92e>
 80184ea:	89bb      	ldrh	r3, [r7, #12]
 80184ec:	059b      	lsls	r3, r3, #22
 80184ee:	d402      	bmi.n	80184f6 <_vfiprintf_r+0x92e>
 80184f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80184f2:	f7fe fd54 	bl	8016f9e <__retarget_lock_release_recursive>
 80184f6:	89bb      	ldrh	r3, [r7, #12]
 80184f8:	065b      	lsls	r3, r3, #25
 80184fa:	d401      	bmi.n	8018500 <_vfiprintf_r+0x938>
 80184fc:	f7ff fb9a 	bl	8017c34 <_vfiprintf_r+0x6c>
 8018500:	f7ff fb95 	bl	8017c2e <_vfiprintf_r+0x66>
 8018504:	3110      	adds	r1, #16
 8018506:	605d      	str	r5, [r3, #4]
 8018508:	9118      	str	r1, [sp, #96]	; 0x60
 801850a:	9217      	str	r2, [sp, #92]	; 0x5c
 801850c:	3308      	adds	r3, #8
 801850e:	2a07      	cmp	r2, #7
 8018510:	dd07      	ble.n	8018522 <_vfiprintf_r+0x95a>
 8018512:	0039      	movs	r1, r7
 8018514:	9806      	ldr	r0, [sp, #24]
 8018516:	aa16      	add	r2, sp, #88	; 0x58
 8018518:	f7ff fb22 	bl	8017b60 <__sprint_r>
 801851c:	2800      	cmp	r0, #0
 801851e:	d1e1      	bne.n	80184e4 <_vfiprintf_r+0x91c>
 8018520:	ab19      	add	r3, sp, #100	; 0x64
 8018522:	3c10      	subs	r4, #16
 8018524:	e7c7      	b.n	80184b6 <_vfiprintf_r+0x8ee>
 8018526:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018528:	9300      	str	r3, [sp, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d102      	bne.n	8018534 <_vfiprintf_r+0x96c>
 801852e:	2300      	movs	r3, #0
 8018530:	9317      	str	r3, [sp, #92]	; 0x5c
 8018532:	e7d7      	b.n	80184e4 <_vfiprintf_r+0x91c>
 8018534:	0039      	movs	r1, r7
 8018536:	9806      	ldr	r0, [sp, #24]
 8018538:	aa16      	add	r2, sp, #88	; 0x58
 801853a:	f7ff fb11 	bl	8017b60 <__sprint_r>
 801853e:	2800      	cmp	r0, #0
 8018540:	d0f5      	beq.n	801852e <_vfiprintf_r+0x966>
 8018542:	e7cf      	b.n	80184e4 <_vfiprintf_r+0x91c>
 8018544:	940a      	str	r4, [sp, #40]	; 0x28
 8018546:	2a00      	cmp	r2, #0
 8018548:	d100      	bne.n	801854c <_vfiprintf_r+0x984>
 801854a:	e5fc      	b.n	8018146 <_vfiprintf_r+0x57e>
 801854c:	2b01      	cmp	r3, #1
 801854e:	d100      	bne.n	8018552 <_vfiprintf_r+0x98a>
 8018550:	e6de      	b.n	8018310 <_vfiprintf_r+0x748>
 8018552:	ad42      	add	r5, sp, #264	; 0x108
 8018554:	2b02      	cmp	r3, #2
 8018556:	d100      	bne.n	801855a <_vfiprintf_r+0x992>
 8018558:	e724      	b.n	80183a4 <_vfiprintf_r+0x7dc>
 801855a:	2607      	movs	r6, #7
 801855c:	9901      	ldr	r1, [sp, #4]
 801855e:	9b00      	ldr	r3, [sp, #0]
 8018560:	074c      	lsls	r4, r1, #29
 8018562:	9900      	ldr	r1, [sp, #0]
 8018564:	4033      	ands	r3, r6
 8018566:	08c8      	lsrs	r0, r1, #3
 8018568:	9901      	ldr	r1, [sp, #4]
 801856a:	4304      	orrs	r4, r0
 801856c:	08c9      	lsrs	r1, r1, #3
 801856e:	9101      	str	r1, [sp, #4]
 8018570:	0021      	movs	r1, r4
 8018572:	9801      	ldr	r0, [sp, #4]
 8018574:	002a      	movs	r2, r5
 8018576:	3330      	adds	r3, #48	; 0x30
 8018578:	3d01      	subs	r5, #1
 801857a:	702b      	strb	r3, [r5, #0]
 801857c:	9400      	str	r4, [sp, #0]
 801857e:	4301      	orrs	r1, r0
 8018580:	d1ec      	bne.n	801855c <_vfiprintf_r+0x994>
 8018582:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018584:	07c9      	lsls	r1, r1, #31
 8018586:	d505      	bpl.n	8018594 <_vfiprintf_r+0x9cc>
 8018588:	2b30      	cmp	r3, #48	; 0x30
 801858a:	d003      	beq.n	8018594 <_vfiprintf_r+0x9cc>
 801858c:	2330      	movs	r3, #48	; 0x30
 801858e:	3d01      	subs	r5, #1
 8018590:	702b      	strb	r3, [r5, #0]
 8018592:	1e95      	subs	r5, r2, #2
 8018594:	9b05      	ldr	r3, [sp, #20]
 8018596:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018598:	930b      	str	r3, [sp, #44]	; 0x2c
 801859a:	ab42      	add	r3, sp, #264	; 0x108
 801859c:	1b5b      	subs	r3, r3, r5
 801859e:	9305      	str	r3, [sp, #20]
 80185a0:	e4be      	b.n	8017f20 <_vfiprintf_r+0x358>
 80185a2:	46c0      	nop			; (mov r8, r8)
 80185a4:	0801c549 	.word	0x0801c549
 80185a8:	0801c808 	.word	0x0801c808

080185ac <__sbprintf>:
 80185ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ae:	0015      	movs	r5, r2
 80185b0:	2202      	movs	r2, #2
 80185b2:	4c1e      	ldr	r4, [pc, #120]	; (801862c <__sbprintf+0x80>)
 80185b4:	001f      	movs	r7, r3
 80185b6:	898b      	ldrh	r3, [r1, #12]
 80185b8:	44a5      	add	sp, r4
 80185ba:	4393      	bics	r3, r2
 80185bc:	466a      	mov	r2, sp
 80185be:	8193      	strh	r3, [r2, #12]
 80185c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80185c2:	0006      	movs	r6, r0
 80185c4:	9319      	str	r3, [sp, #100]	; 0x64
 80185c6:	89cb      	ldrh	r3, [r1, #14]
 80185c8:	a816      	add	r0, sp, #88	; 0x58
 80185ca:	81d3      	strh	r3, [r2, #14]
 80185cc:	69cb      	ldr	r3, [r1, #28]
 80185ce:	000c      	movs	r4, r1
 80185d0:	9307      	str	r3, [sp, #28]
 80185d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80185d4:	9309      	str	r3, [sp, #36]	; 0x24
 80185d6:	ab1a      	add	r3, sp, #104	; 0x68
 80185d8:	9300      	str	r3, [sp, #0]
 80185da:	9304      	str	r3, [sp, #16]
 80185dc:	2380      	movs	r3, #128	; 0x80
 80185de:	00db      	lsls	r3, r3, #3
 80185e0:	9302      	str	r3, [sp, #8]
 80185e2:	9305      	str	r3, [sp, #20]
 80185e4:	2300      	movs	r3, #0
 80185e6:	9306      	str	r3, [sp, #24]
 80185e8:	f7fe fcd6 	bl	8016f98 <__retarget_lock_init_recursive>
 80185ec:	002a      	movs	r2, r5
 80185ee:	003b      	movs	r3, r7
 80185f0:	4669      	mov	r1, sp
 80185f2:	0030      	movs	r0, r6
 80185f4:	f7ff fae8 	bl	8017bc8 <_vfiprintf_r>
 80185f8:	1e05      	subs	r5, r0, #0
 80185fa:	db07      	blt.n	801860c <__sbprintf+0x60>
 80185fc:	4669      	mov	r1, sp
 80185fe:	0030      	movs	r0, r6
 8018600:	f000 f91c 	bl	801883c <_fflush_r>
 8018604:	2800      	cmp	r0, #0
 8018606:	d001      	beq.n	801860c <__sbprintf+0x60>
 8018608:	2501      	movs	r5, #1
 801860a:	426d      	negs	r5, r5
 801860c:	466b      	mov	r3, sp
 801860e:	899a      	ldrh	r2, [r3, #12]
 8018610:	2340      	movs	r3, #64	; 0x40
 8018612:	421a      	tst	r2, r3
 8018614:	d002      	beq.n	801861c <__sbprintf+0x70>
 8018616:	89a2      	ldrh	r2, [r4, #12]
 8018618:	4313      	orrs	r3, r2
 801861a:	81a3      	strh	r3, [r4, #12]
 801861c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801861e:	f7fe fcbc 	bl	8016f9a <__retarget_lock_close_recursive>
 8018622:	0028      	movs	r0, r5
 8018624:	4b02      	ldr	r3, [pc, #8]	; (8018630 <__sbprintf+0x84>)
 8018626:	449d      	add	sp, r3
 8018628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801862a:	46c0      	nop			; (mov r8, r8)
 801862c:	fffffb94 	.word	0xfffffb94
 8018630:	0000046c 	.word	0x0000046c

08018634 <__swsetup_r>:
 8018634:	4b30      	ldr	r3, [pc, #192]	; (80186f8 <__swsetup_r+0xc4>)
 8018636:	b570      	push	{r4, r5, r6, lr}
 8018638:	0005      	movs	r5, r0
 801863a:	6818      	ldr	r0, [r3, #0]
 801863c:	000c      	movs	r4, r1
 801863e:	2800      	cmp	r0, #0
 8018640:	d004      	beq.n	801864c <__swsetup_r+0x18>
 8018642:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018644:	2b00      	cmp	r3, #0
 8018646:	d101      	bne.n	801864c <__swsetup_r+0x18>
 8018648:	f000 f96e 	bl	8018928 <__sinit>
 801864c:	230c      	movs	r3, #12
 801864e:	5ee2      	ldrsh	r2, [r4, r3]
 8018650:	b293      	uxth	r3, r2
 8018652:	0711      	lsls	r1, r2, #28
 8018654:	d423      	bmi.n	801869e <__swsetup_r+0x6a>
 8018656:	06d9      	lsls	r1, r3, #27
 8018658:	d407      	bmi.n	801866a <__swsetup_r+0x36>
 801865a:	2309      	movs	r3, #9
 801865c:	2001      	movs	r0, #1
 801865e:	602b      	str	r3, [r5, #0]
 8018660:	3337      	adds	r3, #55	; 0x37
 8018662:	4313      	orrs	r3, r2
 8018664:	81a3      	strh	r3, [r4, #12]
 8018666:	4240      	negs	r0, r0
 8018668:	bd70      	pop	{r4, r5, r6, pc}
 801866a:	075b      	lsls	r3, r3, #29
 801866c:	d513      	bpl.n	8018696 <__swsetup_r+0x62>
 801866e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018670:	2900      	cmp	r1, #0
 8018672:	d008      	beq.n	8018686 <__swsetup_r+0x52>
 8018674:	0023      	movs	r3, r4
 8018676:	3340      	adds	r3, #64	; 0x40
 8018678:	4299      	cmp	r1, r3
 801867a:	d002      	beq.n	8018682 <__swsetup_r+0x4e>
 801867c:	0028      	movs	r0, r5
 801867e:	f7fe f859 	bl	8016734 <_free_r>
 8018682:	2300      	movs	r3, #0
 8018684:	6323      	str	r3, [r4, #48]	; 0x30
 8018686:	2224      	movs	r2, #36	; 0x24
 8018688:	89a3      	ldrh	r3, [r4, #12]
 801868a:	4393      	bics	r3, r2
 801868c:	81a3      	strh	r3, [r4, #12]
 801868e:	2300      	movs	r3, #0
 8018690:	6063      	str	r3, [r4, #4]
 8018692:	6923      	ldr	r3, [r4, #16]
 8018694:	6023      	str	r3, [r4, #0]
 8018696:	2308      	movs	r3, #8
 8018698:	89a2      	ldrh	r2, [r4, #12]
 801869a:	4313      	orrs	r3, r2
 801869c:	81a3      	strh	r3, [r4, #12]
 801869e:	6923      	ldr	r3, [r4, #16]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d10b      	bne.n	80186bc <__swsetup_r+0x88>
 80186a4:	21a0      	movs	r1, #160	; 0xa0
 80186a6:	2280      	movs	r2, #128	; 0x80
 80186a8:	89a3      	ldrh	r3, [r4, #12]
 80186aa:	0089      	lsls	r1, r1, #2
 80186ac:	0092      	lsls	r2, r2, #2
 80186ae:	400b      	ands	r3, r1
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d003      	beq.n	80186bc <__swsetup_r+0x88>
 80186b4:	0021      	movs	r1, r4
 80186b6:	0028      	movs	r0, r5
 80186b8:	f000 fb84 	bl	8018dc4 <__smakebuf_r>
 80186bc:	220c      	movs	r2, #12
 80186be:	5ea3      	ldrsh	r3, [r4, r2]
 80186c0:	2001      	movs	r0, #1
 80186c2:	001a      	movs	r2, r3
 80186c4:	b299      	uxth	r1, r3
 80186c6:	4002      	ands	r2, r0
 80186c8:	4203      	tst	r3, r0
 80186ca:	d00f      	beq.n	80186ec <__swsetup_r+0xb8>
 80186cc:	2200      	movs	r2, #0
 80186ce:	60a2      	str	r2, [r4, #8]
 80186d0:	6962      	ldr	r2, [r4, #20]
 80186d2:	4252      	negs	r2, r2
 80186d4:	61a2      	str	r2, [r4, #24]
 80186d6:	2000      	movs	r0, #0
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	4282      	cmp	r2, r0
 80186dc:	d1c4      	bne.n	8018668 <__swsetup_r+0x34>
 80186de:	060a      	lsls	r2, r1, #24
 80186e0:	d5c2      	bpl.n	8018668 <__swsetup_r+0x34>
 80186e2:	2240      	movs	r2, #64	; 0x40
 80186e4:	4313      	orrs	r3, r2
 80186e6:	81a3      	strh	r3, [r4, #12]
 80186e8:	3801      	subs	r0, #1
 80186ea:	e7bd      	b.n	8018668 <__swsetup_r+0x34>
 80186ec:	0788      	lsls	r0, r1, #30
 80186ee:	d400      	bmi.n	80186f2 <__swsetup_r+0xbe>
 80186f0:	6962      	ldr	r2, [r4, #20]
 80186f2:	60a2      	str	r2, [r4, #8]
 80186f4:	e7ef      	b.n	80186d6 <__swsetup_r+0xa2>
 80186f6:	46c0      	nop			; (mov r8, r8)
 80186f8:	200000d0 	.word	0x200000d0

080186fc <abort>:
 80186fc:	2006      	movs	r0, #6
 80186fe:	b510      	push	{r4, lr}
 8018700:	f000 fbd0 	bl	8018ea4 <raise>
 8018704:	2001      	movs	r0, #1
 8018706:	f000 fdc5 	bl	8019294 <_exit>
	...

0801870c <__sflush_r>:
 801870c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801870e:	230c      	movs	r3, #12
 8018710:	5eca      	ldrsh	r2, [r1, r3]
 8018712:	000c      	movs	r4, r1
 8018714:	0005      	movs	r5, r0
 8018716:	b291      	uxth	r1, r2
 8018718:	0713      	lsls	r3, r2, #28
 801871a:	d467      	bmi.n	80187ec <__sflush_r+0xe0>
 801871c:	2380      	movs	r3, #128	; 0x80
 801871e:	011b      	lsls	r3, r3, #4
 8018720:	4313      	orrs	r3, r2
 8018722:	6862      	ldr	r2, [r4, #4]
 8018724:	81a3      	strh	r3, [r4, #12]
 8018726:	2a00      	cmp	r2, #0
 8018728:	dc04      	bgt.n	8018734 <__sflush_r+0x28>
 801872a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801872c:	2a00      	cmp	r2, #0
 801872e:	dc01      	bgt.n	8018734 <__sflush_r+0x28>
 8018730:	2000      	movs	r0, #0
 8018732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018734:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8018736:	2f00      	cmp	r7, #0
 8018738:	d0fa      	beq.n	8018730 <__sflush_r+0x24>
 801873a:	2200      	movs	r2, #0
 801873c:	2180      	movs	r1, #128	; 0x80
 801873e:	682e      	ldr	r6, [r5, #0]
 8018740:	602a      	str	r2, [r5, #0]
 8018742:	001a      	movs	r2, r3
 8018744:	0149      	lsls	r1, r1, #5
 8018746:	400a      	ands	r2, r1
 8018748:	420b      	tst	r3, r1
 801874a:	d038      	beq.n	80187be <__sflush_r+0xb2>
 801874c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801874e:	89a3      	ldrh	r3, [r4, #12]
 8018750:	075b      	lsls	r3, r3, #29
 8018752:	d506      	bpl.n	8018762 <__sflush_r+0x56>
 8018754:	6863      	ldr	r3, [r4, #4]
 8018756:	1ac0      	subs	r0, r0, r3
 8018758:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801875a:	2b00      	cmp	r3, #0
 801875c:	d001      	beq.n	8018762 <__sflush_r+0x56>
 801875e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018760:	1ac0      	subs	r0, r0, r3
 8018762:	0002      	movs	r2, r0
 8018764:	69e1      	ldr	r1, [r4, #28]
 8018766:	2300      	movs	r3, #0
 8018768:	0028      	movs	r0, r5
 801876a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801876c:	47b8      	blx	r7
 801876e:	89a1      	ldrh	r1, [r4, #12]
 8018770:	1c43      	adds	r3, r0, #1
 8018772:	d106      	bne.n	8018782 <__sflush_r+0x76>
 8018774:	682b      	ldr	r3, [r5, #0]
 8018776:	2b1d      	cmp	r3, #29
 8018778:	d835      	bhi.n	80187e6 <__sflush_r+0xda>
 801877a:	4a2e      	ldr	r2, [pc, #184]	; (8018834 <__sflush_r+0x128>)
 801877c:	40da      	lsrs	r2, r3
 801877e:	07d3      	lsls	r3, r2, #31
 8018780:	d531      	bpl.n	80187e6 <__sflush_r+0xda>
 8018782:	2200      	movs	r2, #0
 8018784:	4b2c      	ldr	r3, [pc, #176]	; (8018838 <__sflush_r+0x12c>)
 8018786:	6062      	str	r2, [r4, #4]
 8018788:	400b      	ands	r3, r1
 801878a:	6922      	ldr	r2, [r4, #16]
 801878c:	b21b      	sxth	r3, r3
 801878e:	81a3      	strh	r3, [r4, #12]
 8018790:	6022      	str	r2, [r4, #0]
 8018792:	04db      	lsls	r3, r3, #19
 8018794:	d505      	bpl.n	80187a2 <__sflush_r+0x96>
 8018796:	1c43      	adds	r3, r0, #1
 8018798:	d102      	bne.n	80187a0 <__sflush_r+0x94>
 801879a:	682b      	ldr	r3, [r5, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d100      	bne.n	80187a2 <__sflush_r+0x96>
 80187a0:	6520      	str	r0, [r4, #80]	; 0x50
 80187a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80187a4:	602e      	str	r6, [r5, #0]
 80187a6:	2900      	cmp	r1, #0
 80187a8:	d0c2      	beq.n	8018730 <__sflush_r+0x24>
 80187aa:	0023      	movs	r3, r4
 80187ac:	3340      	adds	r3, #64	; 0x40
 80187ae:	4299      	cmp	r1, r3
 80187b0:	d002      	beq.n	80187b8 <__sflush_r+0xac>
 80187b2:	0028      	movs	r0, r5
 80187b4:	f7fd ffbe 	bl	8016734 <_free_r>
 80187b8:	2000      	movs	r0, #0
 80187ba:	6320      	str	r0, [r4, #48]	; 0x30
 80187bc:	e7b9      	b.n	8018732 <__sflush_r+0x26>
 80187be:	2301      	movs	r3, #1
 80187c0:	0028      	movs	r0, r5
 80187c2:	69e1      	ldr	r1, [r4, #28]
 80187c4:	47b8      	blx	r7
 80187c6:	1c43      	adds	r3, r0, #1
 80187c8:	d1c1      	bne.n	801874e <__sflush_r+0x42>
 80187ca:	682b      	ldr	r3, [r5, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d0be      	beq.n	801874e <__sflush_r+0x42>
 80187d0:	2b1d      	cmp	r3, #29
 80187d2:	d001      	beq.n	80187d8 <__sflush_r+0xcc>
 80187d4:	2b16      	cmp	r3, #22
 80187d6:	d101      	bne.n	80187dc <__sflush_r+0xd0>
 80187d8:	602e      	str	r6, [r5, #0]
 80187da:	e7a9      	b.n	8018730 <__sflush_r+0x24>
 80187dc:	2340      	movs	r3, #64	; 0x40
 80187de:	89a2      	ldrh	r2, [r4, #12]
 80187e0:	4313      	orrs	r3, r2
 80187e2:	81a3      	strh	r3, [r4, #12]
 80187e4:	e7a5      	b.n	8018732 <__sflush_r+0x26>
 80187e6:	2340      	movs	r3, #64	; 0x40
 80187e8:	430b      	orrs	r3, r1
 80187ea:	e7fa      	b.n	80187e2 <__sflush_r+0xd6>
 80187ec:	6927      	ldr	r7, [r4, #16]
 80187ee:	2f00      	cmp	r7, #0
 80187f0:	d09e      	beq.n	8018730 <__sflush_r+0x24>
 80187f2:	6823      	ldr	r3, [r4, #0]
 80187f4:	6027      	str	r7, [r4, #0]
 80187f6:	1bdb      	subs	r3, r3, r7
 80187f8:	9301      	str	r3, [sp, #4]
 80187fa:	2300      	movs	r3, #0
 80187fc:	078a      	lsls	r2, r1, #30
 80187fe:	d100      	bne.n	8018802 <__sflush_r+0xf6>
 8018800:	6963      	ldr	r3, [r4, #20]
 8018802:	60a3      	str	r3, [r4, #8]
 8018804:	9b01      	ldr	r3, [sp, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	dc00      	bgt.n	801880c <__sflush_r+0x100>
 801880a:	e791      	b.n	8018730 <__sflush_r+0x24>
 801880c:	003a      	movs	r2, r7
 801880e:	0028      	movs	r0, r5
 8018810:	9b01      	ldr	r3, [sp, #4]
 8018812:	69e1      	ldr	r1, [r4, #28]
 8018814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018816:	47b0      	blx	r6
 8018818:	2800      	cmp	r0, #0
 801881a:	dc06      	bgt.n	801882a <__sflush_r+0x11e>
 801881c:	2340      	movs	r3, #64	; 0x40
 801881e:	2001      	movs	r0, #1
 8018820:	89a2      	ldrh	r2, [r4, #12]
 8018822:	4240      	negs	r0, r0
 8018824:	4313      	orrs	r3, r2
 8018826:	81a3      	strh	r3, [r4, #12]
 8018828:	e783      	b.n	8018732 <__sflush_r+0x26>
 801882a:	9b01      	ldr	r3, [sp, #4]
 801882c:	183f      	adds	r7, r7, r0
 801882e:	1a1b      	subs	r3, r3, r0
 8018830:	9301      	str	r3, [sp, #4]
 8018832:	e7e7      	b.n	8018804 <__sflush_r+0xf8>
 8018834:	20400001 	.word	0x20400001
 8018838:	fffff7ff 	.word	0xfffff7ff

0801883c <_fflush_r>:
 801883c:	b570      	push	{r4, r5, r6, lr}
 801883e:	0005      	movs	r5, r0
 8018840:	000c      	movs	r4, r1
 8018842:	2800      	cmp	r0, #0
 8018844:	d004      	beq.n	8018850 <_fflush_r+0x14>
 8018846:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018848:	2b00      	cmp	r3, #0
 801884a:	d101      	bne.n	8018850 <_fflush_r+0x14>
 801884c:	f000 f86c 	bl	8018928 <__sinit>
 8018850:	220c      	movs	r2, #12
 8018852:	5ea3      	ldrsh	r3, [r4, r2]
 8018854:	1e1e      	subs	r6, r3, #0
 8018856:	d015      	beq.n	8018884 <_fflush_r+0x48>
 8018858:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801885a:	07d2      	lsls	r2, r2, #31
 801885c:	d404      	bmi.n	8018868 <_fflush_r+0x2c>
 801885e:	059b      	lsls	r3, r3, #22
 8018860:	d402      	bmi.n	8018868 <_fflush_r+0x2c>
 8018862:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018864:	f7fe fb9a 	bl	8016f9c <__retarget_lock_acquire_recursive>
 8018868:	0021      	movs	r1, r4
 801886a:	0028      	movs	r0, r5
 801886c:	f7ff ff4e 	bl	801870c <__sflush_r>
 8018870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018872:	0006      	movs	r6, r0
 8018874:	07db      	lsls	r3, r3, #31
 8018876:	d405      	bmi.n	8018884 <_fflush_r+0x48>
 8018878:	89a3      	ldrh	r3, [r4, #12]
 801887a:	059b      	lsls	r3, r3, #22
 801887c:	d402      	bmi.n	8018884 <_fflush_r+0x48>
 801887e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018880:	f7fe fb8d 	bl	8016f9e <__retarget_lock_release_recursive>
 8018884:	0030      	movs	r0, r6
 8018886:	bd70      	pop	{r4, r5, r6, pc}

08018888 <std>:
 8018888:	2300      	movs	r3, #0
 801888a:	b510      	push	{r4, lr}
 801888c:	0004      	movs	r4, r0
 801888e:	6003      	str	r3, [r0, #0]
 8018890:	6043      	str	r3, [r0, #4]
 8018892:	6083      	str	r3, [r0, #8]
 8018894:	8181      	strh	r1, [r0, #12]
 8018896:	6643      	str	r3, [r0, #100]	; 0x64
 8018898:	0019      	movs	r1, r3
 801889a:	81c2      	strh	r2, [r0, #14]
 801889c:	6103      	str	r3, [r0, #16]
 801889e:	2208      	movs	r2, #8
 80188a0:	6143      	str	r3, [r0, #20]
 80188a2:	6183      	str	r3, [r0, #24]
 80188a4:	305c      	adds	r0, #92	; 0x5c
 80188a6:	f7fa fc7a 	bl	801319e <memset>
 80188aa:	0020      	movs	r0, r4
 80188ac:	4b06      	ldr	r3, [pc, #24]	; (80188c8 <std+0x40>)
 80188ae:	61e4      	str	r4, [r4, #28]
 80188b0:	6223      	str	r3, [r4, #32]
 80188b2:	4b06      	ldr	r3, [pc, #24]	; (80188cc <std+0x44>)
 80188b4:	3058      	adds	r0, #88	; 0x58
 80188b6:	6263      	str	r3, [r4, #36]	; 0x24
 80188b8:	4b05      	ldr	r3, [pc, #20]	; (80188d0 <std+0x48>)
 80188ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80188bc:	4b05      	ldr	r3, [pc, #20]	; (80188d4 <std+0x4c>)
 80188be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80188c0:	f7fe fb6a 	bl	8016f98 <__retarget_lock_init_recursive>
 80188c4:	bd10      	pop	{r4, pc}
 80188c6:	46c0      	nop			; (mov r8, r8)
 80188c8:	08018ee5 	.word	0x08018ee5
 80188cc:	08018f0d 	.word	0x08018f0d
 80188d0:	08018f45 	.word	0x08018f45
 80188d4:	08018f71 	.word	0x08018f71

080188d8 <_cleanup_r>:
 80188d8:	b510      	push	{r4, lr}
 80188da:	4902      	ldr	r1, [pc, #8]	; (80188e4 <_cleanup_r+0xc>)
 80188dc:	f000 fa1e 	bl	8018d1c <_fwalk_reent>
 80188e0:	bd10      	pop	{r4, pc}
 80188e2:	46c0      	nop			; (mov r8, r8)
 80188e4:	0801909d 	.word	0x0801909d

080188e8 <__sfp_lock_acquire>:
 80188e8:	b510      	push	{r4, lr}
 80188ea:	4802      	ldr	r0, [pc, #8]	; (80188f4 <__sfp_lock_acquire+0xc>)
 80188ec:	f7fe fb56 	bl	8016f9c <__retarget_lock_acquire_recursive>
 80188f0:	bd10      	pop	{r4, pc}
 80188f2:	46c0      	nop			; (mov r8, r8)
 80188f4:	20006dd6 	.word	0x20006dd6

080188f8 <__sfp_lock_release>:
 80188f8:	b510      	push	{r4, lr}
 80188fa:	4802      	ldr	r0, [pc, #8]	; (8018904 <__sfp_lock_release+0xc>)
 80188fc:	f7fe fb4f 	bl	8016f9e <__retarget_lock_release_recursive>
 8018900:	bd10      	pop	{r4, pc}
 8018902:	46c0      	nop			; (mov r8, r8)
 8018904:	20006dd6 	.word	0x20006dd6

08018908 <__sinit_lock_acquire>:
 8018908:	b510      	push	{r4, lr}
 801890a:	4802      	ldr	r0, [pc, #8]	; (8018914 <__sinit_lock_acquire+0xc>)
 801890c:	f7fe fb46 	bl	8016f9c <__retarget_lock_acquire_recursive>
 8018910:	bd10      	pop	{r4, pc}
 8018912:	46c0      	nop			; (mov r8, r8)
 8018914:	20006dd7 	.word	0x20006dd7

08018918 <__sinit_lock_release>:
 8018918:	b510      	push	{r4, lr}
 801891a:	4802      	ldr	r0, [pc, #8]	; (8018924 <__sinit_lock_release+0xc>)
 801891c:	f7fe fb3f 	bl	8016f9e <__retarget_lock_release_recursive>
 8018920:	bd10      	pop	{r4, pc}
 8018922:	46c0      	nop			; (mov r8, r8)
 8018924:	20006dd7 	.word	0x20006dd7

08018928 <__sinit>:
 8018928:	b510      	push	{r4, lr}
 801892a:	0004      	movs	r4, r0
 801892c:	f7ff ffec 	bl	8018908 <__sinit_lock_acquire>
 8018930:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018932:	2a00      	cmp	r2, #0
 8018934:	d002      	beq.n	801893c <__sinit+0x14>
 8018936:	f7ff ffef 	bl	8018918 <__sinit_lock_release>
 801893a:	bd10      	pop	{r4, pc}
 801893c:	4b0e      	ldr	r3, [pc, #56]	; (8018978 <__sinit+0x50>)
 801893e:	2103      	movs	r1, #3
 8018940:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018942:	23b8      	movs	r3, #184	; 0xb8
 8018944:	009b      	lsls	r3, r3, #2
 8018946:	50e2      	str	r2, [r4, r3]
 8018948:	3304      	adds	r3, #4
 801894a:	50e1      	str	r1, [r4, r3]
 801894c:	3308      	adds	r3, #8
 801894e:	18e1      	adds	r1, r4, r3
 8018950:	3b04      	subs	r3, #4
 8018952:	50e1      	str	r1, [r4, r3]
 8018954:	6860      	ldr	r0, [r4, #4]
 8018956:	2104      	movs	r1, #4
 8018958:	f7ff ff96 	bl	8018888 <std>
 801895c:	2201      	movs	r2, #1
 801895e:	2109      	movs	r1, #9
 8018960:	68a0      	ldr	r0, [r4, #8]
 8018962:	f7ff ff91 	bl	8018888 <std>
 8018966:	2202      	movs	r2, #2
 8018968:	2112      	movs	r1, #18
 801896a:	68e0      	ldr	r0, [r4, #12]
 801896c:	f7ff ff8c 	bl	8018888 <std>
 8018970:	2301      	movs	r3, #1
 8018972:	63a3      	str	r3, [r4, #56]	; 0x38
 8018974:	e7df      	b.n	8018936 <__sinit+0xe>
 8018976:	46c0      	nop			; (mov r8, r8)
 8018978:	080188d9 	.word	0x080188d9

0801897c <__fputwc>:
 801897c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801897e:	b085      	sub	sp, #20
 8018980:	000e      	movs	r6, r1
 8018982:	0015      	movs	r5, r2
 8018984:	9001      	str	r0, [sp, #4]
 8018986:	f7fe fafb 	bl	8016f80 <__locale_mb_cur_max>
 801898a:	0004      	movs	r4, r0
 801898c:	2801      	cmp	r0, #1
 801898e:	d119      	bne.n	80189c4 <__fputwc+0x48>
 8018990:	1e73      	subs	r3, r6, #1
 8018992:	2bfe      	cmp	r3, #254	; 0xfe
 8018994:	d816      	bhi.n	80189c4 <__fputwc+0x48>
 8018996:	ab02      	add	r3, sp, #8
 8018998:	711e      	strb	r6, [r3, #4]
 801899a:	2700      	movs	r7, #0
 801899c:	42a7      	cmp	r7, r4
 801899e:	d020      	beq.n	80189e2 <__fputwc+0x66>
 80189a0:	ab03      	add	r3, sp, #12
 80189a2:	5dd9      	ldrb	r1, [r3, r7]
 80189a4:	68ab      	ldr	r3, [r5, #8]
 80189a6:	3b01      	subs	r3, #1
 80189a8:	60ab      	str	r3, [r5, #8]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	da04      	bge.n	80189b8 <__fputwc+0x3c>
 80189ae:	69aa      	ldr	r2, [r5, #24]
 80189b0:	4293      	cmp	r3, r2
 80189b2:	db19      	blt.n	80189e8 <__fputwc+0x6c>
 80189b4:	290a      	cmp	r1, #10
 80189b6:	d017      	beq.n	80189e8 <__fputwc+0x6c>
 80189b8:	682b      	ldr	r3, [r5, #0]
 80189ba:	1c5a      	adds	r2, r3, #1
 80189bc:	602a      	str	r2, [r5, #0]
 80189be:	7019      	strb	r1, [r3, #0]
 80189c0:	3701      	adds	r7, #1
 80189c2:	e7eb      	b.n	801899c <__fputwc+0x20>
 80189c4:	002b      	movs	r3, r5
 80189c6:	0032      	movs	r2, r6
 80189c8:	9801      	ldr	r0, [sp, #4]
 80189ca:	335c      	adds	r3, #92	; 0x5c
 80189cc:	a903      	add	r1, sp, #12
 80189ce:	f000 fb27 	bl	8019020 <_wcrtomb_r>
 80189d2:	0004      	movs	r4, r0
 80189d4:	1c43      	adds	r3, r0, #1
 80189d6:	d1e0      	bne.n	801899a <__fputwc+0x1e>
 80189d8:	2340      	movs	r3, #64	; 0x40
 80189da:	0006      	movs	r6, r0
 80189dc:	89aa      	ldrh	r2, [r5, #12]
 80189de:	4313      	orrs	r3, r2
 80189e0:	81ab      	strh	r3, [r5, #12]
 80189e2:	0030      	movs	r0, r6
 80189e4:	b005      	add	sp, #20
 80189e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189e8:	002a      	movs	r2, r5
 80189ea:	9801      	ldr	r0, [sp, #4]
 80189ec:	f000 fac6 	bl	8018f7c <__swbuf_r>
 80189f0:	1c43      	adds	r3, r0, #1
 80189f2:	d1e5      	bne.n	80189c0 <__fputwc+0x44>
 80189f4:	0006      	movs	r6, r0
 80189f6:	e7f4      	b.n	80189e2 <__fputwc+0x66>

080189f8 <_fputwc_r>:
 80189f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80189fa:	b570      	push	{r4, r5, r6, lr}
 80189fc:	0005      	movs	r5, r0
 80189fe:	000e      	movs	r6, r1
 8018a00:	0014      	movs	r4, r2
 8018a02:	07db      	lsls	r3, r3, #31
 8018a04:	d405      	bmi.n	8018a12 <_fputwc_r+0x1a>
 8018a06:	8993      	ldrh	r3, [r2, #12]
 8018a08:	059b      	lsls	r3, r3, #22
 8018a0a:	d402      	bmi.n	8018a12 <_fputwc_r+0x1a>
 8018a0c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8018a0e:	f7fe fac5 	bl	8016f9c <__retarget_lock_acquire_recursive>
 8018a12:	230c      	movs	r3, #12
 8018a14:	5ee2      	ldrsh	r2, [r4, r3]
 8018a16:	2380      	movs	r3, #128	; 0x80
 8018a18:	019b      	lsls	r3, r3, #6
 8018a1a:	421a      	tst	r2, r3
 8018a1c:	d104      	bne.n	8018a28 <_fputwc_r+0x30>
 8018a1e:	431a      	orrs	r2, r3
 8018a20:	81a2      	strh	r2, [r4, #12]
 8018a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018a24:	4313      	orrs	r3, r2
 8018a26:	6663      	str	r3, [r4, #100]	; 0x64
 8018a28:	0028      	movs	r0, r5
 8018a2a:	0022      	movs	r2, r4
 8018a2c:	0031      	movs	r1, r6
 8018a2e:	f7ff ffa5 	bl	801897c <__fputwc>
 8018a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018a34:	0005      	movs	r5, r0
 8018a36:	07db      	lsls	r3, r3, #31
 8018a38:	d405      	bmi.n	8018a46 <_fputwc_r+0x4e>
 8018a3a:	89a3      	ldrh	r3, [r4, #12]
 8018a3c:	059b      	lsls	r3, r3, #22
 8018a3e:	d402      	bmi.n	8018a46 <_fputwc_r+0x4e>
 8018a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a42:	f7fe faac 	bl	8016f9e <__retarget_lock_release_recursive>
 8018a46:	0028      	movs	r0, r5
 8018a48:	bd70      	pop	{r4, r5, r6, pc}
	...

08018a4c <__sfvwrite_r>:
 8018a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a4e:	6893      	ldr	r3, [r2, #8]
 8018a50:	b087      	sub	sp, #28
 8018a52:	000c      	movs	r4, r1
 8018a54:	0017      	movs	r7, r2
 8018a56:	9003      	str	r0, [sp, #12]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d102      	bne.n	8018a62 <__sfvwrite_r+0x16>
 8018a5c:	2000      	movs	r0, #0
 8018a5e:	b007      	add	sp, #28
 8018a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a62:	898b      	ldrh	r3, [r1, #12]
 8018a64:	071b      	lsls	r3, r3, #28
 8018a66:	d559      	bpl.n	8018b1c <__sfvwrite_r+0xd0>
 8018a68:	690b      	ldr	r3, [r1, #16]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d056      	beq.n	8018b1c <__sfvwrite_r+0xd0>
 8018a6e:	683b      	ldr	r3, [r7, #0]
 8018a70:	2202      	movs	r2, #2
 8018a72:	9302      	str	r3, [sp, #8]
 8018a74:	89a3      	ldrh	r3, [r4, #12]
 8018a76:	0018      	movs	r0, r3
 8018a78:	4010      	ands	r0, r2
 8018a7a:	4213      	tst	r3, r2
 8018a7c:	d175      	bne.n	8018b6a <__sfvwrite_r+0x11e>
 8018a7e:	2201      	movs	r2, #1
 8018a80:	2101      	movs	r1, #1
 8018a82:	401a      	ands	r2, r3
 8018a84:	420b      	tst	r3, r1
 8018a86:	d100      	bne.n	8018a8a <__sfvwrite_r+0x3e>
 8018a88:	e0ad      	b.n	8018be6 <__sfvwrite_r+0x19a>
 8018a8a:	0006      	movs	r6, r0
 8018a8c:	9001      	str	r0, [sp, #4]
 8018a8e:	9004      	str	r0, [sp, #16]
 8018a90:	9b04      	ldr	r3, [sp, #16]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d100      	bne.n	8018a98 <__sfvwrite_r+0x4c>
 8018a96:	e116      	b.n	8018cc6 <__sfvwrite_r+0x27a>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	d10c      	bne.n	8018ab6 <__sfvwrite_r+0x6a>
 8018a9c:	001a      	movs	r2, r3
 8018a9e:	210a      	movs	r1, #10
 8018aa0:	0030      	movs	r0, r6
 8018aa2:	f7fe fa8f 	bl	8016fc4 <memchr>
 8018aa6:	9b04      	ldr	r3, [sp, #16]
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	9301      	str	r3, [sp, #4]
 8018aac:	2800      	cmp	r0, #0
 8018aae:	d002      	beq.n	8018ab6 <__sfvwrite_r+0x6a>
 8018ab0:	3001      	adds	r0, #1
 8018ab2:	1b83      	subs	r3, r0, r6
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	9b01      	ldr	r3, [sp, #4]
 8018ab8:	9a04      	ldr	r2, [sp, #16]
 8018aba:	9305      	str	r3, [sp, #20]
 8018abc:	4293      	cmp	r3, r2
 8018abe:	d900      	bls.n	8018ac2 <__sfvwrite_r+0x76>
 8018ac0:	9205      	str	r2, [sp, #20]
 8018ac2:	6820      	ldr	r0, [r4, #0]
 8018ac4:	6922      	ldr	r2, [r4, #16]
 8018ac6:	6963      	ldr	r3, [r4, #20]
 8018ac8:	4290      	cmp	r0, r2
 8018aca:	d800      	bhi.n	8018ace <__sfvwrite_r+0x82>
 8018acc:	e104      	b.n	8018cd8 <__sfvwrite_r+0x28c>
 8018ace:	68a2      	ldr	r2, [r4, #8]
 8018ad0:	189d      	adds	r5, r3, r2
 8018ad2:	9a05      	ldr	r2, [sp, #20]
 8018ad4:	42aa      	cmp	r2, r5
 8018ad6:	dc00      	bgt.n	8018ada <__sfvwrite_r+0x8e>
 8018ad8:	e0fe      	b.n	8018cd8 <__sfvwrite_r+0x28c>
 8018ada:	0031      	movs	r1, r6
 8018adc:	002a      	movs	r2, r5
 8018ade:	f7fe fa7c 	bl	8016fda <memmove>
 8018ae2:	6823      	ldr	r3, [r4, #0]
 8018ae4:	0021      	movs	r1, r4
 8018ae6:	195b      	adds	r3, r3, r5
 8018ae8:	9803      	ldr	r0, [sp, #12]
 8018aea:	6023      	str	r3, [r4, #0]
 8018aec:	f7ff fea6 	bl	801883c <_fflush_r>
 8018af0:	2800      	cmp	r0, #0
 8018af2:	d173      	bne.n	8018bdc <__sfvwrite_r+0x190>
 8018af4:	9b01      	ldr	r3, [sp, #4]
 8018af6:	2001      	movs	r0, #1
 8018af8:	1b5b      	subs	r3, r3, r5
 8018afa:	9301      	str	r3, [sp, #4]
 8018afc:	d105      	bne.n	8018b0a <__sfvwrite_r+0xbe>
 8018afe:	0021      	movs	r1, r4
 8018b00:	9803      	ldr	r0, [sp, #12]
 8018b02:	f7ff fe9b 	bl	801883c <_fflush_r>
 8018b06:	2800      	cmp	r0, #0
 8018b08:	d168      	bne.n	8018bdc <__sfvwrite_r+0x190>
 8018b0a:	9b04      	ldr	r3, [sp, #16]
 8018b0c:	1976      	adds	r6, r6, r5
 8018b0e:	1b5b      	subs	r3, r3, r5
 8018b10:	9304      	str	r3, [sp, #16]
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	1b5d      	subs	r5, r3, r5
 8018b16:	60bd      	str	r5, [r7, #8]
 8018b18:	d1ba      	bne.n	8018a90 <__sfvwrite_r+0x44>
 8018b1a:	e79f      	b.n	8018a5c <__sfvwrite_r+0x10>
 8018b1c:	0021      	movs	r1, r4
 8018b1e:	9803      	ldr	r0, [sp, #12]
 8018b20:	f7ff fd88 	bl	8018634 <__swsetup_r>
 8018b24:	2800      	cmp	r0, #0
 8018b26:	d0a2      	beq.n	8018a6e <__sfvwrite_r+0x22>
 8018b28:	2001      	movs	r0, #1
 8018b2a:	4240      	negs	r0, r0
 8018b2c:	e797      	b.n	8018a5e <__sfvwrite_r+0x12>
 8018b2e:	9b02      	ldr	r3, [sp, #8]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	9301      	str	r3, [sp, #4]
 8018b34:	9b02      	ldr	r3, [sp, #8]
 8018b36:	685d      	ldr	r5, [r3, #4]
 8018b38:	3308      	adds	r3, #8
 8018b3a:	9302      	str	r3, [sp, #8]
 8018b3c:	2d00      	cmp	r5, #0
 8018b3e:	d0f6      	beq.n	8018b2e <__sfvwrite_r+0xe2>
 8018b40:	4a72      	ldr	r2, [pc, #456]	; (8018d0c <__sfvwrite_r+0x2c0>)
 8018b42:	002b      	movs	r3, r5
 8018b44:	4295      	cmp	r5, r2
 8018b46:	d900      	bls.n	8018b4a <__sfvwrite_r+0xfe>
 8018b48:	0013      	movs	r3, r2
 8018b4a:	9a01      	ldr	r2, [sp, #4]
 8018b4c:	69e1      	ldr	r1, [r4, #28]
 8018b4e:	9803      	ldr	r0, [sp, #12]
 8018b50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018b52:	47b0      	blx	r6
 8018b54:	2800      	cmp	r0, #0
 8018b56:	dd41      	ble.n	8018bdc <__sfvwrite_r+0x190>
 8018b58:	9b01      	ldr	r3, [sp, #4]
 8018b5a:	1a2d      	subs	r5, r5, r0
 8018b5c:	181b      	adds	r3, r3, r0
 8018b5e:	9301      	str	r3, [sp, #4]
 8018b60:	68bb      	ldr	r3, [r7, #8]
 8018b62:	1a18      	subs	r0, r3, r0
 8018b64:	60b8      	str	r0, [r7, #8]
 8018b66:	d1e9      	bne.n	8018b3c <__sfvwrite_r+0xf0>
 8018b68:	e778      	b.n	8018a5c <__sfvwrite_r+0x10>
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	001d      	movs	r5, r3
 8018b6e:	9301      	str	r3, [sp, #4]
 8018b70:	e7e4      	b.n	8018b3c <__sfvwrite_r+0xf0>
 8018b72:	9b02      	ldr	r3, [sp, #8]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	9304      	str	r3, [sp, #16]
 8018b78:	9b02      	ldr	r3, [sp, #8]
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	9301      	str	r3, [sp, #4]
 8018b7e:	9b02      	ldr	r3, [sp, #8]
 8018b80:	3308      	adds	r3, #8
 8018b82:	9302      	str	r3, [sp, #8]
 8018b84:	9b01      	ldr	r3, [sp, #4]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d0f3      	beq.n	8018b72 <__sfvwrite_r+0x126>
 8018b8a:	2380      	movs	r3, #128	; 0x80
 8018b8c:	89a2      	ldrh	r2, [r4, #12]
 8018b8e:	009b      	lsls	r3, r3, #2
 8018b90:	6820      	ldr	r0, [r4, #0]
 8018b92:	68a5      	ldr	r5, [r4, #8]
 8018b94:	421a      	tst	r2, r3
 8018b96:	d064      	beq.n	8018c62 <__sfvwrite_r+0x216>
 8018b98:	9b01      	ldr	r3, [sp, #4]
 8018b9a:	429d      	cmp	r5, r3
 8018b9c:	d838      	bhi.n	8018c10 <__sfvwrite_r+0x1c4>
 8018b9e:	2390      	movs	r3, #144	; 0x90
 8018ba0:	00db      	lsls	r3, r3, #3
 8018ba2:	421a      	tst	r2, r3
 8018ba4:	d034      	beq.n	8018c10 <__sfvwrite_r+0x1c4>
 8018ba6:	6921      	ldr	r1, [r4, #16]
 8018ba8:	1a43      	subs	r3, r0, r1
 8018baa:	2003      	movs	r0, #3
 8018bac:	9305      	str	r3, [sp, #20]
 8018bae:	6963      	ldr	r3, [r4, #20]
 8018bb0:	4358      	muls	r0, r3
 8018bb2:	9b05      	ldr	r3, [sp, #20]
 8018bb4:	0fc6      	lsrs	r6, r0, #31
 8018bb6:	1836      	adds	r6, r6, r0
 8018bb8:	9801      	ldr	r0, [sp, #4]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	181b      	adds	r3, r3, r0
 8018bbe:	1076      	asrs	r6, r6, #1
 8018bc0:	42b3      	cmp	r3, r6
 8018bc2:	d900      	bls.n	8018bc6 <__sfvwrite_r+0x17a>
 8018bc4:	001e      	movs	r6, r3
 8018bc6:	0553      	lsls	r3, r2, #21
 8018bc8:	d53c      	bpl.n	8018c44 <__sfvwrite_r+0x1f8>
 8018bca:	0031      	movs	r1, r6
 8018bcc:	9803      	ldr	r0, [sp, #12]
 8018bce:	f7fa f8bd 	bl	8012d4c <_malloc_r>
 8018bd2:	1e05      	subs	r5, r0, #0
 8018bd4:	d10a      	bne.n	8018bec <__sfvwrite_r+0x1a0>
 8018bd6:	230c      	movs	r3, #12
 8018bd8:	9a03      	ldr	r2, [sp, #12]
 8018bda:	6013      	str	r3, [r2, #0]
 8018bdc:	2340      	movs	r3, #64	; 0x40
 8018bde:	89a2      	ldrh	r2, [r4, #12]
 8018be0:	4313      	orrs	r3, r2
 8018be2:	81a3      	strh	r3, [r4, #12]
 8018be4:	e7a0      	b.n	8018b28 <__sfvwrite_r+0xdc>
 8018be6:	9204      	str	r2, [sp, #16]
 8018be8:	9201      	str	r2, [sp, #4]
 8018bea:	e7cb      	b.n	8018b84 <__sfvwrite_r+0x138>
 8018bec:	9a05      	ldr	r2, [sp, #20]
 8018bee:	6921      	ldr	r1, [r4, #16]
 8018bf0:	f7fa facc 	bl	801318c <memcpy>
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	4a46      	ldr	r2, [pc, #280]	; (8018d10 <__sfvwrite_r+0x2c4>)
 8018bf8:	401a      	ands	r2, r3
 8018bfa:	2380      	movs	r3, #128	; 0x80
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	81a3      	strh	r3, [r4, #12]
 8018c00:	9b05      	ldr	r3, [sp, #20]
 8018c02:	6125      	str	r5, [r4, #16]
 8018c04:	18ed      	adds	r5, r5, r3
 8018c06:	6025      	str	r5, [r4, #0]
 8018c08:	6166      	str	r6, [r4, #20]
 8018c0a:	9d01      	ldr	r5, [sp, #4]
 8018c0c:	1af6      	subs	r6, r6, r3
 8018c0e:	60a6      	str	r6, [r4, #8]
 8018c10:	9e01      	ldr	r6, [sp, #4]
 8018c12:	42b5      	cmp	r5, r6
 8018c14:	d900      	bls.n	8018c18 <__sfvwrite_r+0x1cc>
 8018c16:	0035      	movs	r5, r6
 8018c18:	002a      	movs	r2, r5
 8018c1a:	9904      	ldr	r1, [sp, #16]
 8018c1c:	6820      	ldr	r0, [r4, #0]
 8018c1e:	f7fe f9dc 	bl	8016fda <memmove>
 8018c22:	68a3      	ldr	r3, [r4, #8]
 8018c24:	1b5b      	subs	r3, r3, r5
 8018c26:	60a3      	str	r3, [r4, #8]
 8018c28:	6823      	ldr	r3, [r4, #0]
 8018c2a:	195d      	adds	r5, r3, r5
 8018c2c:	6025      	str	r5, [r4, #0]
 8018c2e:	9b04      	ldr	r3, [sp, #16]
 8018c30:	199b      	adds	r3, r3, r6
 8018c32:	9304      	str	r3, [sp, #16]
 8018c34:	9b01      	ldr	r3, [sp, #4]
 8018c36:	1b9b      	subs	r3, r3, r6
 8018c38:	9301      	str	r3, [sp, #4]
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	1b9e      	subs	r6, r3, r6
 8018c3e:	60be      	str	r6, [r7, #8]
 8018c40:	d1a0      	bne.n	8018b84 <__sfvwrite_r+0x138>
 8018c42:	e70b      	b.n	8018a5c <__sfvwrite_r+0x10>
 8018c44:	0032      	movs	r2, r6
 8018c46:	9803      	ldr	r0, [sp, #12]
 8018c48:	f7fa fae6 	bl	8013218 <_realloc_r>
 8018c4c:	1e05      	subs	r5, r0, #0
 8018c4e:	d1d7      	bne.n	8018c00 <__sfvwrite_r+0x1b4>
 8018c50:	6921      	ldr	r1, [r4, #16]
 8018c52:	9803      	ldr	r0, [sp, #12]
 8018c54:	f7fd fd6e 	bl	8016734 <_free_r>
 8018c58:	2280      	movs	r2, #128	; 0x80
 8018c5a:	89a3      	ldrh	r3, [r4, #12]
 8018c5c:	4393      	bics	r3, r2
 8018c5e:	81a3      	strh	r3, [r4, #12]
 8018c60:	e7b9      	b.n	8018bd6 <__sfvwrite_r+0x18a>
 8018c62:	6923      	ldr	r3, [r4, #16]
 8018c64:	4283      	cmp	r3, r0
 8018c66:	d303      	bcc.n	8018c70 <__sfvwrite_r+0x224>
 8018c68:	6966      	ldr	r6, [r4, #20]
 8018c6a:	9b01      	ldr	r3, [sp, #4]
 8018c6c:	429e      	cmp	r6, r3
 8018c6e:	d917      	bls.n	8018ca0 <__sfvwrite_r+0x254>
 8018c70:	9b01      	ldr	r3, [sp, #4]
 8018c72:	429d      	cmp	r5, r3
 8018c74:	d900      	bls.n	8018c78 <__sfvwrite_r+0x22c>
 8018c76:	001d      	movs	r5, r3
 8018c78:	002a      	movs	r2, r5
 8018c7a:	9904      	ldr	r1, [sp, #16]
 8018c7c:	f7fe f9ad 	bl	8016fda <memmove>
 8018c80:	68a3      	ldr	r3, [r4, #8]
 8018c82:	6822      	ldr	r2, [r4, #0]
 8018c84:	1b5b      	subs	r3, r3, r5
 8018c86:	1952      	adds	r2, r2, r5
 8018c88:	002e      	movs	r6, r5
 8018c8a:	60a3      	str	r3, [r4, #8]
 8018c8c:	6022      	str	r2, [r4, #0]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d1cd      	bne.n	8018c2e <__sfvwrite_r+0x1e2>
 8018c92:	0021      	movs	r1, r4
 8018c94:	9803      	ldr	r0, [sp, #12]
 8018c96:	f7ff fdd1 	bl	801883c <_fflush_r>
 8018c9a:	2800      	cmp	r0, #0
 8018c9c:	d0c7      	beq.n	8018c2e <__sfvwrite_r+0x1e2>
 8018c9e:	e79d      	b.n	8018bdc <__sfvwrite_r+0x190>
 8018ca0:	9a01      	ldr	r2, [sp, #4]
 8018ca2:	4b1c      	ldr	r3, [pc, #112]	; (8018d14 <__sfvwrite_r+0x2c8>)
 8018ca4:	0010      	movs	r0, r2
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d900      	bls.n	8018cac <__sfvwrite_r+0x260>
 8018caa:	481b      	ldr	r0, [pc, #108]	; (8018d18 <__sfvwrite_r+0x2cc>)
 8018cac:	0031      	movs	r1, r6
 8018cae:	f7e7 fad9 	bl	8000264 <__divsi3>
 8018cb2:	0033      	movs	r3, r6
 8018cb4:	9a04      	ldr	r2, [sp, #16]
 8018cb6:	4343      	muls	r3, r0
 8018cb8:	69e1      	ldr	r1, [r4, #28]
 8018cba:	9803      	ldr	r0, [sp, #12]
 8018cbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018cbe:	47a8      	blx	r5
 8018cc0:	1e06      	subs	r6, r0, #0
 8018cc2:	dcb4      	bgt.n	8018c2e <__sfvwrite_r+0x1e2>
 8018cc4:	e78a      	b.n	8018bdc <__sfvwrite_r+0x190>
 8018cc6:	9b02      	ldr	r3, [sp, #8]
 8018cc8:	2000      	movs	r0, #0
 8018cca:	681e      	ldr	r6, [r3, #0]
 8018ccc:	685b      	ldr	r3, [r3, #4]
 8018cce:	9304      	str	r3, [sp, #16]
 8018cd0:	9b02      	ldr	r3, [sp, #8]
 8018cd2:	3308      	adds	r3, #8
 8018cd4:	9302      	str	r3, [sp, #8]
 8018cd6:	e6db      	b.n	8018a90 <__sfvwrite_r+0x44>
 8018cd8:	9a05      	ldr	r2, [sp, #20]
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	dc08      	bgt.n	8018cf0 <__sfvwrite_r+0x2a4>
 8018cde:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018ce0:	0032      	movs	r2, r6
 8018ce2:	69e1      	ldr	r1, [r4, #28]
 8018ce4:	9803      	ldr	r0, [sp, #12]
 8018ce6:	47a8      	blx	r5
 8018ce8:	1e05      	subs	r5, r0, #0
 8018cea:	dd00      	ble.n	8018cee <__sfvwrite_r+0x2a2>
 8018cec:	e702      	b.n	8018af4 <__sfvwrite_r+0xa8>
 8018cee:	e775      	b.n	8018bdc <__sfvwrite_r+0x190>
 8018cf0:	9a05      	ldr	r2, [sp, #20]
 8018cf2:	0031      	movs	r1, r6
 8018cf4:	f7fe f971 	bl	8016fda <memmove>
 8018cf8:	9a05      	ldr	r2, [sp, #20]
 8018cfa:	68a3      	ldr	r3, [r4, #8]
 8018cfc:	0015      	movs	r5, r2
 8018cfe:	1a9b      	subs	r3, r3, r2
 8018d00:	60a3      	str	r3, [r4, #8]
 8018d02:	6823      	ldr	r3, [r4, #0]
 8018d04:	189b      	adds	r3, r3, r2
 8018d06:	6023      	str	r3, [r4, #0]
 8018d08:	e6f4      	b.n	8018af4 <__sfvwrite_r+0xa8>
 8018d0a:	46c0      	nop			; (mov r8, r8)
 8018d0c:	7ffffc00 	.word	0x7ffffc00
 8018d10:	fffffb7f 	.word	0xfffffb7f
 8018d14:	7ffffffe 	.word	0x7ffffffe
 8018d18:	7fffffff 	.word	0x7fffffff

08018d1c <_fwalk_reent>:
 8018d1c:	23b8      	movs	r3, #184	; 0xb8
 8018d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d20:	0006      	movs	r6, r0
 8018d22:	2700      	movs	r7, #0
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	9101      	str	r1, [sp, #4]
 8018d28:	18c4      	adds	r4, r0, r3
 8018d2a:	6863      	ldr	r3, [r4, #4]
 8018d2c:	68a5      	ldr	r5, [r4, #8]
 8018d2e:	9300      	str	r3, [sp, #0]
 8018d30:	9b00      	ldr	r3, [sp, #0]
 8018d32:	3b01      	subs	r3, #1
 8018d34:	9300      	str	r3, [sp, #0]
 8018d36:	d504      	bpl.n	8018d42 <_fwalk_reent+0x26>
 8018d38:	6824      	ldr	r4, [r4, #0]
 8018d3a:	2c00      	cmp	r4, #0
 8018d3c:	d1f5      	bne.n	8018d2a <_fwalk_reent+0xe>
 8018d3e:	0038      	movs	r0, r7
 8018d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018d42:	89ab      	ldrh	r3, [r5, #12]
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d908      	bls.n	8018d5a <_fwalk_reent+0x3e>
 8018d48:	220e      	movs	r2, #14
 8018d4a:	5eab      	ldrsh	r3, [r5, r2]
 8018d4c:	3301      	adds	r3, #1
 8018d4e:	d004      	beq.n	8018d5a <_fwalk_reent+0x3e>
 8018d50:	0029      	movs	r1, r5
 8018d52:	0030      	movs	r0, r6
 8018d54:	9b01      	ldr	r3, [sp, #4]
 8018d56:	4798      	blx	r3
 8018d58:	4307      	orrs	r7, r0
 8018d5a:	3568      	adds	r5, #104	; 0x68
 8018d5c:	e7e8      	b.n	8018d30 <_fwalk_reent+0x14>
	...

08018d60 <__swhatbuf_r>:
 8018d60:	b570      	push	{r4, r5, r6, lr}
 8018d62:	000e      	movs	r6, r1
 8018d64:	001d      	movs	r5, r3
 8018d66:	230e      	movs	r3, #14
 8018d68:	5ec9      	ldrsh	r1, [r1, r3]
 8018d6a:	0014      	movs	r4, r2
 8018d6c:	b096      	sub	sp, #88	; 0x58
 8018d6e:	2900      	cmp	r1, #0
 8018d70:	da0c      	bge.n	8018d8c <__swhatbuf_r+0x2c>
 8018d72:	230c      	movs	r3, #12
 8018d74:	5ef1      	ldrsh	r1, [r6, r3]
 8018d76:	2280      	movs	r2, #128	; 0x80
 8018d78:	2300      	movs	r3, #0
 8018d7a:	0008      	movs	r0, r1
 8018d7c:	602b      	str	r3, [r5, #0]
 8018d7e:	4010      	ands	r0, r2
 8018d80:	4211      	tst	r1, r2
 8018d82:	d117      	bne.n	8018db4 <__swhatbuf_r+0x54>
 8018d84:	2380      	movs	r3, #128	; 0x80
 8018d86:	00db      	lsls	r3, r3, #3
 8018d88:	6023      	str	r3, [r4, #0]
 8018d8a:	e016      	b.n	8018dba <__swhatbuf_r+0x5a>
 8018d8c:	466a      	mov	r2, sp
 8018d8e:	f000 f9e5 	bl	801915c <_fstat_r>
 8018d92:	2800      	cmp	r0, #0
 8018d94:	dbed      	blt.n	8018d72 <__swhatbuf_r+0x12>
 8018d96:	23f0      	movs	r3, #240	; 0xf0
 8018d98:	9901      	ldr	r1, [sp, #4]
 8018d9a:	021b      	lsls	r3, r3, #8
 8018d9c:	4019      	ands	r1, r3
 8018d9e:	4b08      	ldr	r3, [pc, #32]	; (8018dc0 <__swhatbuf_r+0x60>)
 8018da0:	2080      	movs	r0, #128	; 0x80
 8018da2:	18c9      	adds	r1, r1, r3
 8018da4:	424b      	negs	r3, r1
 8018da6:	4159      	adcs	r1, r3
 8018da8:	2380      	movs	r3, #128	; 0x80
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	6029      	str	r1, [r5, #0]
 8018dae:	0100      	lsls	r0, r0, #4
 8018db0:	6023      	str	r3, [r4, #0]
 8018db2:	e002      	b.n	8018dba <__swhatbuf_r+0x5a>
 8018db4:	2240      	movs	r2, #64	; 0x40
 8018db6:	0018      	movs	r0, r3
 8018db8:	6022      	str	r2, [r4, #0]
 8018dba:	b016      	add	sp, #88	; 0x58
 8018dbc:	bd70      	pop	{r4, r5, r6, pc}
 8018dbe:	46c0      	nop			; (mov r8, r8)
 8018dc0:	ffffe000 	.word	0xffffe000

08018dc4 <__smakebuf_r>:
 8018dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018dc6:	2602      	movs	r6, #2
 8018dc8:	898b      	ldrh	r3, [r1, #12]
 8018dca:	0005      	movs	r5, r0
 8018dcc:	000c      	movs	r4, r1
 8018dce:	4233      	tst	r3, r6
 8018dd0:	d006      	beq.n	8018de0 <__smakebuf_r+0x1c>
 8018dd2:	0023      	movs	r3, r4
 8018dd4:	3343      	adds	r3, #67	; 0x43
 8018dd6:	6023      	str	r3, [r4, #0]
 8018dd8:	6123      	str	r3, [r4, #16]
 8018dda:	2301      	movs	r3, #1
 8018ddc:	6163      	str	r3, [r4, #20]
 8018dde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018de0:	466a      	mov	r2, sp
 8018de2:	ab01      	add	r3, sp, #4
 8018de4:	f7ff ffbc 	bl	8018d60 <__swhatbuf_r>
 8018de8:	9900      	ldr	r1, [sp, #0]
 8018dea:	0007      	movs	r7, r0
 8018dec:	0028      	movs	r0, r5
 8018dee:	f7f9 ffad 	bl	8012d4c <_malloc_r>
 8018df2:	2800      	cmp	r0, #0
 8018df4:	d108      	bne.n	8018e08 <__smakebuf_r+0x44>
 8018df6:	220c      	movs	r2, #12
 8018df8:	5ea3      	ldrsh	r3, [r4, r2]
 8018dfa:	059a      	lsls	r2, r3, #22
 8018dfc:	d4ef      	bmi.n	8018dde <__smakebuf_r+0x1a>
 8018dfe:	2203      	movs	r2, #3
 8018e00:	4393      	bics	r3, r2
 8018e02:	431e      	orrs	r6, r3
 8018e04:	81a6      	strh	r6, [r4, #12]
 8018e06:	e7e4      	b.n	8018dd2 <__smakebuf_r+0xe>
 8018e08:	4b0f      	ldr	r3, [pc, #60]	; (8018e48 <__smakebuf_r+0x84>)
 8018e0a:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018e0c:	2380      	movs	r3, #128	; 0x80
 8018e0e:	89a2      	ldrh	r2, [r4, #12]
 8018e10:	6020      	str	r0, [r4, #0]
 8018e12:	4313      	orrs	r3, r2
 8018e14:	81a3      	strh	r3, [r4, #12]
 8018e16:	9b00      	ldr	r3, [sp, #0]
 8018e18:	6120      	str	r0, [r4, #16]
 8018e1a:	6163      	str	r3, [r4, #20]
 8018e1c:	9b01      	ldr	r3, [sp, #4]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d00d      	beq.n	8018e3e <__smakebuf_r+0x7a>
 8018e22:	0028      	movs	r0, r5
 8018e24:	230e      	movs	r3, #14
 8018e26:	5ee1      	ldrsh	r1, [r4, r3]
 8018e28:	f000 f9aa 	bl	8019180 <_isatty_r>
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d006      	beq.n	8018e3e <__smakebuf_r+0x7a>
 8018e30:	2203      	movs	r2, #3
 8018e32:	89a3      	ldrh	r3, [r4, #12]
 8018e34:	4393      	bics	r3, r2
 8018e36:	001a      	movs	r2, r3
 8018e38:	2301      	movs	r3, #1
 8018e3a:	4313      	orrs	r3, r2
 8018e3c:	81a3      	strh	r3, [r4, #12]
 8018e3e:	89a0      	ldrh	r0, [r4, #12]
 8018e40:	4307      	orrs	r7, r0
 8018e42:	81a7      	strh	r7, [r4, #12]
 8018e44:	e7cb      	b.n	8018dde <__smakebuf_r+0x1a>
 8018e46:	46c0      	nop			; (mov r8, r8)
 8018e48:	080188d9 	.word	0x080188d9

08018e4c <_raise_r>:
 8018e4c:	b570      	push	{r4, r5, r6, lr}
 8018e4e:	0004      	movs	r4, r0
 8018e50:	000d      	movs	r5, r1
 8018e52:	291f      	cmp	r1, #31
 8018e54:	d904      	bls.n	8018e60 <_raise_r+0x14>
 8018e56:	2316      	movs	r3, #22
 8018e58:	6003      	str	r3, [r0, #0]
 8018e5a:	2001      	movs	r0, #1
 8018e5c:	4240      	negs	r0, r0
 8018e5e:	bd70      	pop	{r4, r5, r6, pc}
 8018e60:	23b7      	movs	r3, #183	; 0xb7
 8018e62:	009b      	lsls	r3, r3, #2
 8018e64:	58c3      	ldr	r3, [r0, r3]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d004      	beq.n	8018e74 <_raise_r+0x28>
 8018e6a:	008a      	lsls	r2, r1, #2
 8018e6c:	189b      	adds	r3, r3, r2
 8018e6e:	681a      	ldr	r2, [r3, #0]
 8018e70:	2a00      	cmp	r2, #0
 8018e72:	d108      	bne.n	8018e86 <_raise_r+0x3a>
 8018e74:	0020      	movs	r0, r4
 8018e76:	f000 f831 	bl	8018edc <_getpid_r>
 8018e7a:	002a      	movs	r2, r5
 8018e7c:	0001      	movs	r1, r0
 8018e7e:	0020      	movs	r0, r4
 8018e80:	f000 f81a 	bl	8018eb8 <_kill_r>
 8018e84:	e7eb      	b.n	8018e5e <_raise_r+0x12>
 8018e86:	2000      	movs	r0, #0
 8018e88:	2a01      	cmp	r2, #1
 8018e8a:	d0e8      	beq.n	8018e5e <_raise_r+0x12>
 8018e8c:	1c51      	adds	r1, r2, #1
 8018e8e:	d103      	bne.n	8018e98 <_raise_r+0x4c>
 8018e90:	2316      	movs	r3, #22
 8018e92:	3001      	adds	r0, #1
 8018e94:	6023      	str	r3, [r4, #0]
 8018e96:	e7e2      	b.n	8018e5e <_raise_r+0x12>
 8018e98:	2400      	movs	r4, #0
 8018e9a:	0028      	movs	r0, r5
 8018e9c:	601c      	str	r4, [r3, #0]
 8018e9e:	4790      	blx	r2
 8018ea0:	0020      	movs	r0, r4
 8018ea2:	e7dc      	b.n	8018e5e <_raise_r+0x12>

08018ea4 <raise>:
 8018ea4:	b510      	push	{r4, lr}
 8018ea6:	4b03      	ldr	r3, [pc, #12]	; (8018eb4 <raise+0x10>)
 8018ea8:	0001      	movs	r1, r0
 8018eaa:	6818      	ldr	r0, [r3, #0]
 8018eac:	f7ff ffce 	bl	8018e4c <_raise_r>
 8018eb0:	bd10      	pop	{r4, pc}
 8018eb2:	46c0      	nop			; (mov r8, r8)
 8018eb4:	200000d0 	.word	0x200000d0

08018eb8 <_kill_r>:
 8018eb8:	2300      	movs	r3, #0
 8018eba:	b570      	push	{r4, r5, r6, lr}
 8018ebc:	4d06      	ldr	r5, [pc, #24]	; (8018ed8 <_kill_r+0x20>)
 8018ebe:	0004      	movs	r4, r0
 8018ec0:	0008      	movs	r0, r1
 8018ec2:	0011      	movs	r1, r2
 8018ec4:	602b      	str	r3, [r5, #0]
 8018ec6:	f000 f9b5 	bl	8019234 <_kill>
 8018eca:	1c43      	adds	r3, r0, #1
 8018ecc:	d103      	bne.n	8018ed6 <_kill_r+0x1e>
 8018ece:	682b      	ldr	r3, [r5, #0]
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d000      	beq.n	8018ed6 <_kill_r+0x1e>
 8018ed4:	6023      	str	r3, [r4, #0]
 8018ed6:	bd70      	pop	{r4, r5, r6, pc}
 8018ed8:	20006dd8 	.word	0x20006dd8

08018edc <_getpid_r>:
 8018edc:	b510      	push	{r4, lr}
 8018ede:	f000 f999 	bl	8019214 <_getpid>
 8018ee2:	bd10      	pop	{r4, pc}

08018ee4 <__sread>:
 8018ee4:	b570      	push	{r4, r5, r6, lr}
 8018ee6:	000c      	movs	r4, r1
 8018ee8:	250e      	movs	r5, #14
 8018eea:	5f49      	ldrsh	r1, [r1, r5]
 8018eec:	f000 f96e 	bl	80191cc <_read_r>
 8018ef0:	2800      	cmp	r0, #0
 8018ef2:	db03      	blt.n	8018efc <__sread+0x18>
 8018ef4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018ef6:	181b      	adds	r3, r3, r0
 8018ef8:	6523      	str	r3, [r4, #80]	; 0x50
 8018efa:	bd70      	pop	{r4, r5, r6, pc}
 8018efc:	89a3      	ldrh	r3, [r4, #12]
 8018efe:	4a02      	ldr	r2, [pc, #8]	; (8018f08 <__sread+0x24>)
 8018f00:	4013      	ands	r3, r2
 8018f02:	81a3      	strh	r3, [r4, #12]
 8018f04:	e7f9      	b.n	8018efa <__sread+0x16>
 8018f06:	46c0      	nop			; (mov r8, r8)
 8018f08:	ffffefff 	.word	0xffffefff

08018f0c <__swrite>:
 8018f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f0e:	001f      	movs	r7, r3
 8018f10:	898b      	ldrh	r3, [r1, #12]
 8018f12:	0005      	movs	r5, r0
 8018f14:	000c      	movs	r4, r1
 8018f16:	0016      	movs	r6, r2
 8018f18:	05db      	lsls	r3, r3, #23
 8018f1a:	d505      	bpl.n	8018f28 <__swrite+0x1c>
 8018f1c:	230e      	movs	r3, #14
 8018f1e:	5ec9      	ldrsh	r1, [r1, r3]
 8018f20:	2200      	movs	r2, #0
 8018f22:	2302      	movs	r3, #2
 8018f24:	f000 f93e 	bl	80191a4 <_lseek_r>
 8018f28:	89a3      	ldrh	r3, [r4, #12]
 8018f2a:	4a05      	ldr	r2, [pc, #20]	; (8018f40 <__swrite+0x34>)
 8018f2c:	0028      	movs	r0, r5
 8018f2e:	4013      	ands	r3, r2
 8018f30:	81a3      	strh	r3, [r4, #12]
 8018f32:	0032      	movs	r2, r6
 8018f34:	230e      	movs	r3, #14
 8018f36:	5ee1      	ldrsh	r1, [r4, r3]
 8018f38:	003b      	movs	r3, r7
 8018f3a:	f000 f889 	bl	8019050 <_write_r>
 8018f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f40:	ffffefff 	.word	0xffffefff

08018f44 <__sseek>:
 8018f44:	b570      	push	{r4, r5, r6, lr}
 8018f46:	000c      	movs	r4, r1
 8018f48:	250e      	movs	r5, #14
 8018f4a:	5f49      	ldrsh	r1, [r1, r5]
 8018f4c:	f000 f92a 	bl	80191a4 <_lseek_r>
 8018f50:	89a3      	ldrh	r3, [r4, #12]
 8018f52:	1c42      	adds	r2, r0, #1
 8018f54:	d103      	bne.n	8018f5e <__sseek+0x1a>
 8018f56:	4a05      	ldr	r2, [pc, #20]	; (8018f6c <__sseek+0x28>)
 8018f58:	4013      	ands	r3, r2
 8018f5a:	81a3      	strh	r3, [r4, #12]
 8018f5c:	bd70      	pop	{r4, r5, r6, pc}
 8018f5e:	2280      	movs	r2, #128	; 0x80
 8018f60:	0152      	lsls	r2, r2, #5
 8018f62:	4313      	orrs	r3, r2
 8018f64:	81a3      	strh	r3, [r4, #12]
 8018f66:	6520      	str	r0, [r4, #80]	; 0x50
 8018f68:	e7f8      	b.n	8018f5c <__sseek+0x18>
 8018f6a:	46c0      	nop			; (mov r8, r8)
 8018f6c:	ffffefff 	.word	0xffffefff

08018f70 <__sclose>:
 8018f70:	b510      	push	{r4, lr}
 8018f72:	230e      	movs	r3, #14
 8018f74:	5ec9      	ldrsh	r1, [r1, r3]
 8018f76:	f000 f87f 	bl	8019078 <_close_r>
 8018f7a:	bd10      	pop	{r4, pc}

08018f7c <__swbuf_r>:
 8018f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f7e:	0006      	movs	r6, r0
 8018f80:	000d      	movs	r5, r1
 8018f82:	0014      	movs	r4, r2
 8018f84:	2800      	cmp	r0, #0
 8018f86:	d004      	beq.n	8018f92 <__swbuf_r+0x16>
 8018f88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d101      	bne.n	8018f92 <__swbuf_r+0x16>
 8018f8e:	f7ff fccb 	bl	8018928 <__sinit>
 8018f92:	69a3      	ldr	r3, [r4, #24]
 8018f94:	60a3      	str	r3, [r4, #8]
 8018f96:	89a3      	ldrh	r3, [r4, #12]
 8018f98:	071b      	lsls	r3, r3, #28
 8018f9a:	d52e      	bpl.n	8018ffa <__swbuf_r+0x7e>
 8018f9c:	6923      	ldr	r3, [r4, #16]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d02b      	beq.n	8018ffa <__swbuf_r+0x7e>
 8018fa2:	230c      	movs	r3, #12
 8018fa4:	5ee2      	ldrsh	r2, [r4, r3]
 8018fa6:	2380      	movs	r3, #128	; 0x80
 8018fa8:	019b      	lsls	r3, r3, #6
 8018faa:	b2ef      	uxtb	r7, r5
 8018fac:	b2ed      	uxtb	r5, r5
 8018fae:	421a      	tst	r2, r3
 8018fb0:	d02c      	beq.n	801900c <__swbuf_r+0x90>
 8018fb2:	6823      	ldr	r3, [r4, #0]
 8018fb4:	6922      	ldr	r2, [r4, #16]
 8018fb6:	1a98      	subs	r0, r3, r2
 8018fb8:	6963      	ldr	r3, [r4, #20]
 8018fba:	4283      	cmp	r3, r0
 8018fbc:	dc05      	bgt.n	8018fca <__swbuf_r+0x4e>
 8018fbe:	0021      	movs	r1, r4
 8018fc0:	0030      	movs	r0, r6
 8018fc2:	f7ff fc3b 	bl	801883c <_fflush_r>
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	d11d      	bne.n	8019006 <__swbuf_r+0x8a>
 8018fca:	68a3      	ldr	r3, [r4, #8]
 8018fcc:	3001      	adds	r0, #1
 8018fce:	3b01      	subs	r3, #1
 8018fd0:	60a3      	str	r3, [r4, #8]
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	1c5a      	adds	r2, r3, #1
 8018fd6:	6022      	str	r2, [r4, #0]
 8018fd8:	701f      	strb	r7, [r3, #0]
 8018fda:	6963      	ldr	r3, [r4, #20]
 8018fdc:	4283      	cmp	r3, r0
 8018fde:	d004      	beq.n	8018fea <__swbuf_r+0x6e>
 8018fe0:	89a3      	ldrh	r3, [r4, #12]
 8018fe2:	07db      	lsls	r3, r3, #31
 8018fe4:	d507      	bpl.n	8018ff6 <__swbuf_r+0x7a>
 8018fe6:	2d0a      	cmp	r5, #10
 8018fe8:	d105      	bne.n	8018ff6 <__swbuf_r+0x7a>
 8018fea:	0021      	movs	r1, r4
 8018fec:	0030      	movs	r0, r6
 8018fee:	f7ff fc25 	bl	801883c <_fflush_r>
 8018ff2:	2800      	cmp	r0, #0
 8018ff4:	d107      	bne.n	8019006 <__swbuf_r+0x8a>
 8018ff6:	0028      	movs	r0, r5
 8018ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ffa:	0021      	movs	r1, r4
 8018ffc:	0030      	movs	r0, r6
 8018ffe:	f7ff fb19 	bl	8018634 <__swsetup_r>
 8019002:	2800      	cmp	r0, #0
 8019004:	d0cd      	beq.n	8018fa2 <__swbuf_r+0x26>
 8019006:	2501      	movs	r5, #1
 8019008:	426d      	negs	r5, r5
 801900a:	e7f4      	b.n	8018ff6 <__swbuf_r+0x7a>
 801900c:	4313      	orrs	r3, r2
 801900e:	81a3      	strh	r3, [r4, #12]
 8019010:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019012:	4b02      	ldr	r3, [pc, #8]	; (801901c <__swbuf_r+0xa0>)
 8019014:	4013      	ands	r3, r2
 8019016:	6663      	str	r3, [r4, #100]	; 0x64
 8019018:	e7cb      	b.n	8018fb2 <__swbuf_r+0x36>
 801901a:	46c0      	nop			; (mov r8, r8)
 801901c:	ffffdfff 	.word	0xffffdfff

08019020 <_wcrtomb_r>:
 8019020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019022:	001d      	movs	r5, r3
 8019024:	4b09      	ldr	r3, [pc, #36]	; (801904c <_wcrtomb_r+0x2c>)
 8019026:	0004      	movs	r4, r0
 8019028:	33e0      	adds	r3, #224	; 0xe0
 801902a:	681e      	ldr	r6, [r3, #0]
 801902c:	002b      	movs	r3, r5
 801902e:	2900      	cmp	r1, #0
 8019030:	d101      	bne.n	8019036 <_wcrtomb_r+0x16>
 8019032:	000a      	movs	r2, r1
 8019034:	a901      	add	r1, sp, #4
 8019036:	0020      	movs	r0, r4
 8019038:	47b0      	blx	r6
 801903a:	1c43      	adds	r3, r0, #1
 801903c:	d103      	bne.n	8019046 <_wcrtomb_r+0x26>
 801903e:	2300      	movs	r3, #0
 8019040:	602b      	str	r3, [r5, #0]
 8019042:	338a      	adds	r3, #138	; 0x8a
 8019044:	6023      	str	r3, [r4, #0]
 8019046:	b004      	add	sp, #16
 8019048:	bd70      	pop	{r4, r5, r6, pc}
 801904a:	46c0      	nop			; (mov r8, r8)
 801904c:	20000918 	.word	0x20000918

08019050 <_write_r>:
 8019050:	b570      	push	{r4, r5, r6, lr}
 8019052:	0004      	movs	r4, r0
 8019054:	0008      	movs	r0, r1
 8019056:	0011      	movs	r1, r2
 8019058:	001a      	movs	r2, r3
 801905a:	2300      	movs	r3, #0
 801905c:	4d05      	ldr	r5, [pc, #20]	; (8019074 <_write_r+0x24>)
 801905e:	602b      	str	r3, [r5, #0]
 8019060:	f000 f910 	bl	8019284 <_write>
 8019064:	1c43      	adds	r3, r0, #1
 8019066:	d103      	bne.n	8019070 <_write_r+0x20>
 8019068:	682b      	ldr	r3, [r5, #0]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d000      	beq.n	8019070 <_write_r+0x20>
 801906e:	6023      	str	r3, [r4, #0]
 8019070:	bd70      	pop	{r4, r5, r6, pc}
 8019072:	46c0      	nop			; (mov r8, r8)
 8019074:	20006dd8 	.word	0x20006dd8

08019078 <_close_r>:
 8019078:	2300      	movs	r3, #0
 801907a:	b570      	push	{r4, r5, r6, lr}
 801907c:	4d06      	ldr	r5, [pc, #24]	; (8019098 <_close_r+0x20>)
 801907e:	0004      	movs	r4, r0
 8019080:	0008      	movs	r0, r1
 8019082:	602b      	str	r3, [r5, #0]
 8019084:	f000 f8b6 	bl	80191f4 <_close>
 8019088:	1c43      	adds	r3, r0, #1
 801908a:	d103      	bne.n	8019094 <_close_r+0x1c>
 801908c:	682b      	ldr	r3, [r5, #0]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d000      	beq.n	8019094 <_close_r+0x1c>
 8019092:	6023      	str	r3, [r4, #0]
 8019094:	bd70      	pop	{r4, r5, r6, pc}
 8019096:	46c0      	nop			; (mov r8, r8)
 8019098:	20006dd8 	.word	0x20006dd8

0801909c <_fclose_r>:
 801909c:	b570      	push	{r4, r5, r6, lr}
 801909e:	0005      	movs	r5, r0
 80190a0:	1e0c      	subs	r4, r1, #0
 80190a2:	d102      	bne.n	80190aa <_fclose_r+0xe>
 80190a4:	2600      	movs	r6, #0
 80190a6:	0030      	movs	r0, r6
 80190a8:	bd70      	pop	{r4, r5, r6, pc}
 80190aa:	2800      	cmp	r0, #0
 80190ac:	d004      	beq.n	80190b8 <_fclose_r+0x1c>
 80190ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d101      	bne.n	80190b8 <_fclose_r+0x1c>
 80190b4:	f7ff fc38 	bl	8018928 <__sinit>
 80190b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80190ba:	07db      	lsls	r3, r3, #31
 80190bc:	d405      	bmi.n	80190ca <_fclose_r+0x2e>
 80190be:	89a3      	ldrh	r3, [r4, #12]
 80190c0:	059b      	lsls	r3, r3, #22
 80190c2:	d402      	bmi.n	80190ca <_fclose_r+0x2e>
 80190c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80190c6:	f7fd ff69 	bl	8016f9c <__retarget_lock_acquire_recursive>
 80190ca:	220c      	movs	r2, #12
 80190cc:	5ea3      	ldrsh	r3, [r4, r2]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d109      	bne.n	80190e6 <_fclose_r+0x4a>
 80190d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80190d4:	3301      	adds	r3, #1
 80190d6:	0016      	movs	r6, r2
 80190d8:	401e      	ands	r6, r3
 80190da:	421a      	tst	r2, r3
 80190dc:	d1e2      	bne.n	80190a4 <_fclose_r+0x8>
 80190de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80190e0:	f7fd ff5d 	bl	8016f9e <__retarget_lock_release_recursive>
 80190e4:	e7df      	b.n	80190a6 <_fclose_r+0xa>
 80190e6:	0021      	movs	r1, r4
 80190e8:	0028      	movs	r0, r5
 80190ea:	f7ff fb0f 	bl	801870c <__sflush_r>
 80190ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80190f0:	0006      	movs	r6, r0
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d006      	beq.n	8019104 <_fclose_r+0x68>
 80190f6:	0028      	movs	r0, r5
 80190f8:	69e1      	ldr	r1, [r4, #28]
 80190fa:	4798      	blx	r3
 80190fc:	2800      	cmp	r0, #0
 80190fe:	da01      	bge.n	8019104 <_fclose_r+0x68>
 8019100:	2601      	movs	r6, #1
 8019102:	4276      	negs	r6, r6
 8019104:	89a3      	ldrh	r3, [r4, #12]
 8019106:	061b      	lsls	r3, r3, #24
 8019108:	d503      	bpl.n	8019112 <_fclose_r+0x76>
 801910a:	0028      	movs	r0, r5
 801910c:	6921      	ldr	r1, [r4, #16]
 801910e:	f7fd fb11 	bl	8016734 <_free_r>
 8019112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019114:	2900      	cmp	r1, #0
 8019116:	d008      	beq.n	801912a <_fclose_r+0x8e>
 8019118:	0023      	movs	r3, r4
 801911a:	3340      	adds	r3, #64	; 0x40
 801911c:	4299      	cmp	r1, r3
 801911e:	d002      	beq.n	8019126 <_fclose_r+0x8a>
 8019120:	0028      	movs	r0, r5
 8019122:	f7fd fb07 	bl	8016734 <_free_r>
 8019126:	2300      	movs	r3, #0
 8019128:	6323      	str	r3, [r4, #48]	; 0x30
 801912a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801912c:	2900      	cmp	r1, #0
 801912e:	d004      	beq.n	801913a <_fclose_r+0x9e>
 8019130:	0028      	movs	r0, r5
 8019132:	f7fd faff 	bl	8016734 <_free_r>
 8019136:	2300      	movs	r3, #0
 8019138:	6463      	str	r3, [r4, #68]	; 0x44
 801913a:	f7ff fbd5 	bl	80188e8 <__sfp_lock_acquire>
 801913e:	2300      	movs	r3, #0
 8019140:	81a3      	strh	r3, [r4, #12]
 8019142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019144:	07db      	lsls	r3, r3, #31
 8019146:	d402      	bmi.n	801914e <_fclose_r+0xb2>
 8019148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801914a:	f7fd ff28 	bl	8016f9e <__retarget_lock_release_recursive>
 801914e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019150:	f7fd ff23 	bl	8016f9a <__retarget_lock_close_recursive>
 8019154:	f7ff fbd0 	bl	80188f8 <__sfp_lock_release>
 8019158:	e7a5      	b.n	80190a6 <_fclose_r+0xa>
	...

0801915c <_fstat_r>:
 801915c:	2300      	movs	r3, #0
 801915e:	b570      	push	{r4, r5, r6, lr}
 8019160:	4d06      	ldr	r5, [pc, #24]	; (801917c <_fstat_r+0x20>)
 8019162:	0004      	movs	r4, r0
 8019164:	0008      	movs	r0, r1
 8019166:	0011      	movs	r1, r2
 8019168:	602b      	str	r3, [r5, #0]
 801916a:	f000 f84b 	bl	8019204 <_fstat>
 801916e:	1c43      	adds	r3, r0, #1
 8019170:	d103      	bne.n	801917a <_fstat_r+0x1e>
 8019172:	682b      	ldr	r3, [r5, #0]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d000      	beq.n	801917a <_fstat_r+0x1e>
 8019178:	6023      	str	r3, [r4, #0]
 801917a:	bd70      	pop	{r4, r5, r6, pc}
 801917c:	20006dd8 	.word	0x20006dd8

08019180 <_isatty_r>:
 8019180:	2300      	movs	r3, #0
 8019182:	b570      	push	{r4, r5, r6, lr}
 8019184:	4d06      	ldr	r5, [pc, #24]	; (80191a0 <_isatty_r+0x20>)
 8019186:	0004      	movs	r4, r0
 8019188:	0008      	movs	r0, r1
 801918a:	602b      	str	r3, [r5, #0]
 801918c:	f000 f84a 	bl	8019224 <_isatty>
 8019190:	1c43      	adds	r3, r0, #1
 8019192:	d103      	bne.n	801919c <_isatty_r+0x1c>
 8019194:	682b      	ldr	r3, [r5, #0]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d000      	beq.n	801919c <_isatty_r+0x1c>
 801919a:	6023      	str	r3, [r4, #0]
 801919c:	bd70      	pop	{r4, r5, r6, pc}
 801919e:	46c0      	nop			; (mov r8, r8)
 80191a0:	20006dd8 	.word	0x20006dd8

080191a4 <_lseek_r>:
 80191a4:	b570      	push	{r4, r5, r6, lr}
 80191a6:	0004      	movs	r4, r0
 80191a8:	0008      	movs	r0, r1
 80191aa:	0011      	movs	r1, r2
 80191ac:	001a      	movs	r2, r3
 80191ae:	2300      	movs	r3, #0
 80191b0:	4d05      	ldr	r5, [pc, #20]	; (80191c8 <_lseek_r+0x24>)
 80191b2:	602b      	str	r3, [r5, #0]
 80191b4:	f000 f846 	bl	8019244 <_lseek>
 80191b8:	1c43      	adds	r3, r0, #1
 80191ba:	d103      	bne.n	80191c4 <_lseek_r+0x20>
 80191bc:	682b      	ldr	r3, [r5, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d000      	beq.n	80191c4 <_lseek_r+0x20>
 80191c2:	6023      	str	r3, [r4, #0]
 80191c4:	bd70      	pop	{r4, r5, r6, pc}
 80191c6:	46c0      	nop			; (mov r8, r8)
 80191c8:	20006dd8 	.word	0x20006dd8

080191cc <_read_r>:
 80191cc:	b570      	push	{r4, r5, r6, lr}
 80191ce:	0004      	movs	r4, r0
 80191d0:	0008      	movs	r0, r1
 80191d2:	0011      	movs	r1, r2
 80191d4:	001a      	movs	r2, r3
 80191d6:	2300      	movs	r3, #0
 80191d8:	4d05      	ldr	r5, [pc, #20]	; (80191f0 <_read_r+0x24>)
 80191da:	602b      	str	r3, [r5, #0]
 80191dc:	f000 f83a 	bl	8019254 <_read>
 80191e0:	1c43      	adds	r3, r0, #1
 80191e2:	d103      	bne.n	80191ec <_read_r+0x20>
 80191e4:	682b      	ldr	r3, [r5, #0]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d000      	beq.n	80191ec <_read_r+0x20>
 80191ea:	6023      	str	r3, [r4, #0]
 80191ec:	bd70      	pop	{r4, r5, r6, pc}
 80191ee:	46c0      	nop			; (mov r8, r8)
 80191f0:	20006dd8 	.word	0x20006dd8

080191f4 <_close>:
 80191f4:	2258      	movs	r2, #88	; 0x58
 80191f6:	2001      	movs	r0, #1
 80191f8:	4b01      	ldr	r3, [pc, #4]	; (8019200 <_close+0xc>)
 80191fa:	4240      	negs	r0, r0
 80191fc:	601a      	str	r2, [r3, #0]
 80191fe:	4770      	bx	lr
 8019200:	20006dd8 	.word	0x20006dd8

08019204 <_fstat>:
 8019204:	2258      	movs	r2, #88	; 0x58
 8019206:	2001      	movs	r0, #1
 8019208:	4b01      	ldr	r3, [pc, #4]	; (8019210 <_fstat+0xc>)
 801920a:	4240      	negs	r0, r0
 801920c:	601a      	str	r2, [r3, #0]
 801920e:	4770      	bx	lr
 8019210:	20006dd8 	.word	0x20006dd8

08019214 <_getpid>:
 8019214:	2258      	movs	r2, #88	; 0x58
 8019216:	2001      	movs	r0, #1
 8019218:	4b01      	ldr	r3, [pc, #4]	; (8019220 <_getpid+0xc>)
 801921a:	4240      	negs	r0, r0
 801921c:	601a      	str	r2, [r3, #0]
 801921e:	4770      	bx	lr
 8019220:	20006dd8 	.word	0x20006dd8

08019224 <_isatty>:
 8019224:	2258      	movs	r2, #88	; 0x58
 8019226:	4b02      	ldr	r3, [pc, #8]	; (8019230 <_isatty+0xc>)
 8019228:	2000      	movs	r0, #0
 801922a:	601a      	str	r2, [r3, #0]
 801922c:	4770      	bx	lr
 801922e:	46c0      	nop			; (mov r8, r8)
 8019230:	20006dd8 	.word	0x20006dd8

08019234 <_kill>:
 8019234:	2258      	movs	r2, #88	; 0x58
 8019236:	2001      	movs	r0, #1
 8019238:	4b01      	ldr	r3, [pc, #4]	; (8019240 <_kill+0xc>)
 801923a:	4240      	negs	r0, r0
 801923c:	601a      	str	r2, [r3, #0]
 801923e:	4770      	bx	lr
 8019240:	20006dd8 	.word	0x20006dd8

08019244 <_lseek>:
 8019244:	2258      	movs	r2, #88	; 0x58
 8019246:	2001      	movs	r0, #1
 8019248:	4b01      	ldr	r3, [pc, #4]	; (8019250 <_lseek+0xc>)
 801924a:	4240      	negs	r0, r0
 801924c:	601a      	str	r2, [r3, #0]
 801924e:	4770      	bx	lr
 8019250:	20006dd8 	.word	0x20006dd8

08019254 <_read>:
 8019254:	2258      	movs	r2, #88	; 0x58
 8019256:	2001      	movs	r0, #1
 8019258:	4b01      	ldr	r3, [pc, #4]	; (8019260 <_read+0xc>)
 801925a:	4240      	negs	r0, r0
 801925c:	601a      	str	r2, [r3, #0]
 801925e:	4770      	bx	lr
 8019260:	20006dd8 	.word	0x20006dd8

08019264 <_sbrk>:
 8019264:	4a05      	ldr	r2, [pc, #20]	; (801927c <_sbrk+0x18>)
 8019266:	0003      	movs	r3, r0
 8019268:	6811      	ldr	r1, [r2, #0]
 801926a:	2900      	cmp	r1, #0
 801926c:	d101      	bne.n	8019272 <_sbrk+0xe>
 801926e:	4904      	ldr	r1, [pc, #16]	; (8019280 <_sbrk+0x1c>)
 8019270:	6011      	str	r1, [r2, #0]
 8019272:	6810      	ldr	r0, [r2, #0]
 8019274:	18c3      	adds	r3, r0, r3
 8019276:	6013      	str	r3, [r2, #0]
 8019278:	4770      	bx	lr
 801927a:	46c0      	nop			; (mov r8, r8)
 801927c:	20006ddc 	.word	0x20006ddc
 8019280:	20006de0 	.word	0x20006de0

08019284 <_write>:
 8019284:	2258      	movs	r2, #88	; 0x58
 8019286:	2001      	movs	r0, #1
 8019288:	4b01      	ldr	r3, [pc, #4]	; (8019290 <_write+0xc>)
 801928a:	4240      	negs	r0, r0
 801928c:	601a      	str	r2, [r3, #0]
 801928e:	4770      	bx	lr
 8019290:	20006dd8 	.word	0x20006dd8

08019294 <_exit>:
 8019294:	e7fe      	b.n	8019294 <_exit>
	...

08019298 <_init>:
 8019298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801929a:	46c0      	nop			; (mov r8, r8)
 801929c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801929e:	bc08      	pop	{r3}
 80192a0:	469e      	mov	lr, r3
 80192a2:	4770      	bx	lr

080192a4 <_fini>:
 80192a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192a6:	46c0      	nop			; (mov r8, r8)
 80192a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192aa:	bc08      	pop	{r3}
 80192ac:	469e      	mov	lr, r3
 80192ae:	4770      	bx	lr
